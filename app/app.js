Ext.define('Ext.ux.SlidingPager', {
    requires: [
        'Ext.slider.Single',
        'Ext.slider.Tip'
    ],

    /**
     * Creates new SlidingPager.
     * @param {Object} config Configuration options
     */
    constructor : function(config) {
        if (config) {
            Ext.apply(this, config);
        }
    },

    init : function(pbar){
        var idx = pbar.items.indexOf(pbar.child("#inputItem")),
            slider;

        Ext.each(pbar.items.getRange(idx - 2, idx + 2), function(c){
            c.hide();
        });

        slider = Ext.create('Ext.slider.Single', {
            width: 114,
            minValue: 1,
            maxValue: 1,
            hideLabel: true,
            tipText: function(thumb) {
                return Ext.String.format('Page <b>{0}</b> of <b>{1}</b>', thumb.value, thumb.slider.maxValue);
            },
            listeners: {
                changecomplete: function(s, v){
                    pbar.store.loadPage(v);
                }
            }
        });

        pbar.insert(idx + 1, slider);

        pbar.on({
            change: function(pb, data){
                slider.setMaxValue(data ? data.pageCount : 1);
                slider.setValue(data ? data.currentPage : 1);
            }
        });
    }
});

Ext.define('Ext.ux.PreviewPlugin', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.preview',
    requires: ['Ext.grid.feature.RowBody', 'Ext.grid.feature.RowWrap'],

    // private, css class to use to hide the body
    hideBodyCls: 'x-grid-row-body-hidden',

    /**
     * @cfg {String} bodyField
     * Field to display in the preview. Must be a field within the Model definition
     * that the store is using.
     */
    bodyField: '',

    /**
     * @cfg {Boolean} previewExpanded
     */
    previewExpanded: true,

    setCmp: function(grid) {
        this.callParent(arguments);

        var bodyField   = this.bodyField,
            hideBodyCls = this.hideBodyCls,
            features    = [{
                ftype: 'rowbody',
                getAdditionalData: function(data, idx, record, orig, view) {
                    var getAdditionalData = Ext.grid.feature.RowBody.prototype.getAdditionalData,
                        additionalData = {
                            rowBody: data[bodyField],
                            rowBodyCls: grid.previewExpanded ? '' : hideBodyCls
                        };

                    if (getAdditionalData) {
                        Ext.apply(additionalData, getAdditionalData.apply(this, arguments));
                    }
                    return additionalData;
                }
            }, {
                ftype: 'rowwrap'
            }];

        grid.previewExpanded = this.previewExpanded;
        if (!grid.features) {
            grid.features = [];
        }
        grid.features = features.concat(grid.features);
    },

    /**
     * Toggle between the preview being expanded/hidden
     * @param {Boolean} expanded Pass true to expand the record and false to not show the preview.
     */
    toggleExpanded: function(expanded) {
        var view = this.getCmp();
        this.previewExpanded = view.previewExpanded = expanded;
        view.refresh();
    }
});
Ext.define('Ext.ux.form.SearchField', {
    extend: 'Ext.form.field.Trigger',

    alias: 'widget.searchfield',

    trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',

    trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',

    hasSearch : false,
    paramName : 'query',

    initComponent: function() {
        var me = this;

        me.callParent(arguments);
        me.on('specialkey', function(f, e){
            if (e.getKey() == e.ENTER) {
                me.onTrigger2Click();
            }
        });

        // We're going to use filtering
        me.store.remoteFilter = true;

        // Set up the proxy to encode the filter in the simplest way as a name/value pair

        // If the Store has not been *configured* with a filterParam property, then use our filter parameter name
        if (!me.store.proxy.hasOwnProperty('filterParam')) {
            me.store.proxy.filterParam = me.paramName;
        }
        me.store.proxy.encodeFilters = function(filters) {
            return filters[0].value;
        }
    },

    afterRender: function(){
        this.callParent();
        this.triggerCell.item(0).setDisplayed(false);
    },

    onTrigger1Click : function(){
        var me = this;

        if (me.hasSearch) {
            me.setValue('');
            me.store.clearFilter();
            me.hasSearch = false;
            me.triggerCell.item(0).setDisplayed(false);
            me.updateLayout();
        }
    },

    onTrigger2Click : function(){
        var me = this,
            value = me.getValue();

        if (value.length > 0) {
            // Param name is ignored here since we use custom encoding in the proxy.
            // id is used by the Store to replace any previous filter
            me.store.filter({
                id: me.paramName,
                property: me.paramName,
                value: value
            });
            me.hasSearch = true;
            me.triggerCell.item(0).setDisplayed(true);
            me.updateLayout();
        }
    }
});
Ext.define('Ext.ux.statusbar.StatusBar', {
    extend: 'Ext.toolbar.Toolbar',
    alternateClassName: 'Ext.ux.StatusBar',
    alias: 'widget.statusbar',
    requires: ['Ext.toolbar.TextItem'],
    /**
     * @cfg {String} statusAlign
     * The alignment of the status element within the overall StatusBar layout.  When the StatusBar is rendered,
     * it creates an internal div containing the status text and icon.  Any additional Toolbar items added in the
     * StatusBar's {@link #cfg-items} config, or added via {@link #method-add} or any of the supported add* methods, will be
     * rendered, in added order, to the opposite side.  The status element is greedy, so it will automatically
     * expand to take up all sapce left over by any other items.  Example usage:
     *
     *     // Create a left-aligned status bar containing a button,
     *     // separator and text item that will be right-aligned (default):
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     *
     *     // By adding the statusAlign config, this will create the
     *     // exact same toolbar, except the status and toolbar item
     *     // layout will be reversed from the previous example:
     *     Ext.create('Ext.Panel', {
     *         title: 'StatusBar',
     *         // etc.
     *         bbar: Ext.create('Ext.ux.statusbar.StatusBar', {
     *             defaultText: 'Default status text',
     *             id: 'status-id',
     *             statusAlign: 'right',
     *             items: [{
     *                 text: 'A Button'
     *             }, '-', 'Plain Text']
     *         })
     *     });
     */
    /**
     * @cfg {String} [defaultText='']
     * The default {@link #text} value.  This will be used anytime the status bar is cleared with the
     * `useDefaults:true` option.
     */
    /**
     * @cfg {String} [defaultIconCls='']
     * The default {@link #iconCls} value (see the iconCls docs for additional details about customizing the icon).
     * This will be used anytime the status bar is cleared with the `useDefaults:true` option.
     */
    /**
     * @cfg {String} text
     * A string that will be <b>initially</b> set as the status message.  This string
     * will be set as innerHTML (html tags are accepted) for the toolbar item.
     * If not specified, the value set for {@link #defaultText} will be used.
     */
    /**
     * @cfg {String} [iconCls='']
     * A CSS class that will be **initially** set as the status bar icon and is
     * expected to provide a background image.
     *
     * Example usage:
     *
     *     // Example CSS rule:
     *     .x-statusbar .x-status-custom {
     *         padding-left: 25px;
     *         background: transparent url(images/custom-icon.gif) no-repeat 3px 2px;
     *     }
     *
     *     // Setting a default icon:
     *     var sb = Ext.create('Ext.ux.statusbar.StatusBar', {
     *         defaultIconCls: 'x-status-custom'
     *     });
     *
     *     // Changing the icon:
     *     sb.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom'
     *     });
     */

    /**
     * @cfg {String} cls
     * The base class applied to the containing element for this component on render.
     */
    cls : 'x-statusbar',
    /**
     * @cfg {String} busyIconCls
     * The default {@link #iconCls} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `iconCls` argument into {@link #showBusy}.
     */
    busyIconCls : 'x-status-busy',
    /**
     * @cfg {String} busyText
     * The default {@link #text} applied when calling {@link #showBusy}.
     * It can be overridden at any time by passing the `text` argument into {@link #showBusy}.
     */
    busyText : 'Loading...',
    /**
     * @cfg {Number} autoClear
     * The number of milliseconds to wait after setting the status via
     * {@link #setStatus} before automatically clearing the status text and icon.
     * Note that this only applies when passing the `clear` argument to {@link #setStatus}
     * since that is the only way to defer clearing the status.  This can
     * be overridden by specifying a different `wait` value in {@link #setStatus}.
     * Calls to {@link #clearStatus} always clear the status bar immediately and ignore this value.
     */
    autoClear : 5000,

    /**
     * @cfg {String} emptyText
     * The text string to use if no text has been set. If there are no other items in
     * the toolbar using an empty string (`''`) for this value would end up in the toolbar
     * height collapsing since the empty string will not maintain the toolbar height.
     * Use `''` if the toolbar should collapse in height vertically when no text is
     * specified and there are no other items in the toolbar.
     */
    emptyText : '&#160;',

    // private
    activeThreadId : 0,

    // private
    initComponent : function(){
        var right = this.statusAlign === 'right';

        this.callParent(arguments);
        this.currIconCls = this.iconCls || this.defaultIconCls;
        this.statusEl = Ext.create('Ext.toolbar.TextItem', {
            cls: 'x-status-text ' + (this.currIconCls || ''),
            text: this.text || this.defaultText || ''
        });

        if (right) {
            this.cls += ' x-status-right';
            this.add('->');
            this.add(this.statusEl);
        } else {
            this.insert(0, this.statusEl);
            this.insert(1, '->');
        }
    },

    /**
     * Sets the status {@link #text} and/or {@link #iconCls}. Also supports automatically clearing the
     * status that was set after a specified interval.
     *
     * Example usage:
     *
     *     // Simple call to update the text
     *     statusBar.setStatus('New status');
     *
     *     // Set the status and icon, auto-clearing with default options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: true
     *     });
     *
     *     // Auto-clear with custom options:
     *     statusBar.setStatus({
     *         text: 'New status',
     *         iconCls: 'x-status-custom',
     *         clear: {
     *             wait: 8000,
     *             anim: false,
     *             useDefaults: false
     *         }
     *     });
     *
     * @param {Object/String} config A config object specifying what status to set, or a string assumed
     * to be the status text (and all other options are defaulted as explained below). A config
     * object containing any or all of the following properties can be passed:
     *
     * @param {String} config.text The status text to display.  If not specified, any current
     * status text will remain unchanged.
     *
     * @param {String} config.iconCls The CSS class used to customize the status icon (see
     * {@link #iconCls} for details). If not specified, any current iconCls will remain unchanged.
     *
     * @param {Boolean/Number/Object} config.clear Allows you to set an internal callback that will
     * automatically clear the status text and iconCls after a specified amount of time has passed. If clear is not
     * specified, the new status will not be auto-cleared and will stay until updated again or cleared using
     * {@link #clearStatus}. If `true` is passed, the status will be cleared using {@link #autoClear},
     * {@link #defaultText} and {@link #defaultIconCls} via a fade out animation. If a numeric value is passed,
     * it will be used as the callback interval (in milliseconds), overriding the {@link #autoClear} value.
     * All other options will be defaulted as with the boolean option.  To customize any other options,
     * you can pass an object in the format:
     *
     * @param {Number} config.clear.wait The number of milliseconds to wait before clearing
     * (defaults to {@link #autoClear}).
     * @param {Boolean} config.clear.anim False to clear the status immediately once the callback
     * executes (defaults to true which fades the status out).
     * @param {Boolean} config.clear.useDefaults False to completely clear the status text and iconCls
     * (defaults to true which uses {@link #defaultText} and {@link #defaultIconCls}).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setStatus : function(o) {
        var me = this;

        o = o || {};
        Ext.suspendLayouts();
        if (Ext.isString(o)) {
            o = {text:o};
        }
        if (o.text !== undefined) {
            me.setText(o.text);
        }
        if (o.iconCls !== undefined) {
            me.setIcon(o.iconCls);
        }

        if (o.clear) {
            var c = o.clear,
                wait = me.autoClear,
                defaults = {useDefaults: true, anim: true};

            if (Ext.isObject(c)) {
                c = Ext.applyIf(c, defaults);
                if (c.wait) {
                    wait = c.wait;
                }
            } else if (Ext.isNumber(c)) {
                wait = c;
                c = defaults;
            } else if (Ext.isBoolean(c)) {
                c = defaults;
            }

            c.threadId = this.activeThreadId;
            Ext.defer(me.clearStatus, wait, me, [c]);
        }
        Ext.resumeLayouts(true);
        return me;
    },

    /**
     * Clears the status {@link #text} and {@link #iconCls}. Also supports clearing via an optional fade out animation.
     *
     * @param {Object} [config] A config object containing any or all of the following properties.  If this
     * object is not specified the status will be cleared using the defaults below:
     * @param {Boolean} config.anim True to clear the status by fading out the status element (defaults
     * to false which clears immediately).
     * @param {Boolean} config.useDefaults True to reset the text and icon using {@link #defaultText} and
     * {@link #defaultIconCls} (defaults to false which sets the text to '' and removes any existing icon class).
     *
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    clearStatus : function(o) {
        o = o || {};

        var me = this,
            statusEl = me.statusEl;

        if (o.threadId && o.threadId !== me.activeThreadId) {
            // this means the current call was made internally, but a newer
            // thread has set a message since this call was deferred.  Since
            // we don't want to overwrite a newer message just ignore.
            return me;
        }

        var text = o.useDefaults ? me.defaultText : me.emptyText,
            iconCls = o.useDefaults ? (me.defaultIconCls ? me.defaultIconCls : '') : '';

        if (o.anim) {
            // animate the statusEl Ext.Element
            statusEl.el.puff({
                remove: false,
                useDisplay: true,
                callback: function() {
                    statusEl.el.show();
                    me.setStatus({
                        text: text,
                        iconCls: iconCls
                    });
                }
            });
        } else {
             me.setStatus({
                 text: text,
                 iconCls: iconCls
             });
        }
        return me;
    },

    /**
     * Convenience method for setting the status text directly.  For more flexible options see {@link #setStatus}.
     * @param {String} text (optional) The text to set (defaults to '')
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setText : function(text) {
        var me = this;
        me.activeThreadId++;
        me.text = text || '';
        if (me.rendered) {
            me.statusEl.setText(me.text);
        }
        return me;
    },

    /**
     * Returns the current status text.
     * @return {String} The status text
     */
    getText : function(){
        return this.text;
    },

    /**
     * Convenience method for setting the status icon directly.  For more flexible options see {@link #setStatus}.
     * See {@link #iconCls} for complete details about customizing the icon.
     * @param {String} iconCls (optional) The icon class to set (defaults to '', and any current icon class is removed)
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    setIcon : function(cls) {
        var me = this;

        me.activeThreadId++;
        cls = cls || '';

        if (me.rendered) {
            if (me.currIconCls) {
                me.statusEl.removeCls(me.currIconCls);
                me.currIconCls = null;
            }
            if (cls.length > 0) {
                me.statusEl.addCls(cls);
                me.currIconCls = cls;
            }
        } else {
            me.currIconCls = cls;
        }
        return me;
    },

    /**
     * Convenience method for setting the status text and icon to special values that are pre-configured to indicate
     * a "busy" state, usually for loading or processing activities.
     *
     * @param {Object/String} config (optional) A config object in the same format supported by {@link #setStatus}, or a
     * string to use as the status text (in which case all other options for setStatus will be defaulted).  Use the
     * `text` and/or `iconCls` properties on the config to override the default {@link #busyText}
     * and {@link #busyIconCls} settings. If the config argument is not specified, {@link #busyText} and
     * {@link #busyIconCls} will be used in conjunction with all of the default options for {@link #setStatus}.
     * @return {Ext.ux.statusbar.StatusBar} this
     */
    showBusy : function(o){
        if (Ext.isString(o)) {
            o = { text: o };
        }
        o = Ext.applyIf(o || {}, {
            text: this.busyText,
            iconCls: this.busyIconCls
        });
        return this.setStatus(o);
    }
});

Ext.define('Ext.ux.LiveSearchGridPanel', {
    extend: 'Ext.grid.Panel',
    requires: [
        'Ext.toolbar.TextItem',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Text',
        'Ext.ux.statusbar.StatusBar'
    ],

    /**
     * @private
     * search value initialization
     */
    searchValue: null,

    /**
     * @private
     * The row indexes where matching strings are found. (used by previous and next buttons)
     */
    indexes: [],

    /**
     * @private
     * The row index of the first search, it could change if next or previous buttons are used.
     */
    currentIndex: null,

    /**
     * @private
     * The generated regular expression used for searching.
     */
    searchRegExp: null,

    /**
     * @private
     * Case sensitive mode.
     */
    caseSensitive: false,

    /**
     * @private
     * Regular expression mode.
     */
    regExpMode: false,

    /**
     * @cfg {String} matchCls
     * The matched string css classe.
     */
    matchCls: 'x-livesearch-match',

    defaultStatusText: 'Nothing Found',

    // Component initialization override: adds the top and bottom toolbars and setup headers renderer.
    initComponent: function() {
        var me = this;
        me.tbar = ['Search',{
                 xtype: 'textfield',
                 name: 'searchField',
                 hideLabel: true,
                 width: 200,
                 listeners: {
                     change: {
                         fn: me.onTextFieldChange,
                         scope: this,
                         buffer: 100
                     }
                 }
            }, {
                xtype: 'button',
                text: '&lt;',
                tooltip: 'Find Previous Row',
                handler: me.onPreviousClick,
                scope: me
            },{
                xtype: 'button',
                text: '&gt;',
                tooltip: 'Find Next Row',
                handler: me.onNextClick,
                scope: me
            }, '-', {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.regExpToggle,
                scope: me
            }, 'Regular expression', {
                xtype: 'checkbox',
                hideLabel: true,
                margin: '0 0 0 4px',
                handler: me.caseSensitiveToggle,
                scope: me
            }, 'Case sensitive'];

        me.bbar = Ext.create('Ext.ux.StatusBar', {
            defaultText: me.defaultStatusText,
            name: 'searchStatusBar'
        });

        me.callParent(arguments);
    },

    // afterRender override: it adds textfield and statusbar reference and start monitoring keydown events in textfield input
    afterRender: function() {
        var me = this;
        me.callParent(arguments);
        me.textField = me.down('textfield[name=searchField]');
        me.statusBar = me.down('statusbar[name=searchStatusBar]');
    },
    // detects html tag
    tagsRe: /<[^>]*>/gm,

    // DEL ASCII code
    tagsProtect: '\x0f',

    // detects regexp reserved word
    regExpProtect: /\\|\/|\+|\\|\.|\[|\]|\{|\}|\?|\$|\*|\^|\|/gm,

    /**
     * In normal mode it returns the value with protected regexp characters.
     * In regular expression mode it returns the raw value except if the regexp is invalid.
     * @return {String} The value to process or null if the textfield value is blank or invalid.
     * @private
     */
    getSearchValue: function() {
        var me = this,
            value = me.textField.getValue();

        if (value === '') {
            return null;
        }
        if (!me.regExpMode) {
            value = value.replace(me.regExpProtect, function(m) {
                return '\\' + m;
            });
        } else {
            try {
                new RegExp(value);
            } catch (error) {
                me.statusBar.setStatus({
                    text: error.message,
                    iconCls: 'x-status-error'
                });
                return null;
            }
            // this is stupid
            if (value === '^' || value === '$') {
                return null;
            }
        }

        return value;
    },

    /**
     * Finds all strings that matches the searched value in each grid cells.
     * @private
     */
     onTextFieldChange: function() {
         var me = this,
             count = 0;

         me.view.refresh();
         // reset the statusbar
         me.statusBar.setStatus({
             text: me.defaultStatusText,
             iconCls: ''
         });

         me.searchValue = me.getSearchValue();
         me.indexes = [];
         me.currentIndex = null;

         if (me.searchValue !== null) {
             me.searchRegExp = new RegExp(me.searchValue, 'g' + (me.caseSensitive ? '' : 'i'));


             me.store.each(function(record, idx) {
                 var td = Ext.fly(me.view.getNode(idx)).down('td'),
                     cell, matches, cellHTML;
                 while(td) {
                     cell = td.down('.x-grid-cell-inner');
                     matches = cell.dom.innerHTML.match(me.tagsRe);
                     cellHTML = cell.dom.innerHTML.replace(me.tagsRe, me.tagsProtect);

                     // populate indexes array, set currentIndex, and replace wrap matched string in a span
                     cellHTML = cellHTML.replace(me.searchRegExp, function(m) {
                        count += 1;
                        if (Ext.Array.indexOf(me.indexes, idx) === -1) {
                            me.indexes.push(idx);
                        }
                        if (me.currentIndex === null) {
                            me.currentIndex = idx;
                        }
                        return '<span class="' + me.matchCls + '">' + m + '</span>';
                     });
                     // restore protected tags
                     Ext.each(matches, function(match) {
                        cellHTML = cellHTML.replace(me.tagsProtect, match);
                     });
                     // update cell html
                     cell.dom.innerHTML = cellHTML;
                     td = td.next();
                 }
             }, me);

             // results found
             if (me.currentIndex !== null) {
                 me.getSelectionModel().select(me.currentIndex);
                 me.statusBar.setStatus({
                     text: count + ' matche(s) found.',
                     iconCls: 'x-status-valid'
                 });
             }
         }

         // no results found
         if (me.currentIndex === null) {
             me.getSelectionModel().deselectAll();
         }

         // force textfield focus
         me.textField.focus();
     },

    /**
     * Selects the previous row containing a match.
     * @private
     */
    onPreviousClick: function() {
        var me = this,
            idx;

        if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx - 1] || me.indexes[me.indexes.length - 1];
            me.getSelectionModel().select(me.currentIndex);
         }
    },

    /**
     * Selects the next row containing a match.
     * @private
     */
    onNextClick: function() {
         var me = this,
             idx;

         if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {
            me.currentIndex = me.indexes[idx + 1] || me.indexes[0];
            me.getSelectionModel().select(me.currentIndex);
         }
    },

    /**
     * Switch to case sensitive mode.
     * @private
     */
    caseSensitiveToggle: function(checkbox, checked) {
        this.caseSensitive = checked;
        this.onTextFieldChange();
    },

    /**
     * Switch to regular expression mode
     * @private
     */
    regExpToggle: function(checkbox, checked) {
        this.regExpMode = checked;
        this.onTextFieldChange();
    }
});
/*!
 * Ext JS Library 4.0
 * Copyright(c) 2006-2011 Sencha Inc.
 * licensing@sencha.com
 * http://www.sencha.com/license
 */

/**
 * Barebones iframe implementation. For serious iframe work, see the
 * ManagedIFrame extension
 * (http://www.sencha.com/forum/showthread.php?71961).
 */
Ext.define('Ext.ux.IFrame', {
    extend: 'Ext.Component',

    alias: 'widget.uxiframe',

    loadMask: 'Loading...',

    src: 'about:blank',

    renderTpl: [
        '<iframe src="{src}" name="{frameName}" width="100%" height="100%" frameborder="0"></iframe>'
    ],

    initComponent: function () {
        this.callParent();

        this.frameName = this.frameName || this.id + '-frame';

        this.addEvents(
            'beforeload',
            'load'
        );

        Ext.apply(this.renderSelectors, {
            iframeEl: 'iframe'
        });
    },

    initEvents : function() {
        var me = this;
        me.callParent();
        me.iframeEl.on('load', me.onLoad, me);
    },

    initRenderData: function() {
        return Ext.apply(this.callParent(), {
            src: this.src,
            frameName: this.frameName
        });
    },

    getBody: function() {
        var doc = this.getDoc();
        return doc.body || doc.documentElement;
    },

    getDoc: function() {
        try {
            return this.getWin().document;
        } catch (ex) {
            return null;
        }
    },

    getWin: function() {
        var me = this,
            name = me.frameName,
            win = Ext.isIE
                ? me.iframeEl.dom.contentWindow
                : window.frames[name];
        return win;
    },

    getFrame: function() {
        var me = this;
        return me.iframeEl.dom;
    },

    beforeDestroy: function () {
        this.cleanupListeners(true);
        this.callParent();
    },

    cleanupListeners: function(destroying){
        var doc, prop;

        if (this.rendered) {
            try {
                doc = this.getDoc();
                if (doc) {
                    Ext.EventManager.removeAll(doc);
                    if (destroying) {
                        for (prop in doc) {
                            if (doc.hasOwnProperty && doc.hasOwnProperty(prop)) {
                                delete doc[prop];
                            }
                        }
                    }
                }
            } catch(e) { }
        }
    },

    onLoad: function() {
        var me = this,
            doc = me.getDoc(),
            fn = me.onRelayedEvent;

        if (doc) {
            try {
                Ext.EventManager.removeAll(doc);

                // These events need to be relayed from the inner document (where they stop
                // bubbling) up to the outer document. This has to be done at the DOM level so
                // the event reaches listeners on elements like the document body. The effected
                // mechanisms that depend on this bubbling behavior are listed to the right
                // of the event.
                Ext.EventManager.on(doc, {
                    mousedown: fn, // menu dismisal (MenuManager) and Window onMouseDown (toFront)
                    mousemove: fn, // window resize drag detection
                    mouseup: fn,   // window resize termination
                    click: fn,     // not sure, but just to be safe
                    dblclick: fn,  // not sure again
                    scope: me
                });
            } catch(e) {
                // cannot do this xss
            }

            // We need to be sure we remove all our events from the iframe on unload or we're going to LEAK!
            Ext.EventManager.on(this.getWin(), 'beforeunload', me.cleanupListeners, me);

            this.el.unmask();
            this.fireEvent('load', this);

        } else if(me.src && me.src != '') {

            this.el.unmask();
            this.fireEvent('error', this);
        }


    },

    onRelayedEvent: function (event) {
        // relay event from the iframe's document to the document that owns the iframe...

        var iframeEl = this.iframeEl,

            // Get the left-based iframe position
            iframeXY = Ext.Element.getTrueXY(iframeEl),
            originalEventXY = event.getXY(),

            // Get the left-based XY position.
            // This is because the consumer of the injected event (Ext.EventManager) will
            // perform its own RTL normalization.
            eventXY = Ext.EventManager.getPageXY(event.browserEvent);

        // the event from the inner document has XY relative to that document's origin,
        // so adjust it to use the origin of the iframe in the outer document:
        event.xy = [iframeXY[0] + eventXY[0], iframeXY[1] + eventXY[1]];

        event.injectEvent(iframeEl); // blame the iframe for the event...

        event.xy = originalEventXY; // restore the original XY (just for safety)
    },

    load: function (src) {
        var me = this,
            text = me.loadMask,
            frame = me.getFrame();

        if (me.fireEvent('beforeload', me, src) !== false) {
            if (text && me.el) {
                me.el.mask(text);
            }

            frame.src = me.src = (src || me.src);
        }
    }
});

Ext.define('Ext.ux.DataTip', function(DataTip) {

//  Target the body (if the host is a Panel), or, if there is no body, the main Element.
    function onHostRender() {
        var e = this.isXType('panel') ? this.body : this.el;
        if (this.dataTip.renderToTarget) {
            this.dataTip.render(e);
        }
        this.dataTip.setTarget(e);
    }

    function updateTip(tip, data) {
        if (tip.rendered) {
            if (tip.host.fireEvent('beforeshowtip', tip.eventHost, tip, data) === false) {
                return false;
            }
            tip.update(data);
        } else {
            if (Ext.isString(data)) {
                tip.html = data;
            } else {
                tip.data = data;
            }
        }
    }

    function beforeViewTipShow(tip) {
        var rec = this.view.getRecord(tip.triggerElement),
            data;

        if (rec) {
            data = tip.initialConfig.data ? Ext.apply(tip.initialConfig.data, rec.data) : rec.data;
            return updateTip(tip, data);
        } else {
            return false;
        }
    }

    function beforeFormTipShow(tip) {
        var field = Ext.getCmp(tip.triggerElement.id);
        if (field && (field.tooltip || tip.tpl)) {
            return updateTip(tip, field.tooltip || field);
        } else {
            return false;
        }
    }

    return {
        extend: 'Ext.tip.ToolTip',

        mixins: {
            plugin: 'Ext.AbstractPlugin'
        },

        alias: 'plugin.datatip',

        lockableScope: 'both',

        constructor: function(config) {
            var me = this;
            me.callParent([config]);
            me.mixins.plugin.constructor.call(me, config);
        },

        init: function(host) {
            var me = this;

            me.mixins.plugin.init.call(me, host);
            host.dataTip = me;
            me.host = host;

            if (host.isXType('tablepanel')) {
                me.view = host.getView();
                if (host.ownerLockable) {
                    me.host = host.ownerLockable;
                }
                me.delegate = me.delegate || me.view.getDataRowSelector();
                me.on('beforeshow', beforeViewTipShow);
            } else if (host.isXType('dataview')) {
                me.view = me.host;
                me.delegate = me.delegate || host.itemSelector;
                me.on('beforeshow', beforeViewTipShow);
            } else if (host.isXType('form')) {
                me.delegate = '.' + Ext.form.Labelable.prototype.formItemCls;
                me.on('beforeshow', beforeFormTipShow);
            } else if (host.isXType('combobox')) {
                me.view = host.getPicker();
                me.delegate = me.delegate || me.view.getItemSelector();
                me.on('beforeshow', beforeViewTipShow);
            }
            if (host.rendered) {
                onHostRender.call(host);
            } else {
                host.onRender = Ext.Function.createSequence(host.onRender, onHostRender);
            }
        }
    };
});
/*!
 * Ext.ux.RatingField
 *
 * Copyright 2011, Dan Harabagiu
 * Licenced under the Apache License Version 2.0
 * See LICENSE
 *
 *
 * Version : 0.1 - Initial coding
 * Version : 0.2
 *  - Added Field reset button
 *  - Added CSS class for reset button
 *  - Added reset function for the field
 *  - Minimum number of stars is 2
 *  - On creation default value is now 0, was null
 *  - Option to choose left / right for the reset button position
 */
/*global Ext : false, */
Ext.define('App.ux.RatingField', {
	extend: 'Ext.form.field.Number',
	alias: 'widget.ratingField',
	componentCls: 'x-form-rating',
	ratingClassReset: "ux-rating-reset",
	starCls: 'ux-rating-star',
	margin: '4 10',
	/**
	 * @cfg {Number} numberOfStars
	 *
	 */
	numberOfStars: 5,

	/**
	 * @cfg {Number} minValue
	 * css Number of stars to display
	 */
	minValue: 0,

	/**
	 * @cfg {Number} maxValue
	 *
	 */
	maxValue: 5,

	/**
	 * @cfg {Number} split
	 * number of split per star (to show a gradual selection)
	 */
	split: 1,

	/**
	 * @cfg {Number} canReset
	 * true to show a reset button
	 */
	canReset: true,

	/**
	 * @cfg {Number} resetPosition
	 * position of reset button when canReset is true. Whatever is not equal to 'right' is considered as 'left'
	 */
	resetPosition: "right",

	/**
	 * @cfg {Number} emptyText
	 *
	 */
	emptyText: '',

	/**
	 * @cfg {Number} keyNavEnabled
	 * when set to true, special keys (arrows, space and del) are  enabled to set value on focus.
	 */
	keyNavEnabled: true,

	/**
	 * @cfg {Object} titles
	 * Object used when setting titles to stars. In example below, star values from 0 to 1.4 would carry 'poor' as a title, from 1.4 to 3, 'medium', etc
	 */
	/*titles: {
	 '0': 'poor',
	 '1.4': 'medium',
	 '3': 'excellent',
	 '5': 'perfect'
	 },*/
	initComponent: function () {
		var me = this;
		Ext.applyIf(me, {
			maxValue: 5,
			minValue: 0,
			split: 1,
			numberOfStars: 5,
			titles: {}
		});
		var tempVal = [],
			hasTitle,
			name,
			split = me.split,
			width = 16 / split,
			nb = me.numberOfStars,
			len = nb * split - 1,
			minValue = me.minValue,
			maxValue = me.maxValue,
			val, title, i;

		for (name in me.titles) {
			tempVal.push({
				val: name * 1,
				title: me.titles[name]
			});
		}
		hasTitle = !!tempVal.length;
		Ext.Array.sort(tempVal, function (a, b) {
			return a.val > b.val;
		});

		//me.step = (maxValue - minValue) / len;
		me.stars = [];
		me.values = [];
		me.titles = [];
		me.starWidth = width;
		if (!me.value) {
			me.value = minValue;
		}
		for (i = 0; i <= len; i++) {
			val = i + 1;
			if (hasTitle) {
				if (tempVal.length && (tempVal[1].val <= val)) {
					tempVal = tempVal.slice(1);
				}
				title = tempVal[0].title;
			} else {
				title = val;
			}
			me.stars.push({
				key: val,
				title: title,
				margin: (i % split) * width
			});
			me.values.push(val);
			me.titles.push(title);
		}
		me.msgTarget = 'side';
		me.starClsOn = me.starCls + '-on';
		me.starClsHover = me.starCls + '-hover';
		me.starClsFocus = me.starCls + '-focus';
		me.callParent();

	},
	setValue: function (val) {
		var me = this;
		me.callParent(arguments);
		me.afterSetValue(eval(val));
	},
	afterSetValue: function (val) {
		var me = this;
		if (me.rendered) {
			var index = me.getValueIndex(val);
			if (index === -1) {
				if (me.canReset) {
					me.resetEl.setOpacity(0.5);
				}
				me.fillNone();
				me.selected = -1;
			} else if (index !== me.selected) {
				if (me.canReset) {
					me.resetEl.setOpacity(0.99);
				}
				me.selected = index;
				me.fillTo(index, false);

			}
		}
	},
	getValueIndex: function (val) {
		var me = this;
		if (val == me.emptyText || !Ext.isDefined(val) || (val > me.maxValue) || (val < me.minValue)) {
			return -1
		}
		var ret = me.values.indexOf(val);
		if (ret > -1) {
			return ret
		}
		return Ext.each(me.values, function (v, i) {
			if (v >= val) {
				return false
			}
		});
	},

	addFocusListener: function () {
		var me = this;
		if (!me.focusListenerAdded) {
			me.focusEl.on({
				focus: me.onFocus,
				blur: me.onBlur,
				scope: me
			});
			me.focusListenerAdded = true;
		}
	},
	onFocus: function () {
		var me = this;
		if (me.isReactive()) {
			me.bodyEl.addCls(me.starClsFocus)
		}
	},
	onBlur: function () {
		var me = this;
		me.bodyEl.removeCls(me.starClsFocus)
	},
	afterRender: function (ct, position) {
		var me = this,
			rightPos = me.resetPosition == 'right',
			cancel = '<div class="reset-el ' + me.ratingClassReset + '" title="reset" style="margin-' + (rightPos ? 'left' : 'right') + ':5px;"></div>';

		me.callParent();
		var tpl = new Ext.XTemplate(
			'<div class="ux-rating-container ux-rating-clearfix" tabIndex="'+ me.tabIndex +'">',
			rightPos ? '' : cancel,
			'<tpl for=".">',
			'<div key="{key}" class="', me.starCls, '" style="width: ', me.starWidth, 'px;">',
			'<a title="{title}" style="margin-left: -{margin}px;">{key}</a>',
			'</div>',
			'</tpl>',
			'<input type="hidden" name="', me.getName(), '" class="input-el" tabIndex="'+ me.tabIndex +'"></hidden>',
			rightPos ? cancel : '',
			'<a class="focus-el" tabIndex="0"></a>',
			'</div>',

			{
				compiled: true
			});

		me.stars = tpl.overwrite(me.bodyEl, me.stars, true).query('.' + me.starCls);
		me.focusEl = Ext.get(Ext.query('a.focus-el', me.bodyEl.dom[0]));
		me.inputEl = Ext.get(Ext.query('input.input-el', me.bodyEl.dom)[0]);
		me.resetEl = Ext.get(Ext.query('div.reset-el', me.bodyEl.dom)[0]);
	},
	initEvents: function () {
		var me = this;
		me.callParent(arguments);
		me.bodyEl.on({
			click: me.onStarClick,
			mouseover: me.onStarOver,
			mouseout: me.onStarOut,
			scope: me,
			delegate: 'div.ux-rating-star'
		});
		if (me.canReset) {
			me.resetEl.visibilityMode = Ext.Element.DISPLAY;
			me.resetEl.hover(
                function () {
                    if (me.isReactive() && me.getValue() > 0) {
                        Ext.fly(this).addCls('ux-rating-reset-hover');
                    }
			    },
                function () {
                    if (me.isReactive()) {
                        Ext.fly(this).removeCls('ux-rating-reset-hover');
                    }
			    }
            );

			me.resetEl.on('click', me.reset, me);
		}
		// Init arrow keys amd space/del for reseting
		if (me.keyNavEnabled) {
			me.spinnerKeyNav = new Ext.util.KeyNav(me.focusEl, {
				scope: me,
				up: me.spinUp,
				down: me.spinDown,
				right: me.spinUp,
				left: me.spinDown,
				space: me.reset,
				del: me.reset
			});
		}
		me.setValue(me.value)
	},
	reset: function (ev, t) {
		if (this.isReactive() && this.getValue() > 0) {
			this.setValue(0);
			this.fireEvent('click', this, 0);
		}
	},

	isReactive: function () {
		return !this.readOnly && !this.disabled
	},
	onStarClick: function (e, t) {
		var me = this, val;
		if (me.isReactive()){
			val = me.values[me.stars.indexOf(t)];
			me.setValue(val);
			me.fireEvent('click', me, val);
		}
	},
	onStarOver: function (e, t) {
		if (this.isReactive()) {
			this.fillTo(this.stars.indexOf(t), true);
		}
	},
	onStarOut: function (e, t) {
		if (this.isReactive()) {
			this.fillTo(this.selected);
		}
	},
	fillTo: function (index, hover) {
		var me = this;
		if (index != -1) {
			var addCls = hover ? me.starClsHover : me.starClsOn;
			var removeCls = hover ? me.starClsOn : me.starClsHover;

			// We add a css class to each star up until the selected one
			Ext.each(me.stars.slice(0, index + 1), function () {
				Ext.fly(this).removeCls(removeCls).addCls(addCls);
			});

			// And then remove the same class from all the stars after this one
			Ext.each(me.stars.slice(index + 1), function () {
				Ext.fly(this).removeCls([removeCls, addCls]);
			});
		} else {
			me.fillNone();
		}
	},
	fillNone: function () {
		this.bodyEl.select('.ux-rating-star').removeCls(['ux-rating-star-hover', 'ux-rating-star-on']);
	}
});
Ext.define('App.ux.grid.LiveSearchGridPanel', {
	extend: 'Ext.grid.Panel',

	xtype: 'gridlivesearch',
	requires: [
		'Ext.toolbar.TextItem',
		'Ext.form.field.Checkbox',
		'Ext.form.field.Text',
		'Ext.ux.statusbar.StatusBar'
	],

	/**
	 * @private
	 * search value initialization
	 */
	searchValue: null,

	/**
	 * @private
	 * The row indexes where matching strings are found. (used by previous and next buttons)
	 */
	indexes: [],

	/**
	 * @private
	 * The row index of the first search, it could change if next or previous buttons are used.
	 */
	currentIndex: null,

	/**
	 * @private
	 * The generated regular expression used for searching.
	 */
	searchRegExp: null,

	/**
	 * @private
	 * Case sensitive mode.
	 */
	caseSensitive: false,

	/**
	 * @private
	 * Regular expression mode.
	 */
	regExpMode: false,

	/**
	 * @cfg {String} matchCls
	 * The matched string css classe.
	 */
	matchCls: 'x-livesearch-match',

	defaultStatusText: 'Nothing Found',

	// Component initialization override: adds the top and bottom toolbars and setup headers renderer.
	initComponent: function(){
		var me = this;

		me.callParent(arguments);

		me.addDocked({
			xtype: 'toolbar',
			dock: 'top',
			items: [
				_('search'),
				{
					xtype: 'textfield',
					name: 'searchField',
					hideLabel: true,
					width: 200,
					listeners: {
						change: {
							fn: me.onTextFieldChange,
							scope: this,
							buffer: 100
						}
					}
				},
				'-',
				{
					xtype: 'button',
					text: '&lt;',
					tooltip: 'Find Previous Row',
					handler: me.onPreviousClick,
					scope: me
				},
				{
					xtype: 'button',
					text: '&gt;',
					tooltip: 'Find Next Row',
					handler: me.onNextClick,
					scope: me
				},
				'-',
				'->',
				'-',
				{
					xtype: 'tbtext',
					text: me.defaultStatusText,
					action: 'searchStatus',
					scope: me
				}
			]
		});
	},

	// afterRender override: it adds textfield and statusbar reference and start monitoring keydown events in textfield input
	afterRender: function(){
		var me = this;
		me.callParent(arguments);
		me.textField = me.down('textfield[name=searchField]');
		me.statusBar = me.down('tbtext[action=searchStatus]');
	},
	// detects html tag
	tagsRe: /<[^>]*>/gm,

	// DEL ASCII code
	tagsProtect: '\x0f',

	// detects regexp reserved word
	regExpProtect: /\\|\/|\+|\\|\.|\[|\]|\{|\}|\?|\$|\*|\^|\|/gm,

	/**
	 * In normal mode it returns the value with protected regexp characters.
	 * In regular expression mode it returns the raw value except if the regexp is invalid.
	 * @return {String} The value to process or null if the textfield value is blank or invalid.
	 * @private
	 */
	getSearchValue: function(){
		var me = this,
			value = me.textField.getValue();

		if(value === ''){
			return null;
		}
		if(!me.regExpMode){
			value = value.replace(me.regExpProtect, function(m){
				return '\\' + m;
			});
		}else{
			try{
				new RegExp(value);
			}catch(error){
				me.statusBar.setText(error.message);
				return null;
			}
			// this is stupid
			if(value === '^' || value === '$'){
				return null;
			}
		}

		return value;
	},

	/**
	 * Finds all strings that matches the searched value in each grid cells.
	 * @private
	 */
	onTextFieldChange: function(){
		var me = this,
			count = 0;

		me.view.refresh();
		// reset the statusbar
		me.statusBar.setText(me.defaultStatusText);

		me.searchValue = me.getSearchValue();
		me.indexes = [];
		me.currentIndex = null;

		if(me.searchValue !== null){
			me.searchRegExp = new RegExp(me.searchValue, 'g' + (me.caseSensitive ? '' : 'i'));

			me.store.each(function(record, idx){

				var fly = Ext.fly(me.view.getNode(record)),
					td, cell, matches, cellHTML, is_special;

				if(fly == null) return;

				td = fly.down('td');

				while(td){

					if(td == null){
						break;
					}

					is_special = false;

					cell = td.down('.x-grid-cell-inner');
					matches = cell.dom.innerHTML.match(me.tagsRe);
					cellHTML = cell.dom.innerHTML.replace(me.tagsRe, me.tagsProtect);

					if(matches){
						for(var i = 0; i < matches.length; i++){
							if(matches[i].indexOf('x-grid-row-checker') !== -1){
								is_special = true;
								break;
							}
						}
					}


					if(!is_special){
						// populate indexes array, set currentIndex, and replace wrap matched string in a span
						cellHTML = cellHTML.replace(me.searchRegExp, function(m){
							count += 1;
							if(Ext.Array.indexOf(me.indexes, record) === -1){
								me.indexes.push(record);
							}
							if(me.currentIndex === null){
								me.currentIndex = record;
							}

							return '<span class="' + me.matchCls + '">' + m + '</span>';
						});

						// restore protected tags
						Ext.each(matches, function(match){
							cellHTML = cellHTML.replace(me.tagsProtect, match);
						});
						// update cell html
						cell.dom.innerHTML = cellHTML;
					}


					td = td.next();
				}

			}, me);

			// results found
			if(me.currentIndex !== null){
				//me.getSelectionModel().select(me.currentIndex);
				me.statusBar.setText(count + ' matche(s) found.');
			}
		}

		// no results found
		if(me.currentIndex === null){
			//me.getSelectionModel().deselectAll();
		}

		// force textfield focus
		me.textField.focus();
	},

	/**
	 * Selects the previous row containing a match.
	 * @private
	 */
	onPreviousClick: function(){
		var me = this,
			idx;

		if((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1){
			me.currentIndex = me.indexes[idx - 1] || me.indexes[me.indexes.length - 1];
			me.getSelectionModel().select(me.currentIndex);
		}
	},

	/**
	 * Selects the next row containing a match.
	 * @private
	 */
	onNextClick: function(){
		var me = this,
			idx;

		if((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1){
			me.currentIndex = me.indexes[idx + 1] || me.indexes[0];
			me.getSelectionModel().select(me.currentIndex);
		}
	},

	/**
	 * Switch to case sensitive mode.
	 * @private
	 */
	caseSensitiveToggle: function(checkbox, checked){
		this.caseSensitive = checked;
		this.onTextFieldChange();
	},

	/**
	 * Switch to regular expression mode
	 * @private
	 */
	regExpToggle: function(checkbox, checked){
		this.regExpMode = checked;
		this.onTextFieldChange();
	}
});
Ext.define('App.ux.grid.GridToHtml', {
    requires: 'Ext.XTemplate',
    statics: {
        /**
         * Prints the passed grid. Reflects on the grid's column model to build a table, and fills it using the store
         * @param {Ext.grid.Panel} grid The grid to print
         */
        getHtml: function(grid){
            //We generate an XTemplate here by using 2 intermediary XTemplates - one to create the header,
            //the other to create the body (see the escaped {} below)
            var columns = [];
            //account for grouped columns
            Ext.each(grid.columns, function(c){
                if(c.items.length > 0){
                    columns = columns.concat(c.items.items);
                }else{
                    columns.push(c);
                }
            });
            //build a usable array of store data for the XTemplate
            var data = [];
            grid.store.data.each(function(item, row){
                var convertedData = {};
                //apply renderers from column model
                for(var key in item.data){
                    var value = item.data[key];
                    Ext.each(columns, function(column, col){
                        if(column && column.dataIndex == key){

                            /*
                             * TODO: add the meta to template
                             */
                            var meta = {item: '', tdAttr: '', style: ''};
                            value = column.renderer ? column.renderer.call(grid, value, meta, item, row, col, grid.store, grid.view) : value;
                            var varName = Ext.String.createVarName(column.dataIndex);
                            convertedData[varName] = value;
                        }else if(column && column.xtype === 'rownumberer'){
                            var varName = Ext.String.createVarName(column.id);
                            convertedData[varName] = (row + 1);
                        }else if(column && column.xtype === 'templatecolumn'){
                            value = column.tpl ? column.tpl.apply(item.data) : value;
                            var varName = Ext.String.createVarName(column.id);
                            convertedData[varName] = value;
                        }
                    }, this);
                }
                data.push(convertedData);
            });
            //remove columns that do not contains dataIndex or dataIndex is empty. for example: columns filter or columns button
            var clearColumns = [];
            Ext.each(columns, function(column){
                if((column) && (!Ext.isEmpty(column.dataIndex) && !column.hidden)){
                    clearColumns.push(column);
                }else if(column && column.xtype === 'rownumberer'){
                    column.text = 'Row';
                    clearColumns.push(column);
                }else if(column && column.xtype === 'templatecolumn'){
                    clearColumns.push(column);
                }
            });
            columns = clearColumns;
            //get Styles file relative location, if not supplied
            if(this.stylesheetPath === null){
                this.stylesheetPath = g('url') + '/resources/css/print.css';
            }
            //use the headerTpl and bodyTpl markups to create the main XTemplate below
            var headings = Ext.create('Ext.XTemplate', this.headerTpl).apply(columns);
            var body = Ext.create('Ext.XTemplate', this.bodyTpl).apply(columns);
            var pluginsBody = '', pluginsBodyMarkup = [];
            //add relevant plugins
            Ext.each(grid.plugins, function(p){
                if(p.ptype == 'rowexpander'){
                    pluginsBody += p.rowBodyTpl.join('');
                }
            });
            if(pluginsBody != ''){
                pluginsBodyMarkup = [
                    '<tr style="{[xindex % 2 === 0 ? "even" : "odd"]}">' +
                    '   <td style="{[xindex % 2 === 0 ? "background-color: #ffffff;" : "background-color: #f9f9f9;"]}" colspan="' + columns.length + '">', pluginsBody, '</td>' +
                    '</tr>'
                ];
            }
            grid.title = (typeof grid.title == 'undefined') ? '' : (' :: ' + grid.title);
            //Here because inline styles using CSS, the browser did not show the correct formatting of the data the first time that loaded

            var htmlMarkup = [
                '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
                '<html class="' + Ext.baseCSSPrefix + 'ux-grid-printer">',
                '   <head>',
                '       <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />',
                '       <title>GaiaEHR :: Print' + grid.title + '</title>',
                '   </head>',
                '   <body class="' + Ext.baseCSSPrefix + 'ux-grid-printer-body">',
//                '       <div class="' + Ext.baseCSSPrefix + 'ux-grid-printer-noprint ' + Ext.baseCSSPrefix + 'ux-grid-printer-links">',
//                '           <a class="' + Ext.baseCSSPrefix + 'ux-grid-printer-linkprint" href="javascript:void(0);" onclick="window.print();">' + this.printLinkText + '</a>',
//                '           <a class="' + Ext.baseCSSPrefix + 'ux-grid-printer-linkclose" href="javascript:void(0);" onclick="window.close();">' + this.closeLinkText + '</a>',
//                '       </div>',
                '       <h1>' + this.mainTitle + '</h1>',
                '       <table>',
                '           <tr>', headings, '</tr>',
                '           <tpl for=".">',
                '               <tr style="{[xindex % 2 === 0 ? "background-color: #ffffff;" : "background-color: #f9f9f9;"]}">', body, '</tr>', pluginsBodyMarkup.join(''),
                '           </tpl>',
                '       </table>',
                '   </body>',
                '</html>'
            ];




            return Ext.create('Ext.XTemplate', htmlMarkup).apply(data);

        },
        /**
         * @property stylesheetPath
         * @type String
         * The path at which the print stylesheet can be found (defaults to 'ux/grid/gridPrinterCss/print.css')
         */
        stylesheetPath: null,
        /**
         * @property printAutomatically
         * @type Boolean
         * True to open the print dialog automatically and close the window after printing. False to simply open the print version
         * of the grid (defaults to false)
         */
        mainTitle: '',
        /**
         * @property headerTpl
         * @type {Object/Array} values
         * The markup used to create the headings row. By default this just uses <th> elements, override to provide your own
         */
        headerTpl: [
            '<tpl for=".">',
            '   <th style="background-color: #CCCCCC; padding: 5px; border-bottom-width: 1px; border-bottom-color: black">{text}</th>',
            '</tpl>'
        ],
        /**
         * @property bodyTpl
         * @type {Object/Array} values
         * The XTemplate used to create each row. This is used inside the 'print' function to build another XTemplate, to which the data
         * are then applied (see the escaped dataIndex attribute here - this ends up as "{dataIndex}")
         */
        bodyTpl: [
            '<tpl for=".">', '<tpl if="values.dataIndex">',
            '   <td>\{{[Ext.String.createVarName(values.dataIndex)]}\}</td>',
            '   <tpl else>',
            '       <td>\{{[Ext.String.createVarName(values.id)]}\}</td>',
            '   </tpl>',
            '</tpl>'
        ]
    }
});

Ext.define('App.ux.grid.Printer', {
    requires: 'Ext.XTemplate',
    statics: {
        /**
         * Prints the passed grid. Reflects on the grid's column model to build a table, and fills it using the store
         * @param {Ext.grid.Panel} grid The grid to print
         */
        print: function(grid){
            //We generate an XTemplate here by using 2 intermediary XTemplates - one to create the header,
            //the other to create the body (see the escaped {} below)
            var columns = [];
            //account for grouped columns
            Ext.each(grid.columns, function(c){
                if(c.items.length > 0){
                    columns = columns.concat(c.items.items);
                }else{
                    columns.push(c);
                }
            });
            //build a usable array of store data for the XTemplate
            var data = [];
            grid.store.data.each(function(item, row){
                var convertedData = {};
                //apply renderers from column model
                for(var key in item.data){
                    var value = item.data[key];
                    Ext.each(columns, function(column, col){
                        if(column && column.dataIndex == key){

                            /*
                             * TODO: add the meta to template
                             */
                            var meta = {item: '', tdAttr: '', style: ''};
                            value = column.renderer ? column.renderer.call(grid, value, meta, item, row, col, grid.store, grid.view) : value;
                            var varName = Ext.String.createVarName(column.dataIndex);
                            convertedData[varName] = value;
                        }else if(column && column.xtype === 'rownumberer'){
                            var varName = Ext.String.createVarName(column.id);
                            convertedData[varName] = (row + 1);
                        }else if(column && column.xtype === 'templatecolumn'){
                            value = column.tpl ? column.tpl.apply(item.data) : value;
                            var varName = Ext.String.createVarName(column.id);
                            convertedData[varName] = value;
                        }
                    }, this);
                }
                data.push(convertedData);
            });
            //remove columns that do not contains dataIndex or dataIndex is empty. for example: columns filter or columns button
            var clearColumns = [];
            Ext.each(columns, function(column){
                if((column) && (!Ext.isEmpty(column.dataIndex) && !column.hidden)){
                    clearColumns.push(column);
                }else if(column && column.xtype === 'rownumberer'){
                    column.text = 'Row';
                    clearColumns.push(column);
                }else if(column && column.xtype === 'templatecolumn'){
                    clearColumns.push(column);
                }
            });
            columns = clearColumns;
            //get Styles file relative location, if not supplied
            if(this.stylesheetPath === null){
                this.stylesheetPath = g('url') + '/resources/css/print.css';
            }
            //use the headerTpl and bodyTpl markups to create the main XTemplate below
            var headings = Ext.create('Ext.XTemplate', this.headerTpl).apply(columns);
            var body = Ext.create('Ext.XTemplate', this.bodyTpl).apply(columns);
            var pluginsBody = '', pluginsBodyMarkup = [];
            //add relevant plugins
            Ext.each(grid.plugins, function(p){
                if(p.ptype == 'rowexpander'){
                    pluginsBody += p.rowBodyTpl.join('');
                }
            });
            if(pluginsBody != ''){
                pluginsBodyMarkup = [
                    '<tr class="{[xindex % 2 === 0 ? "even" : "odd"]}"><td colspan="' + columns.length + '">', pluginsBody, '</td></tr>'
                ];
            }
            grid.title = (typeof grid.title == 'undefined') ? '' : (' :: ' + grid.title);
            //Here because inline styles using CSS, the browser did not show the correct formatting of the data the first time that loaded
            var htmlMarkup = [
                '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
                '<html class="' + Ext.baseCSSPrefix + 'ux-grid-printer">',
                '   <head>',
                '       <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />',
                '       <link href="' + this.stylesheetPath + '" rel="stylesheet" type="text/css" />',
                '       <title>GaiaEHR :: Print' + grid.title + '</title>',
                '   </head>',
                '   <body class="' + Ext.baseCSSPrefix + 'ux-grid-printer-body">',
                '       <div class="' + Ext.baseCSSPrefix + 'ux-grid-printer-noprint ' + Ext.baseCSSPrefix + 'ux-grid-printer-links">',
                '           <a class="' + Ext.baseCSSPrefix + 'ux-grid-printer-linkprint" href="javascript:void(0);" onclick="window.print();">' + this.printLinkText + '</a>',
                '           <a class="' + Ext.baseCSSPrefix + 'ux-grid-printer-linkclose" href="javascript:void(0);" onclick="window.close();">' + this.closeLinkText + '</a>',
                '       </div>',
                '       <h1>' + this.mainTitle + '</h1>',
                '       <table>',
                '           <tr>', headings, '</tr>',
                '           <tpl for=".">',
                '               <tr class="{[xindex % 2 === 0 ? "even" : "odd"]}">', body, '</tr>', pluginsBodyMarkup.join(''),
                '           </tpl>',
                '       </table>',
                '   </body>',
                '</html>'
            ];
            var html = Ext.create('Ext.XTemplate', htmlMarkup).apply(data);
            //open up a new printing window, write to it, print it and close
            var win = window.open('GaiaEHR :: Print', 'printgrid');
            //document must be open and closed
            win.document.open();
            win.document.write(html);
            win.document.close();
            if(this.printAutomatically){
                win.print();
            }
            //Another way to set the closing of the main
            if(this.closeAutomaticallyAfterPrint){
                if(Ext.isIE){
                    window.close();
                }else{
                    win.close();
                }
            }
        },
        /**
         * @property stylesheetPath
         * @type String
         * The path at which the print stylesheet can be found (defaults to 'ux/grid/gridPrinterCss/print.css')
         */
        stylesheetPath: null,
        /**
         * @property printAutomatically
         * @type Boolean
         * True to open the print dialog automatically and close the window after printing. False to simply open the print version
         * of the grid (defaults to false)
         */
        printAutomatically: false,
        /**
         * @property closeAutomaticallyAfterPrint
         * @type Boolean
         * True to close the window automatically after printing.
         * (defaults to false)
         */
        closeAutomaticallyAfterPrint: false,
        /**
         * @property mainTitle
         * @type String
         * Title to be used on top of the table
         * (defaults to empty)
         */
        mainTitle: '',
        /**
         * Text show on print link
         * @type String
         */
        printLinkText: 'Print',
        /**
         * Text show on close link
         * @type String
         */
        closeLinkText: 'Close',
        /**
         * @property headerTpl
         * @type {Object/Array} values
         * The markup used to create the headings row. By default this just uses <th> elements, override to provide your own
         */
        headerTpl: [
            '<tpl for=".">',
            '   <th>{text}</th>',
            '</tpl>'
        ],
        /**
         * @property bodyTpl
         * @type {Object/Array} values
         * The XTemplate used to create each row. This is used inside the 'print' function to build another XTemplate, to which the data
         * are then applied (see the escaped dataIndex attribute here - this ends up as "{dataIndex}")
         */
        bodyTpl: [
            '<tpl for=".">', '<tpl if="values.dataIndex">',
            '   <td>\{{[Ext.String.createVarName(values.dataIndex)]}\}</td>',
            '   <tpl else>',
            '       <td>\{{[Ext.String.createVarName(values.id)]}\}</td>',
            '   </tpl>',
            '</tpl>'
        ]
    }
});

Ext.define('App.ux.ActivityMonitor', {
	singleton: true,
	controller: null,
	ui: null,
	runner: null,
	task: null,
	lastActive: null,

	ready: false,
	verbose: false,
	interval: (1000 * 60), //1 minute
	maxInactive: (1000 * 60 * 2), //5 minutes

	init: function(config){
		if(!config){
			config = {};
		}

		Ext.apply(this, config, {
			runner: new Ext.util.TaskRunner(),
			ui: Ext.getBody(),
			task: {
				run: this.monitorUI,
				interval: config.interval || this.interval,
				scope: this
			}
		});
		this.ready = true;
	},

	isReady: function(){
		return this.ready;
	},

	isActive: Ext.emptyFn,
	isInactive: Ext.emptyFn,

	start: function(){
		if(!this.isReady()){
			this.log('Please run ActivityMonitor.init()');
			return false;
		}

		this.ui.on('mousemove', this.captureActivity, this);
		this.ui.on('keydown', this.captureActivity, this);

		this.lastActive = new Date();
		this.log('ActivityMonitor has been started.');

		this.runner.start(this.task);

		return true;
	},

	stop: function(){
		if(!this.isReady()){
			this.log('Please run ActivityMonitor.init()');
			return false;
		}

		this.runner.stop(this.task);
		this.lastActive = null;

		this.ui.un('mousemove', this.captureActivity);
		this.ui.un('keydown', this.captureActivity);

		this.log('ActivityMonitor has been stopped.');

		return true;
	},

	captureActivity: function(eventObj, el, eventOptions){
		if(this.controller.logoutWarinigWindow)
			this.controller.cancelAutoLogout();
		this.lastActive = new Date();
	},

	monitorUI: function(){
		var now = new Date(), inactive = (now - this.lastActive);

		if(inactive >= this.maxInactive){
			this.log('MAXIMUM INACTIVE TIME HAS BEEN REACHED');
			this.stop();
			//remove event listeners

			this.isInactive();
		}
		else{
			this.log('CURRENTLY INACTIVE FOR ' + Math.floor(inactive / 1000) + ' SECONDS)');
			this.isActive();
		}
	},

	log: function(msg){
		if(this.verbose){
			window.console.log(msg);
		}
	}
});

Ext.define('App.ux.AbstractPanel', {

    calculatePercent:function(percent, value){
        return 100 * ( percent / value );
    },

	setReadOnly:function(readOnly){
		var forms = this.query('form');

		for(var j = 0; j < forms.length; j++) {
			var form = forms[j], items;
			if(form.readOnly != readOnly){
				form.readOnly = readOnly;
				items = form.getForm().getFields().items;
				for(var k = 0; k < items.length; k++){
					items[k].setReadOnly(readOnly);
				}
			}
		}
		return readOnly;
	},

	setButtonsDisabled:function(buttons, disabled){
		var disable = disabled || app.patient.readOnly;
		for(var i = 0; i < buttons.length; i++) {
			var btn = buttons[i];
			if(btn.disabled != disable){
				btn.disabled = disable;
				btn.setDisabled(disable)
			}
		}
	},

	goBack: function() {
		app.nav.goBack();
	},

	checkIfCurrPatient: function() {
		return app.getCurrPatient();
	},

	patientInfoAlert: function() {
		var patient = app.getCurrPatient();

		Ext.Msg.alert(_('status'), _('patient') + ': ' + patient.name + ' (' + patient.pid + ')');
	},

	currPatientError: function() {
		Ext.Msg.show({
			title  : 'Oops! ' + _('no_patient_selected'),
			msg    : _('select_patient_patient_live_search'),
			scope  : this,
			buttons: Ext.Msg.OK,
			icon   : Ext.Msg.ERROR,
			fn     : function() {
				this.goBack();
			}
		});
	},

    getFormItems: function(formPanel, formToRender, callback) {
	    if(formPanel) formPanel.removeAll();
	    FormLayoutEngine.getFields({formToRender: formToRender}, function(provider, response) {
            var items = eval(response.result),
                form = formPanel ? formPanel.add(items) : false;
	        if(typeof callback == 'function') callback(formPanel, items, true);
	        return form;
        });
    },

	boolRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<div style="margin-left:auto; margin-right:auto; width:16"><img src="resources/images/icons/yes.gif" /></div>';
		} else if(val == '0' || val == false || val == 'false') {
			return '<div style="margin-left:auto; margin-right:auto; width:16"><img src="resources/images/icons/no.gif" /></div>';
		}
		return val;
	},

	alertRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		}
		return val;
	},

    warnRenderer:function(val, metaData, record){
	    var toolTip = record.data.warningMsg ? record.data.warningMsg : '';

        if(val == '1' || val == true || val == 'true') {
            return '<img src="resources/images/icons/icoImportant.png" ' + toolTip + ' />';
        }else{
            return val;
        }
    },

	onExpandRemoveMask: function(cmb) {
		cmb.picker.loadMask.destroy()
	},

	strToLowerUnderscores: function(str) {
		return str.toLowerCase().replace(/ /gi, "_");
	},

	getCurrPatient: function() {
		return app.getCurrPatient();
	},

	getApp: function() {
		return app.getApp();
	},

	msg: function(title, format) {
		app.msg(title, format)
	},

	alert:function(msg, icon) {
		app.alert(msg,icon)
	},

    passwordVerificationWin:function(callback){
        var msg = Ext.Msg.prompt(_('password_verification'), _('please_enter_your_password') + ':', function(btn, password) {
            callback(btn, password);
        });
        var f = msg.textField.getInputId();
        document.getElementById(f).type = 'password';
        return msg;
    },
    getPageHeader:function(){
        return this.getComponent('RenderPanel-header');
    },
    getPageBodyContainer:function(){
        return this.getComponent('RenderPanel-body-container');
    },
    getPageBody:function(){
        return this.getPageBodyContainer().down('panel');
    }

});

Ext.define('App.ux.LiveCPTSearch', {
	extend: 'Ext.form.field.ComboBox',
	xtype: 'livecptsearch',
	hideLabel: true,
	triggerTip: _('click_to_clear_selection'),
	spObj: '',
	spForm: '',
	spExtraParam: '',
	displayField: 'code_text_medium',
	valueField: 'code',
	qtip: _('clearable_combo_box'),
	trigger1Class: 'x-form-select-trigger',
	trigger2Class: 'x-form-clear-trigger',
	initComponent: function(){
		var me = this;

		Ext.define('liveCPTSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'id' },
				{ name: 'eid' },
				{ name: 'code', type: 'strig' },
				{ name: 'code_text', type: 'string' },
				{ name: 'code_text_medium', type: 'string' },
				{ name: 'code_type', type: 'string', defaultValue: 'CPT' },
				{ name: 'place_of_service', type: 'string' },
				{ name: 'emergency', type: 'string' },
				{ name: 'charge', type: 'string' },
				{ name: 'days_of_units', type: 'string' },
				{ name: 'essdt_plan', type: 'string' },
				{ name: 'modifiers', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Services.liveCodeSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				},
				extraParams: {
					code_type: 'cpt'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveCPTSearchModel',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			emptyText: _('search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 1,
			anchor: '100%',
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item">{code}: {code_text_medium}</div>';
				}
			},
			pageSize: 25
		});

		me.callParent();
	},

	onRender: function(ct, position){
		this.callParent(arguments);
		var id = this.getId();
		this.triggerConfig = {
			tag: 'div',
			cls: 'x-form-twin-triggers',
			style: 'display:block;',
			cn: [
				{
					tag: "img",
					style: Ext.isIE ? 'margin-left:0;height:21px' : '',
					src: Ext.BLANK_IMAGE_URL,
					id: "trigger2" + id,
					name: "trigger2" + id,
					cls: "x-form-trigger " + this.trigger2Class
				}
			]
		};
		this.triggerEl.replaceWith(this.triggerConfig);
		this.triggerEl.on('mouseup', function(e){
			if(e.target.name == "trigger2" + id){
				this.reset();
				this.oldValue = null;
				if(this.spObj !== '' && this.spExtraParam !== ''){
					Ext.getCmp(this.spObj).store.setExtraParam(this.spExtraParam, '');
					Ext.getCmp(this.spObj).store.load()
				}
				if(this.spForm !== ''){
					Ext.getCmp(this.spForm).getForm().reset();
				}
			}
		}, this);
		var trigger2 = Ext.get("trigger2" + id);
		trigger2.addClsOnOver('x-form-trigger-over');
	}
});
Ext.define('App.ux.LiveICDXSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.liveicdxsearch',
	hideLabel: true,

	triggerTip: _('click_to_clear_selection'),
	spObj: '',
	spForm: '',
	spExtraParam: '',
	qtip: _('clearable_combo_box'),
	trigger1Class: 'x-form-select-trigger',
	trigger2Class: 'x-form-clear-trigger',

	displayField: 'code_text', // this should be code
	valueField: 'code',

	emptyText: _('search') + '...',
	typeAhead: false,
	minChars: 1,
	anchor: '100%',

	listConfig: {
		loadingText: _('searching') + '...',
		getInnerTpl: function(){
			return '<div class="search-item">{code_type} <span style="font-weight: bold;">{code}</span>: {code_text}</div>';
		}
	},

	initComponent: function(){
		var me = this;

		Ext.define('liveICDXSearchModel' + this.id, {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'id', type: 'int' },
				{ name: 'code', type: 'string' },
				{ name: 'xcode', type: 'string' },
				{ name: 'code_text', type: 'string' },
				{ name: 'code_type', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'DiagnosisCodes.ICDCodeSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveICDXSearchModel' + this.id,
			pageSize: 1000,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store
		});

		me.callParent();
	},

	onRender: function(ct, position){
        var trigger2,
            id = this.getId();
		this.callParent(arguments);
		this.triggerConfig = {
			tag: 'div',
			cls: 'x-form-twin-triggers',
			style: 'display:block;',
			cn: [
				{
					tag: "img",
					style: Ext.isIE ? 'margin-left:0;height:21px' : '',
					src: Ext.BLANK_IMAGE_URL,
					id: "trigger2" + id,
					name: "trigger2" + id,
					cls: "x-form-trigger " + this.trigger2Class
				}
			]
		};
		this.triggerEl.replaceWith(this.triggerConfig);
		this.triggerEl.on('mouseup', function(e){
			if(e.target.name == "trigger2" + id){
				this.reset();
				this.oldValue = null;
				if(this.spObj !== '' && this.spExtraParam !== ''){
					Ext.getCmp(this.spObj).store.setExtraParam(this.spExtraParam, '');
					Ext.getCmp(this.spObj).store.load()
				}
				if(this.spForm !== ''){
					Ext.getCmp(this.spForm).getForm().reset();
				}
			}

		}, this);
		trigger2 = Ext.get("trigger2" + id);
		trigger2.addClsOnOver('x-form-trigger-over');
	}
});

Ext.define('App.ux.LiveImmunizationSearch', {
	extend: 'Ext.form.ComboBox',
	xtype: 'immunizationlivesearch',
	hideLabel: true,
	displayField: 'name',
	valueField: 'cvx_code',
	emptyText: _('immunization_search') + '...',
	typeAhead: true,
	minChars: 1,
	initComponent: function(){
		var me = this;

		Ext.define('liveImmunizationSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'cvx_code', type: 'string'},
				{name: 'name', type: 'string'},
				{name: 'description', type: 'string'},
				{name: 'note', type: 'string'},
				{name: 'status', type: 'string'},
				{name: 'update_date', type: 'date', dateFormat: 'Y-m-d H:i:s'}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Immunizations.getImmunizationLiveSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveImmunizationSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item">CVX - {cvx_code}: <span style="font-weight: normal;" class="list-status-{status}">{name} ({status})</span></div>';
				}
			},
			pageSize: 10
		});

		me.callParent();
	}
});

Ext.define('App.ux.LiveLabsSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.labslivetsearch',
	hideLabel: true,

	initComponent: function(){
		var me = this;

		Ext.define('liveLoincSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'id' },
				{ name: 'loinc_name' },
				{ name: 'loinc_number' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Laboratories.getLabLoincLiveSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveLoincSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			displayField: 'loinc_name',
			valueField: 'loinc_name',
			emptyText: _('laboratories_search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 1,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{loinc_name} ({loinc_number})</h3></div>';
				}
			},
			pageSize: 10
		});

		me.callParent();
	}
});

Ext.define('App.ux.LiveCDTSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.cdtlivetsearch',
	hideLabel: true,

	initComponent: function(){
		var me = this;

		Ext.define('liveCDTSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'id' },
				{ name: 'code' },
				{ name: 'text' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Medical.getCDTLiveSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveCDTSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			displayField: 'text',
			valueField: 'code',
			emptyText: _('search_for_a_CDT') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 1,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{code}<span style="font-weight: normal"> ({text}) </span></h3></div>';
				}
			},
			pageSize: 10
		});

		me.callParent();
	}
});

Ext.define('App.ux.LiveRXNORMAllergySearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.rxnormallergylivetsearch',
	hideLabel: true,
	displayField: 'STR',
	valueField: 'STR',
	initComponent: function(){
		var me = this;

		Ext.define('liveRXNORMAllergySearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'RXCUI', type: 'auto'},
				{name: 'CODE', type: 'auto'},
				{name: 'STR', type: 'auto'},
				{name: 'DST', type: 'auto'},
				{name: 'DRT', type: 'auto'},
				{name: 'DDF', type: 'auto'},
				{name: 'DDFA', type: 'auto'},
				{name: 'RXN_QUANTITY', type: 'auto'},
				{name: 'SAB', type: 'auto'},
				{name: 'RXAUI', type: 'auto'},
				{name: 'CodeType', defaultValue: 'RXNORM'}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Rxnorm.getRXNORMAllergyLiveSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveRXNORMAllergySearchModel',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			emptyText: _('search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 3,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{STR}<span style="font-weight: normal"> ({RXCUI}) </span></h3></div>';
				}
			},
			pageSize: 25
		});

		me.callParent();
	}
});

Ext.define('App.ux.LivePatientSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.patienlivetsearch',
	hideLabel: true,
	displayField: 'fullname',
	valueField: 'pid',
	emptyText: _('search_for_a_patient') + '...',
	maxLength: 40,
    queryMode: 'remote',
    allowBlank: true,
	typeAhead: false,
    forceSelection: false,
    allowOnlyWhitespace: true,
	hideTrigger: true,
    validateBlank: true,
    submitValue: true,
	minChars: 0,
	queryDelay: 200,
	initComponent: function(){
		var me = this;

		Ext.define('patientLiveSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'pid',
					type: 'int'
				},
				{
					name: 'pubpid',
					type: 'string'
				},
				{
					name: 'fname',
					type: 'string'
				},
				{
					name: 'mname',
					type: 'string'
				},
				{
					name: 'lname',
					type: 'string'
				},
				{
					name: 'fullname',
					type: 'string',
					convert: function(v, record){
						return record.data.fname + ' ' + record.data.mname + ' ' + record.data.lname
					}
				},
				{
					name: 'DOB',
					type: 'date',
					dateFormat: 'Y-m-d H:i:s'
				},
				{
					name: 'sex',
					type: 'string'
				},
				{
					name: 'SS',
					type: 'string'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Patient.patientLiveSearch'
				},
                writer:{
                    writeAllFields: true
                },
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'patientLiveSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(me, {
			store: me.store,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					var pid = (eval(g('display_pubpid')) ? 'pubpid' : 'pid');
					return '<div class="search-item"><h3><span>{fullname}</span> {[Ext.Date.format(values.DOB, g("date_display_format"))]}</h3>' +
						'Record #{' + pid + '}'
				}
			},
			pageSize: 10
		});

		me.callParent();
	}
});

Ext.define('App.ux.LiveSigsSearch', {
	extend: 'Ext.form.field.ComboBox',
	alias: 'widget.livesigssearch',

	initComponent: function(){
		var me = this;

		Ext.define('liveSigsSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'option_value', type: 'string' },
				{ name: 'option_name', type: 'string'    }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Prescriptions.getSigCodesByQuery'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveSigsSearchModel',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(me, {
			store: me.store,
			displayField: 'option_value',
			valueField: 'option_value',
			emptyText: _('search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 1,
			anchor: '100%',
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item">{option_value} ({option_name})</div>';
				}
			},
			//				pageSize:25,
			listeners: {
				scope: me,
				beforeselect: me.onBeforeSigSelect,
				select: me.onBeSigSelect
			}
		});

		me.callParent(arguments);
	},

	onBeforeSigSelect: function(cmb, record){
		//say(cmb);
		//say(record);
	},

	onBeSigSelect: function(cmb, record){
		//say(cmb);
		//say(record);
	}


});

Ext.define('App.ux.LiveUserSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.userlivetsearch',
	hideLabel: true,
	displayField: 'fullname',
	valueField: 'id',
	emptyText: _('search_for_a_user') + '...',
	maxLength: 40,
	typeAhead: false,
    queryMode: 'remote',
    allowBlank: true,
    minChars: 1,
	queryDelay: 200,
	acl: null,

    triggerTip: _('click_to_clear_selection'),
    spObj: '',
    spForm: '',
    spExtraParam: '',
    qtip: _('clearable_combo_box'),
    trigger1Class: 'x-form-select-trigger',
    trigger2Class: 'x-form-clear-trigger',

    listConfig: {
        loadingText: _('searching') + '...',
        getInnerTpl: function(){
            return '<div class="search-item">{fullname} <b>({role})</b></div>'
        }
    },

	initComponent: function(){
		var me = this;

		Ext.define('userLiveSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'id',
					type: 'int'
				},
				{
					name: 'title',
					type: 'string'
				},
				{
					name: 'role',
					type: 'string'
				},
				{
					name: 'fname',
					type: 'string'
				},
				{
					name: 'mname',
					type: 'string'
				},
				{
					name: 'lname',
					type: 'string'
				},
				{
					name: 'fullname',
					type: 'string',
					convert: function(v, record){
						return record.data.fname + ' ' + record.data.mname + ' ' + record.data.lname
					}
				}
			]
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'userLiveSearchModel',
			pageSize: 10,
			autoLoad: false,
			proxy: {
				type: 'direct',
				api: {
					read: 'User.userLiveSearch'
				},
				extraParams: {
					acl: me.acl
				},
				reader: {
					root: 'data'
				},
                writer: {
                    writeAllFields: true
                }
			}
		});

		Ext.apply(me, {
			store: me.store,
			pageSize: 10
		});

		me.callParent();
	},

    onRender: function(ct, position){
        var id = this.getId();
        var trigger2;
        this.callParent(arguments);
        this.triggerConfig = {
            tag: 'div',
            cls: 'x-form-twin-triggers',
            style: 'display:block;',
            cn: [
                {
                    tag: "img",
                    style: Ext.isIE ? 'margin-left:0;height:21px' : '',
                    src: Ext.BLANK_IMAGE_URL,
                    id: "trigger2" + id,
                    name: "trigger2" + id,
                    cls: "x-form-trigger " + this.trigger2Class
                }
            ]
        };
        this.triggerEl.replaceWith(this.triggerConfig);
        this.triggerEl.on('mouseup', function(e){
            if(e.target.name == "trigger2" + id){
                this.reset();
                this.fireEvent('reset', this);
            }
        }, this);
        trigger2 = Ext.get("trigger2" + id);
        trigger2.addClsOnOver('x-form-trigger-over');
    }

});

Ext.define('App.ux.NodeDisabled',
	{
		alias:'plugin.nodedisabled',
		extend:'Ext.AbstractPlugin'

		//configurables
		/**
		 * @cfg {String} disabledCls
		 * The CSS class applied when the {@link Ext.data.Model} of the node has a 'disabled' field with a true value.
		 */,
		disabledCls:'tree-node-disabled'
		/**
		 * @cfg {Boolean} preventSelection
		 * True to prevent selection of a node that is disabled. Default true.
		 */,
		preventSelection:true

		/**
		 * @cfg {Boolean} preventChecking
		 * True to prevent checking of a node that is disabled. Default true.
		 */,
		preventChecking:true

		//properties

		/**
		 * @private
		 * @param {Ext.tree.Panel} tree
		 */,
		init:function(tree){
			var me = this, view = tree.getView(), origFn, origScope;

			me.callParent(arguments);

			origFn = view.getRowClass;
			if(origFn){
				origScope = view.scope || me;
				Ext.apply(view,{
					getRowClass:function(){
						var v1, v2;
						v1 = origFn.apply(origScope, arguments) || '';
						v2 = me.getRowClass.apply(me, arguments) || '';
						return (v1 && v2) ? v1 + ' ' + v2 : v1 + v2;
					}
				});
			}else{
				Ext.apply(view,{
					getRowClass:Ext.Function.bind(me.getRowClass, me)
				});
			}

			if(me.preventSelection){
				tree.getSelectionModel().on('beforeselect', me.onBeforeNodeSelect, me);
			}

			if(me.preventChecking){
				tree.on('checkchange', me.checkchange, me);
			}
		}// eof init
		/**
		 * Returns a properly typed result.
		 * @return {Ext.tree.Panel}
		 */,
		getCmp:function(){
			return this.callParent(arguments);
		}//eof getCmp
		/**
		 * @private
		 * @param {Ext.data.Model} record
		 * @param {Number} index
		 * @param {Object} rowParams
		 * @param {Ext.data.Store} ds
		 * @return {String}
		 */,
		getRowClass:function(record, index, rowParams, ds){
			return record.get('disabled') ? this.disabledCls : '';
		}//eof getRowClass
		/**
		 * @private
		 * @param {Ext.selection.TreeModel} sm
		 * @param {Ext.data.Model} node
		 * @return {Boolean}
		 */,
		onBeforeNodeSelect:function(sm, node){
			if(node.get('disabled')){
				return false;
			}
		}//eof onBeforeNodeSelect
		/**
		 * @event checkchange
		 * Fires when a node with a checkbox's checked property changes
		 * @param {Ext.data.Model} node The node who's checked property was changed
		 * @param {Boolean} checked The node's new checked state
		 */,
		checkchange:function(node, checked){
			if(node.get('disabled')){
				node.set('checked', !checked);
			}
		}//eof checkchange
	});
//eo class

//end of file
Ext.define('App.ux.PhotoIdWindow',
{
	extend : 'Ext.window.Window',
	alias : 'widget.photoidwindow',
	height : 320,
	width : 320,
	layout : 'fit',
	renderTo : document.body,
	initComponent : function()
	{
		var me = this;

		window.webcam.set_api_url('dataProvider/WebCamImgHandler.php');
		window.webcam.set_swf_url('lib/jpegcam/htdocs/webcam.swf');
		window.webcam.set_quality(100);
		// JPEG quality (1 - 100)
		window.webcam.set_shutter_sound(true, 'lib/jpegcam/htdocs/shutter.mp3');
		// play shutter click sound
		window.webcam.set_hook('onComplete', 'onWebCamComplete');

		Ext.apply(me,
		{
			html : window.webcam.get_html(320, 320),
			buttons : [
			{
				text : _('capture'),
				iconCls : 'save',
				handler : me.captureToCanvas
			},
			{
				text : _('cancel'),
				scope : me,
				handler : function()
				{
					this.close();
				}
			}]
		});
		me.callParent(arguments);
	},

	captureToCanvas : function()
	{
		window.webcam.snap();
	}
});
Ext.define('App.ux.PatientEncounterCombo', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.patientEncounterCombo',
	hideLabel: true,
	displayField: 'display_string',
	valueField: 'eid',
	emptyText: _('search') + '...',
	width: 400,
	editable: false,
	initComponent: function(){
		var me = this;

		Ext.define('patientEncounterComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'eid',
					type: 'int'
				},
				{
					name: 'brief_description',
					type: 'string'
				},
				{
					name: 'service_date',
					type: 'date',
					dateFormat: 'Y-m-d H:i:s'
				},
				{
					name: 'close_date',
					type: 'date',
					dateFormat: 'Y-m-d H:i:s'
				},
				{
					name: 'display_string',
					type: 'string',
					convert: function(v, record){
						return Ext.Date.format(record.data.service_date, g("date_time_display_format")) + ' - ' + Ext.String.ellipsis(record.data.brief_description, 25);
					}
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Encounter.getEncounters'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'patientEncounterComboModel',
			pageSize: 500,
			autoLoad: false,
			sorters: [
				{
					property: 'service_date',
					direction: 'DESC'
				}
			]
		});

		me.callParent();

	}

});
Ext.define('App.ux.RenderPanel', {
	extend: 'Ext.container.Container',
	alias: 'widget.renderpanel',
	cls: 'RenderPanel',
	layout: 'border',
	frame: false,
	border: false,
	pageLayout: 'fit',
	pageBody: [],
	pageTitle: '',
	pageButtons: null,
	pageTBar: null,
	pageBBar: null,
	pagePadding: null,
	showRating: false,

	initComponent: function(){
		var me = this;

		Ext.apply(me, {
			items: [
				me.mainHeader = Ext.widget('container', {
					cls: 'RenderPanel-header',
					itemId: 'RenderPanel-header',
					region: 'north',
					layout: 'hbox',
					height: 30
				}),
				{
					cls: 'RenderPanel-body-container',
					itemId: 'RenderPanel-body-container',
					xtype: 'container',
					region: 'center',
					layout: 'fit',
					padding: this.pagePadding == null ? 5 : this.pagePadding,
					items: [
						me.mainBoddy = Ext.widget('panel', {
							cls: 'RenderPanel-body',
							frame: true,
							border: false,
							itemId: 'pageLayout',
							defaults: { frame: false, border: false, autoScroll: true },
							layout: me.pageLayout,
							items: me.pageBody,
							tbar: me.pageTBar,
							bbar: me.pageBBar,
							buttons: me.pageButtons
						})
					]
				}
			]
		});

		me.pageTitleDiv = me.mainHeader.add(
			Ext.widget('container', {
				cls: 'panel_title',
				html: me.pageTitle
			})
		);

		me.pageReadOnlyDiv = me.mainHeader.add(
			Ext.widget('container') // placeholder
		);

		if(me.showRating){
			me.pageRankingDiv = me.mainHeader.add(
				Ext.widget('ratingField', {
					flex: 1,
					listeners: {
						scope: me,
						click: function(field, val){
							Patient.setPatientRating({pid: app.patient.pid, rating: val}, function(){
								app.msg(_('sweet'), _('record_saved'))
							});
						}
					}
				})
			);
		}

		me.pageTimerDiv = me.mainHeader.add(
			Ext.widget('container', {
				style: 'float:right',
				width: 200
			})
		);

		me.callParent(arguments);
	},

	updateTitle: function(pageTitle, readOnly, timer){
		this.pageTitleDiv.update(pageTitle);
		this.pageReadOnlyDiv.update(readOnly ? _('read_only') : '');
		this.pageTimerDiv.update(timer);
	},

	getPageHeader: function(){
		return this.getComponent('RenderPanel-header');
	},

	getPageBodyContainer: function(){
		return this.getComponent('RenderPanel-body-container');
	},

	getPageBody: function(){
		return this.mainBoddy;
	},

	onActive: function(callback){
		if(typeof callback == 'function') callback(true);
	}


});

Ext.define('App.ux.form.fields.Help', {
    extend       : 'Ext.Img',
    alias        : 'widget.helpbutton',
    src          : 'resources/images/icons/icohelp.png',
    height       : 16,
    width        : 16,
    margin       : '3 10',
    helpMsg      : _('help_message'),
    initComponent: function() {
        var me = this;
        me.listeners = {
            render: function(c) {
                me.setToolTip(c.getEl());
            }
        };
        me.callParent();
    },

    setToolTip: function(el) {
        Ext.create('Ext.tip.ToolTip', {
            target      : el,
            dismissDelay: 0,
            html        : this.helpMsg
        });
    }
});
Ext.define('App.ux.form.fields.Checkbox', {
	extend        : 'Ext.form.field.Checkbox',
	alias         : 'widget.mitos.checkbox',
	inputValue    : '1',
	uncheckedValue: '0'
});
Ext.define('App.ux.form.fields.ColorPicker', {
    extend: 'Ext.form.field.Trigger',
    alias: 'widget.colorcombo',
    triggerTip: 'Please select a color.',
    onTriggerClick: function(){
        var me = this;
        picker = Ext.create('Ext.picker.Color', {
            pickerField: this,
            ownerCt: this,
            renderTo: document.body,
            floating: true,
            hidden: true,
            focusOnShow: true,
            style: {
                backgroundColor: "#fff"
            },
            listeners: {
                scope: this,
                select: function(field, value, opts){
                    me.setValue('#' + value);
                    me.inputEl.setStyle({backgroundColor: value});
                    picker.hide();
                },
                show: function(field, opts){
                    field.getEl().monitorMouseLeave(500, field.hide, field);
                }
            }
        });
        picker.alignTo(me.inputEl, 'tl-bl?');
        picker.show(me.inputEl);
    }
});
Ext.define('App.ux.form.fields.Currency',{
    extend: 'Ext.form.field.Number', //Extending the NumberField
    alias: 'widget.mitos.currency', //Defining the xtype,
    currencySymbol: g('gbl_currency_symbol'),
    useThousandSeparator: true,
    thousandSeparator: ',',
    alwaysDisplayDecimals: true,
    fieldStyle: 'text-align: right;',
    hideTrigger: true,

    initComponent: function () {
        if(this.useThousandSeparator && this.decimalSeparator == ',' && this.thousandSeparator == ','){
            this.thousandSeparator = '.';
        }else if (this.allowDecimals && this.thousandSeparator == '.' && this.decimalSeparator == '.'){
            this.decimalSeparator = ',';
        }
        this.callParent(arguments);
    },

    setValue: function (value) {
        App.ux.form.fields.Currency.superclass.setValue.call(this, value != null ? value.toString().replace('.', this.decimalSeparator) : value);

        this.setRawValue(this.getFormattedValue(this.getValue()));
    },

    getFormattedValue: function (value) {
        if(Ext.isEmpty(value) || !this.hasFormat()){
            return value;
        }else{
            var neg = null;

            value = ( neg = value < 0) ? value * -1 : value;
            value = this.allowDecimals && this.alwaysDisplayDecimals ? value.toFixed(this.decimalPrecision) : value;

            if(this.useThousandSeparator) {
                if(this.useThousandSeparator && Ext.isEmpty(this.thousandSeparator)){
                    throw ('NumberFormatException: invalid thousandSeparator, property must has a valid character.');
                }

                if(this.thousandSeparator == this.decimalSeparator){
                    throw ('NumberFormatException: invalid thousandSeparator, thousand separator must be different from decimalSeparator.');
                }

                value = value.toString();

                var ps = value.split('.');
                ps[1] = ps[1] ? ps[1] : null;

                var whole = ps[0];

                var r = /(\d+)(\d{3})/;

                var ts = this.thousandSeparator;

                while (r.test(whole))
                    whole = whole.replace(r, '$1' + ts + '$2');

                value = whole + (ps[1] ? this.decimalSeparator + ps[1] : '');
            }

            return Ext.String.format('{0}{1}{2}', ( neg ? '-' : ''), (Ext.isEmpty(this.currencySymbol) ? '' : this.currencySymbol), value);
        }
    },
    /**
     * overrides parseValue to remove the format applied by this class
     */
    parseValue: function (value) {
        //Replace the currency symbol and thousand separator
        return App.ux.form.fields.Currency.superclass.parseValue.call(this, this.removeFormat(value));
    },
    /**
     * Remove only the format added by this class to let the superclass validate with it's rules.
     * @param {Object} value
     */
    removeFormat: function (value) {
        if (Ext.isEmpty(value) || !this.hasFormat())
            return value;
        else {
			value = value.toString().replace(this.currencySymbol, '');

            value = this.useThousandSeparator ? value.replace(new RegExp('[' + this.thousandSeparator + ']', 'g'), '') : value;

            return value;
        }
    },
    /**
     * Remove the format before validating the the value.
     * @param {Number} value
     */
    getErrors: function (value) {
        return App.ux.form.fields.Currency.superclass.getErrors.call(this, this.removeFormat(value));
    },

    hasFormat: function () {
        return this.decimalSeparator != '.' || (this.useThousandSeparator == true && this.getRawValue() != null) || !Ext.isEmpty(this.currencySymbol) || this.alwaysDisplayDecimals;
    },
    /**
     * Display the numeric value with the fixed decimal precision and without the format using the setRawValue, don't need to do a setValue because we don't want a double
     * formatting and process of the value because beforeBlur perform a getRawValue and then a setValue.
     */
    onFocus: function () {
        this.setRawValue(this.removeFormat(this.getRawValue()));

        this.callParent(arguments);
    }
});
Ext.define('App.ux.form.fields.CustomTrigger', {
	extend: 'Ext.form.field.Trigger',
	alias: 'widget.customtrigger',
	hideLabel    : true,
	triggerTip: _('click_to_clear_selection'),
	qtip: _('clearable_combo_box'),
	trigger1Class:'x-form-select-trigger',
	trigger2Class:'x-form-clear-trigger',

	onRender:function (ct, position) {
		this.callParent(arguments);
		var id = this.getId();

		this.triggerConfig = {
			tag:'div', cls:'x-form-twin-triggers', style:'display:block;', cn:[
				{tag:"img", style:Ext.isIE ? 'margin-left:0;height:21px' : '', src:Ext.BLANK_IMAGE_URL, id:"trigger2" + id, name:"trigger2" + id, cls:"x-form-trigger " + this.trigger2Class}
			]};
		this.triggerEl.replaceWith(this.triggerConfig);
		this.triggerEl.on('mouseup', function() {
			this.destroy();
		}, this);
		var trigger2 = Ext.get("trigger2" + id);
		trigger2.addClsOnOver('x-form-trigger-over');
	}
});
Ext.define('App.ux.form.fields.DateTime', {
	extend: 'Ext.form.FieldContainer',
	mixins: {
		field: 'Ext.form.field.Field'
	},
	alias : 'widget.mitos.datetime',

	combineErrors: true,
	layout       : 'hbox',
	readOnly     : false,
	allowBlank   : true,

	/**
	 * @cfg {String} dateFormat
	 * The default is 'Y-m-d'
	 */
	dateFormat    : 'Y-m-d',
	/**
	 * @cfg {String} timeFormat
	 * The default is 'H:i:s'
	 */
	timeFormat    : 'g:i a',
	/**
	 * @cfg {String} dateTimeFormat
	 * The format used when submitting the combined value.
	 * Defaults to 'Y-m-d H:i:s'
	 */
	dateTimeFormat: 'Y-m-d H:i:s',
	/**
	 * @cfg {Object} dateConfig
	 * Additional config options for the date field.
	 */
	dateConfig    : {},
	/**
	 * @cfg {Object} timeConfig
	 * Additional config options for the time field.
	 */
	timeConfig    : {},


	// properties

	dateValue: null, // Holds the actual date
	/**
	 * @property dateField
	 * @type Ext.form.field.Date
	 */
	dateField: null,
	/**
	 * @property timeField
	 * @type Ext.form.field.Time
	 */
	timeField: null,

	initComponent: function() {
		var me = this;
		me.items = me.items || [];

		me.dateConfig.allowBlank = me.allowBlank;

		me.dateField = Ext.create('Ext.form.field.Date', Ext.apply({
			format     : me.dateFormat,
			flex       : 1,
            emptyText  : _('date'),
            margin     : 0,
			submitValue: false
		}, me.dateConfig));
		me.items.push(me.dateField);

		me.timeField = Ext.create('Ext.form.field.Time', Ext.apply({
			format     : me.timeFormat,
			flex       : 1,
            emptyText  : _('time'),
            margin     : 0,
			submitValue: false
		}, me.timeConfig));
		me.items.push(me.timeField);

		for(var i = 0; i < me.items.length; i++) {
			me.items[i].on('focus', Ext.bind(me.onItemFocus, me));
			me.items[i].on('blur', Ext.bind(me.onItemBlur, me));
			me.items[i].on('specialkey', function(field, event) {
				var key = event.getKey(),
					tab = key == event.TAB;

				if(tab && me.focussedItem == me.dateField) {
					event.stopEvent();
					me.timeField.focus();
					return;
				}

				me.fireEvent('specialkey', field, event);
			});
		}

		if(me.layout == 'vbox') me.height = 44;

		me.callParent();

		// this dummy is necessary because Ext.Editor will not check whether an inputEl is present or not
//		this.inputEl = {
//			dom         : {},
//			swallowEvent: function() {
//			}
//		};

		me.initField();
	},

	focus: function() {
		this.callParent();
		this.dateField.focus();
	},

	onItemFocus: function(item) {
		if(this.blurTask) this.blurTask.cancel();
		this.focussedItem = item;
	},

	onItemBlur: function(item) {
		var me = this;
		if(item != me.focussedItem) return;
		// 100ms to focus a new item that belongs to us, otherwise we will assume the user left the field
		me.blurTask = new Ext.util.DelayedTask(function() {
			me.fireEvent('blur', me);
		});
		me.blurTask.delay(100);
	},

	getValue: function() {
		var value = null,
			date = this.dateField.getSubmitValue(),
			time = this.timeField.getSubmitValue();

		if(date) {
			if(time) {
				var format = this.getFormat();
				value = Ext.Date.parse(date + ' ' + time, format);
			}
			else {
				value = this.dateField.getValue();
			}
		}
		return value;
	},

	getSubmitValue: function() {
		var value = this.getValue();
		return value ? Ext.Date.format(value, this.dateTimeFormat) : null;
	},

	setValue: function(value) {
		if(Ext.isString(value)) {
			value = Ext.Date.parse(value, this.dateTimeFormat);
		}
		this.dateField.setValue(value);
		this.timeField.setValue(value);
	},

	getFormat    : function() {
		return (this.dateField.submitFormat || this.dateField.format) + " " + (this.timeField.submitFormat || this.timeField.format);
	},

	// Bug? A field-mixin submits the data from getValue, not getSubmitValue
	getSubmitData: function() {
		var me = this,
			data = null;
		if(!me.disabled && me.submitValue && !me.isFileUpload()) {
			data = {};
			data[me.getName()] = '' + me.getSubmitValue();
		}
		return data;
	},

    setReadOnly:function(value){
        this.dateField.setReadOnly(value);
        this.timeField.setReadOnly(value);
    },

	setMaxValue:function(date){
		this.dateField.setMaxValue(date);
	}
});

//eo file
Ext.define('App.ux.form.fields.MultiText', {
	extend: 'Ext.form.FieldContainer',
	xtype: 'multitextfield',
	layout: {
		type:'vbox',
		align: 'stretch'
	},
	name: null,
	numbers: true,
	initComponent: function(){
		var me = this;

		me.lastField = null;

		me.callParent();
		me.addField();
	},

	addField:function(value){
		var me = this;

		me.lastField = me.add({
			xtype:'textfield',
			name: '_' + me.name,
			anchor: '100%',
			value: value || '',
			labelWidth: 20,
			margin: '0 0 5 0',
			enableKeyEvents: true
		});
		if(me.numbers) me.lastField.setFieldLabel((me.items.items.indexOf(me.lastField) + 1).toString());
		me.lastField.on('keyup', this.onFieldKeyUp, this);

	},

	onFieldKeyUp:function(field, e){
		if(e.getKey() == e.TAB) return;

		var me = this,
			index = me.items.items.indexOf(field),
			totals =  me.items.items.length,
			isLast = (index + 1) == totals,
			isNextToLast = (index + 2) == totals;

		if(isLast && field.getValue().length > 0 && this.lastField == field && !(e.getKey() == e.DELETE || e.getKey() == e.BACKSPACE)){
			this.addField();
			me.doLayout();
		}else if(isNextToLast && field.getValue().length == 0 && me.lastField != field){
			me.remove(me.lastField);
			me.doLayout();
			me.lastField = field;
		}
	},

	setValue:function(data){
		var me = this;

		me.removeAll(true);

		if(Ext.isString(data) && data != ''){
			me.addField(data);
		}else if(Ext.isArray(data)){
			for(var i=0; i < data.length; i++){
				me.addField(data[i]);
			}
		}
		me.addField('');
	},

	getValue:function(){
		var me = this,
			values = me.up('form').getForm().getValues()['_' + me.name];
		if(values[values.length - 1] == '') Ext.Array.erase(values, values.length - 1, 1);
		return values;
	}
});
Ext.define('App.ux.form.fields.plugin.BadgeText', {
	extend: 'Ext.AbstractPlugin',
	alias: 'plugin.badgetext',

	disableBg: 'gray',
	enableBg: 'red',
	textSize: 15,
	textColor: 'white',
	defaultText: ' ',
	disableOpacity: 0,
	align: 'left',
	text: ' ',
	disable: true,
	button: null,
	/**
	 *
	 * @param button
	 */
	init: function(button){

		var me = this;

		me.button = button;
		me.text = me.defaultText;

		button.on('render', me.addBadgeEl, me);

		Ext.apply(button,{

			setBadgeText:function(text){

				me.disable = typeof text == 'undefined' || text === me.defaultText;
				me.text = !me.disable ? text : me.defaultText;
				if (button.rendered) {
					button.badgeEl.update(text.toString ? text.toString() : text);
					if (Ext.isStrict && Ext.isIE8) {
						button.el.repaint();
					}
					me.setDisabled(me.disable);
				}
				return button;
			},

			getBadgeText:function(){
				return me.text;
			}


		});

	},

	/**
	 *
	 * @param button
	 */
	addBadgeEl: function(button){
		var me = this,
			styles = {
				'position': 'absolute',
				'background-color': me.disableBg,
				'font-size': me.textSize + 'px',
				'color': me.textColor,
				'padding': '1px 5px',
				'index': 50,
				'top': '-3px',
				'border-radius': '15px',
				'font-weight': 'bold',
				'text-shadow': 'rgba(0, 0, 0, 0.5) 0 -0.08em 0',
				'box-shadow': 'rgba(0, 0, 0, 0.3) 0 0.1em 0.1em',
				'cursor':'pointer'
			};

		if(me.align == 'left'){
			styles.left = '-3px';
		}else{
			styles.right = '-3px';
		}

		button.badgeEl = Ext.DomHelper.append(button.el, { tag:'div', cls:'badgeText x-unselectable'}, true);
		button.badgeEl.setOpacity(me.disableOpacity);
		button.badgeEl.setStyle(styles);
		button.badgeEl.update(me.text.toString ? me.text.toString() : me.text);

		button.el.setStyle({
			overflow: 'hidden'
		});

	},

	/**
	 *
	 */
	onBadgeClick:function(){
		var me = this;
		me.button.fireEvent('badgeclick', me.button, me.text)
	},

	/**
	 *
	 * @param disable
	 */
	setDisabled:function(disable){
		var me = this;

		me.button.badgeEl.setStyle({
			'background-color': (disable ? me.disableBg : me.enableBg),
			//'color': (disable ? 'black' : 'white'),
			'opacity': (disable ? me.disableOpacity : 1)
		});

		me.button.badgeEl.clearListeners();
		if(!disable) me.button.badgeEl.on('click', me.onBadgeClick, me, { preventDefault: true, stopEvent:true });

	}
});
Ext.define('App.ux.form.fields.plugin.ReadOnlyLabel', {
	extend: 'Ext.AbstractPlugin',
	alias: 'plugin.readonlylabel',

	align: 'right',

	text: _('read_only'),
	textBg: 'red',
	textSize: '14',
	textColor: 'white',
	textOpacity: .4,

	/**
	 *
	 * @param field
	 */
	init: function(field){
		var  me = this;

		field.on('render', me.onRender, me);
		field.on('writeablechange', me.setReadOnly, me);

	},

	setReadOnly: function(field, readOnly){
		field.readOnlyEl.setVisible(readOnly);
	},

	onRender: function(field){
		this.addReadOnlyEl(field);
		this.setReadOnly(field, field.readOnly);
	},

	/**
	 *
	 * @param field
	 */
	addReadOnlyEl: function(field){
		var me = this,
			styles = {
				'position': 'absolute',
				'background-color': me.textBg,
				'font-size': me.textSize + 'px',
				'color': me.textColor,
				'padding': '5px 10px',
				'index': 50,
				'top': '10px',
				'border-radius': '5px',
				'visibility': 'hidden'
			};

		if(me.align == 'left'){
			styles.left = '10px';
		}else{
			styles.right = '10px';
		}

		field.readOnlyEl = Ext.DomHelper.append(field.el, { tag:'div', cls:'badgeText x-unselectable'}, true);
		field.readOnlyEl.setOpacity(me.textOpacity);
		field.readOnlyEl.setStyle(styles);
		field.readOnlyEl.update(me.text.toString ? me.text.toString() : me.text);

	}

});
Ext.define('App.ux.form.AdvanceForm', {
    extend: 'Ext.AbstractPlugin',
    alias: 'plugin.advanceform',
    /**
     * @cfg {Boolean} syncAcl
     * Sync access control, true to allow the store to sync.
     */
    syncAcl: true,
    /**
     * @cfg {Boolean} autoSync
     * True to autosave the form every time values is change, Default to false.
     */
    autoSync: false,
    /**
     * True to add a tool component to the form panel. Default to true.
     * @cfg {Boolean} autoSyncTool
     */
    autoSyncTool:true,
    /**
     * @cfg {int} syncDelay
     * Autosave de delay to sync the form store. Default to 3000.
     */
    syncDelay: 3000,
    /**
     * @cfg {int} transition
     * Time of Fx background color transition. Default to 2000.
     */
    transition: 2000,
    /**
     * Init function
     * @param form
     */
    init: function(form){
        this.callParent(arguments);
        form.pugin = this;
        this.formPanel = form;
        this.formPanel.autoSync = this.autoSync;
        this.formPanel.on('beforerender', this.setFieldEvent, this);
        this.form = this.formPanel.getForm();
        this.form.loadRecord = this.loadRecord;
        if(this.autoSyncTool) this.addTool();
    },
    /**
     * Overrides the form basic loadRecord()
     * @param record
     * @return {*|Ext.form.Basic|Ext.form.Basic|Ext.form.Basic|Ext.form.Basic|Ext.form.Basic|Ext.form.Basic}
     */
    loadRecord: function(record){
        var form = this,
	        formPanel = form.owner,
	        plugin = this.owner.pugin,
	        rec;

	    if(!record) return form;

	    form.isLoading = true;
        form._record = record;
        plugin.setFormFieldsClean(false);
        record.store.on('write', plugin.onStoreWrite, plugin);
        record.store.on('beforesync', function(store, operation){
            formPanel.fireEvent('beforesync', store, operation);
        }, plugin);
        record.store.on('update', function(store, operation){
            formPanel.fireEvent('update', store, operation);
        }, plugin);
        form.setValues(record.data);
        formPanel.fireEvent('recordloaded', form, record);
        form.isLoading = false;
        return form;
    },
    /**
     * After store write clean form fields and fire write event on form
     * @param store
     * @param operation
     */
    onStoreWrite: function(store, operation){
        this.setFormFieldsClean(this.transition);
        this.formPanel.fireEvent('write', store, operation);
        app.msg('Sweet!', 'Record Saved');
        delete this.bufferSyncFormFn;
    },
    /**
     * Set on keyup or handler based on xtype
     * @param form
     */
    setFieldEvent: function(form){
        var fields = form.getForm().getFields().items;
        for(var i = 0; i < fields.length; i++){
            if(fields[i].xtype == 'textfield' || fields[i].xtype == 'textareafield'){
                fields[i].enableKeyEvents = true;
                fields[i].on('keyup', this.setFieldCondition, this);
	            fields[i].on('change', this.setFieldCondition, this);
            }else if(fields[i].xtype == 'radiofield' || fields[i].xtype == 'checkbox'){
                fields[i].scope = this;
                fields[i].handler = this.setFieldCondition;
	            fields[i].on('change', this.setFieldCondition, this);
            }else if(fields[i].xtype == 'datefield'){
                fields[i].on('select', this.setFieldCondition, this);
	            fields[i].on('change', this.setFieldCondition, this);
            }else{
                fields[i].on('select', this.setFieldCondition, this);
            }
        }
    },
    /**
     * Set field condition dirty or clean based on field getSubmitValue()
     * @param field
     */
    setFieldCondition: function(field){
        var me = this,
	        record = me.form.getRecord(),
	        store = record ? record.store : null,
	        obj = {},
	        valueChanged,
	        el = me.getFieldEl(field);

	    if(store == null) return;

        if((!me.form.isLoading && field.xtype != 'radiofield') || (!me.form.isLoading && field.xtype == 'radiofield' && field.checked)){
            obj[field.name] = field.getSubmitValue();
            record.set(obj);
            valueChanged = (Object.getOwnPropertyNames(record.getChanges()).length !== 0);
            if(valueChanged === true){
                me.setFieldDirty(field, el, true, me.transition);
            }else{
                me.setFieldDirty(field, el, false, me.transition);
            }
            if(this.formPanel.autoSync && this.syncAcl){
                if(typeof me.bufferSyncFormFn == 'undefined'){
                    me.bufferSyncFormFn = Ext.Function.createBuffered(function(){
                        store.sync();
                    }, me.syncDelay);
                    me.bufferSyncFormFn();
                }else{
                    if(valueChanged === true){
                        me.bufferSyncFormFn();
                    }else{
                        me.setFormFieldsClean(me.transition);
                        delete me.bufferSyncFormFn;
                    }
                }
            }
        }
    },
    /**
     * Set field background if dirty == true
     * @param field
     * @param el
     * @param dirty
     * @param transition
     */
    setFieldDirty: function(field, el, dirty, transition){
        transition = Ext.isNumber(transition) ? transition : 0;
        if((field.el.hasChanged && !dirty) || (!field.el.hasChanged && dirty)){
            field.el.hasChanged = dirty;
            Ext.create('Ext.fx.Animator', {
                target: el,
                duration: transition, // 10 seconds
                keyframes: {
                    0: {
                        backgroundColor: dirty ? 'FFFFFF' : 'FFDDDD'
                    },
                    100: {
                        backgroundColor: dirty ? 'FFDDDD' : 'FFFFFF'
                    }
                },
                listeners: {
                    keyframe: function(fx, keyframe){
                        if(keyframe == 1){
                            if(dirty){
                                el.setStyle({'background-image': 'none'});
                            }else{
                                Ext.Function.defer(function(){
                                    el.setStyle({'background-image': null});
                                }, transition - 400);
                            }
                        }
                    }
                }
            });
        }
    },
    /**
     * Get the field main element to change background.
     * Some fields are managed different.
     * @param field
     * @return {*}
     */
    getFieldEl: function(field){
        if(field.xtype == 'textfield' || field.xtype == 'textareafield'){
            return field.inputEl;
        }else if(field.xtype == 'radiofield'){
            return field.ownerCt.el;
        }else if(field.xtype == 'checkbox'){
            return field.el;
        }else{
            return field.el; // leave this for now
        }
    },
    /**
     * This will set all the fields that has change
     */
    setFormFieldsClean: function(transition){
        var me = this, fields = me.form.getFields().items, el;
        for(var i = 0; i < fields.length; i++){
            el = me.getFieldEl(fields[i]);
            if(typeof fields[i].el != 'undefined' && fields[i].el.hasChanged){
                me.setFieldDirty(fields[i], el, false, transition);
            }
        }
    },

    addTool:function(){
        var me = this,
            bar = me.formPanel.getDockedItems()[0],
            cls = me.formPanel.autoSync ? 'autosave' : '';

        if(bar && me.autoSyncTool){
            bar.insert(0, Ext.create('Ext.panel.Tool',{
                type:'save',
                cls:cls,
                tooltip: 'Autosave',
                handler: function(event, toolEl, panel, tool){
                    me.formPanel.autoSync = !me.formPanel.autoSync;
                    if(me.formPanel.autoSync){
                        tool.addCls('autosave');
                    }else{
                        tool.removeCls('autosave');
                    }
                    app.msg('Sweet!','AutoSave is ' + (me.formPanel.autoSync ? 'On' : 'Off'));
                }
            }));
        }
    }
});
Ext.define('App.ux.form.fields.Percent',{
    extend: 'Ext.form.field.Number', //Extending the NumberField
    alias: 'widget.mitos.percent', //Defining the xtype,
    currencySymbol: '%',
    useThousandSeparator: false,
    thousandSeparator: ',',
    alwaysDisplayDecimals: true,
    fieldStyle: 'text-align: right;',
    hideTrigger: true,

    initComponent: function () {
        if (this.useThousandSeparator && this.decimalSeparator == ',' && this.thousandSeparator == ','){
            this.thousandSeparator = '.';
        }else if(this.allowDecimals && this.thousandSeparator == '.' && this.decimalSeparator == '.'){
            this.decimalSeparator = ',';
        }
        this.callParent(arguments);
    },

    setValue: function (value) {
        App.ux.form.fields.Currency.superclass.setValue.call(this, value != null ? value.toString().replace('.', this.decimalSeparator) : value);

        this.setRawValue(this.getFormattedValue(this.getValue()));
    },

    getFormattedValue: function (value) {
        if (Ext.isEmpty(value) || !this.hasFormat()){
            return value;
        }else{
            var neg = null;

            value = ( neg = value < 0) ? value * -1 : value;
            value = this.allowDecimals && this.alwaysDisplayDecimals ? value.toFixed(this.decimalPrecision) : value;

            if (this.useThousandSeparator) {
                if(this.useThousandSeparator && Ext.isEmpty(this.thousandSeparator)){
                    throw ('NumberFormatException: invalid thousandSeparator, property must has a valid character.');
                }

                if(this.thousandSeparator == this.decimalSeparator){
                    throw ('NumberFormatException: invalid thousandSeparator, thousand separator must be different from decimalSeparator.');
                }

                value = value.toString();

                var ps = value.split('.');
                ps[1] = ps[1] ? ps[1] : null;

                var whole = ps[0];

                var r = /(\d+)(\d{3})/;

                var ts = this.thousandSeparator;

                while (r.test(whole))
                    whole = whole.replace(r, '$1' + ts + '$2');

                value = whole + (ps[1] ? this.decimalSeparator + ps[1] : '');
            }

            return Ext.String.format('{0}{1}{2}', (neg ? '-' : ''), value, (Ext.isEmpty(this.currencySymbol) ? '' : this.currencySymbol));
        }
    },
    /**
     * overrides parseValue to remove the format applied by this class
     */
    parseValue: function (value) {
        //Replace the currency symbol and thousand separator
        return App.ux.form.fields.Currency.superclass.parseValue.call(this, this.removeFormat(value));
    },
    /**
     * Remove only the format added by this class to let the superclass validate with it's rules.
     * @param {Object} value
     */
    removeFormat: function (value) {
        if (Ext.isEmpty(value) || !this.hasFormat()){
            return value;
        }else{
            value = value.toString().replace(this.currencySymbol, '');

            value = this.useThousandSeparator ? value.replace(new RegExp('[' + this.thousandSeparator + ']', 'g'), '') : value;

            return value;
        }
    },
    /**
     * Remove the format before validating the the value.
     * @param {Number} value
     */
    getErrors: function (value) {
        return App.ux.form.fields.Currency.superclass.getErrors.call(this, this.removeFormat(value));
    },

    hasFormat: function () {
        return this.decimalSeparator != '.' || (this.useThousandSeparator == true && this.getRawValue() != null) || !Ext.isEmpty(this.currencySymbol) || this.alwaysDisplayDecimals;
    },
    /**
     * Display the numeric value with the fixed decimal precision and without the format using the setRawValue, don't need to do a setValue because we don't want a double
     * formatting and process of the value because beforeBlur perform a getRawValue and then a setValue.
     */
    onFocus: function () {
        this.setRawValue(this.removeFormat(this.getRawValue()));

        this.callParent(arguments);
    }
});
(function(){

	var Element = Ext.core.Element,
		DomHelper = Ext.core.DomHelper,
		slice = Array.prototype.slice;

	/**
	 * @class App.ux.ManagedIframe
	 * @extends Ext.Component
	 */
	Ext.define('App.ux.ManagedIframe', {

		/* Begin Definitions */
		extend: 'Ext.Component',
		alias: 'widget.miframe',

		/* End Definitions */

		hideMode: Ext.isIE ? 'display' : 'nosize',

		/*
		 * @cfg {Boolean} autoScroll True to set overflow:auto on the nested iframe.
		 * If False, overflow is forced to hidden.
		 * Note: set to undefined to control overflow-x/y via the frameStyle config option
		 */
		autoScroll: true,

		/*
		 * @cfg {String/Object} frameStyle (optional) Style string or object configuration representing
		 * the desired style attributes to apply to the embedded IFRAME.
		 * @default 'height:100%; width:100%;'
		 */
		frameStyle: null,

		frameConfig: undefined,

		frameCls: 'ux-miframe',

		shimCls: 'ux-miframe-shim',

		shimUrl: Ext.BLANK_IMAGE_URL,

		/*
		 * @cfg {Boolean} eventsFollowFrameLinks True to raise the 'dataavailable' event anytime
		 * the frame document is reloaded (including when the user follows a link to another page)
		 * Note: the load event is always fired
		 * @default true
		 */
		eventsFollowFrameLinks: true,

		/*
		 * @cfg {String} src (optional) Uri to load into the frame
		 */
		src: 'about:blank',

		/*
		 * @cfg {Boolean} autoMask True to display a loadMask during page content changes
		 */
		autoMask: false,

		/*
		 * @cfg {String} maskMessage default message text rendered during masking operations
		 */
		maskMessage: 'Loading...',

		/*
		 * @cfg {String} resetUrl (optional) Uri to load into the frame during initialization only
		 * @default undefined
		 */
		resetUrl: undefined,

		ariaRole: 'presentation',

		unsupportedText: 'Frames are disabled',

		/*
		 * Bubble frame events to upstream containers
		 */
		//bubbleEvents: ['dataavailable', 'load', 'unload', 'scroll', 'reset'],

		initComponent: function(){

			var me = this;
			me.frameStyle = Ext.isString(me.frameStyle)
				? Element.parseStyles(me.frameStyle)
				: me.frameStyle || {};

			me.frameName = me.frameName || me.getId();

			//			delete me.autoEl;

			me.autoEl = me.autoEl || {              //generate the necessary markup for shimming and noframes support
				cn: [
					Ext.applyIf(me.frameConfig || {},
						{
							tag: 'iframe',
							cls: me.frameCls,
							style: Ext.apply(
								{
									"height": "100%",
									"width": "100%"
								},
								me.frameStyle
							),
							frameBorder: 'no',
							role: me.ariaRole,
							name: me.frameName
						}
					),
					{
						tag: 'noframes',
						html: me.unsupportedText
					},
					{
						tag: 'img',
						cls: me.shimCls,
						galleryimg: "no",
						style: "position:absolute;top:0;left:0;display:none;z-index:20;height:100%;width:100%;",
						src: me.shimUrl
					}
				]
			};

			this.callParent();

		},

		renderSelectors: {
			frameElement: 'iframe.ux-miframe',
			frameShim: 'img.ux-miframe-shim'
		},

		iframeMessageListener: function(event){

			if(event.origin !== window.location.origin) return;
			if(!event.data.match(/^documentedit/)) return;

			var data = event.data.replace(/^documentedit/, '');
			app.fireEvent('documentedit', eval('(' + data + ')'));
		},

		afterRender: function(container){
			var me = this, frame;
			me.callParent();

			if(me.iframeMessageListener){
				if (window.addEventListener){
					window.addEventListener("message", me.iframeMessageListener, false);
				} else {
					window.attachEvent("onmessage", me.iframeMessageListener);
				}
			}

			if(me.frameShim){
				me.frameShim.autoBoxAdjust = false;
				me.frameShim.setVisibilityMode(Element.DISPLAY);
			}

			if(frame = me.frameElement){
				frame = me.frameElement = new App.ux.ManagedIframe.Element(frame.dom);

				//Suppress dataavailable event chatter during initialization
				frame.eventsFollowFrameLinks = false;

				frame.on({
					dataavailable: me.onFrameDataAvailable,
					scope: me
				});

				if(this.autoLoad){
					frame.isReset = Ext.isIE;
					frame.eventsFollowFrameLinks = !!me.eventsFollowFrameLinks;
				}else{

					Ext.Function.defer(
						frame.reset,
						100,        //permit layout to quiesce
						frame,
						[
							me.resetUrl,
							function(){
								var me = this;
								frame.eventsFollowFrameLinks = !!me.eventsFollowFrameLinks;
								if(me.src || me.defaultSrc){
									me.setSrc();
								}else if(me.data || me.html){
									me.update(me.data || me.html);
								}
							},
							me
						]
					);
				}
			}
		},

		// private
		getContentTarget: function(){
			return this.frameElement;
		},

		getActionEl: function(){
			return this.frameElement || this.el;
		},

		/*
		 * @private
		 */
		onFrameDataAvailable: function(e){
			if(this.autoMask){
				this.setLoading(false);
			}
		},

		/*
		 * Setter - Changes the current src attribute of the IFRAME, applying a loadMask
		 * over the frame (if autoMask is true)
		 * Note: call without the uri argument to simply refresh the frame with the current src value
		 * @param {Function} callback (Optional) A callback function invoked when the
		 *            frame document has been fully loaded.
		 * @param {Object} scope (Optional) scope by which the callback function is
		 *            invoked.
		 */
		setSrc: function(uri, callback, scope){
			var me = this;
			uri = uri || me.src || me.defaultSrc;
			if(uri && me.rendered && me.frameElement){

				if(me.autoMask && me.isVisible(true)){
					me.setLoading(me.maskMessage || '', true);
				}

				me.frameElement.setSrc(uri, false, callback, scope);
			}
			me.src = uri;
			return me;
		},

		setLoading: function(load){
			var me = this;

			if(load !== false){
				me.el.mask(me.maskMessage || '');
			}else{
				me.el.unmask();
			}
		},

		/**
		 * contentEl is NOT supported, but tpl/data, and html ARE.
		 * @private
		 */
		initContent: function(){
			var me = this,
				content = me.data || me.html;

			if(me.contentEl && Ext.isDefined(Ext.global.console)){
				Ext.global.console.warn('App.ux.ManagedIframe: \'contentEl\' is not supported by this class.');
			}

			// Make sure this.tpl is an instantiated XTemplate
			if(me.tpl){
				me.setTpl(me.tpl);
			}

			delete me.contentEl;
		},

		setTpl: function(tpl){
			this.tpl = (tpl && !tpl.isTemplate) ? Ext.create('Ext.XTemplate', tpl) : tpl;
			return this;
		},

		/**
		 * Update(replacing) the document content of the IFRAME.
		 * @param {Mixed} htmlOrData
		 * If this component has been configured with a template via the tpl config
		 * then it will use this argument as data to populate the frame.
		 * If this component was not configured with a template, the components
		 * content area (iframe) will be updated via App.ux.ManagedIframe.Element update
		 * @param {Boolean} loadScripts (optional) Defaults to false
		 * @param {Function} callback (optional) Callback to execute when scripts have finished loading
		 * @param {Object} scope (optional) execution context of the the callback
		 */
		update: function(htmlOrData, loadScripts, callback, scope){
			var me = this,
				content = htmlOrData;

			if(me.tpl && Ext.isArray(content) || Ext.isObject(content)){
				me.data = content;
				content = me.tpl.apply(content || {});
			}

			if(me.rendered){
				me.autoMask &&
				me.isVisible(true) &&
				me.setLoading(me.maskMessage || '');

				var frame = me.getContentTarget();
				Ext.defer(
					function(){
						frame.update(content, loadScripts, callback, scope);
						//Ext.defer(this.setLoading, 100, this, [false]);
					},
					me.autoMask ? 100 : 10,
					me,
					[ ]
				);

			}
			return me;
		},

		/**
		 * Sets the overflow on the IFRAME element of the component.
		 * @param {Boolean} scroll True to allow the IFRAME to auto scroll.
		 * @return {App.ux.ManagedIframe.Component} this
		 */
		setAutoScroll: function(scroll){
			var me = this,
				targetEl;
			if(Ext.isDefined(scroll)){  //permits frameStyle overrides
				scroll = !!scroll;
				if(me.rendered && (targetEl = me.getContentTarget())){
					targetEl.setStyle('overflow', scroll ? 'auto' : 'hidden');
				}
				me.autoScroll = scroll;
			}
			return me;
		},

		/*
		 *   Toggle the transparent shim on/off
		 */
		toggleShim: function(enabled){
			var me = this;
			if(me.frameShim){
				me.frameShim[enabled ? 'show' : 'hide']();
			}
			return me.frameShim;
		},

		onDestroy: function(){
			var me = this, frame;
			if(frame = me.frameElement){
				frame.remove();
			}
			me.deleteMembers('frameElement', 'frameShim');

			if(me.iframeMessageListener){
				if (window.addEventListener){
					removeEventListener("message", me.iframeMessageListener, false);
				} else {
					detachEvent("onmessage", me.iframeMessageListener);
				}
			}


			me.callParent();
		}

	});

	var MIF = App.ux.ManagedIframe,
		EC = Ext.cache,
		DOC = window.document,

	// @private add/remove Listeners
		addListener = function(){
			var handler;
			if(window.addEventListener){
				handler = function F(el, eventName, fn, capture){
					el.addEventListener(eventName, fn, !!capture);
				};
			}else if(window.attachEvent){
				handler = function F(el, eventName, fn, capture){
					el.attachEvent("on" + eventName, fn);
				};
			}else{
				handler = function F(){
				};
			}
			var F = null; //Gbg collect
			return handler;
		}(),
		removeListener = function(){
			var handler;
			if(window.removeEventListener){
				handler = function F(el, eventName, fn, capture){
					el.removeEventListener(eventName, fn, (capture));
				};
			}else if(window.detachEvent){
				handler = function F(el, eventName, fn){
					el.detachEvent("on" + eventName, fn);
				};
			}else{
				handler = function F(){
				};
			}
			var F = null; //Gbg collect
			return handler;
		}();

	Ext.define('App.ux.ManagedIframe.Element', {

		/* Begin Definitions */
		extend: 'Ext.core.Element',
		alias: 'widget.miframeelement',
		/* End Definitions */

		visibilityMode: Element.ASCLASS,   //nosize for hiding

		eventsFollowFrameLinks: true,

		focusOnLoad: Ext.isIE,

		constructor: function(element){
			var id,
				dom = (typeof element == "string")
					? DOC.getElementById(element)
					: (element || {}).dom || element;

			if(!dom){
				return null;
			}

			id = dom.id;

			/**
			 * The DOM element
			 * @type HTMLElement
			 */
			this.dom = dom;

			/**
			 * The DOM element ID
			 * @type String
			 */
			this.id = id || Ext.id(dom);

			this.dom.name = this.dom.name || this.id;
			window.frames[this.dom.name] = this.dom;

			this.dom.manager = this;
			this._flyweights = {};

			if(EC[this.id] && EC[this.id].el){
				EC[this.id].el = this;
			}else{
				Element.addToCache(this);
			}

			/*
			 * Sets up the events required to maintain the state machine
			 */
			// Hook the Iframes loaded/state handlers
			Ext.isGecko || Ext.isWebkit || this.on(
				(Ext.isOpera) ? 'DOMFrameContentLoaded' : 'readystatechange',
				this.loadHandler,
				this,
				/**
				 * Opera still fires LOAD events for images within the FRAME as well,
				 * so we'll buffer hopefully catching one of the later events
				 */
				Ext.isOpera ? {buffer: this.operaLoadBuffer || 2000} : null
			);

			this.on({
				'dataavailable': function(e, target){
					//set current frameAction for downstream listeners
					e && Ext.apply(e, {
						frameAction: this._frameAction,
						frameResetting: this.isReset
					});
				},
				load: this.loadHandler,
				scope: this

			});

		},

		/**
		 * If sufficient privilege exists, returns the frame's current document
		 * as an HTMLElement.
		 * @param {Boolean} assertAccess (optional) False to return the document regardless of
		 what domain served the page.
		 * @return {HTMLElement} The frame document or false if access to document object was denied.
		 */
		getFrameDocument: function(assertAccess){
			var win = this.getWindow(), doc = null;
			try{
				doc = win.contentDocument || this.dom.contentDocument || window.frames[this.dom.name].document || win.document;
			}catch(gdEx){
				doc = false; // signifies probable access restriction
			}
			return  doc || false;
		},

		/**
		 * Returns the frame's current HTML document object as an
		 * {@link Ext.Element}.
		 * @return {Ext.Element} The document
		 */
		getDoc: function(){
			return this.fly(this.getFrameDocument());
		},

		/**
		 * If sufficient privilege exists, returns the frame's current document
		 * body as an HTMLElement.
		 *
		 * @return {Ext.Element} The frame document body or Null if access to
		 *         document object was denied.
		 */
		getBody: function(){
			var d;
			return (d = this.getFrameDocument()) ? this.get(d.body) : null;
		},

		/*
		 * Convert an HTMLElement (by id or reference) to a Flyweight Element
		 */
		get: function(el){
			return this.fly(el);
		},

		fly: function(el, named){
			var me = this,
				ret = null,
				doc = me.getFrameDocument(),
				id;

			if(!doc || !el){
				return ret;
			}
			named = named || '_global';
			el = Ext.getDom(el, false, doc);
			if(el){

				/* Note: this does two things:
				 * 1) properly asserts the window/document id's
				 * 2) initializes event caches for foreign Flyweights
				 */
				id = Ext.EventManager.getId(el);

				/*
				 * maintain a Frame-localized cache of Flyweights
				 */
				(me._flyweights[id] = me._flyweights[id] || new MIF.Element.Flyweight()).dom = el;
				ret = me._flyweights[id];
			}
			return ret;
		},

		/**
		 * Creates a {@link Ext.CompositeElement} for child nodes based on the
		 * passed CSS selector (the selector should not contain an id).
		 *
		 * @param {String} selector The CSS selector
		 * @return {Ext.CompositeElement/Ext.CompositeElementLite} The composite element
		 */
		select: function(selector){
			var d;
			return (d = this.getFrameDocument()) ? Element.select(selector, false, d) : d = null;
		},

		/**
		 * Selects frame document child nodes based on the passed CSS selector
		 * (the selector should not contain an id).
		 *
		 * @param {String} selector The CSS selector
		 * @return {Array} An array of the matched nodes
		 */
		query: function(selector){
			var d;
			return (d = this.getFrameDocument()) ? Ext.DomQuery.select(selector, d) : d = null;
		},

		/**
		 * Attempt to retrieve the frames current URI via frame's document object
		 * @return {string} The frame document's current URI or the last know URI if permission was denied.
		 */
		getDocumentURI: function(){

			var URI, d;
			try{
				URI = this.src && (d = this.getFrameDocument()) ? d.location.href : null;
			}catch(ex){
			} // will fail on NON-same-origin domains
			return URI || (Ext.isFunction(this.src) ? this.src() : this.src);
		},

		/**
		 * Attempt to retrieve the frames current URI via frame's Window object
		 * @return {string} The frame document's current URI or the last know URI if permission was denied.
		 */
		getWindowURI: function(){
			var URI, w, me = this;
			try{
				URI = (w = me.getWindow()) ? w.location.href : null;
			}catch(ex){
			} // will fail on NON-same-origin domains
			return URI || (Ext.isFunction(me.src) ? me.src() : me.src);

		},

		/**
		 * Returns the frame's current window object.
		 * @return {Window} The frame Window object.
		 */
		getWindow: function(){
			var dom = this.dom, win = null;
			try{
				win = dom.contentWindow || window.frames[dom.name] || null;
			}catch(gwEx){
			}
			return win;
		},

		/**

		 * Scrolls a frame document's child element into view within the passed container.
		 * Note:
		 * @param {String} child The id of the element to scroll into view.
		 * @param {Mixed} container (optional) The container element to scroll (defaults to the frame's document.body).  Should be a
		 * string (id), dom node, or Ext.Element reference with an overflow style setting.
		 * @param {Boolean} hscroll (optional) False to disable horizontal scroll (defaults to true)
		 * @return {App.ux.ManagedIframe.Element} this
		 */
		scrollChildIntoView: function(child, container, hscroll){
			var me = this,
				doc = me.getFrameDocument(),
				f;
			if(doc){
				container = (container ? Ext.getDom(container, true, doc) : null) || (!Ext.isWebKit && Ext.isDocumentStrict(doc) ? doc.documentElement : doc.body);
				if(f = me.fly(child)){
					f.scrollIntoView(container, hscroll);
				}
			}
			return me;
		},

		/**
		 * @private
		 * Evaluate the Iframes readyState/load event to determine its
		 * 'load' state, and raise the 'dataavailable' and other events when
		 * applicable.
		 */
		loadHandler: function(e, target, options){
			e = e || {};
			var me = this,
				rstatus = (e.type == 'readystatechange') ? (me.dom || {}).readyState : e.type;

			//console.info('LH ' ,  rstatus , ' follows:',me.eventsFollowFrameLinks, ' isReset:', me.isReset, ' action:',me._frameAction );
			if(me.eventsFollowFrameLinks || me._frameAction || me.isReset){

				me.isReset && e.stopEvent && e.stopEvent();
				switch(rstatus){

					case 'domready' : // MIF
					case 'DOMFrameContentLoaded' :

						me._onDocReady(rstatus, e);
						me.fireDOMEvent('domready', null, {message: e.message});
						break;

					case 'interactive':   // IE/ Legacy Opera
						me.domReady = me.loaded = false;
						me.isReset || me.assertOnReady();  //for IE, begin polling here as IE7 holds the DOM a bit longer
						break;
					case 'complete' :
						me.loaded = true;
						me.fireDOMEvent('complete', null, {message: e.message});
						break;
					case 'load' : // Gecko, Opera, IE
						me.loaded = true;
						Ext.apply(e, {
							frameAction: me._frameAction,
							frameResetting: me.isReset
						});
						me._onDocLoaded(rstatus, e);
						me.dispatchCallbacks(e, target, options);
						break;

					case 'error':
						me.fireDOMEvent('error', null, {message: e.message});
						me._frameAction = false;
						break;
					default :
				}

				me.frameState = rstatus;
			}

		},

		/*
		 *  @private DOM Ready handler
		 */
		_onDocReady: function(status, e){
			var me = this;

			me.domReady = true;

			try{
				if(!me.isReset && me.focusOnLoad){
					me.focus();
				}
			}catch(ex){
			}

			//raise internal private event regardless of state.
			me.fireDOMEvent('datasetchanged');

			if(!me.isReset && !me.domReadyFired && me._renderHooks()){

				// Only raise if sandBox injection succeeded (same origin)
				if(!me.isReset){  //but never during a reset
					me.domReadyFired = true;
					me.fireDOMEvent('dataavailable');
				}
			}
		},

		_onDocLoaded: function(status, e){
			var me = this;
			/*
			 * this is necessary to permit other browsers a chance to raise dataavailable during
			 * page transitions (eventsFollowFrameLinks)
			 */
			!me.isReset && (!me._frameAction || me.eventsFollowFrameLinks) && !me.domReady && me._onDocReady();
			me._frameAction = me.domReadyFired = me.isReset = me.domReady = false;
			me._targetURI = null;
		},

		/*
		 * @private DOM Event Factory
		 */
		createEvent: document.createEvent ?
			function(eventName, eventClass, fromE, options){   //DOM2 Event interfaces
				options = options || { bubbles: true, cancelable: false };
				eventClass = eventClass || 'Event';
				var evt = document.createEvent(eventClass);
				evt.initEvent(eventName, !!Ext.value(options.bubbles, true), !!Ext.value(options.cancelable, false));
				return evt;
			} :
			function(eventName, eventClass, fromE, options){   //IE-style Events
				options = options || { type: 'on' + eventName, bubbles: true, cancelable: false };
				var evt = document.createEventObject(fromE);
				return Ext.apply(evt, options);
			},

		/*
		 * @private DOM Event Dispatch
		 */
		dispatchEvent: document.createEvent ?
			function(e, eventName, options){
				return this.dom ? !this.dom.dispatchEvent(e) : null;
			} :
			function(e, eventName, options){
				return this.dom ? this.dom.fireEvent('on' + eventName, e) : null;
			},

		/*
		 *  Dispatch a new (or copied) Generic event with the current Element as the event target
		 */
		fireDOMEvent: function(eventName, e, args){
			return this.dispatchEvent(
				this.createEvent(eventName, null, e, args),
				eventName, args
			);
		},

		/**
		 * @private execScript sandbox and messaging interface
		 */
		_renderHooks: function(){

			var me = this;
			me._windowContext = null;
			Ext.destroy(me.CSS);
			delete me.CSS;
			me._hooked = false;
			try{
				if(me.writeScript(
						'(function(){(window.hostMIF = parent.document.getElementById("' + me.id +
						'").manager)._windowContext='
						+ (Ext.isIE
						? 'window'
						: '{eval:function(s){return new Function("return ("+s+")")();}}')
						+ ';})()')){

					var w,
						al = addListener,
						p = me._frameProxy || (me._frameProxy = Ext.bind(MIF.Element.eventProxy, me)),
						doc = me.getFrameDocument();

					/*
					 * Route all desired events through the proxy for normalization
					 */
					if(doc && (w = me.getWindow())){
						al(Ext.isIE ? doc.body || doc.documentElement : w, 'focus', p);
						al(Ext.isIE ? doc.body || doc.documentElement : w, 'blur', p);
						al(w, 'resize', p);
						al(w, 'beforeunload', p);
						//al(Ext.supports.Event('scroll', doc) ? doc : w, 'scroll', p);
					}

					// doc && (this.CSS = new Ext.ux.ManagedIFrame.CSS(doc));
				}

			}catch(ex){
			}
			return (me._hooked = me.domWritable());
		},

		/**
		 * Returns the general 'DOM modification capability' (same-origin status) of the frame.
		 * @return {Boolean} accessible If True, the frame's inner DOM can be manipulated, queried, and
		 * Event Listeners set.
		 */
		domWritable: function(){
			return !!this._windowContext && !!this.getFrameDocument(); //test access
		},

		/** @private : clear all event listeners and Sandbox hooks
		 * This returns the Element to an un-managed state.
		 */
		_unHook: function(){
			var me = this;
			if(me._hooked){
				try{
					me._windowContext && (me._windowContext.hostMIF = null);
				}catch(uhex){
				}
				me._windowContext = null;
				var w,
					rl = removeListener,
					p = me._frameProxy,
					doc = me.getFrameDocument();

				if(p && doc && (w = me.getWindow())){
					rl(Ext.isIE ? doc.body || doc.documentElement : w, 'focus', p);
					rl(Ext.isIE ? doc.body || doc.documentElement : w, 'blur', p);
					rl(w, 'resize', p);
					rl(w, 'beforeunload', p);
					//rl(Ext.supports.Event('scroll', doc) ? doc : w, 'scroll', p);
				}

			}
			me._flyweights = {};
			//doc && Element.clearDocumentCache(doc.id);

			Ext.destroy(me.CSS);
			delete me.CSS;
			me._frameAction = me.domReady = me.domFired = me._hooked = false;
		},

		/**
		 * Loads the frame Element with the response from a form submit to the
		 * specified URL with the ManagedIframe.Element as it's submit target.
		 *
		 * @param {Object} submitCfg A config object containing any of the following options:
		 * <pre><code>
		 *      myIframe.submitAsTarget({
         *         form : formPanel.form,  //optional Ext.FormPanel, Ext form element, or HTMLFormElement
         *         url: &quot;your-url.php&quot;,
         *         action : (see url) ,
         *         params: {param1: &quot;foo&quot;, param2: &quot;bar&quot;}, // or URL encoded string or function that returns either
         *         callback: yourFunction,  //optional, called with the signature (event, target, evOptions)
         *         scope: yourObject, // optional scope for the callback
         *         method: 'POST', //optional form.method
         *         encoding : "multipart/form-data" //optional, default = HTMLForm default
         *      });
		 *
		 * </code></pre>
		 * @return {Ext.ux.ManagedIFrame.Element} this
		 *
		 */
		submitAsTarget: function(submitCfg){

			var opt = submitCfg || {},
				doc = this.getParentDocument(),
				form = Ext.getDom(
					opt.form ? opt.form.form || opt.form : null, false, doc) ||
					Ext.DomHelper.append(doc.body, {
						tag: 'form',
						cls: 'x-hide-offsets x-mif-form',
						encoding: 'multipart/form-data'
					}),
				formFly = Ext.fly(form, '_dynaForm'),
				formState = {
					target: form.target || '',
					method: form.method || '',
					encoding: form.encoding || '',
					enctype: form.enctype || '',
					action: form.action || ''
				},
				encoding = opt.encoding || form.encoding,
				method = opt.method || form.method || 'POST';

			formFly.set({
				target: this.dom.name,
				method: method,
				encoding: encoding,
				action: opt.url || opt.action || form.action
			});

			if(method == 'POST' || !!opt.enctype){
				formFly.set({enctype: opt.enctype || form.enctype || encoding});
			}

			var hiddens, hd, ps;
			// add any additional dynamic params
			if(opt.params && (ps = Ext.isFunction(opt.params) ? opt.params() : opt.params)){
				hiddens = [];

				Ext.iterate(ps = typeof ps == 'string' ? Ext.urlDecode(ps, false) : ps,
					function(n, v){

						Ext.fly(hd = D.createElement('input')).set({
							type: 'hidden',
							name: n,
							value: v
						});
						form.appendChild(hd);
						hiddens.push(hd);
					});
			}

			Ext.isFunction(opt.callback) &&  //use the internal event to dispatch the callback
			this.on('datasetchanged', opt.callback, opt.scope || this, {single: true, submitOptions: opt});

			this._frameAction = true;
			this._targetURI = location.href;

			form.submit();

			// remove dynamic inputs
			hiddens && Ext.each(hiddens, Ext.removeNode, Ext);

			//Remove if dynamically generated, restore state otherwise
			if(formFly.hasClass('x-mif-form')){
				formFly.remove();
			}else{
				formFly.set(formState);
			}

			formFly = null;
			return this;
		},

		/**
		 * @cfg {String} resetUrl Frame document reset string for use with the {@link #Ext.ux.ManagedIFrame.Element-reset} method.
		 * Defaults:<p> For IE on SSL domains - the current value of Ext.SSL_SECURE_URL<p> "about:blank" for all others.
		 */
		resetUrl: (function(){
			return Ext.isIE && Ext.isSecure ? Ext.SSL_SECURE_URL : 'about:blank';
		})(),

		/**
		 * Sets the embedded Iframe src property. Note: invoke the function with
		 * no arguments to refresh the iframe based on the current src value.
		 *
		 * @param {String/Function} url (Optional) A string or reference to a Function that
		 *            returns a URI string when called
		 * @param {Boolean} discardUrl (Optional) If not passed as <tt>false</tt>
		 *            the URL of this action becomes the default SRC attribute
		 *            for this iframe, and will be subsequently used in future
		 *            setSrc calls (emulates autoRefresh by calling setSrc
		 *            without params).
		 * @param {Function} callback (Optional) A callback function invoked when the
		 *            frame document has been fully loaded.
		 * @param {Object} scope (Optional) scope by which the callback function is
		 *            invoked.
		 */
		setSrc: function(url, discardUrl, callback, scope){

			var src = url || this.src || this.resetUrl;
			Ext.isFunction(callback) && this.queueCallback(callback, scope || this);
			(discardUrl !== true) && (this.src = src);
			var s = this._targetURI = (Ext.isFunction(src) ? src() || '' : src);
			try{
				this._frameAction = true; // signal listening now
				this.dom.src = s;
				Ext.isIE || this.assertOnReady();
			}catch(ex){

			}
			return this;
		},

		/**
		 * Sets the embedded Iframe location using its replace method (precluding a history update).
		 * Note: invoke the function with no arguments to refresh the iframe based on the current src value.
		 *
		 * @param {String/Function} url (Optional) A string or reference to a Function that
		 *            returns a URI string when called
		 * @param {Boolean} discardUrl (Optional) If not passed as <tt>false</tt>
		 *            the URL of this action becomes the default SRC attribute
		 *            for this iframe, and will be subsequently used in future
		 *            setSrc calls (emulates autoRefresh by calling setSrc
		 *            without params).
		 * @param {Function} callback (Optional) A callback function invoked when the
		 *            frame document has been fully loaded.
		 * @param {Object} scope (Optional) scope by which the callback function is
		 *            invoked.
		 *
		 */
		setLocation: function(url, discardUrl, callback, scope){

			var me = this,
				src = url || me.src || me.resetUrl;
			me._unHook();
			Ext.isFunction(callback) && me.queueCallback(callback, scope);
			var s = me._targetURI = (Ext.isFunction(src) ? src() || '' : src);
			if(discardUrl !== true){
				me.src = src;
			}

			try{
				me._frameAction = true; // signal listening now
				me.getWindow().location.replace(s);
				Ext.isIE || me.assertOnReady();
			}catch(ex){
			}
			return me;
		},

		/**
		 * Resets the frame to a neutral (blank document) state
		 *
		 * @param {String}
		 *            src (Optional) A specific reset string (eg. 'about:blank')
		 *            to use for resetting the frame.
		 * @param {Function}
		 *            callback (Optional) A callback function invoked when the
		 *            frame reset is complete.
		 * @param {Object}
		 *            scope (Optional) scope by which the callback function is
		 *            invoked.
		 */
		reset: function(src, callback, scope){

			var me = this,
				s = src,
				win;

			me._unHook();
			if(win = me.getWindow()){
				me.isReset = me._frameAction = true;
				Ext.isFunction(callback) && me.queueCallback(callback, scope);

				Ext.isFunction(src) && ( s = src());
				s = me._targetURI = Ext.isEmpty(s, true) ? me.resetUrl : s;
				win.location.href = s;
			}
			return me;
		},

		queueCallback: function(fn, scope){
			var me = this;
			me.callbacks = me.callbacks || [];
			me.callbacks.push(scope ? Ext.bind(fn, scope || me) : fn);
			return me;
		},

		dispatchCallbacks: function(e, target, options){
			var me = this;
			if(me.callbacks && me.callbacks.length){
				while(me.callbacks.length){
					me.callbacks.shift()(e, target, options);
				}
			}
		},

		/**
		 * @private
		 * Regular Expression filter pattern for script tag removal.
		 * @cfg {regexp} scriptRE script removal RegeXp
		 * Default: "/(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/gi"
		 */
		scriptRE: /(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)/gi,

		/**
		 * Write(replacing) string content into the IFrames document structure
		 * @param {String} content The new content
		 * @param {Boolean} loadScripts
		 * (optional) true to also render and process embedded scripts
		 * @param {Function} callback (Optional) A callback function invoked when the
		 * frame document has been written and fully loaded. @param {Object}
		 * scope (Optional) scope by which the callback function is invoked.
		 */
		update: function(content, loadScripts, callback, scope){

			var me = this;
			content = DomHelper.markup(content || '');

			content = (loadScripts !== false) ? content : content.replace(me.scriptRE, "");
			var doc;
			if((doc = me.getFrameDocument()) && !!content.length){
				me._unHook();
				me.src = null;
				Ext.isFunction(callback) && me.queueCallback(callback, scope || this);

				me._targetURI = null;
				me._frameAction = true;
				doc.open();
				doc.write(content);
				me.assertOnReady();
				doc.close();

			}else{
				Ext.callback(callback, scope || me);
			}

			return me;
		},

		/**
		 * Executes a Midas command on the current document, current selection, or the given range.
		 * @param {String} command The command string to execute in the frame's document context.
		 * @param {Booloean} userInterface (optional) True to enable user interface (if supported by the command)
		 * @param {Mixed} value (optional)
		 * @param {Boolean} validate If true, the command is validated to ensure it's invocation is permitted.
		 * @return {Boolean} indication whether command execution succeeded
		 */
		execCommand: function(command, userInterface, value, validate){

			var doc, assert;
			if((doc = this.getFrameDocument()) && !!command){
				try{
					Ext.isIE && this.focus();
					assert = validate && Ext.isFunction(doc.queryCommandEnabled)
						? doc.queryCommandEnabled(command)
						: true;

					return assert && doc.execCommand(command, !!userInterface, value);
				}catch(eex){
					return false;
				}
			}
			return false;
		},

		/**
		 * Sets the current DesignMode attribute of the Frame's document
		 * @param {Boolean/String} active True (or "on"), to enable designMode
		 *
		 */
		setDesignMode: function(active){
			var doc;
			if(doc = this.getFrameDocument()){
				doc.designMode = (/on|true/i).test(String(active)) ? 'On' : 'Off';
			}
			return this;
		},

		/**
		 * Print the contents of the Iframes (if we own the document)
		 * @return {Ext.ux.ManagedIFrame.Element} this
		 */
		print: function(){
			try{
				var win;
				if(win = this.getWindow()){
					Ext.isIE && win.focus();
					win.print();
				}
			}catch(ex){
				//<debug>
				var Err = this.statics().Error;
				Err.raise(
					{ msg: Err.message.printexception || ex.description || ex.message,
						error: ex,
						win: win
					}
				);
				//</debug>
			}
			return this;
		},

		/**
		 * Write a script block into the iframe's document
		 * @param {String} block A valid (executable) script source block.
		 * @param {object} attributes Additional Script tag attributes to apply to the script
		 * Element (for other language specs [vbscript, Javascript] etc.) <p>
		 * Note: writeScript will only work after a successful iframe.(Updater)
		 * update or after same-domain document has been hooked, otherwise an
		 * exception is raised.
		 */
		writeScript: function(block, attributes){

			attributes = Ext.apply({}, attributes || {}, {
				type: "text/javascript",
				text: block
			});

			try{
				var head, script, doc = this.getFrameDocument();
				if(doc && typeof doc.getElementsByTagName != 'undefined'){
					if(!(head = doc.getElementsByTagName("head")[0])){
						// some browsers (Webkit, Safari) do not auto-create
						// head elements during document.write
						head = doc.createElement("head");
						doc.getElementsByTagName("html")[0].appendChild(head);
					}
					if(head && (script = doc.createElement("script"))){
						for(var attrib in attributes){
							if(attributes.hasOwnProperty(attrib) && attrib in script){
								script[attrib] = attributes[attrib];
							}
						}
						return !!head.appendChild(script);
					}
				}

			}catch(ex){
			}finally{
				script = head = null;
			}
			return false;
		},

		/**
		 * eval a javascript code block(string) within the context of the
		 * Iframes' window object.
		 * @param {String} block A valid ('eval'able) script source block.
		 * @param {Boolean} useDOM  if true, inserts the function
		 * into a dynamic script tag, false does a simple eval on the function
		 * definition. (useful for debugging) <p> Note: will only work after a
		 * successful iframe.(Updater) update or after same-domain document has
		 * been hooked, otherwise an exception is raised.
		 * @return {Mixed}
		 */
		execScript: function(block, useDOM){
			var me = this;
			try{
				if(me.domWritable()){
					if(useDOM){
						me.writeScript(block);
					}else{
						return me._windowContext.eval(block);
					}
				}else{
					var Err = this.statics().Error;
					throw new Err(
						{ msg: Err.message['execscript-secure-context'],
							script: block
						}
					);
				}
			}catch(ex){
				return false;
			}
			return true;
		},

		/**
		 * Eval a function definition into the iframe window context.
		 * @param {String/Object} fn Name of the function or function map
		 * object: {name:'encodeHTML',fn:Ext.util.Format.htmlEncode}
		 * @param {Boolean} useDOM  if true, inserts the fn into a dynamic script tag,
		 * false does a simple eval on the function definition
		 * @param {Boolean} invokeIt if true, the function specified is also executed in the
		 * Window context of the frame. Function arguments are not supported.
		 * @example <pre><code> var trim = function(s){ return s.replace(/^\s+|\s+$/g,''); };
		 * iframe.loadFunction('trim');
		 * iframe.loadFunction({name:'myTrim',fn:String.prototype.trim || trim});</code></pre>
		 */
		loadFunction: function(fn, useDOM, invokeIt){
			var name = fn.name || fn,
				fnSrc = fn.fn || window[fn];

			name && fnSrc && this.execScript(name + '=' + fnSrc, useDOM); // fn.toString coercion
			invokeIt && this.execScript(name + '()'); // no args only
		},

		/**
		 * @private
		 * Poll the Iframes document structure to determine DOM ready
		 * state, and raise the 'domready' event when applicable.
		 */
		assertOnReady: function(){

			if(Ext.isGecko || this.isReset){
				return;
			}
			// initialise the counter
			var n = 0, frame = this, domReady = false,
				body, l, doc,
				max = this.domReadyRetries || 5000, //default max 5 seconds
				atTarget = false,
				startLocation = (this.getFrameDocument() || {location: {}}).location.href,
				fileSize, href,
				notDefined = /undefined|unknown/i,

				assertion = function(targetURI){ // DOM polling for IE and others
					if(this.domReady){
						return;
					}
					if(doc = this.getFrameDocument()){

						// wait for location.href transition
						// null href is a 'same-origin' document access violation,
						// this assumes the DOM is built when the browser updates it
						href = doc.location.href || '';
						atTarget = !targetURI || (href && (href != startLocation || href.indexOf(targetURI) > -1));

						/*
						 * On IE, when !(Transfer-Encoding: chunked), document.fileSize is populated when
						 * the DOM is ready
						 */
						fileSize = 0;
						try{  //IE/Webkit/Opera? will report the fileSize of the document when the DOM is ready
							fileSize = notDefined.test(typeof doc.fileSize) ? 0 : parseFloat(doc.fileSize);
						}catch(errFilesize){
						}

						domReady = (!!fileSize) || (atTarget && (body = doc.body) && !!(body.innerHTML || '').length );

						if(domReady){
							return frame.loadHandler.call(frame, { type: 'domready'});
						}
					}
					frame.loaded || (++n > max) || Ext.defer(assertion, 2, frame, slice.call(arguments, 0)); // try again
				};
			//console.log('seeking ', frame._targetURI, startLocation);
			assertion.call(frame, frame._targetURI);
		},

		/**
		 * Tries to focus the element. Any exceptions are caught and ignored.
		 * @param {Number} defer (optional) Milliseconds to defer the focus
		 * @return {App.ux.ManagedIframe.Element} this
		 */
		focus: function(defer){
			var me = this,
				w = me.getWindow();
			if(w){
				try{
					if(Number(defer)){
						Ext.defer(me.focus, defer, me, [null]);
					}else{
						w.focus();
					}
				}catch(e){
				}
			}
			w = null;
			return me;
		},

		/**
		 * Tries to blur the element. Any exceptions are caught and ignored.
		 * @return {App.ux.ManagedIframe.Element} this
		 */
		blur: function(){
			var me = this,
				w = me.getWindow();
			if(w){
				try{
					w.blur();
				}catch(e){
				}
			}
			w = null;
			return me;
		},

		/**
		 * <p>Removes this element's dom reference.  Note that event and cache removal is handled at {@link Ext#removeNode Ext.removeNode}</p>
		 */
		remove: function(){
			var me = this,
				dom = me.dom;
			if(dom){
				me.reset();
				Ext.removeNode(dom);
				delete me.dom;
			}
		},

		statics: {

			addMethods: function(o){
				Ext.apply(MIF.Element.prototype, o);
			},

			/** @private
			 * @static
			 * DOMFrameReadyHandler -- Dispatches the captured event to the target MIF.Element
			 */
			DOMFrameReadyHandler: function(e, target){
				var frame;
				try{
					frame = e.target ? e.target.manager : null;
				}catch(rhEx){        //nested (foreign) iframes will throw when accessing target
				}
				if(frame){
					frame.loadHandler.call(frame, e);
				}
			},

			/** @private
			 * @static
			 * Frame document event proxy
			 */
			eventProxy: function(e){
				if(!e) return;

				var evr,
					eventClass;

				if(!e['eventPhase'] || (e['eventPhase'] == (e['AT_TARGET'] || 2))){

					switch(e.type){
						case 'blur':
						case 'focus':
							eventClass = 'UIEvents';
						case 'resize':
							if(Ext.isIE)break;   //IE handles (blur, focus, resize) on the IFRAME itself, so
						// let's not fire them twice.
						case 'scroll':

							//relay subscribed events to the Element instance
							evr = this.dispatchEvent(
								this.createEvent(e.type, eventClass || 'HTMLEvents'),
								e.type
							);
							break;

						case 'unload':
						case 'beforeunload':
							this._unHook();  // same-domain unloads should unhook for next document rendering

					}

				}
				return evr;
			},

			Flyweight: Element.Flyweight,

			/*
			 * Returns the document context of the passed HTMLElement, window, or document object
			 * @return {HTMLDocument}
			 */
			getParentDocument: Element.getParentDocument,

			isDocumentStrict: function(doc){
				return (doc && doc.compatMode && doc.compatMode != "BackCompat");
			},

			/**
			 * Retrieves the document height
			 * @static
			 * @return {Number} documentHeight
			 */
			getDocumentHeight: function(win){
				win = win || window;
				var doc = this.getParentDocument(win);
				return Math.max(!this.isDocumentStrict(doc) ? doc.body.scrollHeight : doc.documentElement.scrollHeight, this.getViewportHeight(win));
			},

			/**
			 * Retrieves the document width
			 * @static
			 * @return {Number} documentWidth
			 */
			getDocumentWidth: function(win){
				win = win || window;
				var doc = this.getParentDocument(win);
				return Math.max(!this.isDocumentStrict(doc) ? doc.body.scrollWidth : doc.documentElement.scrollWidth, this.getViewportWidth(win));
			},

			/**
			 * Retrieves the viewport height of the window.
			 * @static
			 * @return {Number} viewportHeight
			 */
			getViewportHeight: function(win){
				return (win || window).innerHeight;
			},

			/**
			 * Retrieves the viewport width of the window.
			 * @static
			 * @return {Number} viewportWidth
			 */
			getViewportWidth: function(win){
				return (win || window).innerWidth;
			},

			/**
			 * Retrieves the viewport size of the window.
			 * @static
			 * @return {Object} object containing width and height properties
			 */
			getViewSize: function(win){
				win = win || window;
				return {
					width: this.getViewportWidth(win),
					height: this.getViewportHeight(win)
				};
			},

			/**
			 * Returns the top Element that is located at the passed coordinates
			 * @static
			 * @param {Number} x The x coordinate
			 * @param {Number} x The y coordinate
			 * @param {HTMLElement} doc The targeted document context
			 * @return {FlyWeight} The found Element
			 */
			fromPoint: function(x, y, doc){
				doc = this.getParentDocument(doc || document);
				return doc ? Ext.fly(doc.elementFromPoint(x, y), '_fromPoint') : null;
			}

		}
	});

	Ext.define('App.ux.ManagedIframe.Error', {
		extend: 'Ext.Error',
		name: 'App.ux.ManagedIframe.Error',
		statics: {
			raise: Ext.Error.raise,
			ignore: false,
			handle: function(){
				return this.ignore;
			},
			message: {
				'execscript-secure-context': 'An attempt was made at script execution within a document context with restricted access.',
				'printexception': 'An Error was encountered attempting the print the frame contents (document access is likely restricted).'
			}
		}
	});

	//Give MIFElement a static reference to the Error class
	MIF.Element.addStatics(
		{Error: App.ux.ManagedIframe.Error}
	);

	// for Gecko and any who might support it later
	if(window.addEventListener){

		window.addEventListener("DOMFrameContentLoaded", MIF.Element.DOMFrameReadyHandler, false);

		Ext.EventManager.on(window, 'beforeunload', function(){
			window.removeEventListener("DOMFrameContentLoaded", MIF.Element.DOMFrameReadyHandler, false);
		});
	}

}());

Ext.define('App.ux.form.Panel', {
	extend   : 'Ext.form.Panel',
	alias    : 'widget.mitos.form',
	bodyStyle: 'padding: 10px;',
	autoWidth: true,
	border   : false
});

Ext.define('App.ux.grid.DeleteColumn', {
	extend: 'Ext.grid.column.Action',
	xtype: 'griddeletecolumn',
	icon: 'resources/images/icons/delete.png',  // Use a URL in the icon config
	tooltip: _('delete'),
	acl: '*',
	width: 30,
	handler: function(grid, rowIndex, colIndex, item, e, record) {
		if(this.acl === false || eval(a(this.acl)) === true){
			Ext.Msg.show({
				title:_('wait'),
				msg: _('delete_record_confirmation'),
				buttons: Ext.Msg.YESNO,
				icon: Ext.Msg.QUESTION,
				fn: function(btn){
					if(btn == 'yes'){
						record.store.remove(record);
					}
				}
			});
		}else{
			app.msg(_('oops'), _('permission_denied'), true);
		}
	}
});

Ext.define('App.ux.grid.EventHistory',{
    extend: 'Ext.grid.Panel',
    alias : 'widget.mitos.eventhistorygrid',
    initComponent:function(){
        Ext.apply(this,{
            columns: [
                { header: _('date'),  dataIndex: 'date', width: 140, renderer: Ext.util.Format.dateRenderer('Y-m-d g:i:s a') },
                { header: _('user'),  dataIndex: 'user', width: 150 },
                { header: _('event'), dataIndex: 'event', flex: 1 }
            ]
        },null);

        this.callParent(arguments);
    }
});
Ext.define('App.ux.combo.ActiveFacilities', {
	extend: 'Ext.form.ComboBox',
	xtype: 'activefacilitiescombo',
	storeAutoLoad: true,
	editable: false,
	queryMode: 'local',
	valueField: 'option_value',
	displayField: 'option_name',
	emptyText: _('select'),
	initComponent: function(){
		var me = this;

		Ext.define('ActiveFacilitiesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'option_name',
					type: 'string'
				},
				{
					name: 'option_value',
					type: 'int'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getActiveFacilities'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'ActiveFacilitiesComboModel',
			autoLoad: me.storeAutoLoad
		});

		me.callParent(arguments);
	}
});
// Currently has the following issues:
// - Does not handle postEditValue
// - Fields without editors need to sync with their values in Store
// - starting to edit another record while already editing and dirty should probably prevent it
// - aggregating validation messages
// - tabIndex is not managed bc we leave elements in dom, and simply move via positioning
// - layout issues when changing sizes/width while hidden (layout bug)

/**
 * @class Ext.grid.RowEditor
 * @extends Ext.form.Panel
 *
 * Internal utility class used to provide row editing functionality. For developers, they should use
 * the RowEditing plugin to use this functionality with a grid.
 *
 * @ignore
 */
Ext.define('App.ux.grid.RowFormEditor', {
	extend: 'Ext.form.Panel',
	requires: [
		'Ext.tip.ToolTip',
		'Ext.util.HashMap',
		'Ext.util.KeyNav'
	],

	saveBtnText  : 'Update',
	cancelBtnText: 'Cancel',
	removeBtnText: 'Remove',
	errorsText: 'Errors',
	dirtyText: 'Commit Cancel Your Changes',

	lastScrollLeft: 0,
	lastScrollTop: 0,
	bodyPadding: 5,
	padding:'0 0 5 0',
	border: false,
	saveBtnEnabled:false,
	buttonAlign:'center',
	// Change the hideMode to offsets so that we get accurate measurements when
	// the roweditor is hidden for laying out things like a TriggerField.
	hideMode: 'offsets',
	errorSummary: false,

	style:'background-color:#E0E0E0',

	initComponent: function () {
		var me = this,
			form, plugin;

		me.cls = Ext.baseCSSPrefix + 'grid-row-editor grid-row-form-editor';
		me.currRowH = null;
		plugin = me.editingPlugin;
		me.items = plugin.items;
		me.fieldDefaults = plugin.fieldDefaults;

		var buttons = [{
			action: 'update',
			xtype: 'button',
			itemId: 'update',
			handler: plugin.completeEdit,
			scope: plugin,
			text: me.saveBtnText,
			disabled: !me.isValid
		},
			{
				xtype: 'button',
				itemId: 'cancel',
				handler: plugin.cancelEdit,
				scope: plugin,
				text: me.cancelBtnText
			}];
		if (plugin.enableRemove) {
			buttons.push({
				xtype: 'button',
				itemId: 'remove',
				handler: plugin.completeRemove,
				scope: plugin,
				text: me.removeBtnText
			});
		}

		me.dockedItems = [{
			xtype: 'toolbar',
			dock: 'bottom',
			ui: 'footer',
			margin: 0,
			layout:{
				pack: 'center'
			},
			cls: 'x-grid-row-editor x-panel-body',
			style:'border-top:none !important',
			defaults: {
				minWidth: Ext.panel.Panel.prototype.minButtonWidth
			},
			items: buttons
		}];

		me.callParent(arguments);
		form = me.getForm();
		me.setFields();
		form.trackResetOnLoad = true;
		me.floatingButtons = me.getDockedItems('toolbar[dock="bottom"]')[0];
	},

	onFieldValueChange: function() {
		var me = this,
			form = me.getForm(),
			valid = form.isValid(), btn;

		if (me.errorSummary && me.isVisible()) {
			me[valid ? 'hideToolTip' : 'showToolTip']();
		}

		btn = me.query('button[action="update"]')[0];
		if (btn){
			btn.setDisabled(!valid);
		}
		me.isValid = valid;
	},

	afterRender: function() {
		var me = this,
			plugin = me.editingPlugin,
			grid = plugin.grid,
			view = grid.lockable ? grid.normalGrid.view : grid.view;

		me.callParent(arguments);


		me.scrollingView = view;
		me.scrollingViewEl = view.el;
		me.mon(me.renderTo, 'scroll', me.onCtScroll, me, { buffer: 100 });

		// Prevent from bubbling click events to the grid view
		me.mon(me.el, {
			click: Ext.emptyFn,
			stopPropagation: true
		});

		me.el.swallowEvent([
			'keypress',
			'keydown'
		]);

		me.keyNav = new Ext.util.KeyNav(me.el, {
			//enter: plugin.completeEdit,
			esc: plugin.onEscKey,
			scope: plugin
		});

		me.mon(plugin.view, {
			beforerefresh: me.onBeforeViewRefresh,
			refresh: me.onViewRefresh,
			scope: me
		});
	},

	onBeforeViewRefresh: function(view) {
		var me = this,
			viewDom = view.el.dom;

		if (me.el.dom.parentNode === viewDom) {
			viewDom.removeChild(me.el.dom);
		}
	},

	onViewRefresh: function(view) {
		var me = this,
			viewDom = view.el.dom,
			context = me.context,
			idx;

		viewDom.appendChild(me.el.dom);

		// Recover our row node after a view refresh
		if (context && (idx = context.store.indexOf(context.record)) >= 0) {
			context.row = view.getNode(idx);
			me.reposition();
			if (me.tooltip && me.tooltip.isVisible()) {
				me.tooltip.setTarget(context.row);
			}
		} else {
			me.editingPlugin.cancelEdit();
		}
	},

	onCtScroll: function(e, target) {
		var me = this,
			scrollTop  = target.scrollTop,
			scrollLeft = target.scrollLeft;

		if (scrollTop !== me.lastScrollTop) {
			me.lastScrollTop = scrollTop;
			if ((me.tooltip && me.tooltip.isVisible()) || me.hiddenTip) {
				me.repositionTip();
			}
		}
		if (scrollLeft !== me.lastScrollLeft) {
			me.lastScrollLeft = scrollLeft;
			me.reposition();
		}
	},

	reposition: function (animateConfig) {

		if(this.currRowH) this.currRow.setHeight(this.currRowH);

		var me = this,
			context = me.context,
			row = context && Ext.get(context.row),
		//btns = me.getFloatingButtons(),
		//btnEl = btns.el,
			grid = me.editingPlugin.grid,
			viewEl = grid.view.el,
			scroller = grid.verticalScroller,


		// always get data from ColumnModel as its what drives
		// the GridView's sizing
			mainBodyWidth = grid.headerCt.getFullWidth(),
			scrollerWidth = grid.getWidth(),

		// use the minimum as the columns may not fill up the entire grid
		// width
			width = Math.min(mainBodyWidth, scrollerWidth),
			scrollLeft = grid.view.el.dom.scrollLeft,
		//btnWidth = btns.getWidth(),
		//left = (width - btnWidth) / 2 + scrollLeft,
			y, rowH, newHeight,

			invalidateScroller = function() {
				if (scroller) {
					scroller.invalidate();
					btnEl.scrollIntoView(viewEl, false);
				}
				if (animateConfig && animateConfig.callback) {
					animateConfig.callback.call(animateConfig.scope || me);
				}
			};

		// need to set both top/left
		if (row && Ext.isElement(row.dom)) {
			// Bring our row into view if necessary, so a row editor that's already
			// visible and animated to the row will appear smooth
			row.scrollIntoView(viewEl, false);

			// Get the y position of the row relative to its top-most static parent.
			// offsetTop will be relative to the table, and is incorrect
			// when mixed with certain grid features (e.g., grouping).
			y = row.getXY()[1] + 19;


			me.currRowH = row.getHeight();
			me.currRow = row;

			row.setHeight(me.getHeight() + 19);

			// IE doesn't set the height quite right.
			// This isn't a border-box issue, it even happens
			// in IE8 and IE7 quirks.
			// TODO: Test in IE9!
			if (Ext.isIE) {
				newHeight += 2;
			}

			if (animateConfig) {
				var animObj = {
					to: {
						y: y
					},
					duration: animateConfig.duration || 125,
					listeners: {
						afteranimate: function() {
							invalidateScroller();
							y = row.getXY()[1] + 19;
							me.el.setY(y);
						}
					}
				};
				me.animate(animObj);
			} else {
				me.el.setY(y);
				invalidateScroller();
			}
		}
		if (me.getWidth() != mainBodyWidth) {
			me.setWidth(mainBodyWidth);
		}
		//btnEl.setLeft(left);
	},

	resizeEditor:function(){

		if(this.currRowH) this.currRow.setHeight(this.currRowH);

		var me = this,
			context = me.context,
			row = context && Ext.get(context.row),
		//btns = me.getFloatingButtons(),
		//btnEl = btns.el,
			grid = me.editingPlugin.grid,
			viewEl = grid.view.el,
			scroller = grid.verticalScroller,


		// always get data from ColumnModel as its what drives
		// the GridView's sizing
			mainBodyWidth = grid.headerCt.getFullWidth(),
			scrollerWidth = grid.getWidth(),

		// use the minimum as the columns may not fill up the entire grid
		// width
			width = Math.min(mainBodyWidth, scrollerWidth),
			scrollLeft = grid.view.el.dom.scrollLeft,
		//btnWidth = btns.getWidth(),
		//left = (width - btnWidth) / 2 + scrollLeft,
			y, rowH, newHeight;


		// need to set both top/left
		if (row && Ext.isElement(row.dom)) {
			// Bring our row into view if necessary, so a row editor that's already
			// visible and animated to the row will appear smooth
			row.scrollIntoView(viewEl, false);

			// Get the y position of the row relative to its top-most static parent.
			// offsetTop will be relative to the table, and is incorrect
			// when mixed with certain grid features (e.g., grouping).
			y = row.getXY()[1] + 19;


			me.currRowH = row.getHeight();
			me.currRow = row;

			row.setHeight(me.getHeight() + 19);

			// IE doesn't set the height quite right.
			// This isn't a border-box issue, it even happens
			// in IE8 and IE7 quirks.
			// TODO: Test in IE9!
			if (Ext.isIE) {
				newHeight += 2;
			}

		}
		if (me.getWidth() != mainBodyWidth) {
			me.setWidth(mainBodyWidth);
		}
	},

	getGridStores:function(){
		var me = this,
			grids = me.query('grid'),
			stores = [];
		for(var i=0; i < grids.length; i++){
			stores.push(grids[i].store);
		}
		return stores;
	},

	syncChildStoresChanges:function(){
		var me = this,
			stores = me.getGridStores();
		for(var i=0; i < stores.length; i++){
			stores[i].sync();
		}
	},

	rejectChildStoresChanges:function(){
		var me = this,
			stores = me.getGridStores();
		for(var i=0; i < stores.length; i++){
			stores[i].rejectChanges();
		}
	},

	getEditor: function(fieldInfo) {
		var me = this;

		if (Ext.isNumber(fieldInfo)) {
			// Query only form fields. This just future-proofs us in case we add
			// other components to RowEditor later on.  Don't want to mess with
			// indices.
			return me.query('>[isFormField]')[fieldInfo];
		} else if (fieldInfo instanceof Ext.grid.column.Column) {
			return fieldInfo.getEditor();
		}
		return false;
	},

	setFields: function(column) {
		var me = this,
			form = me.getForm(),
			fields = form.getFields().items,
			containers = me.query('container');

        for(var i=0; i < fields.length; i++){
            me.mon(fields[i], 'change', me.onFieldValueChange, me);
        }
        for(var k=0; k < containers.length; k++){
            me.mon(containers[k], 'resize', me.resizeEditor, me);
        }
	},

	loadRecord: function(record) {
		var me = this,
			form = me.getForm(),
			updateBtn = me.query('button[action="update"]')[0],
			saveTxt = record.phantom ? 'Save' : 'Update';

		me.editingPlugin.fireEvent('beforerecordload', me, record);

		form.loadRecord(record);

		me.editingPlugin.fireEvent('recordload', me, record);

		// change the save btn text to update is the record is a phantom (new)
		updateBtn.setText(saveTxt);

		if(me.saveBtnEnabled) updateBtn.setDisabled(!me.saveBtnEnabled);

		if(this.errorSummary){
			if (form.isValid()) {
				me.hideToolTip();
			} else {
				me.showToolTip();
			}
		}
		// render display fields so they honor the column renderer/template
		Ext.Array.forEach(me.query('>displayfield'), function(field) {
			me.renderColumnData(field, record);
		}, me);
	},

	renderColumnData: function(field, record) {
		var me = this,
			grid = me.editingPlugin.grid,
			headerCt = grid.headerCt,
			view = grid.view,
			store = view.store,
			form = me.getForm();

		form.loadRecord(record);
	},

	beforeEdit: function() {
		var me = this;

		me.getGridStores();

		if (me.isVisible() && !me.autoCancel && me.isDirty()) {
			me.showToolTip();
			return false;
		}
	},

	/**
	 * Start editing the specified grid at the specified position.
	 * @param {Ext.data.Model} record The Store data record which backs the row to be edited.
	 * @param {Ext.data.Model} columnHeader The Column object defining the column to be edited.
	 */
	startEdit: function(record, columnHeader) {
		var me = this,
			grid = me.editingPlugin.grid,
			view = grid.getView(),
			store = grid.store,
			context = me.context = Ext.apply(me.editingPlugin.context, {
				view: grid.getView(),
				store: store
			});

//		make sure our row is selected before editing
		context.grid.getSelectionModel().select(record);

		// Reload the record data
		me.loadRecord(record);

		if (!me.isVisible()) {
			me.show();
			me.focusContextCell();
		} else {
			me.reposition({
				callback: this.focusContextCell
			});
		}
	},

	// Focus the cell on start edit based upon the current context
	focusContextCell: function() {
		var field = this.getEditor(this.context.colIdx);
		if (field && field.focus) {
			field.focus();
		}
	},

	cancelEdit: function() {
		var me = this,
			form = me.getForm();
		me.rejectChildStoresChanges();
		me.hide();
		form.clearInvalid();
		form.reset();
	},

	completeEdit: function() {
		var me = this,
			form = me.getForm();

		if (!form.isValid()) {
			return;
		}

		me.context.record.set(me.context.newValues);

		if(me.editingPlugin.autoSync){
			me.context.record.store.sync({
				callback:function(){
					me.fireEvent('sync', me, me.context);
				}
			});
		}
		me.syncChildStoresChanges();
		me.hide();
		return true;
	},

	completeRemove:function(){
		var me = this,
			form = me.getForm(),
			view = me.context.view,
			store = me.context.store,
			record = view.getSelectionModel().getLastSelected();
		if(view.panel.fireEvent('beforeremove', me, store, record)){
			Ext.Msg.show({
				title:'WAIT!!!',
				msg: 'Are you sure you want to remove this record?',
				buttons: Ext.Msg.YESNO,
				icon: Ext.Msg.QUESTION,
				scope:me,
				fn: function(btn){
					if (btn == 'yes'){
						if(record.parentNode){
							record.parentNode.removeChild(record);
						}else{
							store.remove(record);
						}
						view.panel.fireEvent('remove', me, store, record);
						me.hide();
						form.clearInvalid();
						form.reset();
						if(me.editingPlugin.autoSync){
							store.sync({
								callback:function(){
									me.fireEvent('sync', me, me.context);
								}
							});
						}
					}
				}
			});
		}
	},

	onShow: function() {
		var me = this;
		me.callParent(arguments);
		me.reposition();
	},

	onHide: function() {
		var me = this;
		me.callParent(arguments);
		me.hideToolTip();
		me.invalidateScroller();
		if (me.context) {
			me.context.view.focus();
			me.context = null;
		}
		me.currRow.setHeight(me.currRowH);
		me.currRowH = null;
	},

	isDirty: function() {
		var me = this,
			form = me.getForm();
		return form.isDirty();
	},

	getToolTip: function() {
		return this.tooltip || (this.tooltip = new Ext.tip.ToolTip({
			cls: Ext.baseCSSPrefix + 'grid-row-editor-errors',
			title: this.errorsText,
			autoHide: false,
			closable: true,
			closeAction: 'disable',
			anchor: 'left',
			anchorToTarget: false
		}));
	},

	hideToolTip: function() {
		var me = this,
			tip = me.getToolTip();
		if (tip.rendered) {
			tip.disable();
		}
		me.hiddenTip = false;
	},

	showToolTip: function() {
		var me = this,
			tip = me.getToolTip();

		tip.showAt([0, 0]);
		tip.update(me.getErrors());
		me.repositionTip();
		tip.enable();
	},

	repositionTip: function() {
		var me = this,
			tip = me.getToolTip(),
			context = me.context,
			row = Ext.get(context.row),
			viewEl = me.scrollingViewEl,
			viewHeight = viewEl.dom.clientHeight,
			viewTop = me.lastScrollTop,
			viewBottom = viewTop + viewHeight,
			rowHeight = row.getHeight(),
			rowTop = row.getOffsetsTo(me.context.view.body)[1],
			rowBottom = rowTop + rowHeight;

		if (rowBottom > viewTop && rowTop < viewBottom) {
			tip.showAt(tip.getAlignToXY(viewEl, 'tl-tr', [15, row.getOffsetsTo(viewEl)[1]]));
			me.hiddenTip = false;
		} else {
			tip.hide();
			me.hiddenTip = true;
		}
	},

	getErrors: function() {
		var me        = this,
			errors    = [],
			fields    = me.query('[isFormField]'),
			length    = fields.length,
			i;

		for (i = 0; i < length; i++) {
			errors = errors.concat(
				Ext.Array.map(fields[i].getErrors(), me.createErrorListItem)
			);
		}

		// Only complain about unsaved changes if all the fields are valid
		if (!errors.length && !me.autoCancel && me.isDirty()) {
			errors[0] = me.createErrorListItem(me.dirtyText);
		}

		return '<ul class="' + Ext.plainListCls + '">' + errors.join('') + '</ul>';
	},

	createErrorListItem: function(e) {
		return '<li class="' + Ext.baseCSSPrefix + 'grid-row-editor-errors-item">' + e + '</li>';
	},

	invalidateScroller: function() {
		var me = this,
			context = me.context,
			scroller = context.grid.verticalScroller;

		if (scroller) {
			scroller.invalidate();
		}
	}
});
Ext.define('App.ux.combo.ActiveInsurances', {
	extend: 'Ext.form.ComboBox',
	xtype: 'activeinsurancescombo',
	editable: false,
	displayField: 'option_name',
	valueField: 'option_value',
	emptyText: _('select'),
	initComponent: function(){
		var me = this;

		// *************************************************************************************
		// Structure, data for Insurance Payer Types
		// AJAX -> component_data.ejs.php
		// *************************************************************************************

		Ext.define('ActiveInsurancesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'option_name',
					type: 'string'
				},
				{
					name: 'option_value',
					type: 'string'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getActiveInsurances'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'ActiveInsurancesComboModel',
			autoLoad: true
		});

		me.callParent();
	}
});
Ext.define('App.ux.combo.ActiveProviders', {
	extend: 'Ext.form.ComboBox',
	xtype: 'activeproviderscombo',
	displayField: 'option_name',
	valueField: 'option_value',
	editable: false,
	emptyText: _('select'),
	initComponent: function(){
		var me = this;

		Ext.define('ActiveProvidersModel' + this.id, {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'id',
					type: 'int'
				},
				{
					name: 'title',
					type: 'string'
				},
				{
					name: 'fname',
					type: 'string'
				},
				{
					name: 'mname',
					type: 'string'
				},
				{
					name: 'lname',
					type: 'string'
				},
				{
					name: 'fullname',
					type: 'string',
					convert: function(v, record){
						return record.data.title + ' ' + record.data.lname + ', ' + record.data.fname + ' ' + record.data.mname;
					}
				},
				{
					name: 'option_name',
					type: 'string',
					convert: function(v, record){
						return record.data.title + ' ' + record.data.lname + ', ' + record.data.fname + ' ' + record.data.mname;
					}
				},
				{
					name: 'option_value',
					type: 'int',
					convert: function(v, record){
						return record.data.id;
					}
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'User.getActiveProviders'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'ActiveProvidersModel' + this.id,
			autoLoad: true
		});

		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Allergies',
{
	extend : 'Ext.form.ComboBox',
	alias : 'widget.mitos.allergiescombo',
	initComponent : function()
	{
		var me = this;

		Ext.define('AllergiesComboModel',
		{
			extend : 'Ext.data.Model',
			fields : [
			{
				name : 'id',
				type : 'int'
			},
			{
				name : 'allergy_name'
			},
			{
				name : 'allergy_type',
				type : 'string'
			}],
			proxy :
			{
				type : 'direct',
				api :
				{
					read : CombosData.getAllergiesByType
				}
			}
		});

		me.store = Ext.create('Ext.data.Store',
		{
			model : 'AllergiesComboModel',
			autoLoad : false
		});

		Ext.apply(this,
		{
			editable : false,
			queryMode : 'local',
			displayField : 'allergy_name',
			valueField : 'allergy_name',
			emptyText : _('select'),
			store : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.AllergiesAbdominal',{
		extend: 'Ext.form.ComboBox',
		alias: 'widget.mitos.allergiesabdominalcombo',
		initComponent: function(){
			var me = this;

			Ext.define('allergiesabdominalModel',{
				extend: 'Ext.data.Model',
				fields: [
					{
						name: 'option_name',
						type: 'string'
					},
					{
						name: 'option_value',
						type: 'string'
					}
				],
				proxy: {
					type: 'direct',
					api: {
						read: 'CombosData.getOptionsByListId'
					}
				}
			});

			Ext.apply(this,{
				editable: false,
				queryMode: 'local',
				displayField: 'option_name',
				valueField: 'option_value',
				emptyText: _('select'),
				store: Ext.create('Ext.data.Store',{
					model: 'allergiesabdominalModel',
					autoLoad: false
				})
			});
			me.callParent(arguments);
		}
	});
Ext.define('App.ux.combo.AllergiesLocation', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergieslocationcombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergieslocationModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: 'CombosData.getOptionsByListId'
				},
				extraParams: {
					list_id: 79
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergieslocationModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.AllergiesSeverity', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.allergiesseveritycombo',
	initComponent: function() {
		var me = this;

		Ext.define('allergiesseverityModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 84
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'allergiesseverityModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.AllergiesTypes', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.allergiestypescombo',
	initComponent: function(){
		var me = this;

		Ext.define('AllergiesTypesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'allergy_type', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getAllergyTypes'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'AllergiesTypesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable: false,
			//queryMode   : 'local',
			displayField: 'allergy_type',
			valueField: 'allergy_type',
			emptyText: _('select'),
			store: me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Authorizations',
{
	extend : 'Ext.form.ComboBox',
	alias : 'widget.mitos.authorizationscombo',
	initComponent : function()
	{
		var me = this;

		Ext.define('AuthorizationsModel',
		{
			extend : 'Ext.data.Model',
			fields : [
			{
				name : 'id',
				type : 'int'
			},
			{
				name : 'name',
				type : 'string'
			}],
			proxy :
			{
				type : 'direct',
				api :
				{
					read : CombosData.getAuthorizations
				}
			}
		});

		me.store = Ext.create('Ext.data.Store',
		{
			model : 'AuthorizationsModel',
			autoLoad : true
		});

		Ext.apply(this,
		{
			editable : false,
			queryMode : 'local',
			valueField : 'id',
			displayField : 'name',
			emptyText : _('select'),
			store : me.store
		}, null);

		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.BillingFacilities', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.billingfacilitiescombo',
	initComponent: function() {
		var me = this;

		Ext.define('BillingFacilitiesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'int' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: 'CombosData.getBillingFacilities'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'BillingFacilitiesComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.CalendarCategories', {
	extend      : 'Ext.form.ComboBox',
	alias       : 'widget.mitos.calcategoriescombobox',
	editable    : false,
	displayField: 'catname',
	valueField  : 'catid',
	emptyText   : _('select'),

	initComponent: function() {
		var me = this;

		Ext.define('CalendarCategoriesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'catid', type: 'int'},
				{name: 'catname', type: 'string'}
			],
			idProperty: 'catid',
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getCalendarCategories
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'CalendarCategoriesModel',
			autoLoad: true
		});


		Ext.apply(this, {
			store: me.store
		}, null);
		me.callParent();
	}
});
Ext.define('App.ux.combo.CalendarStatus', {
	extend: 'Ext.form.ComboBox',
	alias : 'widget.mitos.calstatuscombobox',
	name  : 'status',

	initComponent: function() {
		var me = this;

		Ext.define('CalendarStatusModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 30
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'CalendarStatusModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.ux.combo.CodesTypes', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.codestypescombo',
	initComponent: function(){
		var me = this;

		Ext.define('CodesTypesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getOptionsByListId'
				},
				extraParams: {
					list_id: 56
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'CodesTypesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable: false,
			queryMode: 'local',
			valueField: 'option_value',
			displayField: 'option_name',
			emptyText: _('select'),
			store: me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Combo', {
    extend: 'Ext.form.ComboBox',
    alias: 'widget.gaiaehr.combo',
    displayField: 'option_name',
    valueField: 'option_value',
    emptyText: _('select'),
    forceSelection: false,

    /**
     * List ID
     */
    list: null,
    /**
     * Auto Load Store
     */
    loadStore: false,
    /**
     * value data type
     */
    valueDataType: 'string',


    initComponent: function () {
        var me = this,
            model = me.id + 'ComboModel';

        Ext.define(model, {
            extend: 'Ext.data.Model',
            fields: [
                {
                    name: 'option_name',
                    type: 'string'
                },
                {
                    name: 'option_value',
                    type: me.valueDataType
                },
                {
                    name: 'code',
                    type: 'string'
                },
                {
                    name: 'code_type',
                    type: 'string'
                },
                {
                    name: 'color',
                    type: 'string'
                },
                {
                    name: 'extraListClass',
                    type: 'string'
                },
                {
                    name: 'bg_color',
                    type: 'string',
                    convert: function (v, record) {
                        if (record.data.code_type == 'bgcolor') {
                            var bg_color = record ? record.data.code : '#FFFFFF';
                            record.set({color: me.getContrastYIQ(bg_color), extraListClass: 'listwith'});
                            return bg_color;
                        }
                    }

                }
            ],
            proxy: {
                type: 'direct',
                api: {
                    read: 'CombosData.getOptionsByListId'
                },
                extraParams: {
                    list_id: me.list
                }
            },
            idProperty: 'option_value'
        });

        me.store = Ext.create('Ext.data.Store', {
            model: model,
            autoLoad: me.loadStore
        });

        me.listConfig = {
            itemTpl: new Ext.XTemplate(
                '<tpl if="this.hasColorBg(code_type)">' +
                '   <div class="combo-list-icon" style="background-color:{bg_color}">&#160;</div>{option_name}',
                '<tpl else>' +
                '   {option_name}',
                '</tpl>',
                {
                    hasColorBg: function (code_type) {
                        return code_type == 'bgcolor';
                    }
                }
            )
        };

        me.callParent(arguments);

        me.on('change', function (cmb, value) {
            me.setFieldBgColor(cmb, value);
        });
    },

    setFieldBgColor: function (cmb, value) {

        var me = this;

        Ext.Function.defer(function () {
            var record = cmb.findRecordByValue(value);

            if (cmb.getStore().isLoading()) {
                cmb.tries = cmb.tries ? cmb.tries + 1 : 1;
                if (cmb.tries > 2) return;

                Ext.Function.defer(function () {
                    me.setFieldBgColor(cmb, value);
                }, 1000);
            } else {
                if (record !== false && record.data.code_type == 'bgcolor') {
                    cmb.inputEl.setStyle({
                        'background-color': record.data.bg_color,
                        'background-image': 'none',
                        'color': record.data.color
                    });
                } else {
                    cmb.tries = cmb.tries ? cmb.tries + 1 : 1;
                    if (cmb.tries > 2) return;

                    Ext.Function.defer(function () {
                        me.setFieldBgColor(cmb, value);
                    }, 1000);
                }
            }
        }, 100);
    },

    getContrastYIQ: function (hexcolor) {
        if (hexcolor[0] != '#') {
            hexcolor = this.getHexColor(hexcolor);
        }
        hexcolor = hexcolor.replace('#', '');

        var r = parseInt(hexcolor.substr(0, 2), 16);
        var g = parseInt(hexcolor.substr(2, 2), 16);
        var b = parseInt(hexcolor.substr(4, 2), 16);
        var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        return (yiq >= 129) ? 'black' : 'white';
    },

    getHexColor: function (n) {
        n = n.toLowerCase();
        var nar = {
                "aliceblue": "#f0f8ff",
                "antiquewhite": "#faebd7",
                "aqua": "#00ffff",
                "aquamarine": "#7fffd4",
                "azure": "#f0ffff",
                "beige": "#f5f5dc",
                "bisque": "#ffe4c4",
                "black": "#000000",
                "blanchedalmond": "#ffebcd",
                "blue": "#0000ff",
                "blueviolet": "#8a2be2",
                "brown": "#a52a2a",
                "burlywood": "#deb887",
                "cadetblue": "#5f9ea0",
                "chartreuse": "#7fff00",
                "chocolate": "#d2691e",
                "coral": "#ff7f50",
                "cornflowerblue": "#6495ed",
                "cornsilk": "#fff8dc",
                "crimson": "#dc143c",
                "cyan": "#00ffff",
                "darkblue": "#00008b",
                "darkcyan": "#008b8b",
                "darkgoldenrod": "#b8860b",
                "darkgray": "#a9a9a9",
                "darkgrey": "#a9a9a9",
                "darkgreen": "#006400",
                "darkkhaki": "#bdb76b",
                "darkmagenta": "#8b008b",
                "darkolivegreen": "#556b2f",
                "darkorange": "#ff8c00",
                "darkorchid": "#9932cc",
                "darkred": "#8b0000",
                "darksalmon": "#e9967a",
                "darkseagreen": "#8fbc8f",
                "darkslateblue": "#483d8b",
                "darkslategray": "#2f4f4f",
                "darkslategrey": "#2f4f4f",
                "darkturquoise": "#00ced1",
                "darkviolet": "#9400d3",
                "deeppink": "#ff1493",
                "deepskyblue": "#00bfff",
                "dimgray": "#696969",
                "dimgrey": "#696969",
                "dodgerblue": "#1e90ff",
                "firebrick": "#b22222",
                "floralwhite": "#fffaf0",
                "forestgreen": "#228b22",
                "fuchsia": "#ff00ff",
                "gainsboro": "#dcdcdc",
                "ghostwhite": "#f8f8ff",
                "gold": "#ffd700",
                "goldenrod": "#daa520",
                "gray": "#808080",
                "grey": "#808080",
                "green": "#008000",
                "greenyellow": "#adff2f",
                "honeydew": "#f0fff0",
                "hotpink": "#ff69b4",
                "indianred": "#cd5c5c",
                "indigo": "#4b0082",
                "ivory": "#fffff0",
                "khaki": "#f0e68c",
                "lavender": "#e6e6fa",
                "lavenderblush": "#fff0f5",
                "lawngreen": "#7cfc00",
                "lemonchiffon": "#fffacd",
                "lightblue": "#add8e6",
                "lightcoral": "#f08080",
                "lightcyan": "#e0ffff",
                "lightgoldenrodyellow": "#fafad2",
                "lightgray": "#d3d3d3",
                "lightgrey": "#d3d3d3",
                "lightgreen": "#90ee90",
                "lightpink": "#ffb6c1",
                "lightsalmon": "#ffa07a",
                "lightseagreen": "#20b2aa",
                "lightskyblue": "#87cefa",
                "lightslategray": "#778899",
                "lightslategrey": "#778899",
                "lightsteelblue": "#b0c4de",
                "lightyellow": "#ffffe0",
                "lime": "#00ff00",
                "limegreen": "#32cd32",
                "linen": "#faf0e6",
                "magenta": "#ff00ff",
                "maroon": "#800000",
                "mediumaquamarine": "#66cdaa",
                "mediumblue": "#0000cd",
                "mediumorchid": "#ba55d3",
                "mediumpurple": "#9370d8",
                "mediumseagreen": "#3cb371",
                "mediumslateblue": "#7b68ee",
                "mediumspringgreen": "#00fa9a",
                "mediumturquoise": "#48d1cc",
                "mediumvioletred": "#c71585",
                "midnightblue": "#191970",
                "mintcream": "#f5fffa",
                "mistyrose": "#ffe4e1",
                "moccasin": "#ffe4b5",
                "navajowhite": "#ffdead",
                "navy": "#000080",
                "oldlace": "#fdf5e6",
                "olive": "#808000",
                "olivedrab": "#6b8e23",
                "orange": "#ffa500",
                "orangered": "#ff4500",
                "orchid": "#da70d6",
                "palegoldenrod": "#eee8aa",
                "palegreen": "#98fb98",
                "paleturquoise": "#afeeee",
                "palevioletred": "#d87093",
                "papayawhip": "#ffefd5",
                "peachpuff": "#ffdab9",
                "peru": "#cd853f",
                "pink": "#ffc0cb",
                "plum": "#dda0dd",
                "powderblue": "#b0e0e6",
                "purple": "#800080",
                "red": "#ff0000",
                "rosybrown": "#bc8f8f",
                "royalblue": "#4169e1",
                "saddlebrown": "#8b4513",
                "salmon": "#fa8072",
                "sandybrown": "#f4a460",
                "seagreen": "#2e8b57",
                "seashell": "#fff5ee",
                "sienna": "#a0522d",
                "silver": "#c0c0c0",
                "skyblue": "#87ceeb",
                "slateblue": "#6a5acd",
                "slategray": "#708090",
                "slategrey": "#708090",
                "snow": "#fffafa",
                "springgreen": "#00ff7f",
                "steelblue": "#4682b4",
                "tan": "#d2b48c",
                "teal": "#008080",
                "thistle": "#d8bfd8",
                "tomato": "#ff6347",
                "turquoise": "#40e0d0",
                "violet": "#ee82ee",
                "wheat": "#f5deb3",
                "white": "#ffffff",
                "whitesmoke": "#f5f5f5",
                "yellow": "#ffff00",
                "yellowgreen": "#9acd32"
            },
            r = nar[n];
        if (r === undefined) {
            return "Invalid Color Name";
        }

        return r;
    }


});
Ext.define('App.ux.combo.CVXManufacturers', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.cvxmanufacturerscombo',
	initComponent: function() {
		var me = this;

		Ext.define('CVXManufacturersComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'mvx_code', type: 'string'},
				{name: 'manufacturer', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: Immunizations.getMvx
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'CVXManufacturersComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			valueField  : 'mvx_code',
			displayField: 'manufacturer',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.CVXManufacturersForCvx', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.cvxmanufacturersforcvxcombo',

	initComponent: function(){
		var me = this;

		Ext.define('CVXManufacturersForCvxComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'mvx_code', type: 'string'},
				{name: 'manufacturer', type: 'string'}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Immunizations.getMvxForCvx'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'CVXManufacturersForCvxComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			queryMode: 'local',
			valueField: 'mvx_code',
			displayField: 'manufacturer',
			emptyText: _('select'),
			store: me.store
		});

		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.EncounterICDS', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.encountericdscombo',
	initComponent: function(){
		var me = this;

		Ext.define('EncounterICDXComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'code',
					type: 'string'
				},
				{
					name: 'code_type',
					type: 'string'
				},
				{
					name: 'short_desc',
					type: 'string'
				},
				{
					name: 'code_and_code_type',
					type: 'string',
					convert: function(v, record){
						return record.data.code_type + ':' + record.data.code;
					}
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Encounter.getEncounterDxs'
				}
			}
		});

		Ext.apply(this, {
			queryMode: 'local',
			editable: false,
			multiSelect: true,
			displayField: 'code_and_code_type',
			valueField: 'code_and_code_type',
			emptyText: _('select'),
			store: Ext.create('Ext.data.Store', {
				model: 'EncounterICDXComboModel',
				autoLoad: false
			}),
			listConfig: {
				getInnerTpl: function(){
					return '<span style="font-weight:bold">{code}</span> - {short_desc}</div>';
				}
			}
		});

		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.EncounterPriority', {
	extend: 'App.ux.combo.Combo',
	xtype: 'encounterprioritycombo',
	editable: false,
	queryMode: 'local',
	displayField: 'option_name',
	valueField: 'option_value',
	emptyText: _('priority'),
	list: 94,
	loadStore: true
});
Ext.define('App.ux.combo.Ethnicity', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.gaiaehr.ethnicitycombo',
	initComponent: function() {
		var me = this;

		Ext.define('ethnicityModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 14
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'ethnicityModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Facilities', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.facilitiescombo',
	editable: false,
	queryMode: 'local',
	valueField: 'id',
	displayField: 'name',
	emptyText: _('select'),
	initComponent: function(){
		var me = this;

		Ext.define('FacilitiesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'name', type: 'string'}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getFacilities'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'FacilitiesComboModel',
			autoLoad: true
		});

		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.FloorPlanAreas', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.floorplanareascombo',
	initComponent: function(){
		var me = this;

		Ext.define('FloorPlanAreasModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'title', type: 'string' },
				{name: 'id', type: 'int' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: CombosData.getFloorPlanAreas
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'FloorPlanAreasModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable: false,
			queryMode: 'local',
			displayField: 'title',
			valueField: 'id',
			emptyText: _('select'),
			store: me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.model.administration.FloorPlanZones', {
	extend: 'Ext.data.Model',
	table: {
		name: 'floor_plans_zones',
		comment: 'Floor Plan Zones'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Floor Plan Zones ID'
		},
		{
			name: 'floor_plan_id',
			type: 'int',
			index: true
		},
		{
			name: 'code',
			type: 'string',
			len: 40,
			index: true
		},
		{
			name: 'title',
			type: 'string',
			len: 180
		},
		{
			name: 'type',
			type: 'string',
			len: 100
		},
		{
			name: 'bg_color',
			type: 'string',
			lem: 10,
			useNull: true
		},
		{
			name: 'border_color',
			type: 'string',
			lem: 10,
			useNull: true
		},
		{
			name: 'scale',
			type: 'string',
			lem: 30,
			defaultValue: 'medium'
		},
		{
			name: 'width',
			type: 'int',
			useNull: true
		},
		{
			name: 'height',
			type: 'int',
			useNull: true
		},
		{
			name: 'x',
			type: 'int'
		},
		{
			name: 'y',
			type: 'int'
		},
		{
			name: 'show_priority_color',
			type: 'bool'
		},
		{
			name: 'show_patient_preview',
			type: 'bool'
		},
		{
			name: 'active',
			type: 'bool',
			index: true
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'FloorPlans.getFloorPlanZones',
			create: 'FloorPlans.createFloorPlanZone',
			update: 'FloorPlans.updateFloorPlanZone',
			destroy: 'FloorPlans.removeFloorPlanZone'
		}
	}
});
Ext.define('App.store.administration.FloorPlanZones', {
	extend: 'Ext.data.Store',
	model: 'App.model.administration.FloorPlanZones',
	autoSync: false,
	autoLoad: false
});
/**
 * The Ext.grid.plugin.RowEditing plugin injects editing at a row level for a Grid. When editing begins,
 * a small floating dialog will be shown for the appropriate row. Each editable column will show a field
 * for editing. There is a button to save or cancel all changes for the edit.
 *
 * The field that will be used for the editor is defined at the
 * {@link Ext.grid.column.Column#editor editor}. The editor can be a field instance or a field configuration.
 * If an editor is not specified for a particular column then that column won't be editable and the value of
 * the column will be displayed.
 *
 * The editor may be shared for each column in the grid, or a different one may be specified for each column.
 * An appropriate field type should be chosen to match the data structure that it will be editing. For example,
 * to edit a date, it would be useful to specify {@link Ext.form.field.Date} as the editor.
 *
 *     @example
 *     Ext.create('Ext.data.Store', {
 *         storeId:'simpsonsStore',
 *         fields:['name', 'email', 'phone'],
 *         data: [
 *             {"name":"Lisa", "email":"lisa@simpsons.com", "phone":"555-111-1224"},
 *             {"name":"Bart", "email":"bart@simpsons.com", "phone":"555--222-1234"},
 *             {"name":"Homer", "email":"home@simpsons.com", "phone":"555-222-1244"},
 *             {"name":"Marge", "email":"marge@simpsons.com", "phone":"555-222-1254"}
 *         ]
 *     });
 *
 *     Ext.create('Ext.grid.Panel', {
 *         title: 'Simpsons',
 *         store: Ext.data.StoreManager.lookup('simpsonsStore'),
 *         columns: [
 *             {header: 'Name',  dataIndex: 'name', editor: 'textfield'},
 *             {header: 'Email', dataIndex: 'email', flex:1,
 *                 editor: {
 *                     xtype: 'textfield',
 *                     allowBlank: false
 *                 }
 *             },
 *             {header: 'Phone', dataIndex: 'phone'}
 *         ],
 *         selType: 'rowmodel',
 *         plugins: [
 *             Ext.create('Ext.grid.plugin.RowEditing', {
 *                 clicksToEdit: 1
 *             })
 *         ],
 *         height: 200,
 *         width: 400,
 *         renderTo: Ext.getBody()
 *     });
 */
Ext.define('App.ux.grid.RowFormEditing', {
	extend: 'Ext.grid.plugin.Editing',
	alias: 'plugin.rowformediting',
	requires: [
		'App.ux.grid.RowFormEditor'
	],

	lockableScope: 'top',

	editStyle: 'row',

	enableRemove: false,
	enableAddBtn: false,
	addBtnText: 'Add',
	addBtnIconCls: null,
	toolbarDock: 'top',

	fieldDefaults: {},

	saveBtnEnabled: false,
	/**
	 * @cfg {Boolean} autoSync
	 * True to automatically Sync any pending changes during complete edit method.
	 * False to force the user to explicitly sync all pending changes. Defaults to true.
	 */
	autoSync: true,
	/**
	 * @cfg {Boolean} autoCancel
	 * True to automatically cancel any pending changes when the row editor begins editing a new row.
	 * False to force the user to explicitly cancel the pending changes. Defaults to true.
	 */
	autoCancel: true,

	/**
	 * @cfg {Number} clicksToMoveEditor
	 * The number of clicks to move the row editor to a new row while it is visible and actively editing another row.
	 * This will default to the same value as {@link Ext.grid.plugin.Editing#clicksToEdit clicksToEdit}.
	 */

	/**
	 * @cfg {Boolean} errorSummary
	 * True to show a {@link Ext.tip.ToolTip tooltip} that summarizes all validation errors present
	 * in the row editor. Set to false to prevent the tooltip from showing. Defaults to true.
	 */
	errorSummary: false,

	/**
	 * @event beforeedit
	 * Fires before row editing is triggered.
	 *
	 * @param {Ext.grid.plugin.Editing} editor
	 * @param {Object} e An edit event with the following properties:
	 *
	 * - grid - The grid this editor is on
	 * - view - The grid view
	 * - store - The grid store
	 * - record - The record being edited
	 * - row - The grid table row
	 * - column - The grid {@link Ext.grid.column.Column Column} defining the column that initiated the edit
	 * - rowIdx - The row index that is being edited
	 * - colIdx - The column index that initiated the edit
	 * - cancel - Set this to true to cancel the edit or return false from your handler.
	 */

	/**
	 * @event canceledit
	 * Fires when the user has started editing a row but then cancelled the edit
	 * @param {Object} grid The grid
	 */

	/**
	 * @event edit
	 * Fires after a row is edited. Usage example:
	 *
	 *     grid.on('edit', function(editor, e) {
     *         // commit the changes right after editing finished
     *         e.record.commit();
     *     };
	 *
	 * @param {Ext.grid.plugin.Editing} editor
	 * @param {Object} e An edit event with the following properties:
	 *
	 * - grid - The grid this editor is on
	 * - view - The grid view
	 * - store - The grid store
	 * - record - The record being edited
	 * - row - The grid table row
	 * - column - The grid {@link Ext.grid.column.Column Column} defining the column that initiated the edit
	 * - rowIdx - The row index that is being edited
	 * - colIdx - The column index that initiated the edit
	 */
	/**
	 * @event validateedit
	 * Fires after a cell is edited, but before the value is set in the record. Return false to cancel the change. The
	 * edit event object has the following properties
	 *
	 * Usage example showing how to remove the red triangle (dirty record indicator) from some records (not all). By
	 * observing the grid's validateedit event, it can be cancelled if the edit occurs on a targeted row (for example)
	 * and then setting the field's new value in the Record directly:
	 *
	 *     grid.on('validateedit', function(editor, e) {
     *       var myTargetRow = 6;
     *
     *       if (e.rowIdx == myTargetRow) {
     *         e.cancel = true;
     *         e.record.data[e.field]
     *
     * - grid - The grid this editor is on
     * - view - The grid view
     * - store - The grid store
     * - record - The record being edited
     * - row - The grid table row
     * - column - The grid {@link Ext.grid.column.Column Column} defining the column that initiated the edit
	 * - rowIdx - The row index that is being edited
	 * - colIdx - The column index that initiated the edit
	 * - cancel - Set this to true to cancel the edit or return false from your handler.
	 */

	constructor: function(){
		var me = this;
		me.callParent(arguments);

		if(!me.clicksToMoveEditor){
			me.clicksToMoveEditor = me.clicksToEdit;
		}

		me.autoCancel = !!me.autoCancel;
	},

	init: function(grid){
		var me = this,
            t;
		me.callParent(arguments);

		if(me.enableAddBtn){
			t = grid.getDockedItems('toolbar[dock="' + me.toolbarDock + '"]')[0] ||
				grid.addDocked({ xtype: 'toolbar', dock: me.toolbarDock })[0];

			t.add({
				xtype: 'button',
				text: me.addBtnText,
				iconCls: me.addBtnIconCls,
				handler: me.doAddRecord,
				scope: me
			});

		}

		me.grid.on('beforeselect', me.editHandler, me);
		me.grid.on('beforecellclick', me.editHandler, me);
		me.grid.on('beforecelldblclick', me.editHandler, me);
		me.grid.on('beforecellmousedown', me.editHandler, me);
	},

	editHandler: function(){
		return !this.editing;
	},

	doAddRecord: function(){
		var me = this,
			grid = me.grid,
			store = grid.store;

		me.cancelEdit();
		store.insert(0, {});
		me.startEdit(0, 0);

	},

	//    init: function(grid) {
	//        this.callParent([grid]);
	//    },

	/**
	 * @private
	 * AbstractComponent calls destroy on all its plugins at destroy time.
	 */
	destroy: function(){
		var me = this;
		Ext.destroy(me.editor);
		me.callParent(arguments);
	},

	/**
	 * Starts editing the specified record, using the specified Column definition to define which field is being edited.
	 * @param {Ext.data.Model} record The Store data record which backs the row to be edited.
	 * @param {Ext.data.Model} columnHeader The Column object defining the column to be edited.
	 * @return {Boolean} `true` if editing was started, `false` otherwise.
	 */
	startEdit: function(record, columnHeader){
		var me = this,
			editor = me.getEditor(),
			context;

		if(editor.beforeEdit() !== false){
			context = me.callParent(arguments);
			if(context){
				me.context = context;

				// If editing one side of a lockable grid, cancel any edit on the other side.
				if(me.lockingPartner){
					me.lockingPartner.cancelEdit();
				}
				editor.startEdit(context.record, context.column, context);
				return true;
			}
		}
		return false;
	},

	// private
	cancelEdit: function(){
		var me = this;

		if(me.editing){
			me.getEditor().cancelEdit();
			me.callParent(arguments);

			if(me.autoCancel) me.view.store.rejectChanges();

			me.fireEvent('canceledit', me.context);
			return;
		}
		// If we aren't editing, return true to allow the event to bubble
		return true;
	},

	// private
	completeEdit: function(){
		var me = this;

		if(me.editing && me.validateEdit()){
			me.editing = false;
			me.fireEvent('edit', me, me.context);
		}
	},

	completeRemove: function(){
		var me = this;

		if(me.editing){
			me.getEditor().completeRemove();
			me.fireEvent('completeremove', me, me.context);
		}

	},

	// private
	validateEdit: function(){
		var me = this,
			editor = me.editor,
			context = me.context,
			record = context.record,
			originalValues = {},
			newValues = editor.getForm().getValues();


		Ext.Object.each(newValues, function(key){
			originalValues[key] = record.get(key);
		});

		Ext.apply(context, {
			newValues: newValues,
			originalValues: originalValues
		});

		return me.fireEvent('validateedit', me, context) !== false && !context.cancel && me.getEditor().completeEdit();
	},

	// private
	getEditor: function(){
		var me = this;

		if(!me.editor){
			me.editor = me.initEditor();
		}
		return me.editor;
	},

	// @private
	initEditor: function(){
		return new App.ux.grid.RowFormEditor(this.initEditorConfig());
	},

	initEditorConfig: function(){
		var me = this,
			grid = me.grid,
			view = me.view,
			headerCt = grid.headerCt,
			btns = ['saveBtnText', 'cancelBtnText', 'errorsText', 'dirtyText'],
			b,
			bLen = btns.length,
			cfg = {
				autoCancel: me.autoCancel,
				errorSummary: me.errorSummary,
				saveBtnEnabled: me.disableValidation,
				fields: headerCt.getGridColumns(),
				hidden: true,
				view: view,
				// keep a reference..
				editingPlugin: me,
				renderTo: view.el
			},
			item;

		for(b = 0; b < bLen; b++){
			item = btns[b];

			if(Ext.isDefined(me[item])){
				cfg[item] = me[item];
			}
		}
		return cfg;
	},

	// private
	initEditTriggers: function(){
		var me = this,
			moveEditorEvent = me.clicksToMoveEditor === 1 ? 'click' : 'dblclick';

		me.callParent(arguments);

		if(me.clicksToMoveEditor !== me.clicksToEdit){
			me.mon(me.view, 'cell' + moveEditorEvent, me.moveEditorByClick, me);
		}
	},

	startEditByClick: function(){
		var me = this;
		if(!me.editing || me.clicksToMoveEditor === me.clicksToEdit){
			me.callParent(arguments);
		}
	},

	moveEditorByClick: function(){
		var me = this;
		if(me.editing){
			me.superclass.onCellClick.apply(me, arguments);
		}
	},

	onCellClick: function(view, cell, colIdx, record, row, rowIdx, e){
		var me = this;

		if(me.autoCancel){
			me.view.store.rejectChanges();
			if(me.editor) me.editor.rejectChildStoresChanges();
		}
		me.callParent(arguments);
	},

	// private
	setColumnField: function(column, field){
		var me = this;
		editor.removeField(column);
		me.callParent(arguments);
		me.getEditor().setField(column.field, column);
	}
});

Ext.define('App.ux.combo.FloorPlanZones', {
	extend: 'Ext.form.ComboBox',
	xtype: 'floorplanazonescombo',
	editable: false,
	//queryMode: 'local',
	displayField: 'title',
	valueField: 'id',
	emptyText: _('select'),
	store: Ext.create('App.store.administration.FloorPlanZones')
});
Ext.define('App.ux.combo.FollowUp', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.followupcombo',
	initComponent: function() {
		var me = this;

		Ext.define('FollowUpModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 90
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'FollowUpModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.InsurancePayerType', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.insurancepayertypecombo',
	initComponent: function() {
		var me = this;

		// *************************************************************************************
		// Structure, data for Insurance Payer Types
		// AJAX -> component_data.ejs.php
		// *************************************************************************************
		me.store = Ext.create('Ext.data.Store', {
			fields: ['id', 'name'],
			data  : [
				{"id": "1", "name": _('all')},
				{"id": "16", "name": _('other_hcfa')},
				{"id": "MB", "name": _('medicare_part_b')},
				{"id": "MC", "name": _('medicaid')},
				{"id": "CH", "name": _('champusva')},
				{"id": "CH", "name": _('champus')},
				{"id": "BL", "name": _('blue_cross_blue_shield')},
				{"id": "16", "name": _('feca')},
				{"id": "09", "name": _('self_pay')},
				{"id": "10", "name": _('central_certification')},
				{"id": "11", "name": _('other_nonfederal_programs')},
				{"id": "12", "name": _('ppo')},
				{"id": "13", "name": _('pos')},
				{"id": "14", "name": _('epo')},
				{"id": "15", "name": _('indemnity_insurance')},
				{"id": "16", "name": _('hmo')},
				{"id": "AM", "name": _('automobile_medical')},
				{"id": "CI", "name": _('commercial_insurance')},
				{"id": "DS", "name": _('disability')},
				{"id": "HM", "name": _('health_maintenance_organization')},
				{"id": "LI", "name": _('liability')},
				{"id": "LM", "name": _('liability_medical')},
				{"id": "OF", "name": _('other_federal_program')},
				{"id": "TV", "name": _('title_v')},
				{"id": "VA", "name": _('veterans_administration_plan')},
				{"id": "WC", "name": _('workers_compensation_health_plan')},
				{"id": "ZZ", "name": _('mutually_defined')}
			]
		});

		Ext.apply(this, {
			name        : 'freeb_type',
			editable    : false,
			displayField: 'name',
			valueField  : 'id',
			queryMode   : 'local',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent();
	}
});
Ext.define('App.ux.combo.LabObservations', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.labobservationscombo',
	initComponent: function() {
		var me = this;

		Ext.define('labObservationsComboModel', {
			extend: 'Ext.data.Model',
			fields: [
              		{name: 'label' },
              		{name: 'name' },
              		{name: 'unit' },
              		{name: 'range_start' },
              		{name: 'range_end' },
              		{name: 'threshold' },
              		{name: 'notes' }
			],
			proxy : {
				type  : 'direct',
				api   : {
					read: 'Services.getAllLabObservations'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'labObservationsComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			store       : me.store,
			displayField: 'label',
			valueField  : 'id',
			emptyText   : _('select_existing_observation'),
            editable    : false,
            width: 810,
			listConfig  : {
				getInnerTpl: function() {
					return '<div>' +
                        '<span style="width:200px;display:inline-block;"><span style="font-weight:bold;">' + _('Label') + ':</span> {label},</span>' +
                        '<span style="width:90px;display:inline-block;"><span style="font-weight:bold;">' + _('unit') + ':</span> {unit},</span>' +
                        '<span style="width:150px;display:inline-block;"><span style="font-weight:bold;">' + _('range_start') + ':</span> {range_start},</span>' +
                        '<span style="width:130px;display:inline-block;"><span style="font-weight:bold;">' + _('range_end') + ':</span> {range_end},</span>' +
                        '<span style="width:100px;display:inline-block;"><span style="font-weight:bold;">' + _('threshold') + ':</span> {threshold}</span>' +
                        '</div>';
				}
			}
		}, null);

		me.callParent();
	}

});
Ext.define('App.ux.combo.LabsTypes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.labstypescombo',
	initComponent: function() {
		var me = this;

		Ext.define('LabsTypesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'code_text_short' },
				{name: 'parent_name', type: 'string' },
				{name: 'loinc_name', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: Laboratories.getActiveLaboratoryTypes
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'LabsTypesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			//queryMode   : 'local',
			displayField: 'loinc_name',
			valueField  : 'loinc_name',
			emptyText   : _('select'),
			store       : me.store
		});
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Languages',
{
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.languagescombo',
	initComponent: function()
	{
		var me = this;

		Ext.define('LanguagesComboModel',
		{
			extend: 'Ext.data.Model',
			fields:
			[
				{ name: 'code', type: 'string' },
				{ name: 'description', type: 'string' }
			],
			proxy :
			{
				type: 'direct',
				api :
				{
					read: i18nRouter.getAvailableLanguages
				}
			}
		});

		me.store = Ext.create('Ext.data.Store',
		{
			model   : 'LanguagesComboModel',
			autoLoad: false
		});

		Ext.apply(this,
		{
			editable    : false,
			valueField  : 'code',
			displayField: 'description',
            emptyText   : _('select'),
			store       : me.store
		}, null);

		me.callParent();
	}
});

Ext.define('App.ux.combo.Lists', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.listscombo',
	width        : 250,
	iconCls      : 'icoListOptions',
	initComponent: function() {
		var me = this;

		Ext.define('ListComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id'},
				{name: 'title', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getLists
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'ListComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'title',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.MedicalIssues', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.medicalissuescombo',
	initComponent: function() {
		var me = this;

		Ext.define('MedicalIssuesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 75
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MedicalIssuesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Medications', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.medicationscombo',
	initComponent: function() {
		var me = this;

		Ext.define('MedicationsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: 'CombosData.getOptionsByListId'
				},
				extraParams: {
					list_id: 74
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MedicationsModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.MsgNoteType', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.msgnotetypecombo',
	initComponent: function() {
		var me = this;

		Ext.define('MsgNoteTypeModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 28
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MsgNoteTypeModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.ux.combo.MsgStatus', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.msgstatuscombo',
	initComponent: function() {
		var me = this;

		Ext.define('MsgStatusModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 45
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'MsgStatusModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.ux.combo.Occurrence', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.occurrencecombo',
	initComponent: function(){
		var me = this;

		Ext.define('OccurrenceModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getOptionsByListId'
				},
				extraParams: {
					list_id: 26
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'OccurrenceModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable: false,
			queryMode: 'local',
			displayField: 'option_name',
			valueField: 'option_value',
			emptyText: _('select'),
			store: me.store
		});
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Outcome', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.outcomecombo',
	initComponent: function() {
		var me = this;

		Ext.define('OutcomeModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 27
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'OutcomeModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Outcome2', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.outcome2combo',
	initComponent: function(){
		var me = this;

		Ext.define('Outcome2model', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getOptionsByListId'
				},
				extraParams: {
					list_id: 74
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'Outcome2model',
			autoLoad: true
		});

		Ext.apply(this, {
			editable: false,
			queryMode: 'local',
			displayField: 'option_name',
			valueField: 'option_value',
			emptyText: _('select'),
			store: me.store
		});
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.PayingEntity', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.payingentitycombo',
	initComponent: function() {
		var me = this;

		Ext.define('PayingEntityModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 54
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PayingEntityModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});

Ext.define('App.ux.combo.PaymentMethod', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.paymentmethodcombo',
	initComponent: function() {
		var me = this;

		Ext.define('PaymentMethodModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 51
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PaymentMethodModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.PaymentCategory', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.paymentcategorycombo',
	initComponent: function() {
		var me = this;

		Ext.define('PaymentCategoryModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 49
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PaymentCategoryModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Pharmacies', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.pharmaciescombo',
	initComponent: function() {
		var me = this;

		Ext.define('PharmaciesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name' },
				{name: 'option_value' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getActivePharmacies
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PharmaciesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable    : false,
			//queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.posCodes', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.poscodescombo',
	initComponent: function(){
		var me = this;

		Ext.define('PosCodesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'code',
					type: 'string'
				},
				{
					name: 'title',
					type: 'string',
					convert: function(v, record){
						return record.data.code + ' - '+ v;
					}
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getPosCodes'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'PosCodesModel',
			autoLoad: true
		});

		Ext.apply(me, {
			editable: false,
			queryMode: 'local',
			valueField: 'code',
			displayField: 'title',
			emptyText: _('select'),
			store: me.store
		});

		me.callParent();
	}
});
Ext.define('App.ux.combo.PrescriptionHowTo', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.prescriptionhowto',
	initComponent: function(){
		var me = this;

		Ext.define('PrescriptionHowTomodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getOptionsByListId'
				},
				extraParams: {
					list_id: 88
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'PrescriptionHowTomodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable: false,
			queryMode: 'local',
			displayField: 'option_name',
			valueField: 'option_value',
			emptyText: _('select'),
			store: me.store
		});

		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.PrescriptionOften', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.prescriptionoften',
	initComponent: function() {
		var me = this;

		Ext.define('PrescriptionOftenmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 86
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PrescriptionOftenmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.PrescriptionTypes', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.prescriptiontypes',
	initComponent: function(){
		var me = this;

		Ext.define('PrescriptionTypesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getOptionsByListId'
				},
				extraParams: {
					list_id: 89
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'PrescriptionTypesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable: false,
			queryMode: 'local',
			displayField: 'option_name',
			valueField: 'option_value',
			emptyText: _('select'),
			store: me.store
		});
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.PrescriptionWhen', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.prescriptionwhen',
	initComponent: function() {
		var me = this;

		Ext.define('PrescriptionWhenmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 87
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PrescriptionWhenmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.PreventiveCareTypes', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.preventivecaretypescombo',
	initComponent: function() {
		var me = this;

		Ext.define('PreventiveCareTypesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 78
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'PreventiveCareTypesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.ProceduresBodySites', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.proceduresbodysitescombo',
	initComponent: function() {
		var me = this;

		Ext.define('ProceduresBodySitesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 34
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'ProceduresBodySitesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Providers', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.mitos.providerscombo',
	editable: false,
	queryMode: 'local',
	displayField: 'name',
	valueField: 'id',
	emptyText: _('select'),

	initComponent: function(){
		var me = this;

		Ext.define('ProvidersComboBoxModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'id',
					type: 'string'
				},
				{
					name: 'name',
					type: 'string'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'User.getProviders'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'ProvidersComboBoxModel',
			autoLoad: true
		});

		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Race', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.gaiaehr.racecombo',
	initComponent: function() {
		var me = this;

		Ext.define('raceModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 59
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'raceModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Roles', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.rolescombo',
	initComponent: function() {
		var me = this;

		Ext.define('RolesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int'},
				{name: 'role_name', type: 'string'}
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getRoles
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'RolesComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'role_name',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Sex', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.gaiaehr.sexcombo',
	initComponent: function() {
		var me = this;

		Ext.define('Sexmodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 19
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'Sexmodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Surgery', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.surgerycombo',
	initComponent: function() {
		var me = this;

		Ext.define('SurgeryModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 76
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'SurgeryModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.SmokingStatus', {
	extend: 'App.ux.combo.Combo',
	alias: 'widget.mitos.smokingstatuscombo',
	list: 58,
	loadStore: true
});
Ext.define('App.ux.combo.TaxId', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.taxidcombo',
	initComponent: function() {
		var me = this;

		Ext.define('TaxIdsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_id', type: 'string' },
				{name: 'title', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getTaxIds
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'TaxIdsModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'title',
			valueField  : 'option_id',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.ux.combo.Templates', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.documentstemplatescombo',
	initComponent: function(){
		var me = this;

		Ext.define('DocumentsTemplatesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'id',
					type: 'int'
				},
				{
					name: 'title',
					type: 'string'
				},
				{
					name: 'body',
					type: 'string'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getTemplatesTypes'
				}
			}
		});

		Ext.apply(this, {
			editable: false,
			displayField: 'title',
			valueField: 'id',
			queryMode: 'local',
			emptyText: _('select'),
			store: Ext.create('Ext.data.Store', {
				model: 'DocumentsTemplatesComboModel',
				autoLoad: false
			})
		});

		me.callParent(arguments);

		me.listeners = {
			scope: me,
			beforerender:function(){
				me.getStore().load();
			}
		}
	}
});
Ext.define('App.ux.combo.Themes', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.themescombo',
	initComponent: function(){
		var me = this;

		Ext.define('ThemesComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'name', type: 'string' },
				{ name: 'value', type: 'string' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getThemes'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'ThemesComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable: false,
			valueField: 'value',
			displayField: 'name',
			emptyText: _('select'),
			store: me.store
		}, null);
		me.callParent();
	}
});
Ext.define('App.ux.combo.Time', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.timecombo',
	initComponent: function() {
		var me = this;

		Ext.define('Timemodel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 77
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'Timemodel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Titles', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.titlescombo',
	initComponent: function() {
		var me = this;

		Ext.define('TitlesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 22
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'TitlesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.TransmitMethod', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.transmitmethodcombo',
	initComponent: function() {
		var me = this;


		me.storeTrsmit = Ext.create('Ext.data.Store', {
			fields: ['id', 'name'],
			data  : [
				{"id": "1", "name": "Print"},
				{"id": "2", "name": "Email"},
				{"id": "3", "name": "Email"}
			]
		});

		Ext.apply(this, {
			name        : 'transmit_method',
			editable    : false,
			displayField: 'name',
			valueField  : 'id',
			queryMode   : 'local',
			emptyText   : _('select'),
			store       : me.storeTrsmit
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.ux.combo.Types', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.typescombobox',
	initComponent: function() {
		var me = this;

		// *************************************************************************************
		// Structure, data for Types
		// AJAX -> component_data.ejs.php
		// *************************************************************************************


		Ext.define('TypesModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 32
				}

			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'TypesModel',
			autoLoad: true
		});

		Ext.apply(this, {
			name        : 'abook_type',
			editable    : false,
			displayField: 'option_name',
			valueField  : 'option_value',
			queryMode   : 'local',
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Units', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.unitscombo',
	initComponent: function() {
		var me = this;

		Ext.define('UnitsModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 38
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'UnitsModel',
			autoLoad: true
		});

		Ext.apply(this, {
			//editable    : false,
			queryMode   : 'local',
			valueField  : 'option_value',
			displayField: 'option_name',
			//emptyText   : 'Select',
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.Users', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.userscombo',
	initComponent: function() {
		var me = this;

		Ext.define('UsersComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'id', type: 'int' },
				{name: 'name', type: 'string' }
			],
			proxy : {
				type: 'direct',
				api : {
					read: CombosData.getUsers
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'UsersComboModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			valueField  : 'id',
			displayField: 'name',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent();
	} // end initComponent
});
Ext.define('App.ux.combo.YesNoNa', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.yesnonacombo',
	initComponent: function() {
		var me = this;

		Ext.define('yesnonaModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 93
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'yesnonaModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.combo.YesNo', {
	extend       : 'Ext.form.ComboBox',
	alias        : 'widget.mitos.yesnocombo',
	initComponent: function() {
		var me = this;

		Ext.define('yesnoModel', {
			extend: 'Ext.data.Model',
			fields: [
				{name: 'option_name', type: 'string' },
				{name: 'option_value', type: 'string' }
			],
			proxy : {
				type       : 'direct',
				api        : {
					read: CombosData.getOptionsByListId
				},
				extraParams: {
					list_id: 23
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model   : 'yesnoModel',
			autoLoad: true
		});

		Ext.apply(this, {
			editable    : false,
			queryMode   : 'local',
			displayField: 'option_name',
			valueField  : 'option_value',
			emptyText   : _('select'),
			store       : me.store
		}, null);
		me.callParent(arguments);
	}
});
Ext.define('App.ux.window.Window', {
	extend       : 'Ext.window.Window',
	autoHeight   : true,
	modal        : true,
	border       : true,
	autoScroll   : true,
	resizable    : false,
	closeAction  : 'hide',
	initComponent: function() {
		this.callParent(arguments);
	},

	updateTitle: function(pageTitle, readOnly) {
		this.setTitle(pageTitle + (readOnly ? '[ Read Only ]' : ''));
	},

	setReadOnly: function() {
		var forms = this.query('form'),
			readOnly = app.patient.readOnly,
            j,
            form,
            k,
            items;
		for(j = 0; j < forms.length; j++) {
			form = forms[j], items;
			if(form.readOnly != readOnly){
				form.readOnly = readOnly;
				items = form.getForm().getFields().items;
				for(k = 0; k < items.length; k++) {
					items[k].setReadOnly(readOnly);
				}
			}
		}
		return readOnly;
	},

	setButtonsDisabled:function(buttons){
		var disable = app.patient.readOnly,
            i,
            btn;
		for(i = 0; i < buttons.length; i++) {
			btn = buttons[i];
			if(btn.disabled != disable){
				btn.disabled = disable;
				btn.setDisabled(disable)
			}
		}
	},

	checkIfCurrPatient: function() {
		return app.getCurrPatient();
	},

	patientInfoAlert: function() {
		var patient = app.getCurrPatient();

		Ext.Msg.alert(_('status'), _('patient') + ': ' + patient.name + ' (' + patient.pid + ')');
	},

	currPatientError: function() {
		Ext.Msg.show({
			title  : 'Oops! ' + _('no_patient_selected'),
			msg    : _('select_patient_patient_live_search'),
			scope  : this,
			buttons: Ext.Msg.OK,
			icon   : Ext.Msg.ERROR,
			fn     : function() {
				this.goBack();
			}
		});
	},

	getFormItems: function(formPanel, formToRender, callback) {
        var items;

		formPanel.removeAll();
		FormLayoutEngine.getFields({formToRender: formToRender}, function(provider, response) {
			items = eval(response.result);
			formPanel.add(items);
			if(typeof callback == 'function') {
				callback(formPanel, items, true);
			}
		});
	},

	boolRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		}
		return val;
	},

	alertRenderer: function(val) {
		if(val == '1' || val == true || val == 'true') {
			return '<img style="padding-left: 13px" src="resources/images/icons/no.gif" />';
		} else if(val == '0' || val == false || val == 'false') {
			return '<img style="padding-left: 13px" src="resources/images/icons/yes.gif" />';
		}
		return val;
	},

	warnRenderer:function(val, metaData, record){
        var toolTip = record.data.warningMsg ? ' data-qtip="'+record.data.warningMsg+'" ' : '';
        if(val == '1' || val == true || val == 'true') {
            return '<img src="resources/images/icons/icoImportant.png" ' + toolTip + ' />';
        }
    },

	onExpandRemoveMask: function(cmb) {
		cmb.picker.loadMask.destroy()
	},

	strToLowerUnderscores: function(str) {
		return str.toLowerCase().replace(/ /gi, "_");
	},
	getCurrPatient: function() {
		return app.getCurrPatient();
	},

	getApp: function() {
		return app.getApp();
	},

	msg: function(title, format) {
		app.msg(title, format)
	},

	passwordVerificationWin: function(callback) {
        var msg, f;
		msg = Ext.Msg.prompt(_('password_verification'), _('please_enter_your_password') + ':', function(btn, password) {
			callback(btn, password);
		});
		f = msg.textField.getInputId();
		document.getElementById(f).type = 'password';
		return msg;
	}
});

Ext.define('App.view.search.PatientSearch',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelPatientSearch',
	pageTitle : _('advance_patient_search'),
	pageLayout : 'border',
	uses : ['Ext.grid.Panel'],
	initComponent : function()
	{
		var me = this;

		me.form = Ext.create('Ext.form.FormPanel',
		{
			region : 'north',
			height : 200,
			bodyPadding : 10,
			margin : '0 0 3 0',
			buttonAlign : 'left',
			items : [
			{
				xtype : 'fieldcontainer',
				fieldLabel : _('name'),
				layout : 'hbox',
				defaults :
				{
					margin : '0 5 0 0'
				},
				items : [
				{
					xtype : 'textfield',
					emptyText : _('first_name'),
					name : 'fname'
				},
				{
					xtype : 'textfield',
					emptyText : _('middle_name'),
					name : 'mname'
				},
				{
					xtype : 'textfield',
					emptyText : _('last_name'),
					name : 'lname'
				}]
			}],

			buttons : [
			{
				text : _('search'),
				iconCls : 'save',
				handler : function()
				{
					//TODO: Finish me.
				}
			}, '-',
			{
				text : _('reset'),
				iconCls : 'save',
				tooltip : _('hide_selected_office_note'),
				handler : function()
				{
					//TODO: Finish me.
				}
			}]
		});

		me.grid = Ext.create('Ext.grid.Panel',
		{
			region : 'center',
			//store    : me.store,
			columns : [
			{
				header : 'id',
				sortable : false,
				dataIndex : 'id',
				hidden : true
			},
			{
				width : 150,
				header : _('date'),
				sortable : true,
				dataIndex : 'date',
				renderer : Ext.util.Format.dateRenderer('Y-m-d H:i:s')
			},
			{
				width : 150,
				header : _('user'),
				sortable : true,
				dataIndex : 'user'
			},
			{
				flex : 1,
				header : _('note'),
				sortable : true,
				dataIndex : 'body'
			}],
			tbar : Ext.create('Ext.PagingToolbar',
			{
				store : me.store,
				displayInfo : true,
				emptyMsg : _('no_office_notes_to_display'),
				plugins : Ext.create('Ext.ux.SlidingPager',
				{
				})
			})
		});
		// END GRID
		me.pageBody = [me.form, me.grid];
		me.callParent(arguments);
	}, // end of initComponent

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function(callback)
	{
		callback(true);
	}
});
//ens oNotesPage class
Ext.define('Modules.Module', {
	extend: 'Ext.app.Controller',
	refs: [
		{
			ref: 'viewport',
			selector: 'viewport'
		},
		{
			ref: 'mainNav',
			selector: 'treepanel[action=mainNav]'
		}
	],
	/**
	 * @param panel
	 */
	addAppPanel: function(panel){
		this.getViewport().MainPanel.add(panel);
	},

	/**
	 * @param item
	 */
	addHeaderItem: function(item){
		this.getViewport().Header.add(item);
	},

	/**
	 * @param parentId
	 * @param node
	 * @param index
	 *
	 * Desc: Method to add items to the navigation tree.
	 *
	 */
	addNavigationNodes: function(parentId, node, index){
		var parent,
            firstChildNode,
            nodes,
            i;

		if(parentId == 'root' || parentId == null){
			parent = this.getMainNav().getStore().getRootNode();
		}
		else{
			parent = this.getMainNav().getStore().getNodeById(parentId);
		}

		if(parent){
			firstChildNode = parent.findChildBy(function(node){
				return node.hasChildNodes();
			});

			if(Ext.isArray(node)){
				nodes = [];
				for(i = 0; i < node.length; i++){
					Ext.Array.push(nodes, parent.insertBefore(node[i], firstChildNode));
				}
				return nodes;
			}
			else if(index){
				return parent.insertChild(index, node);
			}else{
				return parent.insertBefore(node, firstChildNode);
			}
		}
	},

	getModuleData: function(name){
		var me = this;
		Modules.getModuleByName(name, function(provider, response){
			me.fireEvent('moduledata', response.result)
		});
	},

	updateModuleData: function(data){
		var me = this;
		Modules.updateModule(data, function(provider, response){
			me.fireEvent('moduledataupdate', response.result)
		});
	},

	addLanguages: function(languages){

	},

	insertToHead: function(link){
		Ext.getHead().appendChild(link);
	}
});

Ext.define('App.model.administration.MedicationInstruction', {
    extend: 'Ext.data.Model',
    table: {
        name: 'rxinstructions'
    },
    fields: [
        {
            name: 'id',
            type: 'int'
        },
        {
            name: 'rxcui',
            type: 'string',
            index: true
        },
        {
            name: 'occurrence',
            type: 'int',
            index: true
        },
        {
            name: 'instruction',
            type: 'string',
            len: 140
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Rxnorm.getMedicationInstructions',
            create: 'Rxnorm.addMedicationInstruction',
            update: 'Rxnorm.updateMedicationInstructions',
            destroy: 'Rxnorm.destroyMedicationInstructions'
        },
        remoteGroup: false
    }
});


Ext.define('App.model.administration.CPT', {
	extend: 'Ext.data.Model',
	table: {
		name: 'cpt_codes'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'ConceptID',
			type: 'int',
			dataType: 'bigint'
		},
		{
			name: 'code',
			type: 'string',
			len: 50
		},
		{
			name: 'code_text',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'code_text_medium',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'code_text_short',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'code_type',
			type: 'string',
			store: false
		},
		{
			name: 'isRadiology',
			type: 'bool'
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'CPT.getCPTs',
			create: 'CPT.addCPT',
			update: 'CPT.updateCPT',
			destroy: 'CPT.deleteCPT'
		},
		reader: {
			root: 'data'
		}
	}
});
Ext.define('App.ux.LiveRXNORMSearch', {
	extend: 'Ext.form.ComboBox',
	requires:[
		'App.model.administration.MedicationInstruction'
	],
	alias: 'widget.rxnormlivetsearch',
	hideLabel: true,
	displayField: 'STR',
	valueField: 'RXCUI',
	initComponent: function(){
		var me = this;

		Ext.define('liveRXNORMSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'RXCUI',
					type: 'string'
				},
				{
					name: 'CODE',
					type: 'string'
				},
				{
					name: 'NDC',
					type: 'string'
				},
				{
					name: 'STR',
					type: 'string',
					convert: function(v){
						var regex = /\(.*\) | \(.*\)|\(.*\)/g;
						return v.replace(regex, '');
					}
				},
				{
					name: 'DST',
					type: 'auto'
				},
				{
					name: 'DRT',
					type: 'auto'
				},
				{
					name: 'DDF',
					type: 'auto'
				},
				{
					name: 'DDFA',
					type: 'auto'
				},
				{
					name: 'RXN_QUANTITY',
					type: 'auto'
				},
				{
					name: 'SAB',
					type: 'auto'
				},
				{
					name: 'RXAUI',
					type: 'auto'
				},
				{
					name: 'CodeType',
					defaultValue: 'RXNORM'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Rxnorm.getRXNORMLiveSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			},
			hasMany: [
				{
					model: 'App.model.administration.MedicationInstruction',
					name: 'instructions',
					primaryKey: 'RXCUI',
					foreignKey: 'rxcui'
				}
			]
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveRXNORMSearchModel',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			emptyText: _('medication_search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 3,
            maxLength: 255,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item">{STR} ( <b>RxNorm:</b> {RXCUI} <b>NDC:</b> {NDC} )</div>';
				}
			},
			pageSize: 25,
            listeners: {
                select: function(combo, records, eOpts){
                    var medicine = records[0].data,
                        cpos = medicine.STR.indexOf("["),
                        spos = medicine.STR.indexOf("]");
                    if (cpos > -1 && spos > cpos)
                        this.setValue( medicine.STR.substr(0, cpos)+medicine.STR.substr(spos+1) );
                }
            }
		});

		me.callParent();
	}
});

Ext.define('App.store.administration.CPT', {
	extend: 'Ext.data.Store',
	model: 'App.model.administration.CPT'
});
Ext.define('App.model.miscellaneous.AddressBook', {
	extend: 'Ext.data.Model',
	table: {
		name: 'address_book',
		comment: 'Address Book'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'title',
			type: 'string',
			len: 10
		},
		{
			name: 'fname',
			type: 'string',
			len: 80,
			index: true
		},
		{
			name: 'mname',
			type: 'string',
			len: 80,
			index: true
		},
		{
			name: 'lname',
			type: 'string',
			len: 80,
			index: true
		},
		{
			name: 'email',
			type: 'string',
			len: 100,
			index: true
		},
		{
			name: 'direct_address',
			type: 'string',
			len: 150,
			index: true
		},
		{
			name: 'url',
			type: 'string',
			len: 150
		},
		{
			name: 'organization',
			type: 'string',
			len: 160
		},
		{
			name: 'street',
			type: 'string',
			len: 180
		},
		{
			name: 'street_cont',
			type: 'string',
			len: 180
		},
		{
			name: 'city',
			type: 'string',
			len: 80,
			index: true
		},
		{
			name: 'state',
			type: 'string',
			len: 100,
			index: true
		},
		{
			name: 'zip',
			type: 'string',
			len: 15,
			index: true
		},
		{
			name: 'country',
			type: 'string',
			len: 160
		},
		{
			name: 'phone',
			type: 'string',
			len: 20,
			index: true
		},
		{
			name: 'phone2',
			type: 'string',
			len: 20
		},
		{
			name: 'mobile',
			type: 'string',
			len: 20,
			comment: 'cell phone'
		},
		{
			name: 'fax',
			type: 'string',
			len: 20
		},
		{
			name: 'fullname',
			type: 'string',
			store: false,
			convert: function(v, record){
				return record.data.fname + ' ' + record.data.mname + ' ' + record.data.lname;
			}
		},
		{
			name: 'notes',
			type: 'string',
			len: 600
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'AddressBook.getContacts',
			create: 'AddressBook.addContact',
			update: 'AddressBook.updateContact',
			destroy: 'AddressBook.destroyContact'
		},
		reader: {
			totalProperty: 'totals',
			root: 'data'
		}
	}
});
Ext.define('App.model.patient.CarePlanGoal', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_care_plan_goals',
		comment: 'Patient Care Plan Goals'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'goal',
			type: 'string',
			len: 300
		},
		{
			name: 'goal_code',
			type: 'string',
			len: 20
		},
		{
			name: 'goal_code_type',
			type: 'string',
			len: 15
		},
		{
			name: 'instructions',
			type: 'string',
			len: 500
		},
		{
			name: 'plan_date',
			type: 'date',
			dateFormat: 'Y-m-d',
			dataType: 'date'
		},
		{
			name: 'created_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'CarePlanGoals.getPatientCarePlanGoals',
			create: 'CarePlanGoals.addPatientCarePlanGoal',
			update: 'CarePlanGoals.updatePatientCarePlanGoal',
			destroy: 'CarePlanGoals.destroyPatientCarePlanGoal'
		}
	}
});


Ext.define('App.model.patient.CognitiveAndFunctionalStatus', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_cognitive_functional_status',
		comment: 'Patient Cognitive Functional Status'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'category',
			type: 'string',
			len: 20
		},
		{
			name: 'category_code',
			type: 'string',
			len: 20
		},
		{
			name: 'category_code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'code',
			type: 'string',
			len: 20
		},
		{
			name: 'code_text',
			type: 'string',
			len: 300
		},
		{
			name: 'code_type',
			type: 'string',
			len: 15
		},
		{
			name: 'status',
			type: 'string',
			len: 20
		},
		{
			name: 'status_code',
			type: 'string',
			len: 40
		},
		{
			name: 'status_code_type',
			type: 'string',
			len: 15
		},
		{
			name: 'note',
			type: 'string',
			len: 500
		},
		{
			name: 'begin_date',
			type: 'date',
			dateFormat: 'Y-m-d',
			dataType: 'date'
		},
		{
			name: 'end_date',
			type: 'date',
			dateFormat: 'Y-m-d',
			dataType: 'date'
		},
		{
			name: 'created_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'CognitiveAndFunctionalStatus.getPatientCognitiveAndFunctionalStatuses',
			create: 'CognitiveAndFunctionalStatus.addPatientCognitiveAndFunctionalStatus',
			update: 'CognitiveAndFunctionalStatus.updateCognitiveAndFunctionalStatus',
			destroy: 'CognitiveAndFunctionalStatus.destroyCognitiveAndFunctionalStatus'
		}
	}
});
Ext.define('App.model.patient.SmokeStatus', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_smoke_status',
		comment: 'Patient Smoke status'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true,
			comment: 'encounter id'
		},
		{
			name: 'pid',
			type: 'int',
			index: true,
			comment: 'patient ID'
		},
		{
			name: 'status',
			type: 'string',
			len: 80
		},
		{
			name: 'status_code',
			type: 'string',
			len: 20
		},
		{
			name: 'status_code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'counseling',
			type: 'bool',
			comment: '1 if counseling received'
		},
		{
			name: 'note',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'start_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'end_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'create_uid',
			type: 'int',
			comment: 'user ID who created the record'
		},
		{
			name: 'update_uid',
			type: 'int',
			comment: 'user ID who updated the record'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'SocialHistory.getSmokeStatus',
			create: 'SocialHistory.addSmokeStatus',
			update: 'SocialHistory.updateSmokeStatus'
		}
	}
});
Ext.define('App.model.administration.ActiveProblems', {
	extend: 'Ext.data.Model',
	table: {
		name: 'activeproblems',
		comment: 'Active Problems'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Active Problems ID'
		},
		{
			name: 'code_text',
			type: 'string'
		},
		{
			name: 'code',
			type: 'string'
		}
	]

});
Ext.define('App.model.administration.Applications', {
	extend: 'Ext.data.Model',
	table: {
		name: 'applications',
		comment: 'Applications'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Applications ID'
		},
		{
			name: 'app_name',
			type: 'string',
			len: 120
		},
		{
			name: 'pvt_key',
			type: 'string',
			len: 80
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Applications.getApplications',
			create: 'Applications.addApplication',
			update: 'Applications.updateApplication',
			destroy: 'Applications.deleteApplication'
		}
	}
});
Ext.define('App.model.administration.DefaultDocuments', {
	extend: 'Ext.data.Model',
	table: {
		name: 'defaultdocuments',
		comment: 'Default Documents'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Default Documents ID'
		},
		{
			name: 'title',
			type: 'string'
		},
		{
			name: 'body',
			type: 'string'
		},
		{
			name: 'template_type',
			type: 'string'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}

	]
});
Ext.define('App.model.administration.DocumentsTemplates', {
	extend: 'Ext.data.Model',
	table: {
		name: 'documents_templates',
		comment: 'Documents Templates',
		data: 'App.data.administration.DocumentTemplates'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Documentation Templates ID'
		},
		{
			name: 'title',
			type: 'string',
			len: 50
		},
		{
			name: 'template_type',
			type: 'string',
			len: 50
		},
		{
			name: 'body',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'to be replace by created_date'
		},
		{
			name: 'created_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'updated_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'created_by_uid',
			type: 'int'
		},
		{
			name: 'updated_by_uid',
			type: 'int'
		}
	]
});
Ext.define('App.model.administration.DocumentToken', {
	extend: 'Ext.data.Model',
	table: {
		name: 'documenttoken',
		comment: 'Document Tokens'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Documentation Token ID'
		},
		{
			name: 'title',
			type: 'string'
		},
		{
			name: 'token',
			type: 'string'
		}
	]
});
Ext.define('App.model.administration.ExternalDataLoads', {
	extend: 'Ext.data.Model',
	table: {
		name: 'externaldataloads',
		comment: 'External Data Loads'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'External Data Loads ID'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'version',
			type: 'string'
		},
		{
			name: 'path',
			type: 'string'
		},
		{
			name: 'basename',
			type: 'string'
		},
		{
			name: 'codeType',
			type: 'string'
		}
	]
});
Ext.define('App.model.administration.Facility', {
	extend: 'Ext.data.Model',
	table: {
		name: 'facility',
		comment: 'Facilities'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 80
		},
		{
			name: 'name',
			type: 'string',
			len: 120,
			comment: 'Facility Name'
		},
		{
			name: 'legal_name',
			type: 'string',
			len: 180
		},
		{
			name: 'attn',
			type: 'string',
			len: 80
		},
		{
			name: 'phone',
			type: 'string',
			len: 25
		},
		{
			name: 'fax',
			type: 'string',
			len: 25
		},
		{
			name: 'address',
			type: 'string',
			len: 120
		},
		{
			name: 'address_cont',
			type: 'string',
			len: 120
		},
		{
			name: 'city',
			type: 'string',
			len: 80
		},
		{
			name: 'state',
			type: 'string',
			len: 80
		},
		{
			name: 'postal_code',
			type: 'string',
			len: 15
		},
		{
			name: 'country_code',
			type: 'string',
			len: 5
		},
		{
			name: 'service_location',
			type: 'bool'
		},
		{
			name: 'billing_location',
			type: 'bool'
		},
		{
			name: 'pos_code',
			type: 'string',
			len: 3
		},
		{
			name: 'ssn',
			type: 'string',
			len: 15
		},
		{
			name: 'ein',
			type: 'string',
			len: 15
		},
		{
			name: 'clia',
			type: 'string',
			len: 15
		},
		{
			name: 'fda',
			type: 'string',
			len: 15
		},
		{
			name: 'npi',
			type: 'string',
			len: 15
		},
		{
			name: 'lic',
			type: 'string',
			len: 15
		},
		{
			name: 'ess',
			type: 'string',
			len: 15
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Facilities.getFacilities',
			create: 'Facilities.addFacility',
			update: 'Facilities.updateFacility',
			destroy: 'Facilities.deleteFacility'
		}
	},
	reader: {
		totalProperty: 'total',
		root: 'data'
	}
});
Ext.define('App.model.administration.FacilityStructure', {
	extend: 'Ext.data.Model',
	table: {
		name: 'facility_structures',
		comment: 'Facilities Dept and Specialties'
	},
	fields: [
		{
			name: 'id',
			type: 'string'
		},
		{
			name: 'fid',
			type: 'int',
			index: true
		},
		{
			name: 'parentId',
			type: 'string',
			index: true
		},
		{
			name: 'foreign_id',
			type: 'int',
			index: true
		},
		{
			name: 'foreign_type',
			type: 'string',
			len: 1,
			index: true,
			comment: 'D = department S = specialty'
		},
		{
			name: 'active',
			type: 'bool'
		},
		{
			name: 'leaf',
			type: 'bool',
			store: false,
			convert: function(v, record){
				return record.data.foreign_type == 'S';
			}
		},
		{
			name: 'text',
			type: 'string',
			store: false
		}
	],
	idProperty: 'id',
	proxy: {
		type: 'direct',
		api: {
			read: 'Facilities.getFacilityConfigs',
			create: 'Facilities.addFacilityConfig',
			update: 'Facilities.updateFacilityConfig',
			destroy: 'Facilities.deleteFacilityConfig'
		},
		writer: {
			writeAllFields: true
		}
	}
});

Ext.define('App.model.administration.FloorPlans', {
	extend: 'Ext.data.Model',
	table: {
		name: 'floor_plans',
		comment: 'Floor Plans',
		data: 'App.data.administration.FloorPlans'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Floor Plans ID'
		},
		{
			name: 'title',
			type: 'string',
			len: 180,
			comment: 'Floor Title'
		},
		{
			name: 'facility_id',
			type: 'int',
			comment: 'facility ID',
			index: true
		},
		{
			name: 'active',
			type: 'bool',
			comment: 'Active Floor Plan?',
			index: true
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'FloorPlans.getFloorPlans',
			create: 'FloorPlans.createFloorPlan',
			update: 'FloorPlans.updateFloorPlan',
			destroy: 'FloorPlans.removeFloorPlan'
		}
	}
});
Ext.define('App.model.administration.FormListOptions', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Form List Options ID'
		},
		{
			name: 'option_name',
			type: 'string'
		},
		{
			name: 'option_value',
			type: 'string'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'CombosData.getOptionsByListId'
		}
	}
});
Ext.define('App.model.administration.FormsList', {
	extend: 'Ext.data.Model',
	table: {
		name: 'forms_layout',
		comment: 'Form List'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'name',
			type: 'string',
			len: 80
		},
		{
			name: 'form_data',
			type: 'string',
			len: 80
		},
		{
			name: 'model',
			type: 'string',
			len: 80
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'FormLayoutBuilder.getForms'
		}
	}
});
Ext.define('App.model.administration.Globals', {
	extend: 'Ext.data.Model',
	table: {
		name: 'globals',
		comment: 'Global Settings'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'gl_name',
			type: 'string',
			comment: 'Global Setting Unique Name or Key'
		},
		{
			name: 'gl_value',
			type: 'string',
			comment: 'Global Setting Value'
		},
		{
			name: 'gl_category',
			type: 'string',
			comment: 'Category'
		},
		{
			name: 'gl_index',
			type: 'int',
			comment: 'Global Setting Index'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Globals.getGlobals',
			update: 'Globals.updateGlobals'
		},
		remoteGroup: false
	}
});
Ext.define('App.model.administration.HeadersAndFooters', {
    extend: 'Ext.data.Model',
    table: {
        name: 'headersandfooters',
        comment: 'Headers And Footers'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Headers and Footers ID'
        },
        {
            name: 'title',
            type: 'string'
        },
        {
            name: 'template_type',
            type: 'string'
        },
        {
            name: 'body',
            type: 'string'
        },
        {
            name: 'date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        }

    ]
});
Ext.define('App.model.administration.ImmunizationRelations', {
    extend: 'Ext.data.Model',
    table: {
        name: 'immunizationrelations',
        comment: 'Immunization Relations'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Immunization Relations ID'
        },
        {
            name: 'immunization_id',
            type: 'int'
        },
        {
            name: 'foreign_id',
            type: 'int'
        },
        {
            name: 'code'
        },
        {
            name: 'code_text',
            type: 'string'
        },
        {
            name: 'code_type'
        }

    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'PreventiveCare.getRelations',
            create: 'PreventiveCare.addRelations',
            destroy: 'PreventiveCare.removeRelations'
        },
        writer: {
            writeAllFields: true
        }
    }
});
Ext.define('App.model.administration.InsuranceCompany', {
	extend: 'Ext.data.Model',
	table: {
		name: 'insurance_companies',
		comment: 'Insurance Companies'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 80,
			index: true,
			comment: 'use to reference the insurance to another software'
		},
		{
			name: 'name',
			type: 'string',
			len: 120
		},
		{
			name: 'attn',
			type: 'string',
			len: 120
		},
		{
			name: 'address1',
			type: 'string',
			len: 100
		},
		{
			name: 'address2',
			type: 'string',
			len: 100
		},
		{
			name: 'city',
			type: 'string',
			len: 80
		},
		{
			name: 'state',
			type: 'string',
			len: 80
		},
		{
			name: 'zip_code',
			type: 'string',
			len: 15
		},
		{
			name: 'country',
			type: 'string',
			len: 80
		},
		{
			name: 'phone1',
			type: 'string',
			len: 20
		},
		{
			name: 'phone2',
			type: 'string',
			len: 20
		},
		{
			name: 'fax',
			type: 'string',
			len: 20
		},
		{
			name: 'dx_type',
			type: 'string',
			len: 5
		},
		{
			name: 'address_full',
			type: 'string',
			store: false,
			convert: function(v, record){
				return record.data.address1 + ' ' +  record.data.address2 + ' ' +  record.data.city + ' ' +  record.data.state + ', ' +  record.data.zip_code;
			}
		},
		{
			name: 'combo_text',
			type: 'string',
			store: false,
			convert: function(v, record){
				return record.data.id + ': ' + (record.data.name ? record.data.name : ' * ' ) + ' ' + (!record.data.active ? ('(' +  _('inactive') + ')') : '') ;
			}
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Insurance.getInsuranceCompanies',
			create: 'Insurance.addInsuranceCompany',
			update: 'Insurance.updateInsuranceCompany'
		},
		reader: {
			root: 'data'
		}
	}
});
Ext.define('App.model.administration.LabObservations', {
	extend: 'Ext.data.Model',
	table: {
		name: 'labs_panels',
		comment: 'Laboratory Observations'
	},
	fields: [
		{name: 'id', type: 'string', comment: 'LOINC'},
		{name: 'code_text_short', type: 'string' },
		{name: 'parent_id', type: 'int', dataType: 'bigint' },
		{name: 'parent_loinc', type: 'string', dataType: 'text' },
		{name: 'parent_name', type: 'string', dataType: 'text'  },
		{name: 'sequence', type: 'string', dataType: 'text' },
		{name: 'loinc_number', type: 'string', dataType: 'text' },
		{name: 'loinc_name', type: 'string', dataType: 'text' },
		{name: 'default_unit', type: 'string' },
		{name: 'range_start', type: 'string' },
		{name: 'range_end', type: 'string' },
		{name: 'required_in_panel', type: 'string', dataType: 'text' },
		{name: 'description', type: 'string', dataType: 'text' },
		{name: 'active', type: 'bool' }
	]
});
Ext.define('App.model.administration.Laboratories', {
	extend: 'Ext.data.Model',
	table: {
		name: 'laboratories',
		comment: 'Laboratories Grid'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Laboratory ID'
		},
		{
			name: 'name',
			type: 'string'
		},
		{
			name: 'transmit_method',
			type: 'string'
		},
		{
			name: 'email',
			type: 'string'
		},
		{
			name: 'address_id',
			type: 'int'
		},
		{
			name: 'line1',
			type: 'string',
			store: false
		},
		{
			name: 'line2',
			type: 'string',
			store: false
		},
		{
			name: 'city',
			type: 'string',
			store: false
		},
		{
			name: 'state',
			type: 'string',
			store: false
		},
		{
			name: 'zip',
			type: 'string',
			store: false
		},
		{
			name: 'plus_four',
			type: 'string',
			store: false
		},
		{
			name: 'country',
			type: 'string',
			store: false
		},
		{
			name: 'address_full',
			type: 'string',
			store: false
		},
		{
			name: 'phone_id',
			type: 'int'
		},
		{
			name: 'phone_country_code',
			type: 'string',
			store: false
		},
		{
			name: 'phone_area_code',
			type: 'string',
			store: false
		},
		{
			name: 'phone_prefix',
			type: 'string',
			store: false
		},
		{
			name: 'phone_number',
			type: 'string',
			store: false
		},
		{
			name: 'phone_full',
			type: 'string',
			store: false
		},
		{
			name: 'fax_id',
			type: 'int'
		},
		{
			name: 'fax_country_code',
			type: 'string',
			store: false
		},
		{
			name: 'fax_area_code',
			type: 'string',
			store: false
		},
		{
			name: 'fax_prefix',
			type: 'string',
			store: false
		},
		{
			name: 'fax_number',
			type: 'string',
			store: false
		},
		{
			name: 'fax_full',
			type: 'string',
			store: false
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Practice.getLaboratories',
			create: 'Practice.addLaboratory',
			update: 'Practice.updateLaboratory'
		}
	}
});
Ext.define('App.model.administration.LayoutTree', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'string'
		},
		{
			name: 'parentId',
			type: 'string'
		},
		{
			name: 'text',
			type: 'string'
		},
		{
			name: 'index',
			type: 'int',
			mapping: 'x_index'
		},
		{
			name: 'parentId',
			type: 'string'
		},
		{
			name: 'text',
			type: 'string'
		},
		{
			name: 'index',
			type: 'int'
		},
		{
			name: 'xtype',
			type: 'string'
		},
		{
			name: 'form_id',
			type: 'int'
		},
		{
			name: 'title',
			type: 'string'
		},
		{
			name: 'fieldLabel',
			type: 'string'
		},
		{
			name: 'emptyText',
			type: 'string'
		},
		{
			name: 'labelWidth',
			type: 'string'
		},
		{
			name: 'hideLabel',
			type: 'bool',
			useNull: true,
			defaultValue: null
		},
		{
			name: 'layout',
			type: 'string'
		},
		{
			name: 'width',
			type: 'string'
		},
		{
			name: 'height',
			type: 'string'
		},
		{
			name: 'anchor',
			type: 'string'
		},
		{
			name: 'margin',
			type: 'string'
		},
		{
			name: 'flex',
			type: 'string'
		},
		{
			name: 'collapsible',
			type: 'bool',
			useNull: true,
			defaultValue: null
		},
		{
			name: 'checkboxToggle',
			type: 'bool',
			useNull: true,
			defaultValue: null
		},
		{
			name: 'collapsed',
			type: 'bool',
			useNull: true,
			defaultValue: null
		},
		{
			name: 'inputValue',
			type: 'string'
		},
		{
			name: 'allowBlank',
			type: 'string'
		},
		{
			name: 'value',
			type: 'string'
		},
		{
			name: 'minLength',
			type: 'string'
		},
		{
			name: 'maxLength',
			type: 'string'
		},
		{
			name: 'maxValue',
			type: 'string'
		},
		{
			name: 'minValue',
			type: 'string'
		},
		{
			name: 'boxLabel',
			type: 'string'
		},
		{
			name: 'grow',
			type: 'bool',
			useNull: true,
			defaultValue: null
		},
		{
			name: 'growMin',
			type: 'string'
		},

		{
			name: 'growMax',
			type: 'string'
		},
		{
			name: 'increment',
			type: 'string'
		},
		{
			name: 'code',
			type: 'string'
		},
		{
			name: 'name',
			type: 'string'
		},
		{
			name: 'list_id',
			type: 'string'
		},
		{
			name: 'itemId',
			type: 'string'
		},
		{
			name: 'action',
			type: 'string'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'FormLayoutBuilder.getFormFieldsTree',
			create: 'FormLayoutBuilder.createFormField',
			update: 'FormLayoutBuilder.updateFormField',
			destroy: 'FormLayoutBuilder.removeFormField'
		},
		writer: {
			writeAllFields: true
		}
	}
});
Ext.define('App.model.administration.ListOptions', {
    extend: 'Ext.data.Model',
    table: {
        name: 'combo_lists_options',
        comment: 'Combo List Options'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'List Options ID'
        },
        {
            name: 'list_id',
            type: 'int',
	        index: true,
            comment: 'List ID'
        },
        {
            name: 'option_value',
            type: 'string',
            index: true,
            comment: 'Value'
        },
        {
            name: 'option_name',
            type: 'string',
            comment: 'Name'
        },
        {
            name: 'code',
            type: 'string',
            len: 15,
            index: true,
            comment: 'value code'
        },
        {
            name: 'code_type',
            type: 'string',
            len: 10,
            comment: 'CPT4 LOINC SNOMEDCT ICD9 ICD10 RXNORM'
        },
        {
            name: 'seq',
            type: 'int',
            comment: 'Sequence'
        },
        {
            name: 'notes',
            type: 'string',
            comment: 'Notes'
        },
        {
            name: 'active',
            type: 'bool',
            comment: 'Active?'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Lists.getOptions',
            create: 'Lists.addOption',
            update: 'Lists.updateOption'
        }
    }
});
Ext.define('App.model.administration.Lists', {
    extend: 'Ext.data.Model',
    table: {
        name: 'combo_lists',
        comment: 'Combo List'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'List Options ID'
        },
        {
            name: 'title',
            type: 'string',
            comment: 'Title of the combo'
        },
        {
            name: 'active',
            type: 'bool',
            comment: 'Active?'
        },
        {
            name: 'in_use',
            type: 'bool',
            persist: false
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Lists.getLists',
            create: 'Lists.addList',
            update: 'Lists.updateList',
            destroy: 'Lists.deleteList'
        }
    }
});
Ext.define('App.model.administration.AuditLog', {
	extend: 'Ext.data.Model',
	table: {
		name: 'audit_log',
		comment: 'Audit Logs'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Audit Log ID'
		},
		{
			name: 'eid',
			type: 'int',
			comment: 'Encounter ID',
			index: true
		},
		{
			name: 'pid',
			type: 'int',
			comment: 'Patient ID',
			index: true
		},
		{
			name: 'uid',
			type: 'int',
			comment: 'User ID',
			index: true
		},
		{
			name: 'fid',
			type: 'int',
			comment: 'Facility ID',
			index: true
		},
		{
			name: 'event',
			type: 'string',
			len: 200,
			comment: 'Event description'
		},
		{
			name: 'user_title',
			type: 'string',
			store: false
		},
		{
			name: 'user_fname',
			type: 'string',
			store: false
		},
		{
			name: 'user_mname',
			type: 'string',
			store: false
		},
		{
			name: 'user_lname',
			type: 'string',
			store: false
		},
		{
			name: 'patient_title',
			type: 'string',
			store: false
		},
		{
			name: 'patient_fname',
			type: 'string',
			store: false
		},
		{
			name: 'patient_mname',
			type: 'string',
			store: false
		},
		{
			name: 'patient_lname',
			type: 'string',
			store: false
		},
		{
			name: 'user_name',
			type: 'string',
			store: false,
			convert: function(v, record){
				var str = '';
				if(record.data.user_title) str += record.data.user_title + ' ';
				if(record.data.user_fname) str += record.data.user_fname + ' ';
				if(record.data.user_mname) str += record.data.user_mname + ' ';
				if(record.data.user_lname) str += record.data.user_lname;
				return str;
			}
		},
		{
			name: 'patient_name',
			type: 'string',
			store: false,
			convert: function(v, record){
				var str = '';
				if(record.data.patient_title) str += record.data.patient_title + ' ';
				if(record.data.patient_fname) str += record.data.patient_fname + ' ';
				if(record.data.patient_mname) str += record.data.patient_mname + ' ';
				if(record.data.patient_lname) str += record.data.patient_lname;
				return str;
			}
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'Date of the event'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'AuditLog.getLogs',
			create: 'AuditLog.setLog',
			update: 'AuditLog.setLog'
		},
		reader: {
			totalProperty: 'totals',
			root: 'rows'
		}
	}
});
Ext.define('App.model.administration.Modules', {
	extend: 'Ext.data.Model',
	table: {
		name: 'modules',
		comment: 'Modules'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'title',
			type: 'string',
			len: 80
		},
		{
			name: 'name',
			type: 'string',
			len: 100
		},
		{
			name: 'description',
			type: 'string'
		},
		{
			name: 'enable',
			type: 'bool'
		},
		{
			name: 'installed_version',
			type: 'string',
			len: 20
		},
		{
			name: 'licensekey',
			type: 'string'
		},
		{
			name: 'localkey',
			type: 'string'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Modules.getActiveModules',
			update: 'Modules.updateModule'
		},
		writer: {
			writeAllFields: true
		}
	}
});
Ext.define('App.model.administration.Medications', {
    extend: 'Ext.data.Model',
    fields: [
        {
            name: 'RXCUI',
            type: 'auto'
        },
        {
            name: 'CODE',
            type: 'auto'
        },
        {
            name: 'STR',
            type: 'auto'
        },
        {
            name: 'DST',
            type: 'auto'
        },
        {
            name: 'DRT',
            type: 'auto'
        },
        {
            name: 'DDF',
            type: 'auto'
        },
        {
            name: 'DDFA',
            type: 'auto'
        },
        {
            name: 'RXN_QUANTITY',
            type: 'auto'
        },
        {
            name: 'SAB',
            type: 'auto'
        },
        {
            name: 'RXAUI',
            type: 'auto'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Rxnorm.getRXNORMList'
        },
        reader: {
            totalProperty: 'totals',
            root: 'data'
        },
        filterParam: 'query',
        encodeFilters: function (filters) {
            return filters[0].value;
        }
    }
});
Ext.define('App.model.administration.ParentFields', {
    extend: 'Ext.data.Model',
    table: {
        name: 'parentfields',
        comment: 'Parent Fields'
    },
    fields: [
        {
            name: 'name',
            type: 'string'
        },
        {
            name: 'value',
            type: 'string'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'FormLayoutBuilder.getParentFields'
        }
    }
});
Ext.define('App.model.administration.Pharmacies', {
    extend: 'Ext.data.Model',
    table: {
        name: 'pharmacies',
        comment: 'Pharmacies'
    },
    fields: [
        {
            name: 'id',
            type: 'int'
        },
        {
            name: 'name',
            type: 'string'
        },
        {
            name: 'transmit_method',
            type: 'string'
        },
        {
            name: 'email',
            type: 'string'
        },
        {
            name: 'address_id',
            type: 'int'
        },
        {
            name: 'line1',
            type: 'string',
            store: false
        },
        {
            name: 'line2',
            type: 'string',
            store: false
        },
        {
            name: 'city',
            type: 'string',
            store: false
        },
        {
            name: 'state',
            type: 'string',
            store: false
        },
        {
            name: 'zip',
            type: 'string',
            store: false
        },
        {
            name: 'plus_four',
            type: 'string',
            store: false
        },
        {
            name: 'country',
            type: 'string',
            store: false
        },
        {
            name: 'address_full',
            type: 'string',
            store: false
        },
        {
            name: 'phone_id',
            type: 'int'
        },
        {
            name: 'phone_country_code',
            type: 'string',
            store: false
        },
        {
            name: 'phone_area_code',
            type: 'string',
            store: false
        },
        {
            name: 'phone_prefix',
            type: 'string',
            store: false
        },
        {
            name: 'phone_number',
            type: 'string',
            store: false
        },
        {
            name: 'phone_full',
            type: 'string',
            store: false
        },
        {
            name: 'fax_id',
            type: 'int'
        },
        {
            name: 'fax_country_code',
            type: 'string',
            store: false
        },
        {
            name: 'fax_area_code',
            type: 'string',
            store: false
        },
        {
            name: 'fax_prefix',
            type: 'string',
            store: false
        },
        {
            name: 'fax_number',
            type: 'string',
            store: false
        },
        {
            name: 'fax_full',
            type: 'string',
            store: false
        },
        {
            name: 'active',
            type: 'bool'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Practice.getPharmacies',
            create: 'Practice.addPharmacy',
            update: 'Practice.updatePharmacy'
        }
    }
});
Ext.define('App.model.administration.PreventiveCare', {
    extend: 'Ext.data.Model',
    table: {
        name: 'preventivecare',
        comment: 'Preventive Care'
    },
    fields: [
        {name: 'id', type: 'int'},
        {name: 'pid', type: 'int'},
        {name: 'preventive_care_id', type: 'int'},
        {name: 'uid', type: 'int'},
        {name: 'description', type: 'string'},
        {name: 'age_start', type: 'string'},
        {name: 'age_end', type: 'string'},
        {name: 'sex', type: 'string'},
        {name: 'pregnant', type: 'bool'},
        {name: 'frequency', type: 'string'},
        {name: 'category_id', type: 'string'},
        {name: 'code', type: 'string'},
        {name: 'coding_system', type: 'string'},
        {name: 'dismiss', type: 'bool'},
        {name: 'frequency_type', type: 'string'},
        {name: 'reason', type: 'string'},
        {name: 'times_to_perform', type: 'string'},
        {name: 'doc_url1', type: 'string'},
        {name: 'doc_url2', type: 'string'},
        {name: 'doc_url3', type: 'string'},
        {name: 'active', type: 'bool'}
    ]

});
Ext.define('App.model.administration.PreventiveCareActiveProblems', {
	extend: 'Ext.data.Model',
	table: {
		name: 'preventivecareactiveproblems',
		comment: 'Preventive Care Active Problems'
	},
	fields: [
		{name: 'guideline_id', type: 'int'},
		{name: 'code', type: 'string'},
		{name: 'code_text', type: 'string'}
	]

});
Ext.define('App.model.administration.PreventiveCareLabs', {
	extend: 'Ext.data.Model',
	table: {
		name: 'preventivecarelabs',
		comment: 'Preventive Care Labs'
	},
	fields: [
		{name: 'id', type: 'int'},
		{name: 'value_name', type: 'string'},
		{name: 'greater_than', type: 'string'},
		{name: 'less_than', type: 'string'},
		{name: 'equal_to', type: 'string'},
		{name: 'code', type: 'string'},
		{name: 'preventive_care_id', type: 'string'}
	]

});
Ext.define('App.model.administration.PreventiveCareMedications', {
	extend: 'Ext.data.Model',
	table: {
		name: 'preventivecaremedications',
		comment: 'Preventive Care Medications'
	},
	fields: [
		{name: 'guideline_id', type: 'int'},
		{name: 'code', type: 'string'},
		{name: 'code_text', type: 'string'}
	]

});
Ext.define('App.model.administration.ProviderCredentialization', {
    extend: 'Ext.data.Model',
    table: {
        name: 'provider_credentializations'
    },
    fields: [
        {
            name: 'id',
            type: 'int'
        },
        {
            name: 'provider_id',
            type: 'int',
            index: true
        },
        {
            name: 'insurance_company_id',
            type: 'int',
            index: true
        },
        {
            name: 'insurance_company_name',
            type: 'string',
            store: false
        },
        {
            name: 'start_date',
            type: 'date',
            dataType: 'date',
            dateFormat: 'Y-m-d',
            index: true
        },
        {
            name: 'end_date',
            type: 'date',
            dataType: 'date',
            dateFormat: 'Y-m-d',
            index: true
        },
        {
            name: 'credentialization_notes',
            type: 'string'
        },
        {
            name: 'active',
            type: 'bool',
            store: false,
            convert: function (v, record) {
                var now = new Date();
                return record.data.start_date <= now && record.data.end_date >= now
            }
        },
        {
            name: 'create_uid',
            type: 'int'
        },
        {
            name: 'create_date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'update_uid',
            type: 'int'
        },
        {
            name: 'update_date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Providers.getProviderCredentializations',
            create: 'Providers.addProviderCredentialization',
            update: 'Providers.updateProviderCredentialization',
            destroy: 'Providers.deleteProviderCredentialization'
        },
        reader: {
            root: 'data'
        }
    }
});
Ext.define('App.model.administration.ReferringProviderFacility', {
	extend: 'Ext.data.Model',
	table: {
		name: 'referring_providers_facilities'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'referring_provider_id',
			type: 'int',
			index: true
		},
		{
			name: 'name',
			type: 'string',
			len: 80
		},
		{
			name: 'address',
			type: 'string',
			len: 35
		},
		{
			name: 'address_cont',
			type: 'string',
			len: 35
		},
		{
			name: 'city',
			type: 'string',
			len: 35
		},
		{
			name: 'state',
			type: 'string',
			len: 35
		},
		{
			name: 'postal_code',
			type: 'string',
			len: 15
		},
		{
			name: 'country',
			type: 'string',
			len: 10
		},
		{
			name: 'taxonomy',
			type: 'string',
			len: 40,
			comment: 'taxonomy',
			defaultValue: '207Q00000X'
		},
		{
			name: 'accept_mc',
			type: 'bool',
			comment: 'Accepts Medicare'
		},
		{
			name: 'email',
			type: 'string',
			len: 180
		},
		{
			name: 'direct_address',
			type: 'string',
			len: 180
		},
		{
			name: 'phone_number',
			type: 'string',
			len: 25
		},
		{
			name: 'fax_number',
			type: 'string',
			len: 25
		},
		{
			name: 'notes',
			type: 'string',
			len: 600
		},
		{
			name: 'is_default',
			type: 'bool'
		},
		{
			name: 'active',
			type: 'bool'
		},
		{
			name: 'create_uid',
			type: 'int'
		},
		{
			name: 'update_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			comment: 'create date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			comment: 'last update date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'ReferringProviders.getReferringProviderFacilities',
			create: 'ReferringProviders.addReferringProviderFacility',
			update: 'ReferringProviders.updateReferringProviderFacility'
		}
	}
});

Ext.define('App.model.administration.ReferringProvider', {
	extend: 'Ext.data.Model',
	table: {
		name: 'referring_providers'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 40
		},
		{
			name: 'title',
			type: 'string',
			len: 10
		},
		{
			name: 'fname',
			type: 'string',
			len: 80
		},
		{
			name: 'mname',
			type: 'string',
			len: 80
		},
		{
			name: 'lname',
			type: 'string',
			len: 120
		},
		{
			name: 'upin',
			type: 'string',
			len: 25,
			comment: 'Carrier Claim Referring Physician UPIN Number'
		},
		{
			name: 'lic',
			type: 'string',
			len: 25
		},
		{
			name: 'npi',
			type: 'string',
			len: 25
		},
		{
			name: 'fda',
			type: 'string',
			len: 25
		},
		{
			name: 'ess',
			type: 'string',
			len: 25
		},
		{
			name: 'ssn',
			type: 'string',
			len: 25,
			comment: 'federal tax id'
		},
		{
			name: 'taxonomy',
			type: 'string',
			len: 40,
			comment: 'taxonomy',
			defaultValue: '207Q00000X'
		},
		{
			name: 'accept_mc',
			type: 'bool',
			comment: 'Accepts Medicare'
		},
		{
			name: 'notes',
			type: 'string',
			len: 600
		},
		{
			name: 'email',
			type: 'string',
			len: 180
		},
		{
			name: 'direct_address',
			type: 'string',
			len: 180
		},
		{
			name: 'phone_number',
			type: 'string',
			len: 25
		},
		{
			name: 'fax_number',
			type: 'string',
			len: 25
		},
		{
			name: 'cel_number',
			type: 'string',
			len: 25
		},
		{
			name: 'active',
			type: 'bool'
		},
		{
			name: 'create_uid',
			type: 'int'

		},
		{
			name: 'update_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			comment: 'create date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			comment: 'last update date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'ReferringProviders.getReferringProviders',
			create: 'ReferringProviders.addReferringProvider',
			update: 'ReferringProviders.updateReferringProvider'
		},
		reader: {
			root: 'data'
		}
	},
	hasMany: [
		{
			model: 'App.model.administration.ReferringProviderFacility',
			name: 'facilities',
			foreignKey: 'referring_provider_id'
		}
	]
});
Ext.define('App.model.administration.Services', {
	extend: 'Ext.data.Model',
	table: {
		name: 'services',
		comment: 'Services'
	},
	fields: [
		{name: 'id', type: 'string', comment: 'Services ID'},
		{name: 'code_text', type: 'string'},
		{name: 'sg_code', type: 'string'},
		{name: 'long_desc', type: 'string'},
		{name: 'code_text_short', type: 'string'},
		{name: 'code', type: 'string'},
		{name: 'code_type', type: 'string'},
		{name: 'modifier', type: 'string'},
		{name: 'units', type: 'string'},
		{name: 'fee', type: 'int'},
		{name: 'superbill', type: 'string'},
		{name: 'related_code', type: 'string'},
		{name: 'taxrates', type: 'string'},
		{name: 'active', type: 'bool'},
		{name: 'reportable', type: 'string'},
		{name: 'has_children', type: 'bool'},
		////////////////////////////////////
		{name: 'sex', type: 'string'},
		{name: 'age_start', type: 'int'},
		{name: 'age_end', type: 'int'},
		{name: 'times_to_perform', type: 'int'},
		{name: 'frequency_number', type: 'int'},
		{name: 'frequency_time', type: 'string'},
		{name: 'pregnant', type: 'bool'},
		{name: 'only_once', type: 'bool'},
		{name: 'active_problems', type: 'string'},
		{name: 'medications', type: 'string'},
		{name: 'labs', type: 'string'},
		{name: 'has_children', type: 'bool'},
		{name: 'class', type: 'string'}
	]

});
Ext.define('App.model.administration.Specialty', {
	extend: 'Ext.data.Model',
	table: {
		name: 'specialties',
		comment: 'Providers Specialties'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 100
		},
		{
			name: 'title',
			type: 'string',
			len: 100
		},
		{
			name: 'taxonomy',
			type: 'string',
			len: 30
		},
		{
			name: 'modality',
			type: 'string',
			len: 50
		},
		{
			name: 'ges',
			type: 'string',
			len: 5
		},
		{
			name: 'active',
			type: 'bool'
		},
		{
			name: 'text_details',
			type: 'string',
			store: false,
			convert: function(v, record){
				return record.data.id + ': ' + record.data.title;
			}
		},
		{
			name: 'combo_text',
			type: 'string',
			store: false,
			convert: function(v, record){
				return record.data.id + ': ' + record.data.title + ' ' + (record.data.active ? ('(' + _('not_active') + ')') : '');
			}
		},
		{
			name: 'create_uid',
			type: 'int'
		},
		{
			name: 'update_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Specialties.getSpecialties',
			create: 'Specialties.addSpecialty',
			update: 'Specialties.updateSpecialty'
		},
		reader: {
			root: 'data'
		}
	}
});

Ext.define('App.model.administration.TemplatePanel', {
	extend: 'Ext.data.Model',
	table: {
		name: 'template_panels'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'specialty_id',
			type: 'int',
			index: true
		},
		{
			name: 'description',
			type: 'string',
			len: 300
		},
		{
			name: 'sex',
			type: 'string',
			len: 1,
			index: true
		},
		{
			name: 'order',
			type: 'int'
		},
		{
			name: 'active',
			type: 'bool',
			index: true
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'TemplatePanels.getTemplatePanels',
			create: 'TemplatePanels.createTemplatePanel',
			update: 'TemplatePanels.updateTemplatePanel',
			destroy: 'TemplatePanels.deleteTemplatePanel'
		},
		reader: {
			root: 'data'
		}
	},
	hasMany: [
		{
			model: 'App.model.administration.TemplatePanelTemplate',
			name: 'templates',
			foreignKey: 'panel_id',
			storeConfig: {
				groupField: 'template_type'
			}
		}
	]
});
Ext.define('App.model.administration.TemplatePanelTemplate', {
	extend: 'Ext.data.Model',
	table: {
		name: 'template_panels_templates'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'panel_id',
			type: 'int'
		},
		{
			name: 'template_type',
			type: 'string',
			len: 80,
			comment: 'rx lab rad etc'
		},
		{
			name: 'description',
			type: 'string',
			len: 300
		},
		{
			name: 'template_data',
			type: 'string',
			dataType: 'mediumtext'
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'TemplatePanels.getTemplatePanelTemplates',
			create: 'TemplatePanels.createTemplatePanelTemplate',
			update: 'TemplatePanels.updateTemplatePanelTemplate',
			destroy: 'TemplatePanels.deleteTemplatePanelTemplate'
		},
		reader: {
			root: 'data'
		}
	}
});

Ext.define('App.model.administration.TransactionLog', {
    extend: 'Ext.data.Model',
    table: {
        name: 'audit_transaction_log',
        comment: 'Data INSERT UPDATE DELETE Logs'
    },
    fields: [
        {
            name: 'id',
            type: 'int'
        },
        {
            name: 'date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s',
            comment: 'Date of the event'
        },
        {
            name: 'pid',
            type: 'int',
            comment: 'Patient ID'
        },
        {
            name: 'eid',
            type: 'int',
            comment: 'Encounter ID'
        },
        {
            name: 'uid',
            type: 'int',
            comment: 'User ID'
        },
        {
            name: 'fid',
            type: 'int',
            comment: 'Facility ID'
        },
        {
            name: 'event',
            type: 'string',
            len: 10,
            comment: 'Event UPDATE INSERT DELETE'
        },
        {
            name: 'table_name',
            type: 'string',
            len: 60
        },
        {
            name: 'sql_string',
            type: 'string',
            dataType: 'mediumtext'
        },
        {
            name: 'data',
            type: 'array',
            dataType: 'mediumtext',
            comment: 'serialized data',
            convert: function (v, record) {
                return record.serializeEventData(v);
            }
        },
        {
            name: 'ip',
            type: 'string',
            len: 40
        },
        {
            name: 'user_title',
            type: 'string',
            store: false
        },
        {
            name: 'user_fname',
            type: 'string',
            store: false
        },
        {
            name: 'user_mname',
            type: 'string',
            store: false
        },
        {
            name: 'user_lname',
            type: 'string',
            store: false
        },
        {
            name: 'patient_title',
            type: 'string',
            store: false
        },
        {
            name: 'patient_fname',
            type: 'string',
            store: false
        },
        {
            name: 'patient_mname',
            type: 'string',
            store: false
        },
        {
            name: 'patient_lname',
            type: 'string',
            store: false
        },
        {
            name: 'user_name',
            type: 'string',
            store: false,
            convert: function (v, record) {
                var str = '';
                if (record.data.user_title) str += record.data.user_title + ' ';
                if (record.data.user_fname) str += record.data.user_fname + ' ';
                if (record.data.user_mname) str += record.data.user_mname + ' ';
                if (record.data.user_lname) str += record.data.user_lname;
                return str;
            }
        },
        {
            name: 'patient_name',
            type: 'string',
            store: false,
            convert: function (v, record) {
                var str = '';
                if (record.data.patient_title) str += record.data.patient_title + ' ';
                if (record.data.patient_fname) str += record.data.patient_fname + ' ';
                if (record.data.patient_mname) str += record.data.patient_mname + ' ';
                if (record.data.patient_lname) str += record.data.patient_lname;
                return str;
            }
        },
        {
            name: 'is_valid',
            type: 'bool',
            store: false
        },
        {
            name: 'checksum',
            type: 'string',
            len: 80
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'AuditLog.getLogs'
        },
        reader: {
            root: 'data'
        }
    },
    serializeEventData: function (data) {
        var str = '';
        Ext.Object.each(data, function (key, value) {
            str += key + ' - ' + value + '<br>';
        });
        return str;


    }
});
Ext.define('App.model.administration.XtypesComboModel', {
    extend: 'Ext.data.Model',
    table: {
        name: 'xtypescombo',
        comment: 'XTYPE Combos'
    },
    fields: [
        {
            name: 'id',
            type: 'string'
        },
        {
            name: 'name',
            type: 'string'
        },
        {
            name: 'value',
            type: 'string'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'CombosData.getFiledXtypes'
        }
    },
    autoLoad: true
});
Ext.define('App.model.administration.User', {
	extend: 'Ext.data.Model',
	table: {
		name: 'users',
		comment: 'User accounts'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 40
		},
		{
			name: 'providerCode',
			type: 'string',
			len: 40
		},
		{
			name: 'create_uid',
			type: 'int',
			comment: 'create user ID'
		},
		{
			name: 'update_uid',
			type: 'int',
			comment: 'update user ID'
		},
		{
			name: 'create_date',
			type: 'date',
			comment: 'create date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			comment: 'last update date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'username',
			type: 'string',
			comment: 'username',
			len: 20,
			index: true
		},
		{
			name: 'password',
			type: 'string',
			comment: 'password',
			dataType: 'blob',
			encrypt: true
		},
		{
			name: 'pwd_history1',
			type: 'string',
			comment: 'first password history backwards',
			dataType: 'blob',
			encrypt: true
		},
		{
			name: 'pwd_history2',
			type: 'string',
			comment: 'second password history backwards',
			dataType: 'blob',
			encrypt: true
		},
		{
			name: 'title',
			type: 'string',
			comment: 'title (Mr. Mrs.)',
			len: 10
		},
		{
			name: 'fname',
			type: 'string',
			comment: 'first name',
			len: 80,
			index: true
		},
		{
			name: 'mname',
			type: 'string',
			comment: 'middle name',
			len: 80,
			index: true
		},
		{
			name: 'lname',
			type: 'string',
			comment: 'last name',
			len: 120,
			index: true
		},
		{
			name: 'fullname',
			type: 'string',
			comment: 'title full name',
			store: false
		},
		{
			name: 'shortname',
			type: 'string',
			comment: 'title and last name',
			store: false
		},
		{
			name: 'pin',
			type: 'string',
			comment: 'pin number',
			len: 10
		},
		{
			name: 'is_attending',
			type: 'bool',
			index: true
		},
		{
			name: 'npi',
			type: 'string',
			comment: 'National Provider Identifier',
			len: 15,
			index: true
		},
		{
			name: 'lic',
			type: 'string',
			len: 80
		},
		{
			name: 'ess',
			type: 'string',
			len: 80
		},
		{
			name: 'upin',
			type: 'string',
			len: 80
		},
		{
			name: 'fedtaxid',
			type: 'string',
			comment: 'federal tax id',
			len: 80
		},
		{
			name: 'feddrugid',
			type: 'string',
			comment: 'federal drug id',
			len: 80
		},
		{
			name: 'notes',
			type: 'string',
			len: 300
		},
		{
			name: 'email',
			type: 'string',
			len: 150,
			index: true
		},
		{
			name: 'phone',
			type: 'string',
			len: 80
		},
		{
			name: 'mobile',
			type: 'string',
			len: 80
		},
		{
			name: 'direct_address',
			type: 'string',
			comment: 'direct_address',
			len: 150,
			index: true
		},
		{
			name: 'specialty',
			type: 'array',
			comment: 'specialty',
			len: 80
		},
		{
			name: 'taxonomy',
			type: 'string',
			comment: 'taxonomy',
			defaultValue: '207Q00000X',
			len: 40,
			index: true
		},
		{
			name: 'warehouse_id',
			type: 'int',
			comment: 'default warehouse'
		},
		{
			name: 'facility_id',
			type: 'int',
			comment: 'default facility',
			index: true
		},
		{
			name: 'role_id',
			type: 'int',
			comment: 'acl_user_roles relation'
		},
		{
			name: 'calendar',
			type: 'bool',
			comment: 'has calendar? 0=no 1=yes',
			index: true
		},
		{
			name: 'street',
			type: 'string',
			len: 55
		},
		{
			name: 'street_cont',
			type: 'string',
			len: 55
		},
		{
			name: 'city',
			type: 'string',
			len: 55
		},
		{
			name: 'state',
			type: 'string',
			len: 55
		},
		{
			name: 'postal_code',
			type: 'string',
			len: 15
		},
		{
			name: 'country_code',
			type: 'string',
			len: 15
		},
		{
			name: 'authorized',
			type: 'bool'
		},
		{
			name: 'active',
			type: 'bool',
			index: true
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'User.getUsers',
			create: 'User.addUser',
			update: 'User.updateUser'
		},
		reader: {
			root: 'data'
		}
	},
	hasMany: [
		{
			model: 'App.model.Phones',
			name: 'phones',
			primaryKey: 'id',
			foreignKey: 'use_id'
		},
		{
			model: 'App.model.Address',
			name: 'address',
			primaryKey: 'id',
			foreignKey: 'use_id'
		}
	]
});

Ext.define('App.model.miscellaneous.OfficeNotes', {
	extend: 'Ext.data.Model',
	table: {
		name: 'office_notes',
		comment: 'Office Notes'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Office Notes ID'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'body',
			type: 'string'
		},
		{
			name: 'user',
			type: 'string'
		},
		{
			name: 'facility_id',
			type: 'string'
		},
		{
			name: 'activity',
			type: 'string'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'OfficeNotes.getOfficeNotes',
			create: 'OfficeNotes.addOfficeNotes',
			update: 'OfficeNotes.updateOfficeNotes'
		}
	}
});
Ext.define('App.model.miscellaneous.Amendment', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_amendments'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'portal_id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int'
		},
		{
			name: 'amendment_type',
			type: 'string',
			len: 1,
			comment: 'P = patient or D = Doctor or O = organization'
		},
		{
			name: 'amendment_data',
			type: 'array',
			dataType: 'mediumtext'
		},
		{
			name: 'amendment_message',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'amendment_status',
			type: 'string',
			len: 1,
			comment: 'W = waiting or A = approved or D = denied or C = canceled'
		},
		{
			name: 'response_message',
			type: 'string',
			len: 500,
			comment: 'denial or approval reason'
		},
		{
			name: 'is_read',
			type: 'bool'
		},
		{
			name: 'is_viewed',
			type: 'bool'
		},
		{
			name: 'is_synced',
			type: 'bool'
		},
		{
			name: 'assigned_to_uid',
			type: 'int'
		},
		{
			name: 'create_uid',
			type: 'int'
		},
		{
			name: 'update_uid',
			type: 'int'
		},
		{
			name: 'response_uid',
			type: 'int'
		},
		{
			name: 'approved_by',
			type: 'string',
			len: 80
		},
		{
			name: 'assigned_date',
			type: 'date',
			comment: 'Assigned date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'response_date',
			type: 'date',
			comment: 'create date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'cancel_date',
			type: 'date',
			comment: 'create date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'cancel_by',
			type: 'string',
			len: 15,
			comment: 'U for user P patient and ID'
		},
		{
			name: 'create_date',
			type: 'date',
			comment: 'create date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			comment: 'last update date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'responded_by',
			type: 'string',
			store: false,
			convert: function(v, record){
				if(record.data.amendment_status === 'A'){
					return record.data.response_title + ' ' + record.data.response_fname + ' ' + record.data.response_mname + ' ' + record.data.response_lname;
				}else{
					return '';
				}
			}
		},
		{
			name: 'response_title',
			type: 'string',
			store: false
		},
		{
			name: 'response_fname',
			type: 'string',
			store: false
		},
		{
			name: 'response_mname',
			type: 'string',
			store: false
		},
		{
			name: 'response_lname',
			type: 'string',
			store: false
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Amendments.getAmendments',
			create: 'Amendments.addAmendment',
			update: 'Amendments.updateAmendment'
		},
		reader: {
			root: 'data'
		}
	}
});
Ext.define('App.model.account.VoucherLine', {
	extend: 'Ext.data.Model',
	table: {
		name: 'accvoucherline',
		comment: 'Voucher / Receipt'
	},
	//	triggers:[
	//		{
	//			name: 'onVoucherLineDelete',
	//			time: 'after',
	//			event: 'delete',
	//			definition:'UPDATE accvoucher SET `status` = \'changed\' WHERE id = {voucherId} AND date = [new Date()]'
	//		},
	//		{
	//			name: 'onVoucherLineInsert',
	//			time: 'AFTER',
	//			event: 'INSERT',
	//			definition:'UPDATE accvoucher SET `status` = \'changed\' WHERE id = {voucherId}'
	//		}
	//	],
	fields: [
		{name: 'id', type: 'int'},
		{name: 'createUid', type: 'int'},
		{name: 'createDate', type: 'date', dateFormat: 'Y-m-d H:i:s'},
		{name: 'writeUid', type: 'int'},
		{name: 'writeDate', type: 'date', dateFormat: 'Y-m-d H:i:s'},

		{name: 'voucherId', type: 'int', comment: 'Voucher'},
		{name: 'accountId', type: 'int', comment: 'Account'},
		{name: 'moveLineId', type: 'int', comment: 'Journal Item'},
		//      {name: 'companyId',             type: 'int', comment:'Company (Not Used)'},
		//      {name: 'accountAnalyticId',     type: 'int', comment:'Analytic Account (Not Used)'},

		{name: 'reconcile', type: 'bool', defaultValue: false, comment: 'Full Reconcile'},

		{name: 'code', type: 'string', comment: 'COPAY/CPT/HCPCS/SKU codes'},
		{name: 'name', type: 'string', comment: 'Description'},
		{name: 'type', type: 'string', comment: 'debit/credit'},

		{name: 'amountUnreconciled', type: 'float', comment: 'Open Balance'},
		{name: 'amountUntax', type: 'float', comment: 'Untax Amount'},
		{name: 'amountOriginal', type: 'float', comment: 'Default Amount'},
		{name: 'amount', type: 'float', comment: 'Amount'}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'AccVoucher.getVoucherLines',
			create: 'AccVoucher.addVoucherLine',
			update: 'AccVoucher.updateVoucherLine',
			destroy: 'AccVoucher.destroyVoucherLine'
		}
	},
	associations: [
		{
			type: 'belongsTo',
			model: 'App.model.account.Voucher',
			foreignKey: 'voucherId',
			setterName: 'setVoucher',
			getterName: 'getVoucher'
		}
	]
});
Ext.define('App.model.account.Voucher', {
	extend: 'Ext.data.Model',
	table: {
		name: 'accvoucher',
		comment: 'Voucher / Receipt'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'createUid',
			type: 'int'},
		{
			name: 'createDate',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'},
		{
			name: 'writeUid',
			type: 'int'},
		{
			name: 'writeDate',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'},
		{
			name: 'dateDue',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'Due Date'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'Date'
		},
		{
			name: 'encounterId',
			type: 'int',
			comment: 'Encounter'
		},
		{
			name: 'accountId',
			type: 'int',
			comment: 'Account'},
		{
			name: 'journalId',
			type: 'int',
			comment: 'Journal'},
		{
			name: 'moveId',
			type: 'int',
			comment: 'Account Entry'
		},
		{
			name: 'active',
			type: 'bool',
			defaultValue: true,
			comment: 'Active?'
		},
		{
			name: 'comment',
			type: 'string',
			comment: 'Comment'
		},
		{
			name: 'reference',
			type: 'string',
			comment: 'Ref'
		},
		{
			name: 'number',
			type: 'string',
			comment: 'Number'
		},
		{
			name: 'notes',
			type: 'string',
			mapping: 'narration',
			comment: 'Notes'
		},
		{
			name: 'status',
			type: 'string',
			mapping: 'state',
			comment: 'Status'
		},
		{
			name: 'type',
			type: 'string',
			comment: 'visit/product/office'
		},
		{
			name: 'amount',
			type: 'float',
			defaultValue: 0.00,
			comment: 'Total Amount'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'AccVoucher.getVoucher',
			create: 'AccVoucher.addVoucher',
			update: 'AccVoucher.updateVoucher',
			destroy: 'AccVoucher.destroyVoucher'
		}
	},
	hasMany: [
		{
			model: 'App.model.account.VoucherLine',
			name: 'voucherlines',
			foreignKey: 'voucherId'
		}
	]
});
Ext.define('App.model.fees.Billing',
	{
		extend: 'Ext.data.Model',
		table: {
			name: 'billing',
			comment: 'Billing'
		},
		fields: [
			{
				name: 'eid',
				type: 'int '
			},
			{
				name: 'pid',
				type: 'int'
			},
			{
				name: 'patientName',
				type: 'string'
			},
			{
				name: 'primaryProvider',
				type: 'string'
			},
			{
				name: 'encounterProvider',
				type: 'string'
			},
			{
				name: 'supervisorProvider',
				type: 'string'
			},
			{
				name: 'facility',
				type: 'string'
			},
			{
				name: 'billing_facility',
				type: 'string'
			},
			{
				name: 'service_date',
				type: 'date'
			},
			{
				name: 'close_date',
				type: 'date'
			},
			{
				name: 'billing_stage',
				type: 'int'
			},
			{
				name: 'dxCodes',
				type: 'auto'
			}
		],
		proxy: {
			type: 'direct',
			api: {
				read: 'Fees.getFilterEncountersBillingData'
			},
			reader: {
				root: 'encounters',
				totalProperty: 'totals'
			}
		}

	});

Ext.define('App.model.fees.Checkout',
	{
		extend: 'Ext.data.Model',
		table: {
			name: 'checkout',
			comment: 'Checkout'
		},
		fields: [
			{
				name: 'id',
				type: 'int',
				comment: 'Checkout ID'
			},
			{
				name: 'time',
				type: 'string'
			},
			{
				name: 'follow_up_facility',
				type: 'string'
			},
			{
				name: 'note',
				type: 'string'
			},
			{
				name: 'reminder',
				type: 'string'
			},
			{
				name: 'patient_name',
				type: 'string'
			},
			{
				name: 'encounter_number',
				type: 'int'
			},
			{
				name: 'transaction_facility',
				type: 'string'
			},
			{
				name: 'transaction_number',
				type: 'int'
			},
			{
				name: 'transaction_date',
				type: 'date',
				dateFormat: 'Y-m-d H:i:s'
			},
			{
				name: 'payment_amount',
				type: 'string'
			},
			{
				name: 'paying_entity',
				type: 'string'
			},
			{
				name: 'post_to_date',
				type: 'date',
				dateFormat: 'Y-m-d H:i:s'
			},
			{
				name: 'check_number',
				type: 'int'
			}
		],
		proxy: {
			type: 'direct',
			api: {
				read: 'Fees.getPaymentsBySearch'
			},
			reader: {
				root: 'rows',
				totalProperty: 'totals'
			}
		}
	});
Ext.define('App.model.fees.EncountersPayments',
	{
		extend: 'Ext.data.Model',
		table: {
			name: 'encounterspayments',
			comment: 'Encounters Payments'
		},
		fields: [
			{
				name: 'id',
				type: 'int',
				dataType: 'bigint',
				len: 20,
				primaryKey: true,
				autoIncrement: true,
				allowNull: false,
				store: true,
				comment: 'Encounter Payments ID'
			},
			{
				name: 'paying_entity',
				type: 'string'
			},
			{
				name: 'payment_from',
				type: 'string'
			},
			{
				name: 'no',
				type: 'int'
			},
			{
				name: 'payment_method',
				type: 'string'
			},
			{
				name: 'pay_to',
				type: 'string'
			},
			{
				name: 'amount',
				type: 'string'
			},
			{
				name: 'date_from',
				type: 'date',
				dateFormat: 'Y-m-d H:i:s'
			},
			{
				name: 'date_to',
				type: 'date',
				dateFormat: 'Y-m-d H:i:s'
			},
			{
				name: 'note',
				type: 'string'
			}
		],
		proxy: {
			type: 'direct',
			api: {
				read: 'Fees.getPaymentsBySearch'
			},
			reader: {
				root: 'rows',
				totalProperty: 'totals'
			}
		}
	});
Ext.define('App.model.fees.PaymentTransactions',
	{
		extend: 'Ext.data.Model',
		table: {
			name: 'paymenttransactions',
			comment: 'Payment Transactions'
		},
		fields: [],
		proxy: {
			type: 'direct',
			api: {
				read: 'Fees.getPaymentsBySearch'
			},
			reader: {
				root: 'rows',
				totalProperty: 'totals'
			}
		}
	});
Ext.define('App.model.navigation.Navigation', {
	extend: 'Ext.data.Model',
	fields: [
		{
            name: 'text',
            type: 'string'
        },
		{
            name: 'disabled',
            type: 'bool',
            defaultValue: false
        }
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Navigation.getNavigation'
		}
	}
});
// Created dynamically by Matcha::connect
// Create date: 2013-07-28 18:48:17

Ext.define('App.model.patient.Vitals', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounter_vitals'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Vital ID'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'auth_uid',
			type: 'int'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'weight_lbs',
			type: 'string',
			useNull: true,
			len: 10
		},
		{
			name: 'weight_kg',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'height_in',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'height_cm',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'bp_systolic',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'bp_diastolic',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'pulse',
			type: 'int',
			useNull: true,
			len: 10,
			convert: function(v){
				return v > 0 ? v : null;
			}
		},
		{
			name: 'respiration',
			type: 'int',
			useNull: true,
			len: 10,
			convert: function(v){
				return v > 0 ? v : null;
			}
		},
		{
			name: 'temp_f',
			type: 'float',
			useNull: true,
			len: 10,
			convert: function(v){
				return v > 0 ? v : null;
			}
		},
		{
			name: 'temp_c',
			type: 'float',
			useNull: true,
			len: 10,
			convert: function(v){
				return v > 0 ? v : null;
			}
		},
		{
			name: 'temp_location',
			type: 'string',
			len: 40
		},
		{
			name: 'oxygen_saturation',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'head_circumference_in',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'head_circumference_cm',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'waist_circumference_in',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'waist_circumference_cm',
			type: 'float',
			useNull: true,
			len: 10
		},
		{
			name: 'bmi',
			type: 'float',
			useNull: true,
			len: 10,
			convert: function(v){
				return v > 0 ? v : null;
			}
		},
		{
			name: 'bmi_status',
			type: 'string',
			useNull: true,
			len: 10
		},
		{
			name: 'other_notes',
			type: 'string',
			len: 600
		},
		{
			name: 'bp_systolic_normal',
			type: 'int',
			defaultValue: 120,
			store: false
		},
		{
			name: 'bp_diastolic_normal',
			type: 'int',
			defaultValue: 80,
			store: false
		},
		{
			name: 'group_date',
			type: 'string',
			store: false,
			convert: function(v, record){
				return Ext.Date.format(record.data.date, 'Y-m-d');
			}
		},
		{
			name: 'administer_by',
			type: 'string',
			store: false
		},
		{
			name: 'authorized_by',
			type: 'string',
			store: false
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Vitals.getVitals',
			create: 'Vitals.addVitals',
			update: 'Vitals.updateVitals'
		},
		writer: {
			writeAllFields: true
		}
	},
	belongsTo: {
		model: 'App.model.patient.Encounter',
		foreignKey: 'eid'
	}
});

Ext.define('App.model.patient.FamilyHistory', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_family_history'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'condition',
			type: 'string',
			len: 60
		},
		{
			name: 'condition_code',
			type: 'string',
			len: 60
		},
		{
			name: 'condition_code_type',
			type: 'string',
			len: 60
		},
		{
			name: 'relation',
			type: 'string',
			len: 60
		},
		{
			name: 'relation_code',
			type: 'string',
			len: 60
		},
		{
			name: 'relation_code_type',
			type: 'string',
			len: 60
		},
		{
			name: 'create_uid',
			type: 'int'
		},
		{
			name: 'update_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'FamilyHistory.getFamilyHistory',
			create: 'FamilyHistory.addFamilyHistory',
			update: 'FamilyHistory.updateFamilyHistory'
		}
	},
	belongsTo: {
		model: 'App.model.patient.Encounter',
		foreignKey: 'eid'
	}
});

Ext.define('App.model.patient.ReviewOfSystems', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounter_review_of_systems',
		comment: 'Review of system'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'weight_change',
			type: 'bool'
		},
		{
			name: 'weakness',
			type: 'bool'
		},
		{
			name: 'fatigue',
			type: 'bool'
		},
		{
			name: 'anorexia',
			type: 'bool'
		},
		{
			name: 'fever',
			type: 'bool'
		},
		{
			name: 'chills',
			type: 'bool'
		},
		{
			name: 'night_sweats',
			type: 'bool'
		},
		{
			name: 'insomnia',
			type: 'bool'
		},
		{
			name: 'irritability',
			type: 'bool'
		},
		{
			name: 'heat_or_cold',
			type: 'bool'
		},
		{
			name: 'intolerance',
			type: 'bool'
		},
		{
			name: 'change_in_vision',
			type: 'bool'
		},
		{
			name: 'eye_pain',
			type: 'bool'
		},
		{
			name: 'family_history_of_glaucoma',
			type: 'bool'
		},
		{
			name: 'irritation',
			type: 'bool'
		},
		{
			name: 'redness',
			type: 'bool'
		},
		{
			name: 'excessive_tearing',
			type: 'bool'
		},
		{
			name: 'double_vision',
			type: 'bool'
		},
		{
			name: 'blind_spots',
			type: 'bool'
		},
		{
			name: 'photophobia',
			type: 'bool'
		},
		{
			name: 'hearing_loss',
			type: 'bool'
		},
		{
			name: 'discharge',
			type: 'bool'
		},
		{
			name: 'pain',
			type: 'bool'
		},
		{
			name: 'vertigo',
			type: 'bool'
		},
		{
			name: 'tinnitus',
			type: 'bool'
		},
		{
			name: 'frequent_colds',
			type: 'bool'
		},
		{
			name: 'sore_throat',
			type: 'bool'
		},
		{
			name: 'sinus_problems',
			type: 'bool'
		},
		{
			name: 'post_nasal_drip',
			type: 'bool'
		},
		{
			name: 'nosebleed',
			type: 'bool'
		},
		{
			name: 'snoring',
			type: 'bool'
		},
		{
			name: 'apnea',
			type: 'bool'
		},
		{
			name: 'breast_mass',
			type: 'bool'
		},
		{
			name: 'abnormal_mammogram',
			type: 'bool'
		},
		{
			name: 'biopsy',
			type: 'bool'
		},
		{
			name: 'cough',
			type: 'bool'
		},
		{
			name: 'sputum',
			type: 'bool'
		},
		{
			name: 'shortness_of_breath',
			type: 'bool'
		},
		{
			name: 'wheezing',
			type: 'bool'
		},
		{
			name: 'hemoptysis',
			type: 'bool'
		},
		{
			name: 'asthma',
			type: 'bool'
		},
		{
			name: 'copd',
			type: 'bool'
		},
		{
			name: 'thyroid_problems',
			type: 'bool'
		},
		{
			name: 'diabetes',
			type: 'bool'
		},
		{
			name: 'abnormal_blood_test',
			type: 'bool'
		},
		{
			name: 'chest_pain',
			type: 'bool'
		},
		{
			name: 'palpitation',
			type: 'bool'
		},
		{
			name: 'syncope',
			type: 'bool'
		},
		{
			name: 'pnd',
			type: 'bool'
		},
		{
			name: 'doe',
			type: 'bool'
		},
		{
			name: 'orthopnea',
			type: 'bool'
		},
		{
			name: 'peripheral',
			type: 'bool'
		},
		{
			name: 'edema',
			type: 'bool'
		},
		{
			name: 'leg_pain_cramping',
			type: 'bool'
		},
		{
			name: 'arrythmia',
			type: 'bool'
		},
		{
			name: 'heart_problem',
			type: 'bool'
		},
		{
			name: 'history_of_heart_murmur',
			type: 'bool'
		},
		{
			name: 'polyuria',
			type: 'bool'
		},
		{
			name: 'polydypsia',
			type: 'bool'
		},
		{
			name: 'dysuria',
			type: 'bool'
		},
		{
			name: 'hematuria',
			type: 'bool'
		},
		{
			name: 'frequency',
			type: 'bool'
		},
		{
			name: 'urgency',
			type: 'bool'
		},
		{
			name: 'utis',
			type: 'bool'
		},
		{
			name: 'incontinence',
			type: 'bool'
		},
		{
			name: 'renal_stones',
			type: 'bool'
		},
		{
			name: 'hesitancy',
			type: 'bool'
		},
		{
			name: 'dribbling',
			type: 'bool'
		},
		{
			name: 'stream',
			type: 'bool'
		},
		{
			name: 'nocturia',
			type: 'bool'
		},
		{
			name: 'erections',
			type: 'bool'
		},
		{
			name: 'ejaculations',
			type: 'bool'
		},
		{
			name: 'cancer',
			type: 'bool'
		},
		{
			name: 'psoriasis',
			type: 'bool'
		},
		{
			name: 'acne',
			type: 'bool'
		},
		{
			name: 'disease',
			type: 'bool'
		},
		{
			name: 'other',
			type: 'bool'
		},
		{
			name: 'anemia',
			type: 'bool'
		},
		{
			name: 'hiv',
			type: 'bool'
		},
		{
			name: 'f_h_blood_problems',
			type: 'bool'
		},
		{
			name: 'hai_status',
			type: 'bool'
		},
		{
			name: 'allergies',
			type: 'bool'
		},
		{
			name: 'bleeding_problems',
			type: 'bool'
		},
		{
			name: 'frequent_illness',
			type: 'bool'
		},
		{
			name: 'dysphagia',
			type: 'bool'
		},
		{
			name: 'heartburn',
			type: 'bool'
		},
		{
			name: 'food_intolerance',
			type: 'bool'
		},
		{
			name: 'belching',
			type: 'bool'
		},
		{
			name: 'bloating',
			type: 'bool'
		},
		{
			name: 'flatulence',
			type: 'bool'
		},
		{
			name: 'nausea',
			type: 'bool'
		},
		{
			name: 'vomiting',
			type: 'bool'
		},
		{
			name: 'jaundice',
			type: 'bool'
		},
		{
			name: 'h_o_hepatitis',
			type: 'bool'
		},
		{
			name: 'hematemesis',
			type: 'bool'
		},
		{
			name: 'diarrhea',
			type: 'bool'
		},
		{
			name: 'hematochezia',
			type: 'bool'
		},
		{
			name: 'changed_bowel',
			type: 'bool'
		},
		{
			name: 'constipation',
			type: 'bool'
		},
		{
			name: 'female_g',
			type: 'bool'
		},
		{
			name: 'female_p',
			type: 'bool'
		},
		{
			name: 'female_ap',
			type: 'bool'
		},
		{
			name: 'lmp',
			type: 'bool'
		},
		{
			name: 'female_lc',
			type: 'bool'
		},
		{
			name: 'menopause',
			type: 'bool'
		},
		{
			name: 'flow',
			type: 'bool'
		},
		{
			name: 'abnormal_hair_growth',
			type: 'bool'
		},
		{
			name: 'menarche',
			type: 'bool'
		},
		{
			name: 'symptoms',
			type: 'bool'
		},
		{
			name: 'f_h_female_hirsutism_striae',
			type: 'bool'
		},
		{
			name: 'anxiety',
			type: 'bool'
		},
		{
			name: 'depression',
			type: 'bool'
		},
		{
			name: 'psychiatric_medication',
			type: 'bool'
		},
		{
			name: 'social_difficulties',
			type: 'bool'
		},
		{
			name: 'psychiatric_diagnosis',
			type: 'bool'
		},
		{
			name: 'fms',
			type: 'bool'
		},
		{
			name: 'swelling',
			type: 'bool'
		},
		{
			name: 'Warm',
			type: 'bool'
		},
		{
			name: 'muscle',
			type: 'bool'
		},
		{
			name: 'stiffness',
			type: 'bool'
		},
		{
			name: 'aches',
			type: 'bool'
		},
		{
			name: 'arthritis',
			type: 'bool'
		},
		{
			name: 'chronic_joint_pain',
			type: 'bool'
		},
		{
			name: 'loc',
			type: 'bool'
		},
		{
			name: 'stroke',
			type: 'bool'
		},
		{
			name: 'paralysis',
			type: 'bool'
		},
		{
			name: 'tia',
			type: 'bool'
		},
		{
			name: 'numbness',
			type: 'bool'
		},
		{
			name: 'memory_problems',
			type: 'bool'
		},
		{
			name: 'seizures',
			type: 'bool'
		},
		{
			name: 'intellectual_decline',
			type: 'bool'
		},
		{
			name: 'dementia',
			type: 'bool'
		},
		{
			name: 'headache',
			type: 'bool'
		},
		{
			name: 'cons_weakness',
			type: 'bool'
		},
		{
			name: 'brest_discharge',
			type: 'bool'
		},
		{
			name: 'fem_frequency',
			type: 'bool'
		},
		{
			name: 'notes',
			type: 'string',
			dataType: 'mediumtext'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			update: 'Encounter.updateReviewOfSystems'
		}
	},
	belongsTo: {
		model: 'App.model.patient.Encounter',
		foreignKey: 'eid'
	}
});

Ext.define('App.model.patient.HCFAOptions', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounter_1500_options'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'employment_related',
			type: 'bool'
		},
		{
			name: 'auto_accident',
			type: 'bool'
		},
		{
			name: 'state',
			type: 'string',
			len: 80
		},
		{
			name: 'other_accident',
			type: 'bool'
		},
		{
			name: 'similar_illness_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'unable_to_work_from',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'unable_to_work_to',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'hops_date_to',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'out_lab_used',
			type: 'bool'
		},
		{
			name: 'amount_charges',
			type: 'string',
			len: 10
		},
		{
			name: 'medicaid_resubmission_code',
			type: 'string',
			len: 15
		},
		{
			name: 'medicaid_original_reference_number',
			type: 'string',
			len: 60
		},
		{
			name: 'prior_authorization_number',
			type: 'string',
			len: 60
		},
		{
			name: 'replacement_claim',
			type: 'bool'
		},
		{
			name: 'notes',
			type: 'string',
			dataType: 'text'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			update: 'Encounter.updateHCFA'
		}
	},
	belongsTo: {
		model: 'App.model.patient.Encounter',
		foreignKey: 'eid'
	}
});
Ext.define('App.model.patient.EncounterService', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounter_services'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'reference_type',
			type: 'string',
			len: 40,
			index: true
		},
		{
			name: 'reference_id',
			type: 'int',
			index: true
		},
		{
			name: 'billing_reference',
			type: 'string',
			len: 20,
			index: true
		},
		{
			name: 'code',
			type: 'string',
			len: 40,
			index: true
		},
		{
			name: 'code_type',
			type: 'string',
			len: 40
		},
		{
			name: 'code_text',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'units',
			type: 'int',
			len: 5
		},
		{
			name: 'tooth',
			type: 'string',
			len: 10
		},
		{
			name: 'surface',
			type: 'string',
			len: 5
		},
		{
			name: 'cavity_quadrant',
			type: 'string',
			len: 2
		},
		{
			name: 'modifiers',
			type: 'array'
		},
		{
			name: 'dx_group_id',
			type: 'int'
		},
		{
			name: 'dx_pointers',
			type: 'array'
		},
		{
			name: 'status',
			type: 'string',
			len: 20
		},
        {
            name: 'financial_class',
            type: 'string',
            len: 4
        },
        {
            name: 'financial_name',
            type: 'string',
            len: 4,
            store: false
        },
		{
			name: 'create_uid',
			type: 'int'
		},
		{
			name: 'update_uid',
			type: 'int'
		},
		{
			name: 'date_create',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'date_update',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Services.getEncounterServices',
			create: 'Services.addEncounterService',
			update: 'Services.updateEncounterService',
			destroy: 'Services.removeEncounterService'
		},
		writer: {
			writeAllFields: true
		}
	}
});
Ext.define('App.model.patient.encounter.snippetTree', {
	extend: 'Ext.data.Model',
	table: {
		name: 'soap_snippets'
	},
	fields: [
		{
			name: 'id',
			type: 'string'
		},
		{
			name: 'parentId',
			type: 'string',
			len: 20,
			index: true
		},
		{
			name: 'specialty_id',
			type: 'string',
			len: 11,
			index: true
		},
		{
			name: 'index',
			type: 'int'
		},
		{
			name: 'title',
			type: 'string',
			len: 80
		},
		{
			name: 'text',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'category',
			type: 'string',
			len: 50,
			index: true
		},
		{
			name: 'leaf',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Snippets.getSoapSnippets',
			create: 'Snippets.addSoapSnippets',
			update: 'Snippets.updateSoapSnippets',
			destroy: 'Snippets.deleteSoapSnippets'
		}
	}
});
Ext.define('App.model.patient.encounter.Procedures', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounter_procedures',
		comment: 'Patient Encounter Procedures'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'procedure_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'code',
			type: 'string',
			len: 40
		},
		{
			name: 'code_text',
			type: 'string',
			len: 300
		},
		{
			name: 'code_type',
			type: 'string',
			len: 15
		},
		{
			name: 'status_code',
			type: 'string',
			len: 40
		},
		{
			name: 'status_code_text',
			type: 'string',
			len: 300
		},
		{
			name: 'status_code_type',
			type: 'string',
			len: 15
		},
		{
			name: 'encounter_dx_id',
			type: 'int'
		},
		{
			name: 'observation',
			type: 'string'
		},
		{
			name: 'create_uid',
			type: 'int'
		},
		{
			name: 'update_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Procedures.loadProcedures',
			create: 'Procedures.saveProcedure',
			update: 'Procedures.saveProcedure',
			destroy: 'Procedures.destroyProcedure'
		}
	}
});
Ext.define('App.model.patient.AppointmentRequest', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_appointment_requests'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'appointment_id',
			type: 'int'
		},
		{
			name: 'requested_uid',
			type: 'int'
		},
		{
			name: 'approved_uid',
			type: 'int'
		},
		{
			name: 'is_approved',
			type: 'bool',
			persist: false,
			convert: function(v, record){
				return record.data.approved_uid > 1;
			}
		},
		{
			name: 'requested_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'approved_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'notes',
			type: 'string'
		},
		{
			name: 'procedure1',
			type: 'string',
			store: false
		},
		{
			name: 'procedure1_code',
			type: 'string',
			len: 10
		},
		{
			name: 'procedure1_code_type',
			type: 'string',
			len: 10
		},
		{
			name: 'procedure2',
			type: 'string',
			store: false
		},
		{
			name: 'procedure2_code',
			type: 'string',
			len: 10
		},
		{
			name: 'procedure2_code_type',
			type: 'string',
			len: 10
		},
		{
			name: 'procedure3',
			type: 'string',
			store: false
		},
		{
			name: 'procedure3_code',
			type: 'string',
			len: 10
		},
		{
			name: 'procedure3_code_type',
			type: 'string',
			len: 10
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'create_uid',
			type: 'int'
		},
		{
			name: 'update_uid',
			type: 'int'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'AppointmentRequest.getAppointmentRequests',
			create: 'AppointmentRequest.addAppointmentRequest',
			update: 'AppointmentRequest.updateAppointmentRequest',
			destroy: 'AppointmentRequest.deleteAppointmentRequest'
		}
	}
});

Ext.define('App.model.patient.AdvanceDirective', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_advance_directives'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'code',
			type: 'string',
			len: 80
		},
		{
			name: 'code_text',
			type: 'string',
			len: 160
		},
		{
			name: 'code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'status_code',
			type: 'string',
			len: 80
		},
		{
			name: 'status_code_text',
			type: 'string',
			len: 160
		},
		{
			name: 'status_code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'notes',
			len: 300,
			type: 'string'
		},
		{
			name: 'start_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'end_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'verified_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'verified_uid',
			type: 'int'
		},
		{
			name: 'created_uid',
			type: 'int'
		},
		{
			name: 'updated_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			defaultValue: 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'AdvanceDirective.getPatientAdvanceDirectives',
			create: 'AdvanceDirective.addPatientAdvanceDirective',
			update: 'AdvanceDirective.updatePatientAdvanceDirective'
		}
	}
});
Ext.define('App.model.patient.Allergies', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_allergies',
		comment: 'Patient Allergies'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'allergy_type',
			type: 'string',
			len: 80
		},
		{
			name: 'allergy_type_code',
			type: 'string',
			len: 20
		},
		{
			name: 'allergy_type_code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'allergy',
			len: 80,
			type: 'string'
		},
		{
			name: 'allergy_code',
			type: 'string',
			len: 20,
			comment: 'RxNORM RXCUI code if food allergy'
		},
		{
			name: 'allergy_code_type',
			len: 20,
			type: 'string'
		},
		{
			name: 'location',
			len: 80,
			type: 'string'
		},
		{
			name: 'reaction',
			len: 80,
			type: 'string'
		},
		{
			name: 'reaction_code',
			len: 20,
			type: 'string'
		},
		{
			name: 'reaction_code_type',
			len: 20,
			type: 'string'
		},
		{
			name: 'severity',
			len: 80,
			type: 'string'
		},
		{
			name: 'severity_code',
			len: 20,
			type: 'string'
		},
		{
			name: 'severity_code_type',
			len: 20,
			type: 'string'
		},
		{
			name: 'status',
			len: 15,
			type: 'string'
		},
		{
			name: 'status_code',
			len: 20,
			type: 'string'
		},
		{
			name: 'status_code_type',
			len: 20,
			type: 'string'
		},
		{
			name: 'begin_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'end_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'active',
			type: 'bool',
			store: false,
			convert: function(v, record){
				return record.data.end_date == '' || record.data.end_date == null;
			}
		},
		{
			name: 'created_uid',
			type: 'int'
		},
		{
			name: 'updated_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			defaultValue: 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Allergies.getPatientAllergies',
			create: 'Allergies.addPatientAllergy',
			update: 'Allergies.updatePatientAllergy'
		}
	}
});
Ext.define('App.model.patient.CheckoutAlertArea', {
	extend: 'Ext.data.Model',
	table: {
		name: 'checkoutalertarea',
		comment: 'Checkout Alert Area'
	},
	fields: [
		{name: 'id', type: 'int', comment: 'Checkout Alert ID'},
		{name: 'alert', type: 'string'},
		{name: 'alertType', type: 'int'}

	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Encounter.checkoutAlerts'
		}
	}
});
Ext.define('App.model.patient.CptCodes', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'CPY Code ID'
		},
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string'
		},
		{
			name: 'code_text',
			type: 'string'
		},
		{
			name: 'code_text_medium',
			type: 'string'
		},
		{
			name: 'place_of_service',
			type: 'string'
		},
		{
			name: 'emergency',
			type: 'bool'
		},
		{
			name: 'charge',
			type: 'string'
		},
		{
			name: 'days_of_units',
			type: 'string'
		},
		{
			name: 'essdt_plan',
			type: 'string'
		},
		{
			name: 'modifiers',
			type: 'string'
		},
		{
			name: 'status',
			type: 'int',
			defaultValue: 0
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Services.getCptCodes',
			create: 'Services.addCptCode',
			update: 'Services.updateCptCode',
			destroy: 'Services.deleteCptCode'
		},
		reader: {
			root: 'rows',
			totalProperty: 'totals'
		}
	}
});

Ext.define('App.model.patient.Dental', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Dental Data ID'},
		{
			name: 'eid',
			type: 'int'},
		{
			name: 'pid',
			type: 'int'},
		{
			name: 'created_uid',
			type: 'int'},
		{
			name: 'updated_uid',
			type: 'int'},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'cdt_code',
			type: 'string'},
		{
			name: 'description',
			type: 'string'},
		{
			name: 'begin_date',
			type: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'end_date',
			type: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'ocurrence',
			type: 'string'
		},
		{
			name: 'referred_by',
			type: 'string'
		},
		{
			name: 'outcome',
			type: 'string'
		},
		{
			name: 'destination',
			type: 'string'
		},
		{
			name: 'alert',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Medical.getPatientDental',
			create: 'Medical.addPatientDental',
			update: 'Medical.updatePatientDental'
		}
	}
});
Ext.define('App.model.patient.Disclosures', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_disclosures',
		comment: 'Disclosures'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'type',
			type: 'string',
			len: 25
		},
		{
			name: 'recipient',
			type: 'string',
			len: 25
		},
		{
			name: 'description',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Disclosure.getDisclosures',
			create: 'Disclosure.addDisclosure',
			update: 'Disclosure.updateDisclosure'
		}
	}
});


Ext.define('App.model.patient.DismissedAlerts', {
	extend: 'Ext.data.Model',

	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Dismissed Alerts ID'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'},
		{
			name: 'preventive_care_id',
			type: 'int'},
		{
			name: 'reason',
			type: 'string'
		},
		{
			name: 'observation',
			type: 'string'
		},
		{
			name: 'dismiss',
			type: 'bool'
		},
		{
			name: 'description',
			type: 'string'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'PreventiveCare.getPreventiveCareDismissedAlertsByPid',
			update: 'PreventiveCare.updatePreventiveCareDismissedAlertsByPid'
		}
	}
});
Ext.define('App.model.patient.DoctorsNote', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_doctors_notes'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'template_id',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'order_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'from_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'to_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'restrictions',
			type: 'array'
		},
		{
			name: 'string_restrictions',
			type: 'string',
			store: false,
			convert: function(v, record){
				return (record.data.restrictions.join) ? record.data.restrictions.join(', ') : record.data.restrictions;
			}
		},
		{
			name: 'group_date',
			type: 'date',
			dateFormat: 'Y-m-d',
			store: false,
			convert: function(v, record){
				return Ext.Date.format(record.data.date, 'Y-m-d');
			}
		},
		{
			name: 'comments',
			type: 'string',
			dataType: 'text'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'DoctorsNotes.getDoctorsNotes',
			create: 'DoctorsNotes.addDoctorsNote',
			update: 'DoctorsNotes.updateDoctorsNote',
			destroy: 'DoctorsNotes.destroyDoctorsNote'
		}
	}
});
Ext.define('App.model.patient.EventHistory', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounter_history'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Event History ID'
		},
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'user',
			type: 'string',
			len: 80
		},
		{
			name: 'event',
			type: 'string',
			len: 600
		}
	]
});


Ext.define('App.model.patient.Encounter', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounters',
		comment: 'Encounter Data'
	},
	fields: [
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'rid',
			type: 'string',
			len: 80,
			comment: 'reference ID'
		},
		{
			name: 'open_uid',
			type: 'int',
			index: true
		},
		{
			name: 'provider_uid',
			type: 'int',
			index: true
		},
		{
			name: 'supervisor_uid',
			type: 'int',
			index: true
		},
		{
			name: 'requires_supervisor',
			type: 'bool',
			index: true,
			defaultValue: false
		},
		{
			name: 'technician_uid',
			type: 'int',
			useNull: true,
			index: true
		},
		{
			name: 'specialty_id',
			type: 'int',
			useNull: true,
			index: true
		},
		{
			name: 'service_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			index: true
		},
		{
			name: 'close_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'onset_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'priority',
			type: 'string',
			len: 60
		},
		{
			name: 'brief_description',
			type: 'string',
			len: 600,
			comment: 'chief complaint'
		},
		{
			name: 'visit_category',
			type: 'string',
			len: 80
		},
		{
			name: 'facility',
			type: 'int',
			len: 1,
			index: true
		},
		{
			name: 'billing_stage',
			type: 'int',
			len: 1,
			index: true
		},
		{
			name: 'followup_time',
			type: 'string',
			len: 25
		},
		{
			name: 'followup_facility',
			type: 'string',
			len: 80
		},
		{
			name: 'review_immunizations',
			type: 'bool'
		},
		{
			name: 'review_allergies',
			type: 'bool'
		},
		{
			name: 'review_active_problems',
			type: 'bool'
		},
		{
			name: 'review_alcohol',
			type: 'string',
			len: 40
		},
		{
			name: 'review_smoke',
			type: 'bool'
		},
		{
			name: 'review_pregnant',
			type: 'string',
			len: 40
		},
		{
			name: 'review_surgery',
			type: 'bool'
		},
		{
			name: 'review_dental',
			type: 'bool'
		},
		{
			name: 'review_medications',
			type: 'bool'
		},
		{
			name: 'message',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'patient_class',
			type: 'string'
		},
		{
			name: 'referring_physician',
			type: 'string'
		}
	],
	idProperty: 'eid',
	proxy: {
		type: 'direct',
		api: {
			read: 'Encounter.getEncounters',
			create: 'Encounter.createEncounter',
			update: 'Encounter.updateEncounter'
		},
		reader: {
			root: 'encounter'
		}
	},
	hasMany: [
		{
			model: 'App.model.patient.Vitals',
			name: 'vitals',
			primaryKey: 'eid',
			foreignKey: 'eid'
		},
		{
			model: 'App.model.patient.ReviewOfSystems',
			name: 'reviewofsystems',
			primaryKey: 'eid',
			foreignKey: 'eid'
		},
		{
			model: 'App.model.patient.FamilyHistory',
			name: 'familyhistory',
			primaryKey: 'eid',
			foreignKey: 'eid'
		},
		{
			model: 'App.model.patient.SOAP',
			name: 'soap',
			primaryKey: 'eid',
			foreignKey: 'eid'
		},
		{
			model: 'App.model.patient.HCFAOptions',
			name: 'hcfaoptions',
			primaryKey: 'eid',
			foreignKey: 'eid'
		},
		{
			model: 'App.model.patient.EncounterService',
			name: 'services',
			primaryKey: 'eid',
			foreignKey: 'eid'
		},
		{
			model: 'App.model.patient.AppointmentRequest',
			name: 'appointmentrequests',
			primaryKey: 'eid',
			foreignKey: 'eid'
		}
	],
	isClose: function(){
		return typeof this.data.close_date != 'undefined' && this.data.close_date != null;
	},

	isSigned: function(){
		return typeof this.data.provider_uid != 'undefined' && this.data.provider_uid != null && this.data.provider_uid != 0;
	},

	isCoSigned: function(){
		return typeof this.data.supervisor_uid != 'undefined' && this.data.supervisor_uid != null && this.data.supervisor_uid != 0;
	}
});

Ext.define('App.model.patient.CVXCodes', {
	extend: 'Ext.data.Model',
	table: {
		name: 'cvx_codes',
		comment: 'Immunizations  CVX'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Immunization ID'
		},
		{
			name: 'cvx_code',
			type: 'int',
			len: 10
		},
		{
			name: 'name',
			type: 'string'
		},
		{
			name: 'description',
			type: 'string',
			dataType: 'text'
		},

		{
			name: 'note',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'status',
			type: 'string',
			len: 25
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Immunizations.getImmunizationsList'
		}
	}
});
Ext.define('App.model.patient.ImmunizationCheck', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Immunization Check ID'
		},
		{
			name: 'pid',
			type: 'int'
		},
		{
			name: 'code',
			type: 'int'
		},
		{
			name: 'vaccine_name',
			type: 'string'
		},
		{
			name: 'alert',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Immunizations.getPatientImmunizations'
		}
	}
});
Ext.define('App.model.patient.LaboratoryTypes', {
	extend: 'Ext.data.Model',
	fields: [
		{
            name: 'id',
            type: 'int',
            comment: 'Laboratory Types ID'
        },
		{
            name: 'label',
            type: 'string'
        },
		{
            name: 'fields'
        }

	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Laboratories.getActiveLaboratoryTypes'
		}
	}
});


Ext.define('App.model.patient.MeaningfulUseAlert', {
	extend: 'Ext.data.Model',
	table: {
		name: 'meaningfulusealert',
		comment: 'Meaningful Use Alert'
	},
	fields: [
		{
            name: 'id',
            type: 'int',
            comment: 'Meaningful Use Alert ID'
        },
		{
            name: 'name',
            type: 'string'
        },
		{
            name: 'val',
            type: 'bool'
        }
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Patient.getMeaningfulUserAlertByPid'
		}
	}
});


Ext.define('App.model.patient.Insurance',{
    extend: 'Ext.data.Model',
    table: {
        name: 'patient_insurances',
        comment: 'Patient Insurances'
    },
    fields: [
        {
            name: 'id',
            type: 'int'
        },
        {
            name: 'code',
            type: 'string',
            len: 40,
            index: true
        },
        {
            name: 'pid',
            type: 'int',
            index: true
        },
        {
            name: 'insurance_id',
            type: 'int',
            index: true
        },
        {
            name: 'insurance_type',
            type: 'string',
            comment: 'P = primary S = supplemental C =complementary D = Disable',
            len: 1,
            index: true
        },
        {
            name: 'effective_date',
            type: 'date',
            dataType: 'date',
            dateFormat: 'Y-m-d'
        },
        {
            name: 'expiration_date',
            type: 'date',
            dataType: 'date',
            dateFormat: 'Y-m-d'
        },
        {
            name: 'group_number',
            type: 'string',
            comment: 'group number',
            len: 40
        },
        {
            name: 'cover_medical',
            type: 'string',
            len: 10,
            index: true
        },
        {
            name: 'cover_dental',
            type: 'string',
            len: 10,
            index: true
        },
        {
            name: 'subscriber_title',
            type: 'string',
            len: 10
        },
        {
            name: 'subscriber_given_name',
            type: 'string',
            len: 80
        },
        {
            name: 'subscriber_middle_name',
            type: 'string',
            len: 80
        },
        {
            name: 'subscriber_surname',
            type: 'string',
            len: 80
        },
        {
            name: 'subscriber_relationship',
            type: 'string',
            len: 40
        },
        {
            name: 'subscriber_dob',
            type: 'date',
            dataType: 'date',
            dateFormat: 'Y-m-d'
        },
        {
            name: 'subscriber_ss',
            type: 'string',
            len: 10
        },
        {
            name: 'subscriber_street',
            type: 'string',
            len: 80
        },
        {
            name: 'subscriber_city',
            type: 'string',
            len: 80
        },
        {
            name: 'subscriber_state',
            type: 'string',
            len: 80
        },
        {
            name: 'subscriber_country',
            type: 'string',
            len: 80
        },
        {
            name: 'subscriber_postal_code',
            type: 'string',
            len: 20
        },
        {
            name: 'subscriber_phone',
            type: 'string',
            len: 20
        },
        {
            name: 'subscriber_employer',
            type: 'string',
            len: 80
        },
        {
            name: 'display_order',
            type: 'int',
            len: 3
        },
        {
            name: 'notes',
            type: 'string'
        },
        {
            name: 'image',
            type: 'string',
            dataType: 'mediumtext',
            comment: 'insurance image base64 string'
        },
        {
            name: 'create_uid',
            type: 'int'
        },
        {
            name: 'update_uid',
            type: 'int'
        },
        {
            name: 'create_date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'update_date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'subscriber_sex',
            type: 'string',
	        len: 1
        },
        {
            name: 'policy_number',
            type: 'string',
	        len: 40
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Insurance.getInsurances',
            create: 'Insurance.addInsurance',
            update: 'Insurance.updateInsurance'
        }
    },
    associations: [
        {
            type: 'belongsTo',
            model: 'App.model.patient.Patient',
            associationKey: 'pid',
            foreignKey: 'pid'
        }
    ]
});

Ext.define('App.model.patient.Medications', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_medications',
		comment: 'Patient Medications'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'ref_order',
			type: 'string',
			len: 100,
			comment: 'reference order number'
		},
		{
			name: 'STR',
			type: 'string',
			len: 180
		},
		{
			name: 'CODE',
			type: 'string',
			len: 40
		},
		{
			name: 'RXCUI',
			type: 'string',
			len: 40
		},
		{
			name: 'NDC',
			type: 'string',
			len: 40
		},
		{
			name: 'dxs',
			type: 'array'
		},
		{
			name: 'dose',
			type: 'string',
			len: 180
		},
		{
			name: 'form',
			type: 'string',
			len: 80
		},
		{
			name: 'route',
			type: 'string',
			len: 80
		},
		{
			name: 'directions',
			type: 'string'
		},
		{
			name: 'dispense',
			type: 'string',
			len: 80
		},
		{
			name: 'refill',
			type: 'string',
			len: 80
		},
		{
			name: 'potency_code',
			type: 'string',
			len: 10
		},
		{
			name: 'days_supply',
			type: 'int',
			useNull: true
		},
		{
			name: 'daw',
			type: 'bool',
			useNull: true,
			comment: 'Dispensed As Written'
		},
		{
			name: 'notes',
			type: 'string',
			len: 210
		},
		{
			name: 'system_notes',
			type: 'string',
			len: 210
		},
		{
			name: 'is_compound',
			type: 'bool'
		},
		{
			name: 'is_supply',
			type: 'bool'
		},
		{
			name: 'prescription_id',
			type: 'int'
		},
		{
			name: 'referred_by',
			type: 'string',
			len: 180
		},
		{
			name: 'administered_uid',
			type: 'int'
		},
		{
			name: 'administered_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'administered_by',
			type: 'string',
			store: false,
			convert: function(v, record){
				return record.data.title + ' ' + record.data.fname + ' ' + record.data.mname + ' ' + record.data.lname;
			}
		},
		{
			name: 'title',
			type: 'string',
			store: false
		},
		{
			name: 'fname',
			type: 'string',
			store: false
		},
		{
			name: 'mname',
			type: 'string',
			store: false
		},
		{
			name: 'lname',
			type: 'string',
			store: false
		},
		{
			name: 'date_ordered',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'begin_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'end_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'active',
			type: 'bool',
			store: false,
			convert: function(v, record){
				return record.data.end_date === null;
			}
		},
		{
			name: 'created_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Medications.getPatientMedications',
			create: 'Medications.addPatientMedication',
			update: 'Medications.updatePatientMedication',
			destroy: 'Medications.destroyPatientMedication'
		},
        writer: {
            writeAllFields: true
        },
		remoteGroup: false
	}
});


Ext.define('App.model.patient.Notes', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_notes'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int',
			index: true
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			index: true
		},
		{
			name: 'body',
			type: 'string',
			len: 600
		},
		{
			name: 'type',
			type: 'string',
			len: 80,
			index: true
		},
		{
			name: 'user_name',
			type: 'string',
			store: false
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Notes.getNotes',
			create: 'Notes.addNote',
			update: 'Notes.updateNote'
		}
	}
});


Ext.define('App.model.patient.PatientActiveProblem', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_active_problems',
		comment: 'Active Problems'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'code',
			type: 'string',
			len: 80
		},
		{
			name: 'code_text',
			type: 'string',
			len: 300
		},
		{
			name: 'code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'begin_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'end_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'occurrence',
			type: 'string'
		},
		{
			name: 'referred_by',
			type: 'string'
		},
		{
			name: 'status',
			type: 'string',
			len: 40
		},
		{
			name: 'status_code',
			type: 'string',
			len: 20
		},
		{
			name: 'status_code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'note',
			type: 'string',
			len: 300
		},
		{
			name: 'active',
			type: 'bool',
			store: false,
			convert: function(v, record){
				return record.data.end_date == '' || record.data.end_date == null
			}
		},
		{
			name: 'created_uid',
			type: 'int'
		},
		{
			name: 'updated_uid',
			type: 'int'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'ActiveProblems.getPatientActiveProblems',
			create: 'ActiveProblems.addPatientActiveProblem',
			update: 'ActiveProblems.updatePatientActiveProblem',
			destroy: 'ActiveProblems.destroyPatientActiveProblem'
		}
	}
});
Ext.define('App.model.patient.PatientArrivalLog', {
	extend: 'Ext.data.Model',
	fields: [
		{
            name: 'id',
            type: 'int',
            comment: 'Patient Arrival Log ID'
        },
		{
            name: 'area_id',
            type: 'int'
        },
		{
            name: 'pid',
            type: 'int'
        },
		{
            name: 'time',
            type: 'string'
        },
		{
            name: 'name',
            type: 'string'
        },
		{
            name: 'status',
            type: 'string'
        },
		{
            name: 'area',
            type: 'string'
        },
		{
            name: 'warning',
            type: 'bool'
        },
		{
            name: 'warningMsg',
            type: 'string'
        },
		{
            name: 'isNew',
            type: 'bool'
        }
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'PoolArea.getPatientsArrivalLog',
			create: 'PoolArea.addPatientArrivalLog',
			update: 'PoolArea.updatePatientArrivalLog',
			destroy: 'PoolArea.removePatientArrivalLog'
		},
		writer: {
			writeAllFields: true
		}
	}
});
Ext.define('App.model.patient.PatientCalendarEvents', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patientcalendarevents',
		comment: 'Patient Calendar Events'
	},
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Patient Calendar Event ID'
        },
        {
            name: 'user_id',
            type: 'int'
        },
        {
            name: 'category',
            type: 'int'
        },
        {
            name: 'facility',
            type: 'int'
        },
        {
            name: 'billing_facillity',
            type: 'int'
        },
        {
            name: 'patient_id',
            type: 'int'
        },
        {
            name: 'title',
            type: 'string'
        },
        {
            name: 'status',
            type: 'string'
        },
        {
            name: 'start',
            type: 'date',
            dateFormat: 'Y-m-d H:s:i'
        },
        {
            name: 'end',
            type: 'date',
            dateFormat: 'Y-m-d H:s:i'
        },
        {
            name: 'data',
            type: 'string'
        },
        {
            name: 'rrule',
            type: 'string'
        },
        {
            name: 'loc',
            type: 'string'
        },
        {
            name: 'notes',
            type: 'string'
        },
        {
            name: 'url',
            type: 'string'
        },
        {
            name: 'ad',
            type: 'string'
        }
    ],
	proxy: {
		type: 'direct',
		api: {
			read: 'Calendar.getPatientFutureEvents'
		}
	}
});
Ext.define('App.model.patient.PatientDocuments', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_documents',
		comment: 'Patient Documents Storage'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 120,
			comment: 'external reference id',
			index: true
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int',
			index: true
		},
		{
			name: 'docType',
			type: 'string',
			index: true
		},
		{
			name: 'docTypeCode',
			type: 'string',
			len: 20,
			index: true
		},
		{
			name: 'name',
			type: 'string'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			index: true
		},
		{
			name: 'url',
			type: 'string'
		},
		{
			name: 'note',
			type: 'string',
			dataType: 'MEDIUMTEXT'
		},
		{
			name: 'title',
			type: 'string'
		},
		{
			name: 'hash',
			type: 'string'
		},
		{
			name: 'encrypted',
			type: 'bool',
			defaultValue: 0
		},
		{
			name: 'entered_in_error',
			type: 'bool',
			defaultValue: 0
		},
		{
			name: 'error_note',
			type: 'string',
			len: 300
		},
		{
			name: 'groupDate',
			type: 'date',
			store: false,
			convert: function(v, record){
				var date = Ext.clone(record.get('date'));
				if(!date) return null;
				date.setHours(0);
				date.setMinutes(0);
				date.setSeconds(0);
				date.setMilliseconds(0);
				return date;
			}
		},
		{
			name: 'document_instance',
			type: 'string',
			len: 10
		},
		{
			name: 'document_id',
			type: 'int'
		},
		{
			name: 'document',
			type: 'string',
			dataType: 'longblob'
		},
		{
			name: 'site',
			type: 'string',
			store: false,
			useNull: true
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'DocumentHandler.getPatientDocuments',
			create: 'DocumentHandler.addPatientDocument',
			update: 'DocumentHandler.updatePatientDocument'
		},
		reader: {
			root: 'data'
		},
		remoteGroup: false
	}
});


Ext.define('App.model.patient.PatientImmunization', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_immunizations',
		comment: 'Patient Immunization'
	},
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Patient Immunization ID'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 10,
			comment: 'vaccine code (CVX)'
		},
		{
			name: 'code_type',
			type: 'string',
			defaultValue: 'CVX',
			len: 15
		},
		{
			name: 'vaccine_name',
			type: 'string',
			len: 300
		},
		{
			name: 'lot_number',
			type: 'string',
			len: 60
		},
		{
			name: 'administer_amount',
			type: 'string',
			len: 40
		},
		{
			name: 'administer_units',
			type: 'string',
			len: 40
		},
		{
			name: 'administered_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'exp_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'administered_uid',
			type: 'int'
		},
		{
			name: 'administered_by',
			type: 'string',
			store: false,
			convert: function(v, record){
				return record.data.administered_title + ' ' +
					record.data.administered_fname + ' ' +
					(record.data.administered_mname || '') + ' ' +
					record.data.administered_lname;
			}
		},
		{
			name: 'administered_title',
			type: 'string',
			store: false
		},
		{
			name: 'administered_fname',
			type: 'string',
			store: false
		},
		{
			name: 'administered_mname',
			type: 'string',
			store: false
		},
		{
			name: 'administered_lname',
			type: 'string',
			store: false
		},
		{
			name: 'route',
			type: 'string',
			len: 40
		},
		{
			name: 'administration_site',
			type: 'string',
			len: 40
		},
		{
			name: 'manufacturer',
			type: 'string',
			len: 180
		},
		{
			name: 'education_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
        {
            name: 'education_doc_published',
            type: 'date',
            dataType: 'date',
            dateFormat: 'Y-m-d'
        },
		{
			name: 'note',
			type: 'string',
			len: 300
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'created_uid',
			type: 'int'
		},
		{
			name: 'updated_uid',
			type: 'int'
		},
		{
			name: 'is_error',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Immunizations.getPatientImmunizations',
			create: 'Immunizations.addPatientImmunization',
			update: 'Immunizations.updatePatientImmunization'
		}
	}
});
Ext.define('App.model.patient.PatientLabsResults', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patientlabsresults',
		comment: 'Patient Labs Results'
	},
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Patient Labs Results ID'
        },
        {
            name: 'pid',
            type: 'int'
        },
        {
            name: 'uid',
            type: 'int'
        },
        {
            name: 'auth_uid',
            type: 'int'
        },
        {
            name: 'eid',
            type: 'int'
        },
        {
            name: 'document_id',
            type: 'int'
        },
        {
            name: 'document_url'
        },
        {
            name: 'date',
            type: 'date',
            dateFormat: 'Y-m-d H:s:i'
        },
        {
            name: 'data'
        },
        {
            name: 'columns'
        },
        {
            name: 'parent_id'
        }
    ],
	proxy: {
		type: 'direct',
		api: {
			read: 'Medical.getPatientLabsResults',
			create: 'Medical.addPatientLabsResult',
			update: 'Medical.updatePatientLabsResult',
			destroy: 'Medical.deletePatientLabsResult'
		}
	}
});
Ext.define('App.model.patient.PatientsLabOrderItems', {
	extend: 'Ext.data.Model',
	fields: [
		{
            name: 'id',
            type: 'int'
        },
		{
            name: 'loinc',
            type: 'string'
        },
		{
            name: 'title',
            type: 'string'
        }
	]
});
Ext.define('App.model.patient.PatientSocialHistory', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_social_history',
		comment: 'Patient Social History'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true,
			comment: 'encounter id'
		},
		{
			name: 'pid',
			type: 'int',
			index: true,
			comment: 'patient ID'
		},
		{
			name: 'category_code',
			type: 'string',
			len: 25
		},
		{
			name: 'category_code_type',
			type: 'string',
			defaultValue: 'SNOMEDCT',
			len: 20
		},
		{
			name: 'category_code_text',
			len: 120,
			type: 'string'
		},
		{
			name: 'observation',
			type: 'string',
			len: 400,
			comment: 'clinical observation for this history'
		},
		{
			name: 'observation_code',
			type: 'string',
			len: 20
		},
		{
			name: 'observation_code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'note',
			type: 'string',
			dataType: 'text'
		},
		{
			name: 'start_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'same as CCD low time'
		},
		{
			name: 'end_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'same as CCD high time'
		},
		{
			name: 'create_uid',
			type: 'int',
			comment: 'user ID who created the record'
		},
		{
			name: 'update_uid',
			type: 'int',
			comment: 'user ID who updated the record'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'SocialHistory.getSocialHistories',
			create: 'SocialHistory.addSocialHistory',
			update: 'SocialHistory.updateSocialHistory',
			destroy: 'SocialHistory.destroySocialHistory'
		},
		remoteGroup: false
	}
});
Ext.define('App.model.patient.PatientsOrderObservation', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_order_results_observations',
		comment: 'Order Result Observations OBX'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'result_id',
			type: 'int',
			index: true,
			comment: 'Order ID'
		},
		{
			name: 'code',
			type: 'string',
			comment: 'OBX 3',
			index: true
		},
		{
			name: 'code_text',
			type: 'string',
			comment: 'OBX 3'
		},
		{
			name: 'code_type',
			type: 'string',
			comment: 'OBX 3'
		},
		{
			name: 'value',
			type: 'string',
			comment: 'OBX 5'
		},
		{
			name: 'units',
			type: 'string',
			comment: 'OBX 6'
		},
		{
			name: 'reference_rage',
			type: 'string',
			comment: 'OBX 7'
		},
		{
			name: 'probability',
			type: 'string',
			comment: 'OBX 9'
		},
		{
			name: 'abnormal_flag',
			type: 'string',
			comment: 'OBX 8'
		},
		{
			name: 'nature_of_abnormal',
			type: 'string',
			comment: 'OBX 10'
		},
		{
			name: 'observation_result_status',
			type: 'string',
			comment: 'OBX 11'
		},
		{
			name: 'date_rage_values',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'OBX 12 Effective Date of Reference Range Values'
		},
		{
			name: 'date_observation',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'OBX 14'
		},
		{
			name: 'observer',
			type: 'string',
			comment: 'OBX 16'
		},
		{
			name: 'performing_org_name',
			type: 'string',
			comment: 'OBX 23'
		},
		{
			name: 'performing_org_address',
			type: 'string',
			comment: 'OBX 24'
		},
		{
			name: 'observer',
			type: 'string',
			comment: 'OBX 16'
		},
		{
			name: 'date_analysis',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'OBX 19'
		},
		{
			name: 'notes',
			type: 'string',
			comment: 'OBX NTE segments'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Orders.getOrderResultObservations',
			create: 'Orders.addOrderResultObservations',
			update: 'Orders.updateOrderResultObservations',
			destroy: 'Orders.deleteOrderResultObservations'
		},
		remoteGroup: false
	},
	associations: [
		{
			type: 'belongsTo',
			model: 'App.model.patient.PatientsOrderResult',
			name: 'result',
			primaryKey: 'id',
			foreignKey: 'result_id'
		}
	]
});
Ext.define('App.model.patient.PatientsOrderResult', {
	extend: 'Ext.data.Model',
	requires: [
		'App.model.patient.PatientsOrderObservation'
	],
	table: {
		name: 'patient_order_results',
		comment: 'Patients Results OBR'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'ordered_uid',
			type: 'int',
			index: true
		},
		{
			name: 'signed_uid',
			type: 'int',
			index: true
		},
		{
			name: 'order_id',
			type: 'int',
			index: true,
			comment: 'OBR-2'
		},
		{
			name: 'code',
			type: 'string',
			len: 40
		},
		{
			name: 'code_text',
			type: 'string',
			len: 150
		},
		{
			name: 'code_type',
			type: 'string',
			len: 20
		},
		{
			name: 'lab_order_id',
			type: 'string',
			len: 50,
			index: true,
			comment: 'OBR-3'
		},
		{
			name: 'lab_name',
			type: 'string',
			len: 150
		},
		{
			name: 'lab_address',
			type: 'string',
			len: 200
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			index: true
		},
		{
			name: 'result_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d',
			index: true
		},
		{
			name: 'observation_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d',
			index: true
		},
		{
			name: 'result_status',
			type: 'string',
			len: 40
		},
		{
			name: 'reason_code',
			type: 'string',
			len: 40
		},
		{
			name: 'specimen_code',
			type: 'string',
			len: 40
		},
		{
			name: 'specimen_text',
			type: 'string',
			len: 180
		},
		{
			name: 'specimen_code_type',
			type: 'string',
			len: 40
		},
		{
			name: 'specimen_notes',
			type: 'string'
		},
		{
			name: 'documentId',
			type: 'string',
			comment: 'this is the document or hl7 message id - example -> doc|123 or hl7|123',
			len: 40
		},
		{
			name: 'upload',
			type: 'string',
			store: false
		},
        {
            name: 'void',
            type: 'bool',
            defaultValue: false,
            comment: 'VOID the order'
        },
        {
            name: 'void_comment',
            type: 'string',
            comment: 'VOID comments',
            len: 100
        }
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Orders.getOrderResults',
			create: 'Orders.addOrderResults',
			update: 'Orders.updateOrderResults',
			destroy: 'Orders.deleteOrderResults'
		},
		remoteGroup: false
	},
	associations: [
		{
			type: 'hasMany',
			model: 'App.model.patient.PatientsOrderObservation',
			name: 'observations',
			foreignKey: 'result_id'
		},
		{
			type: 'belongsTo',
			model: 'App.model.patient.PatientsOrders',
			getterName: 'getOrder',
			setterName: 'setOrder',
			primaryKey: 'id',
			foreignKey: 'order_id'
		}
	]

});

Ext.define('App.model.patient.PatientsOrders', {
	extend: 'Ext.data.Model',
	requires: [
		'App.model.patient.PatientsOrderResult'
	],
	table: {
		name: 'patient_orders',
		comment: 'Patients Orders'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true,
			comment: 'encounter id'
		},
		{
			name: 'pid',
			type: 'int',
			index: true,
			comment: 'patient ID'
		},
		{
			name: 'uid',
			type: 'int',
			comment: 'user ID who created the order'
		},
		{
			name: 'hl7_recipient_id',
			type: 'int',
			comment: 'laboratory id if electronic request'
		},
		{
			name: 'code',
			type: 'string',
			len: 25,
			comment: 'Order code'
		},
		{
			name: 'code_type',
			type: 'string',
			defaultValue: 'LOINC',
			len: 15,
			comment: 'Order code type LOINC'
		},
		{
			name: 'description',
			type: 'string',
			comment: 'Order Text Description'
		},
		{
			name: 'date_ordered',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'when the order was generated',
			index: true
		},
		{
			name: 'date_collected',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			comment: 'when the results were collected',
			index: true
		},
		{
			name: 'priority',
			type: 'string',
			len: 25,
			comment: 'order priority',
			index: true
		},
		{
			name: 'status',
			type: 'string',
			len: 25,
			comment: 'order status',
			index: true
		},
		{
			name: 'order_type',
			type: 'string',
			comment: 'Order is radiology or laboratory.',
			index: true
		},
        {
            name: 'type',
            type: 'string',
            store: false,
            convert: function(v, record)
            {
                switch(record.data.order_type)
                {
                    case 'lab':
                        return _('laboratory');
                        break;
                    case 'rad':
                        return _('radiology');
                        break;
                }
            }
        },
		{
			name: 'note',
			type: 'string'
		},
        {
            name: 'void',
            type: 'boolean',
            defaultValue: false,
            comment: 'VOID the Order'
        },
        {
            name: 'void_comment',
            type: 'string',
            comment: 'VOID Comments',
            len: 100
        }
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Orders.getPatientOrders',
			create: 'Orders.addPatientOrder',
			update: 'Orders.updatePatientOrder',
			destroy: 'Orders.deletePatientOrder'
		},
		remoteGroup: false
	},
	associations: [
		{
			type: 'hasMany',
			model: 'App.model.patient.PatientsOrderResult',
			name: 'results',
			foreignKey: 'order_id'
		}
	]
});

Ext.define('App.model.patient.PatientsPrescriptionMedications', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_medications',
		comment: 'Patient Medications'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'prescription_id',
			type: 'int'
		},
		{
			name: 'STR',
			type: 'string',
			len: 180
		},
		{
			name: 'CODE',
			type: 'string',
			len: 40
		},
		{
			name: 'RXCUI',
			type: 'string',
			len: 40
		},
		{
			name: 'NDC',
			type: 'string',
			len: 40
		},
		{
			name: 'dxs',
			type: 'string'
		},
		{
			name: 'dose',
			type: 'string',
			len: 180
		},
		{
			name: 'form',
			type: 'string',
			len: 80
		},
		{
			name: 'route',
			type: 'string',
			len: 80
		},
		{
			name: 'directions',
			type: 'string'
		},
		{
			name: 'dispense',
			type: 'string',
			len: 80
		},
		{
			name: 'refill',
			type: 'string',
			len: 80
		},
		{
			name: 'daw',
			type: 'bool'
		},
		{
			name: 'notes',
			type: 'string',
			len: 300
		},
		{
			name: 'referred_by',
			type: 'string',
			len: 180
		},
		{
			name: 'date_ordered',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'created_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'begin_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'end_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'active',
			type: 'bool',
			store: false,
			convert: function(v, record){
				return record.data.end_date == null;
			}
		}
	]
});
Ext.define('App.model.patient.PatientsPrescriptions', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'int',
			comment: 'Patient Prescription ID'
		},
		{
			name: 'pid',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'created_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		} ,
		{
			name: 'note',
			type: 'string'
		},
		{
			name: 'document_id',
			type: 'int'
		},
		{
			name: 'docUrl',
			type: 'string'
		},
		{
			name: 'medications'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Prescriptions.getPrescriptions',
			create: 'Prescriptions.addPrescription',
			update: 'Prescriptions.updatePrescription'
		}
	}
});
Ext.define('App.model.patient.PatientsXrayCtOrders', {
	extend: 'Ext.data.Model',
	fields: [
		{
            name: 'id',
            type: 'int',
            comment: 'Patients XrayCt Orders ID'
        },
		{
            name: 'eid',
            type: 'int'
        },
		{
            name: 'pid',
            type: 'int'
        },
		{
            name: 'uid',
            type: 'int'
        },
		{
            name: 'description',
            type: 'string' },
		{
            name: 'date_created',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
		{
            name: 'laboratory_id',
            type: 'int'
        },
		{
            name: 'document_id',
            type: 'int'
        },
		{
            name: 'order_type',
            type: 'string',
            defaultValue: 'rad'
        },
		{
            name: 'order_items',
            type: 'string'
        },
		{
            name: 'note',
            type: 'string'
        },
		{
            name: 'docUrl',
            type: 'string'
        }
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Orders.getPatientXrayCtOrders',
			create: 'Orders.addPatientXrayCtOrder',
			update: 'Orders.updatePatientXrayCtOrder'
		}
	}
});
Ext.define('App.model.patient.PreventiveCare', {
	extend: 'Ext.data.Model',
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Preventive Care ID'
        },
        {
            name: 'pid',
            type: 'int'
        },
        {
            name: 'eid',
            type: 'int'
        },
        {
            name: 'uid',
            type: 'int'
        },
        {
            name: 'description'
        },
        {
            name: 'date',
            dateFormat: 'Y-m-d'
        },
        {
            name: 'observation'
        },
        {
            name: 'type'
        },
        {
            name: 'dismiss'
        },
        {
            name: 'reason'
        },
        {
            name: 'alert',
            type: 'bool'
        }
    ],
	proxy: {
		type: 'direct',
		api: {
			update: 'PreventiveCare.addPreventivePatientDismiss',
			read: 'PreventiveCare.getPreventiveCareCheck'
		}
	}
});
Ext.define('App.model.patient.QRCptCodes', {
	extend: 'Ext.data.Model',
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'QR CPT Code ID'
        },
        {
            name: 'eid',
            type: 'int'
        },
        {
            name: 'code',
            type: 'string'
        },
        {
            name: 'code_text',
            type: 'string'
        },
        {
            name: 'code_text_medium',
            type: 'string'
        },
        {
            name: 'place_of_service',
            type: 'string'
        },
        {
            name: 'emergency',
            type: 'bool'
        },
        {
            name: 'charge',
            type: 'string'
        },
        {
            name: 'days_of_units',
            type: 'string'
        },
        {
            name: 'essdt_plan',
            type: 'string'
        },
        {
            name: 'modifiers',
            type: 'string'
        },
        {
            name: 'status',
            type: 'int',
            defaultValue: 0
        }
    ],
	proxy: {
		type: 'direct',
		api: {
			read: 'Services.getCptCodes'
		},
		reader: {
			root: 'rows',
			totalProperty: 'totals'
		}
	}
});
Ext.define('App.model.patient.Referral', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_referrals',
		comment: 'Patients Referrals'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true,
			comment: 'encounter id'
		},
		{
			name: 'pid',
			type: 'int',
			index: true,
			comment: 'patient ID'
		},
		{
			name: 'create_uid',
			type: 'int',
			comment: 'user ID who created the referral'
		},
		{
			name: 'update_uid',
			type: 'int',
			comment: 'user ID who updated the referral'
		},
		{
			name: 'create_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'update_date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'referral_date',
			type: 'date',
			dataType: 'date',
			dateFormat: 'Y-m-d'
		},
		{
			name: 'service_text',
			type: 'string',
			len: 300
		},
		{
			name: 'service_code',
			type: 'string',
			len: 10
		},
		{
			name: 'service_code_type',
			type: 'string',
			comment: 'CPT SNOMED',
			len: 10
		},
		{
			name: 'referal_reason',
			type: 'string',
			len: 1000
		},
		{
			name: 'diagnosis_text',
			type: 'string',
			len: 300
		},
		{
			name: 'diagnosis_code',
			type: 'string',
			len: 10
		},
		{
			name: 'diagnosis_code_type',
			type: 'string',
			len: 10
		},
		{
			name: 'is_external_referral',
			type: 'bool'
		},
		{
			name: 'refer_by',
			type: 'string',
			len: 80
		},
		{
			name: 'refer_by_text',
			type: 'string',
			len: 120
		},
		{
			name: 'refer_to',
			type: 'string',
			len: 80
		},
		{
			name: 'refer_to_text',
			type: 'string',
			len: 120
		},
		{
			name: 'risk_level',
			type: 'string',
			len: 20
		},
		{
			name: 'send_record',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Referrals.getPatientReferrals',
			create: 'Referrals.addPatientReferral',
			update: 'Referrals.updatePatientReferral',
			destroy: 'Referrals.deletePatientReferral'
		},
		remoteGroup: false
	}
});

Ext.define('App.model.patient.Reminders', {
	extend: 'Ext.data.Model',
	table: {
		name: 'patient_reminders'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int',
			index: true
		},

		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s',
			index: true
		},
		{
			name: 'body',
			type: 'string',
			len: 600
		},
		{
			name: 'type',
			type: 'string',
			len: 80,
			index: true
		},
		{
			name: 'user_name',
			type: 'string',
			store: false
		},
		{
			name: 'active',
			type: 'bool',
			defaultValue: true
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Reminders.getReminders',
			create: 'Reminders.addReminder',
			update: 'Reminders.updateReminder'
		},
		reader: {
			root: 'data'
		}
	}
});


Ext.define('App.model.patient.Surgery', {
    extend: 'Ext.data.Model',
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Surgery ID'
        },
        {
            name: 'eid',
            type: 'int'
        },
        {
            name: 'pid',
            type: 'int'
        },
        {
            name: 'created_uid',
            type: 'int'
        },
        {
            name: 'updated_uid',
            type: 'int'
        },
        {
            name: 'create_date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'surgery',
            type: 'string'
        },
        {
            name: 'surgery_id',
            type: 'string'
        },
        {
            name: 'date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'referred_by',
            type: 'string'
        },
        {
            name: 'outcome',
            type: 'string'
        },
        {
            name: 'notes',
            type: 'string'
        },
        {
            name: 'alert',
            type: 'bool'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Medical.getPatientSurgery',
            create: 'Medical.addPatientSurgery',
            update: 'Medical.updatePatientSurgery'
        }
    }
});
Ext.define('App.model.patient.VectorGraph', {
    extend: 'Ext.data.Model',
    table: {
        name: 'vectorgraph',
        comment: 'Vector Graphics'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Vector Graphics ID'
        },
        {
            name: 'age_mos',
            type: 'float'
        },
        {
            name: 'height',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P85',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        }
    }

});
Ext.define('App.model.patient.VisitPayment', {
    extend: 'Ext.data.Model',
    table: {
        name: 'visitpayment',
        comment: 'Visit Payment'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Visit Payment ID'
        },
        {
            name: 'no',
            type: 'int'
        },
        {
            name: 'date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'facility',
            type: 'string'
        },
        {
            name: 'received_from',
            type: 'string'
        },
        {
            name: 'amount',
            type: 'string'
        },
        {
            name: 'for_payment_of',
            type: 'string'
        },
        {
            name: 'paid_by',
            type: 'string'
        },
        {
            name: 'description',
            type: 'string'
        },
        {
            name: 'next_appointment',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'accounted_amount',
            type: 'string'
        },
        {
            name: 'payment_amount',
            type: 'string'
        },
        {
            name: 'balance_due',
            type: 'string'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'Encounter.Checkout'
        },
        reader: {
            type: 'json'
        }
    }
});
Ext.define('App.model.patient.charts.BMIForAge', {
    extend: 'Ext.data.Model',
    table: {
        name: 'bmiforage',
        comment: 'BMI For Age'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'BMI For Age ID'
        },
        {
            name: 'age',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 8
        }
    }

});
Ext.define('App.model.patient.charts.HeadCircumferenceInf', {
    extend: 'Ext.data.Model',
    table: {
        name: 'headcircumferenceinf',
        comment: 'Head Circumference Information'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Head Circumference Information ID'
        },
        {
            name: 'age',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 4
        }
    }

});
Ext.define('App.model.patient.charts.LengthForAgeInf', {
    extend: 'Ext.data.Model',
    table: {
        name: 'lengthforageinf',
        comment: 'Length For Age Information'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Length For Age Information ID'
        },
        {
            name: 'age',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 2
        }
    }

});
Ext.define('App.model.patient.charts.StatureForAge', {
    extend: 'Ext.data.Model',
    table: {
        name: 'statureforage',
        comment: 'Stature For Age'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Stature For Age ID'
        },
        {
            name: 'age',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 7
        }
    }

});
Ext.define('App.model.patient.charts.WeightForAge', {
    extend: 'Ext.data.Model',
    table: {
        name: 'weightforage',
        comment: 'Weight For Age'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Weight For Age ID'
        },
        {
            name: 'age',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 6
        }
    }

});
Ext.define('App.model.patient.charts.WeightForAgeInf', {
    extend: 'Ext.data.Model',
    table: {
        name: 'weightforageinf',
        comment: 'Weight For Age Information'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Weight For Age Information ID'
        },
        {
            name: 'age',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 1
        }
    }

});
Ext.define('App.model.patient.charts.WeightForRecumbentInf', {
    extend: 'Ext.data.Model',
    table: {
        name: 'weightforrecumbentinf',
        comment: 'Weight For Recumbent Information'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Weight For Recumbent Information ID'
        },
        {
            name: 'age',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 3
        }
    }

});
Ext.define('App.model.patient.charts.WeightForStature', {
    extend: 'Ext.data.Model',
    table: {
        name: 'weightforstature',
        comment: 'Weight For Stature'
    },
    fields: [
        {
            name: 'id',
            type: 'int',
            comment: 'Weight For Stature ID'
        },
        {
            name: 'height',
            type: 'float'
        },
        {
            name: 'PP',
            type: 'float'
        },
        {
            name: 'P3',
            type: 'float'
        },
        {
            name: 'P5',
            type: 'float'
        },
        {
            name: 'P10',
            type: 'float'
        },
        {
            name: 'P25',
            type: 'float'
        },
        {
            name: 'P50',
            type: 'float'
        },
        {
            name: 'P75',
            type: 'float'
        },
        {
            name: 'P85',
            type: 'float'
        },
        {
            name: 'P90',
            type: 'float'
        },
        {
            name: 'P95',
            type: 'float'
        },
        {
            name: 'P97',
            type: 'float'
        }
    ],
    proxy: {
        type: 'direct',
        api: {
            read: 'VectorGraph.getGraphData'
        },
        reader: {
            type: 'json'
        },
        extraParams: {
            type: 5
        }
    }

});
Ext.define('App.model.areas.PatientArea', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'pid',
			type: 'int',
			comment: 'Pool Areas ID'
		},
		{
			name: 'eid',
			type: 'int'
		},
		{
			name: 'name',
			type: 'string'
		},
		{
			name: 'patient'
		},
		{
			name: 'shortName',
			type: 'string'
		},
		{
			name: 'poolArea',
			type: 'string'
		},
		{
			name: 'floorPlanId',
			type: 'int'
		},
		{
			name: 'zoneId',
			type: 'int'
		},
		{
			name: 'patientZoneId',
			type: 'int'
		},
		{
			name: 'priority',
			type: 'string'
		},
		{
			name: 'rank',
			type: 'int'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'PoolArea.getPatientsByPoolAreaAccess'
		}
	}
});
Ext.define('App.model.areas.PoolArea', {
	extend: 'Ext.data.Model',
	table: {
		name:'pool_areas'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'title',
			type: 'string',
			len: 80
		},
		{
			name: 'floor_plan_id',
			type: 'int'
		},
		{
			name: 'facility_id',
			type: 'int'
		},
		{
			name: 'sequence',
			type: 'int'
		},
		{
			name: 'active',
			type: 'bool'
		}
	]
});
Ext.define('App.model.areas.PoolDropAreas', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'name',
			type: 'string'
		},
		{
			name: 'pid',
			type: 'int'
		},
		{
			name: 'pic',
			type: 'string'
		},
		{
			name: 'time_in',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		}
	]
});
Ext.define('App.view.patient.windows.PreventiveCare', {
	extend: 'App.ux.window.Window',
	title: _('preventive_care_window'),
	closeAction: 'hide',
	bodyStyle: 'background-color:#fff',
	modal: true,
	bodyPadding: 5,
	initComponent: function(){
		var me = this;

		me.patientPreventiveCare = Ext.create('App.store.patient.PreventiveCare', {
			groupField: 'type',
			sorters: ['type'],
			autoSync: true
		});

		me.grid = Ext.create('Ext.grid.Panel', {
			store: me.patientPreventiveCare,
			height: 400,
			width: 700,
			features: Ext.create('Ext.grid.feature.Grouping', {
				groupHeaderTpl: _('type') + ': {name} ({rows.length} ' + _('item') + '{[values.rows.length > 1 ? "s" : ""]})',
				hideGroupedHeader: true,
				startCollapsed: true
			}),
			columns: [
				{
					header: _('type'),
					dataIndex: 'type',
					width: 200
				},
				{
					header: _('description'),
					dataIndex: 'description',
					width: 200
				},
				{
					header: _('reason'),
					dataIndex: 'reason',
					flex: 1

				}

			],
			plugins: Ext.create('App.ux.grid.RowFormEditing', {
				autoCancel: false,
				errorSummary: false,
				clicksToEdit: 1,
				items: [
					{
						title: _('general'),
						xtype: 'container',
						padding: 10,
						layout: 'vbox',
						items: [
							{
								/**
								 * Line one
								 */
								xtype: 'fieldcontainer',
								layout: 'hbox',
								defaults: { margin: '0 10 5 0' },
								items: [
									{
										xtype: 'textfield',
										name: 'reason',
										fieldLabel: _('reason'),
										width: 585,
										labelWidth: 70,
										disabled: true,
										allowBlank: false,
										action: 'reason'
									}

								]

							},
							{
								/**
								 * Line two
								 */
								xtype: 'fieldcontainer',
								layout: 'hbox',
								defaults: { margin: '0 10 5 0' },
								items: [

									{
										xtype: 'textfield',
										fieldLabel: _('observation'),
										name: 'observation',
										width: 250,
										labelWidth: 70,
										disabled: true,
										action: 'observation'
									},
									{
										fieldLabel: _('date'),
										xtype: 'datefield',
										disabled: true,
										action: 'date',
										width: 200,
										labelWidth: 40,
										format: g('date_display_format'),
										name: 'date'

									},
									{
										xtype: 'checkboxfield',
										name: 'dismiss',
										fieldLabel: _('dismiss_alert'),
										enableKeyEvents: true,
										listeners: {
											scope: me,
											change: me.onChangeOption

										}
									},
									{
										xtype: 'textfield',
										hidden: true,
										name: 'eid',
										action: 'eid'
									}

								]

							}
						]
					}

				]
			})


		});

		me.items = [ me.grid ];

		//		me.listeners = {
		//			scope: me,
		//			show: me.onPreventiveCareWindowShow
		//		};

		this.callParent(arguments);

	},
	onChangeOption: function(field, newValue){
		var reason = field.up('form').query('[action="reason"]')[0],
			date = field.up('form').query('[action="date"]')[0],
			eid = field.up('form').query('[action="eid"]')[0],
			observation = field.up('form').query('[action="observation"]')[0];

		eid.setValue(app.patient.eid);

		if(newValue){
			reason.setDisabled(false);
			date.setDisabled(false);
			observation.setDisabled(false);
		}else if(!newValue){
			reason.setDisabled(true);
			date.setDisabled(true);
			observation.setDisabled(true);

		}else{
			reason.setDisabled(true);
			date.setDisabled(true);
			observation.setDisabled(true);
		}
	},

	loadPatientPreventiveCare: function(){
		var me = this;
		this.patientPreventiveCare.load({
			scope: me,
			params: {
				pid: app.patient.pid
			},
			callback: function(records, operation, success){
				if(records.length > 0){
					me.show();
					// GAIAEH-177 GAIAEH-173 170.302.r Audit Log (core)
					app.AuditLog('Patient preventive care viewed');
					return true;
				}else{
					return false;
				}
			}
		});
	}

	//	onPreventiveCareWindowShow: function() {
	//	    this.patientPreventiveCare.load({params: {pid: app.patient.pid }});
	//
	//    }

});
Ext.define('App.view.patient.windows.DocumentViewer', {
	extend: 'Ext.window.Window',
	xtype: 'documentviewerwindow',
	title: _('documents_viewer_window'),
	layout: 'fit',
	height: 700,
	width: 800,
	bodyStyle: 'background-color:#fff',
	maximizable: true,
	defaults: {
		margin: 5
	},
	tbar: [
		'->',
		{
			text: _('archive_document'),
			itemId: 'archiveDocumentBtn',
			icon: 'resources/images/icons/save.png'
		}
	]
});
Ext.define('App.view.patient.windows.NewEncounter', {
	extend: 'Ext.window.Window',
	itemId: 'EncounterDetailWindow',
	title: _('encounter'),
	closeAction: 'hide',
	closable: false,
	modal: true,
	width: 660,

	initComponent: function(){
		var me = this;

		me.store = Ext.create('App.store.patient.Encounters');

		Ext.apply(me, {
			items: [
				me.encForm = Ext.create('Ext.form.Panel', {
					itemId: 'EncounterDetailForm',
					border: false,
					bodyPadding: '10 10 0 10'
				})
			],
			buttons: [
				{
					text: _('save'),
					action: 'encounter',
					scope: me,
					handler: me.onFormSave
				},
				{
					text: _('cancel'),
					scope: me,
					handler: me.cancelNewEnc
				}
			],
			listeners: {
				show: me.checkValidation,
				hide: me.resetRecord
			}
		}, me);

		me.getFormItems(this.encForm, 5);

		me.callParent(arguments);
	},

	checkValidation: function()
    {
        var me = this,
            form = me.down('form').getForm(),
            record = form.getRecord();

		if(app.patient.pid)
        {
			if(!record && a('add_encounters')){

				me.loadRecord(
					Ext.create('App.model.patient.Encounter', {
						pid: app.patient.pid,
						service_date: new Date(),
						priority: 'Minimal',
						open_uid: app.user.id,
						facility: app.user.facility,
						billing_facility: app.user.facility,
						brief_description: g('default_chief_complaint')
					})
				);

				Encounter.checkOpenEncountersByPid(app.patient.pid, function(provider, response){
					if(response.result.encounter){
						Ext.Msg.show({
							title: 'Oops! ' + _('open_encounters_found') + '...',
							msg: _('do_you_want_to') + ' <strong>' + _('continue_creating_the_new_encounters') + '</strong><br>"' + _('click_no_to_review_encounter_history') + '"',
							buttons: Ext.Msg.YESNO,
							icon: Ext.Msg.QUESTION,
							fn: function(btn){
								if(btn != 'yes'){
									me.hide();
									form.reset();
								}
							}
						});
					}
				});
			} else if(record && a('edit_encounters')){

				// placeholder

			} else{
				app.accessDenied();
			}
		}else{
			app.currPatientError();
		}
	},

	onFormSave: function(btn){
		var me = this,
			form = me.encForm.getForm(),
			values = form.getValues(),
			record = form.getRecord(),
			isNew = record.data.eid === 0;
		if(form.isValid()){
			if((isNew && a('add_encounters') || (!isNew && a('edit_encounters')))){
				record.set(values);

				record.save({
					callback: function(record){
						if(isNew){
							var data = record.data;
							app.patientButtonRemoveCls();
							app.patientBtn.addCls(data.priority);
							app.openEncounter(data.eid);
						}
						me.close();
					}
				});
			}else{
				btn.up('window').close();
				app.accessDenied();
			}
		}
	},

	loadRecord: function(record){
		this.encForm.getForm().loadRecord(record);
	},

	resetRecord: function(){
		this.down('form').getForm().reset(true);
		delete this.down('form').getForm()._record;
	},

	cancelNewEnc: function(){
		this.close();
	}

});

Ext.define('App.view.patient.windows.ArrivalLog', {
	extend: 'App.ux.window.Window',
	title      : _('patient_arrival_log'),
	closeAction: 'hide',
    layout     : 'fit',
	modal      : true,
	width      : 900,
	height     : 600,
	maximizable: true,
	initComponent: function() {
		var me = this;


        me.store = Ext.create('App.store.patient.PatientArrivalLog',{
            autoSync:true
        });

		me.tbar = [
            {
                xtype       : 'patienlivetsearch',
                fieldLabel  : _('look_for_patient'),
                width       : 400,
                hideLabel:false,
                enableKeyEvents:true,
                listeners:{
                    scope:me,
                    select:me.onPatientSearchSelect,
                    keyup:me.onPatientSearchKeyUp

                }
		    },
            '-',
            {
                text: _('add_new_patient'),
                iconCls:'icoAddRecord',
                action:'newPatientBtn',
                disabled:true,
                scope:me,
                handler:me.onNewPatient
		    },
            '->',
            {
                xtype:'tool',
                type: 'refresh',
                scope:me,
                handler:me.onGridReload
            }
        ];

		me.items = [
            me.ckGrid = Ext.create('Ext.grid.Panel',{
                store:me.store,
                margin:5,
                columns:[
                    {
                        xtype:'actioncolumn',
                        width:25,
                        items: [
                            {
                                icon: 'resources/images/icons/delete.png',  // Use a URL in the icon config
                                tooltip: _('remove'),
                                scope:me,
                                handler: me.onPatientRemove
                            }
                        ]
                    },
                    {
                        header: _('time'),
                        dataIndex:'time',
	                    width:130
                    },
                    {
                        header: _('record') + ' #',
                        dataIndex:'pid'
                    },
                    {
                        header: _('patient_name'),
                        dataIndex:'name',
                        flex:1
                    },
                    {
                        header: _('insurance'),
                        dataIndex:'insurance'
                    },
                    {
                        header: _('area'),
                        dataIndex:'area'
                    },
                    {
                        width:25,
                        dataIndex:'warning',
                        renderer:me.warnRenderer
                    }
                ],
                listeners:{
                    scope:me,
                    itemdblclick:me.onPatientDlbClick
                }

            })
		];

		me.listeners = {
			scope:me,
			show:me.onWinShow
		};

		me.callParent(arguments);
	},

    onPatientSearchSelect:function(field, record){
        var me = this,
            store = me.query('grid')[0].getStore(),
            btn = me.query('button[action="newPatientBtn"]')[0];
        store.add({
            pid:record[0].data.pid,
            name:record[0].data.fullname,
            time: Ext.Date.format(new Date(), 'Y-m-d H:i:s'),
            isNew:false
        });
        field.reset();
        btn.setDisabled(true);
    },

    onPatientSearchKeyUp:function(field){
        this.query('button[action="newPatientBtn"]')[0].setDisabled(field.getValue() == null);
    },

    onNewPatient:function(btn){
        var me = this,
            field = me.query('patienlivetsearch')[0],
            name = field.getValue(),
            store = me.query('grid')[0].getStore();
        field.reset();
        btn.disable();
        store.add({
            name:name,
            time: Ext.Date.format(new Date(), 'Y-m-d H:i:s'),
            isNew:true
        });
    },

    onPatientRemove:function(grid, rowIndex){
        var store = grid.getStore(),
	        me = this,
            record = store.getAt(rowIndex);
	    Encounter.checkForAnOpenedEncounterByPid({pid:record.data.pid,date:Ext.Date.format(new Date(), 'Y-m-d H:i:s')}, function(provider, response){
		    if(response.result) {
			    me.msg('Oops!', _('patient_have_a_opened_encounter'));
		    } else {
			    me.msg('Sweet!', _('patient_have_been_removed'));
			    store.remove(record);
		    }
	    });




    },

    onPatientDlbClick:function(grid, record){
        var me = this,
            data = record.data;
	    // TODO: pass priority!
        app.setPatient(data.pid, data.name, null, function(){
            app.openPatientSummary();
        });
        me.close();
    },

    onGridReload:function(){
        this.store.load();
    },

	onWinShow:function(){
        var me = this;
        me.onGridReload();
        new Ext.util.DelayedTask(function(){
            me.query('patienlivetsearch')[0].focus();
        }).delay(1000);

	}

});

Ext.define('App.view.patient.windows.DocumentErrorNote', {
	extend: 'Ext.window.Window',
	xtype: 'patientdocumenterrornotewindow',
	draggable: false,
	modal: true,
	autoShow: true,
	title: _('error_note'),
	items: [
		{
			xtype: 'form',
			bodyPadding: 10,
			width: 400,
			items: [
				{

					xtype: 'textareafield',
					anchor: '100%',
					labelWidth: 70,
					labelAlign: 'top',
					name: 'error_note',
					allowBlank: false
				}
			]
		}
	],
	buttons: [
		{
			text: _('cancel'),
			itemId: 'DocumentErrorNoteCancelBtn',
			handler: function(btn){
				btn.up('window').close();
			}
		},
		{
			text: _('save'),
			itemId: 'DocumentErrorNoteSaveBtn'
		}
	]
});
Ext.define('App.store.patient.CheckoutAlertArea', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.CheckoutAlertArea',
	remoteSort: false,
	autoLoad  : false
});


Ext.define('App.model.patient.Patient',{
    extend: 'Ext.data.Model',
    requires: [
        'App.model.patient.Insurance',
        'App.model.patient.Allergies',
        'App.model.patient.Medications',
        'App.model.patient.PatientActiveProblem'
    ],
    table: {
        name: 'patient'
    },
    fields: [
        {
            name: 'pid',
            type: 'int',
            comment: 'patient ID'
        },
        {
            name: 'title',
            type: 'string',
            comment: 'Title Mr. Sr.',
            len: 10
        },
        {
            name: 'fname',
            type: 'string',
            comment: 'first name',
            index: true,
            len: 60
        },
        {
            name: 'mname',
            type: 'string',
            comment: 'middle name',
            index: true,
            len: 40
        },
        {
            name: 'lname',
            type: 'string',
            comment: 'last name',
            index: true,
            len: 60
        },
        {
            name: 'name',
            type: 'string',
            store: false
        },
        {
            name: 'sex',
            type: 'string',
            comment: 'sex',
            index: true,
            len: 10
        },
        {
            name: 'DOB',
            type: 'date',
            comment: 'day of birth',
            dateFormat: 'Y-m-d H:i:s',
            index: true,
            defaultValue: '0000-00-00 00:00:00'
        },
        {
            name: 'DOBFormatted',
            type: 'string',
            persist: false
        },
        {
            name: 'marital_status',
            type: 'string',
            comment: 'marital status',
            len: 40
        },
        {
            name: 'SS',
            type: 'string',
            index: true,
            comment: 'social security',
            len: 40
        },
        {
            name: 'pubpid',
            type: 'string',
            index: true,
            comment: 'external reference id',
            len: 40
        },
        {
            name: 'pubaccount',
            type: 'string',
            index: true,
            comment: 'external reference account',
            len: 40
        },
        {
            name: 'record_number',
            type: 'string',
            persist: false
        },
        {
            name: 'drivers_license',
            type: 'string',
            index: true,
            comment: 'driver licence #',
            len: 40
        },
        {
            name: 'drivers_license_state',
            type: 'string',
            len: 40
        },
        {
            name: 'drivers_license_exp',
            type: 'date',
            dataType: 'date',
            dateFormat: 'Y-m-d'
        },
        {
            name: 'fulladdress',
            type: 'string',
            persist: false,
            convert: false
        },
        {
            name: 'phones',
            type: 'string',
            store: false
        },
        {
            name: 'provider',
            type: 'string',
            comment: 'default provider',
            len: 40
        },
        {
            name: 'pharmacy',
            type: 'string',
            comment: 'default pharmacy',
            len: 40
        },
        {
            name: 'hipaa_notice',
            type: 'string',
            comment: 'HIPAA notice status',
            len: 40
        },
        {
            name: 'race',
            type: 'string',
            comment: 'race',
            len: 40
        },
        {
            name: 'ethnicity',
            type: 'string',
            comment: 'ethnicity',
            len: 40
        },
        {
            name: 'language',
            type: 'string',
            comment: 'language',
            len: 10
        },
        {
            name: 'allow_leave_msg',
            type: 'bool'
        },
        {
            name: 'allow_voice_msg',
            type: 'bool'
        },
        {
            name: 'allow_mail_msg',
            type: 'bool'
        },
        {
            name: 'allow_sms',
            type: 'bool'
        },
        {
            name: 'allow_email',
            type: 'bool'
        },
        {
            name: 'allow_immunization_registry',
            type: 'bool'
        },
        {
            name: 'allow_immunization_info_sharing',
            type: 'bool'
        },
        {
            name: 'allow_health_info_exchange',
            type: 'bool'
        },
        {
            name: 'allow_patient_web_portal',
            type: 'bool'
        },
        {
            name: 'occupation',
            type: 'string',
            comment: 'patient occupation',
            len: 40
        },
        {
            name: 'employer_name',
            type: 'string',
            comment: 'employer name',
            len: 40
        },
        {
            name: 'employer_address',
            type: 'string',
            comment: 'employer address',
            len: 40
        },
        {
            name: 'employer_city',
            type: 'string',
            comment: 'employer city',
            len: 40
        },
        {
            name: 'employer_state',
            type: 'string',
            comment: 'employer state',
            len: 40
        },
        {
            name: 'employer_country',
            type: 'string',
            comment: 'employer country',
            len: 40
        },
        {
            name: 'employer_postal_code',
            type: 'string',
            comment: 'employer postal code',
            len: 10
        },
        {
            name: 'rating',
            type: 'int',
            comment: 'patient stars rating'
        },
        {
            name: 'image',
            type: 'string',
            dataType: 'mediumtext',
            comment: 'patient image base64 string'
        },
        {
            name: 'qrcode',
            type: 'string',
            dataType: 'mediumtext',
            comment: 'patient QRCode base64 string'
        },
        {
            name: 'birth_place',
            type: 'string',
            len: 150
        },
        {
            name: 'birth_multiple',
            type: 'bool'
        },
        {
            name: 'birth_order',
            type: 'int',
            defaultValue: 1,
            len: 2
        },
        {
            name: 'is_veteran',
            type: 'string',
            len: 1
        },
        {
            name: 'deceased',
            type: 'string',
            len: 1
        },
        {
            name: 'death_date',
            type: 'date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'alias',
            type: 'string',
            len: 80
        },
        {
            name: 'citizenship',
            type: 'string',
            len: 80
        },
        {
            name: 'primary_facility',
            type: 'int'
        },
        {
            name: 'primary_provider',
            type: 'int'
        },
        {
            name: 'administrative_status',
            type: 'string',
            comment: 'active | inactive | merged',
            len: 15
        },
        {
            name: 'create_uid',
            type: 'int',
            comment: 'create user ID'
        },
        {
            name: 'update_uid',
            type: 'int',
            comment: 'update user ID'
        },
        {
            name: 'create_date',
            type: 'date',
            comment: 'create date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'update_date',
            type: 'date',
            comment: 'last update date',
            dateFormat: 'Y-m-d H:i:s'
        },
        {
            name: 'portal_password',
            type: 'string',
            dataType: 'blob',
            encrypt: true
        },
        {
            name: 'portal_username',
            type: 'string',
	        len: 40
        },
	    {
		    name: 'phone_publicity',
		    type: 'string',
		    len: 10
	    },
        {
            name: 'phone_home',
            type: 'string',
	        len: 25
        },
        {
            name: 'phone_mobile',
            type: 'string',
	        len: 25
        },
        {
            name: 'phone_work',
            type: 'string',
	        len: 25
        },
        {
            name: 'phone_work_ext',
            type: 'string',
	        len: 25
        },
	    {
		    name: 'phone_fax',
		    type: 'string',
		    len: 25
	    },
        {
            name: 'email',
            type: 'string',
	        len: 80
        },
        {
            name: 'postal_address',
            type: 'string',
	        len: 40
        },
        {
            name: 'postal_address_cont',
            type: 'string',
	        len: 40
        },
        {
            name: 'postal_city',
            type: 'string',
	        len: 35
        },
        {
            name: 'postal_state',
            type: 'string',
	        len: 35
        },
        {
            name: 'postal_zip',
            type: 'string',
	        len: 35
        },
        {
            name: 'physical_address',
            type: 'string',
	        len: 40
        },
        {
            name: 'physical_address_cont',
            type: 'string',
	        len: 40
        },
        {
            name: 'physical_city',
            type: 'string',
	        len: 35
        },
        {
            name: 'physical_state',
            type: 'string',
	        len: 35
        },
        {
            name: 'physical_zip',
            type: 'string',
	        len: 35
        },
	    {
		    name: 'guardians_relation',
		    type: 'string',
		    len: 20
	    },
        {
            name: 'guardians_fname',
            type: 'string',
	        len: 80
        },
        {
            name: 'guardians_mname',
            type: 'string',
	        len: 80
        },
        {
            name: 'guardians_lname',
            type: 'string',
	        len: 80
        },
        {
            name: 'guardians_phone',
            type: 'string',
	        len: 20
        },
        {
            name: 'guardians_phone_type',
            type: 'string',
	        len: 10
        },
        {
            name: 'emergency_contact_relation',
            type: 'string',
	        len: 20
        },
        {
            name: 'emergency_contact_fname',
            type: 'string',
	        len: 80
        },
        {
            name: 'emergency_contact_mname',
            type: 'string',
	        len: 80
        },
        {
            name: 'emergency_contact_lname',
            type: 'string',
	        len: 80
        },
        {
            name: 'emergency_contact_phone',
            type: 'string',
	        len: 20
        },
        {
            name: 'emergency_contact_phone_type',
            type: 'string',
            len: 10
        }
    ],
    idProperty: 'pid',
    proxy: {
        type: 'direct',
        api: {
            read: 'Patient.getPatients',
            create: 'Patient.savePatient',
            update: 'Patient.savePatient'
        }
    },
    hasMany: [
        {
            model: 'App.model.patient.Insurance',
            name: 'insurance',
            primaryKey: 'pid',
            foreignKey: 'pid'
        },
        {
            model: 'App.model.patient.Allergies',
            name: 'allergies',
            primaryKey: 'pid',
            foreignKey: 'pid'
        },
        {
            model: 'App.model.patient.Medications',
            name: 'medications',
            primaryKey: 'pid',
            foreignKey: 'pid'
        },
        {
            model: 'App.model.patient.PatientActiveProblem',
            name: 'activeproblems',
            primaryKey: 'pid',
            foreignKey: 'pid'
        },
        {
            model: 'App.model.patient.PatientContacts',
            name: 'contacts',
            primaryKey: 'pid',
            foreignKey: 'pid'
        }
    ],
    indexes: [
        {
            name: 'live_search_index',
            choice: 'INDEX',
            type: 'BTREE',
            columns: [
                'pid',
                'pubpid',
                'fname',
                'mname',
                'lname',
                'SS'
            ]
        }
    ]
});

Ext.define('App.model.patient.PatientPossibleDuplicate', {
	extend: 'App.model.patient.Patient',
	proxy: {
		type: 'direct',
		api: {
			read: 'Patient.getPossibleDuplicatesByDemographic'
		},
		reader:{
			root: 'data'
		}
	}
});

Ext.define('App.view.dashboard.panel.PortalDropZone', {
	extend: 'Ext.dd.DropTarget',

	constructor: function(portal, cfg) {
		this.portal = portal;
		Ext.dd.ScrollManager.register(portal.body);
        App.view.dashboard.panel.PortalDropZone.superclass.constructor.call(this, portal.body, cfg);
		portal.body.ddScrollConfig = this.ddScrollConfig;
	},

	ddScrollConfig: {
		vthresh  : 50,
		hthresh  : -1,
		animate  : true,
		increment: 200
	},

    createEvent: function(dd, e, data, col, c, pos) {
        return {
            portal: this.portal,
            panel: data.panel,
            columnIndex: col,
            column: c,
            position: pos,
            data: data,
            source: dd,
            rawEvent: e,
            status: this.dropAllowed
        };
    },

    notifyOver: function(dd, e, data) {
        var xy = e.getXY(),
            portal = this.portal,
            proxy = dd.proxy,
            cw,
            colIndex,
            colRight,
            cols,
            len,
            cmatch;

        // case column widths
        if (!this.grid) {
            this.grid = this.getGrid();
        }

        // handle case scroll where scrollbars appear during drag
        cw = portal.body.dom.clientWidth;
        if (!this.lastCW) {
            // set initial client width
            this.lastCW = cw;
        } else if (this.lastCW != cw) {
            // client width has changed, so refresh layout & grid calcs
            this.lastCW = cw;
            //portal.doLayout();
            this.grid = this.getGrid();
        }

        // determine column
        colIndex = 0,
        colRight = 0,
        cols = this.grid.columnX,
        len = cols.length,
        cmatch = false;

        for (len; colIndex < len; colIndex++) {
            colRight = cols[colIndex].x + cols[colIndex].w;
            if (xy[0] < colRight) {
                cmatch = true;
                break;
            }
        }
        // no match, fix last index
        if (!cmatch) {
            colIndex--;
        }

        // find insert position
        var overPortlet, pos = 0,
            h = 0,
            match = false,
            overColumn = portal.items.getAt(colIndex),
            portlets = overColumn.items.items,
            overSelf = false;

        len = portlets.length;

        for (len; pos < len; pos++) {
            overPortlet = portlets[pos];
            h = overPortlet.el.getHeight();
            if (h === 0) {
                overSelf = true;
            } else if ((overPortlet.el.getY() + (h / 2)) > xy[1]) {
                match = true;
                break;
            }
        }

        pos = (match && overPortlet ? pos : overColumn.items.getCount()) + (overSelf ? -1 : 0);
        var overEvent = this.createEvent(dd, e, data, colIndex, overColumn, pos);

        if (portal.fireEvent('validatedrop', overEvent) !== false && portal.fireEvent('beforedragover', overEvent) !== false) {

            // make sure proxy width is fluid in different width columns
            proxy.getProxy().setWidth('auto');
            if (overPortlet) {
                dd.panelProxy.moveProxy(overPortlet.el.dom.parentNode, match ? overPortlet.el.dom : null);
            } else {
                dd.panelProxy.moveProxy(overColumn.el.dom, null);
            }

            this.lastPos = {
                c: overColumn,
                col: colIndex,
                p: overSelf || (match && overPortlet) ? pos : false
            };
            this.scrollPos = portal.body.getScroll();

            portal.fireEvent('dragover', overEvent);
            return overEvent.status;
        } else {
            return overEvent.status;
        }

    },

	notifyOut: function() {
		delete this.grid;
	},

    notifyDrop: function(dd, e, data) {
            delete this.grid;
            if (!this.lastPos) {
                return;
            }
            var c = this.lastPos.c,
                col = this.lastPos.col,
                pos = this.lastPos.p,
                panel = dd.panel,
                dropEvent = this.createEvent(dd, e, data, col, c, pos !== false ? pos : c.items.getCount());

            if (this.portal.fireEvent('validatedrop', dropEvent) !== false &&
                this.portal.fireEvent('beforedrop', dropEvent) !== false) {

                Ext.suspendLayouts();

                // make sure panel is visible prior to inserting so that the layout doesn't ignore it
                panel.el.dom.style.display = '';
                dd.panelProxy.hide();
                dd.proxy.hide();

                if (pos !== false) {
                    c.insert(pos, panel);
                } else {
                    c.add(panel);
                }

                Ext.resumeLayouts(true);

                this.portal.fireEvent('drop', dropEvent);

                // scroll position is lost on drop, fix it
                var st = this.scrollPos.top;
                if (st) {
                    var d = this.portal.body.dom;
                    setTimeout(function() {
                        d.scrollTop = st;
                    },
                    10);
                }
            }

            delete this.lastPos;
            return true;
        },

	// internal cache of body and column coords
	getGrid   : function() {
		var box = this.portal.body.getBox();
		box.columnX = [];
		this.portal.items.each(function(c) {
			box.columnX.push({
				x: c.el.getX(),
				w: c.el.getWidth()
			});
		});
		return box;
	},

	// unregister the dropzone from ScrollManager
	unreg     : function() {
		Ext.dd.ScrollManager.unregister(this.portal.body);
        App.view.dashboard.panel.PortalDropZone.superclass.unreg.call(this);
	}
});

Ext.define('App.view.dashboard.Dashboard', {
	extend: 'App.ux.RenderPanel',
	requires: [

	],
	pageTitle: _('dashboard'),
	itemId: 'DashboardPanel',

	initComponent: function(){
		var me = this;

		Ext.apply(me, {
			pageBody: [
				{
					xtype: 'portalpanel',
					region: 'center',
					items: [
						{
							itemId: 'DashboardColumn1'
						},
						{
							itemId: 'DashboardColumn2'
						}
					]
				}
			]
		});

		me.callParent();
	}
});

Ext.define('App.view.dashboard.panel.NewResults', {
	extend: 'Ext.grid.Panel',
	itemId: 'DashboardNewResultsGrid',
	requires: [
		'Ext.ux.SlidingPager'
	],
	maxHeight: 200,
	columnLines: true,
	disableSelection: true,
	initComponent: function(){
		var me = this;

		me.store = Ext.create('App.store.patient.PatientsOrderResults');

		me.bbar = {
			xtype: 'pagingtoolbar',
				pageSize: 10,
				store: me.store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.SlidingPager')
		};

		me.columns = [
			{
				text: _('signed'),
				dataIndex: 'signed_uid',
				width: 60,
				renderer: function(v){
					return app.boolRenderer(v);
				}
			},
			{
				xtype: 'datecolumn',
				text: _('received'),
				dataIndex: 'create_date'
			},
			{
				text: _('description'),
				dataIndex: 'code_text',
				flex: 1
			},
			{
				text:  _('status'),
				renderer: this.pctChange,
				dataIndex: 'result_status'
			}
		];

		me.callParent(arguments);
	},



	/**
	 * Custom function used for column renderer
	 * @param {Object} val
	 */
	change: function(val){
		if(val > 0){
			return '<span style="color:green;">' + val + '</span>';
		}else if(val < 0){
			return '<span style="color:red;">' + val + '</span>';
		}
		return val;
	},

	/**
	 * Custom function used for column renderer
	 * @param {Object} val
	 */
	pctChange: function(val){
		if(val > 0){
			return '<span style="color:green;">' + val + '%</span>';
		}else if(val < 0){
			return '<span style="color:red;">' + val + '%</span>';
		}
		return val;
	},

});

Ext.define('App.view.dashboard.panel.DailyVisits', {
	extend: 'Ext.panel.Panel',

	initComponent: function(){
		var me = this;

		Ext.apply(me, {
			layout: 'fit',
			height: 300,
			items: {
				xtype: 'chart',
				itemId: 'DashboardDailyVisitsChart',
				animate: false,
				shadow: false,
				store: me.store = Ext.create('Ext.data.JsonStore', {
					fields: [ 'total', 'time' ]
				}),
				axes: [
					{
						type: 'Numeric',
						minimum: 0,
						position: 'left',
						fields: [ 'total' ],
						title: 'Patients Per Hour',
						label: {
							font: '11px Arial'
						}
					},
					{
						type: 'Time',
						position: 'bottom',
						fields: [ 'time' ],
						title: 'Time',
						dateFormat: 'g:ia',
						step: [Ext.Date.HOUR, 1],
//						majorTickSteps: 5,
//						minorTickSteps: 1,
						constrain: true,
						fromDate: new Date().setHours(6, 0, 0, 0),
						toDate: new Date().setHours(20, 0, 0, 0)
					}
				],
				series: [
					{
						type: 'line',
						highlight: {
							size: 7,
							radius: 7
						},
						axis: 'left',
						smooth: true,
						fill: true,
						xField: 'time',
						yField: 'total',
						markerConfig: {
							type: 'circle',
							size: 4,
							radius: 4,
							'stroke-width': 0
						}
					}
				]
			}
		});

		me.callParent();
	}
});

Ext.define('App.view.areas.FloorPlan', {
	extend: 'App.ux.RenderPanel',
	itemId: 'FloorPlanPanel',
	pageTitle: _('area_floor_plan'),
	pageBody: [
		{
			xtype: 'panel',
			title: _('floor_plans'),
			layout: 'absolute',
			itemId: 'FloorPlanPatientZonePanel',
			tbar: [
				'->',
				{
					xtype: 'floorplanareascombo',
					fieldLabel: _('area'),
					labelWidth: 40,
					itemId: 'FloorPlanAreasCombo'
				}
			],
			tools: [
				{
					type: 'refresh',
					handler: function(){
						App.app.getController('areas.FloorPlan').setZones();
					}
				}
			]
		}
	]
});
Ext.define('App.view.messages.Messages', {
	extend: 'App.ux.RenderPanel',
	id: 'panelMessages',
	pageTitle: _('messages') + ' (' + _('inbox') + ')',
	pageLayout: 'border',
	defaults: {
		split: true
	},
	uses: [
		'App.ux.LivePatientSearch',
		'App.ux.combo.MsgStatus',
		'App.ux.combo.MsgNoteType',
		'App.ux.combo.Users'],
	initComponent: function(){

		var me = this;

		/**
		 * Message Store
		 */
		me.storeMsgs = Ext.create('App.store.messages.Messages');

		/**
		 * Message GridPanel
		 */
		me.msgGrid = Ext.create('Ext.grid.Panel', {
			store: me.storeMsgs,
			region: 'center',
			border: true,
			viewConfig: {
				forceFit: true,
				stripeRows: true
			},
			listeners: {
				scope: this,
				itemclick: this.onItemClick
			},
			columns: [
				{
					header: _('status'),
					sortable: true,
					dataIndex: 'message_status',
					width: 70
				},
				{
					header: _('from'),
					sortable: true,
					dataIndex: 'from_user',
					width: 200
				},
				{
					header: _('to'),
					sortable: true,
					dataIndex: 'to_user',
					width: 200
				},
				{
					header: _('patient'),
					sortable: true,
					dataIndex: 'patient_name',
					width: 200
				},
				{
					header: _('subject'),
					sortable: true,
					dataIndex: 'subject',
					flex: 1
				},
				{
					header: _('type'),
					sortable: true,
					dataIndex: 'note_type',
					width: 100
				}
			],
			tbar: Ext.create('Ext.PagingToolbar',
				{
					store: me.storeMsgs,
					displayInfo: true,
					emptyMsg: _('no_office_notes_to_display'),
					plugins: Ext.create('Ext.ux.SlidingPager',
						{
						}),
					items: ['-',
						{
							text: _('delete'),
							cls: 'winDelete',
							iconCls: 'delete',
							itemId: 'deleteMsg',
							disabled: true,
							scope: me,
							handler: me.onDelete
						}, '-',
						{
							text: _('inbox'),
							action: 'inbox',
							enableToggle: true,
							toggleGroup: 'message',
							pressed: true,
							scope: me,
							handler: me.messagesType
						}, '-',
						{
							text: _('sent'),
							action: 'sent',
							enableToggle: true,
							toggleGroup: 'message',
							scope: me,
							handler: me.messagesType
						}, '-',
						{
							text: _('trash'),
							action: 'trash',
							enableToggle: true,
							toggleGroup: 'message',
							scope: me,
							handler: me.messagesType
						}, '-']
				}),
			bbar: [
				{
					text: _('new_message'),
					iconCls: 'newMessage',
					itemId: 'newMsg',
					handler: function(){
						me.onNewMessage();
					}
				},
				'-',
				{
					text: _('reply'),
					iconCls: 'edit',
					itemId: 'replyMsg',
					disabled: true,
					handler: function(){
						me.action('reply');
					}
				},
				'-'
			]
		});
		/**
		 * Form to send and replay messages
		 */
		me.msgForm = Ext.create('Ext.form.Panel', {
			region: 'south',
			height: 340,
			cls: 'msgForm',
			layout: {
				type: 'vbox',
				align: 'stretch'
			},
			fieldDefaults: {
				labelWidth: 60,
				margin: 5,
				anchor: '100%'
			},
			items: [
				{
					xtype: 'container',
					height: 95,
					cls: 'message-form-header',
					padding: '5 0',
					layout: 'anchor',
					items: [
						{
							xtype: 'container',
							layout: 'column',
							items: [
								{
									xtype: 'container',
									layout: 'anchor',
									columnWidth: '.50',
									items: [
										{
											xtype: 'patienlivetsearch',
											fieldLabel: _('patient'),
											emptyText: _('no_patient_selected'),
											itemId: 'patientCombo',
											name: 'pid',
											hideLabel: false
										},
										{
											xtype: 'textfield',
											fieldLabel: _('patient'),
											itemId: 'patientField',
											name: 'patient_name',
											readOnly: true,
											hidden: true
										},
										{
											xtype: 'userscombo',
											name: 'to_id',
											fieldLabel: _('to'),
											validateOnChange: false,
											allowBlank: false
										}
									]
								},
								{
									xtype: 'container',
									layout: 'anchor',
									columnWidth: '.50',
									items: [
										{
											xtype: 'msgnotetypecombo',
											name: 'note_type',
											fieldLabel: _('type'),
											listeners: {
												scope: me,
												select: me.onChange
											}
										},
										{
											xtype: 'msgstatuscombo',
											name: 'message_status',
											fieldLabel: _('status'),
											listeners: {
												scope: me,
												select: me.onChange
											}
										}
									]
								}
							]
						},
						{
							xtype: 'textfield',
							fieldLabel: _('subject'),
							name: 'subject',
							margin: '0 5 5 5'
						}
					]
				},
				{
					xtype: 'htmleditor',
					name: 'body',
					itemId: 'bodyMsg',
					flex: 1,
					readOnly: true,
					allowBlank: false
				},
				//				{
				//					xtype           : 'htmleditor',
				//					name            : 'curr_msg',
				//					itemId          : 'currMsg',
				//					height          : 204,
				//					allowBlank      : false,
				//					validateOnChange: false,
				//					hidden          : true
				//				},
				{
					xtype: 'textfield',
					hidden: true,
					name: 'id'
				},
				{
					xtype: 'textfield',
					hidden: true,
					name: 'pid'
				},
				{
					xtype: 'textfield',
					hidden: true,
					name: 'reply_id'
				}
			],
			bbar: [
				{
					text: _('send'),
					iconCls: 'save',
					itemId: 'sendMsg',
					scope: me,
					handler: me.onSend
				},
				'-',
				{
					text: _('delete'),
					cls: 'winDelete',
					iconCls: 'delete',
					itemId: 'deleteMsg',
					margin: '0 3 0 0',
					disabled: true,
					scope: me,
					handler: me.onDelete
				}
			],
			listeners: {
				scope: me,
				afterrender: me.onFormRender

			}
		});
		me.pageBody = [me.msgGrid, me.msgForm];
		me.callParent(arguments);

	}, // End initComponent

	messagesType: function(btn){
		this.updateTitle('Messages (' + Ext.String.capitalize(btn.action) + ')');
		this.storeMsgs.proxy.extraParams =
		{
			get: btn.action
		};
		this.storeMsgs.load();

	},

	onFormRender: function(){
		this.msgForm.getComponent('bodyMsg').setReadOnly(true);
		this.onNewMessage();
	},

	/**
	 * onNewMessage will reset the form and load a new model
	 * with message_status value set to New, and
	 * note_type value set to Unassigned
	 */
	onNewMessage: function(){
		var form = this.msgForm,
			record = Ext.create('App.model.messages.Messages', {
				message_status: _('new'),
				note_type: _('unassigned')
			});
		say(record);
		form.getForm().reset();
		form.getForm().loadRecord(record);
		this.action('new');
	},

	/**
	 * @param btn
	 */
	onSend: function(btn){
		var form = btn.up('form').getForm(), store = this.storeMsgs;

		if(form.isValid()){
			var record = form.getRecord(), values = form.getValues(), storeIndex = store.indexOf(record);

			if(storeIndex == -1){
				store.add(values);
			}
			else{
				record.set(values);
			}
			store.sync();
			store.load();
			this.onNewMessage();
			this.msg('Sweet!', _('message_sent'));
		}
		else{
			this.msg('Oops!', _('please_complete_all_required_fields') + '.');
		}
	},

	/**
	 * onDelete will show an alert msg to confirm,
	 * delete the message and prepare the form for a new message
	 */
	onDelete: function(){
		var form = this.msgForm.getForm(), store = this.storeMsgs;
		Ext.Msg.show(
			{
				title: _('please_confirm') + '...',
				icon: Ext.MessageBox.QUESTION,
				msg: _('are_you_sure_to_delete_this_message'),
				buttons: Ext.Msg.YESNO,
				scope: this,
				fn: function(btn){
					if(btn == 'yes'){
						var currentRec = form.getRecord();
						store.remove(currentRec);
						store.destroy();
						this.onNewMessage();
						this.msg('Sweet!', _('sent_to_trash'));
					}
				}
			});
	},
	onChange: function(combo, record){
		var me = this, form = combo.up('form').getForm();

		if(form.getRecord().data.id){
			var id = form.getRecord().data.id,
				col = combo.name,
				val = record[0].data.option_id, params = {
					id: id,
					col: col,
					val: val
				};

			/**
			 * Ext.direct function
			 */
			Messages.updateMessage(params, function(){
				me.storeMsgs.load();
			});

		}

	},
	/**
	 * On item click check if msgPreView is already inside the container.
	 * if not, remove the item inside the container, add msgPreView and update it with record data.
	 * if yes, just update the msgPreView with the new record data
	 *
	 * @param view
	 * @param record
	 * @namespace record.data.from_id
	 */
	onItemClick: function(view, record){
		record.data.to_id = record.data.from_id;
		this.msgForm.getForm().loadRecord(record);
		this.action('old');
	},

	/**
	 * This function is use to disable/enabled and hide/show buttons and fields
	 * according to the action
	 *
	 * @param action
	 */
	action: function(action){
		var sm = this.msgGrid.getSelectionModel(), form = this.msgForm, patientCombo = form.query('combo[itemId="patientCombo"]')[0], patientField = form.query('textfield[itemId="patientField"]')[0], bodyMsg = form.getComponent('bodyMsg'), currMsg = form.getComponent('currMsg'), deletebtn1 = this.query('button[itemId="deleteMsg"]')[0], deletebtn2 = this.query('button[itemId="deleteMsg"]')[1], replybtn = this.query('button[itemId="replyMsg"]')[0], sendbtn = this.query('button[itemId="sendMsg"]')[0];
		if(action == 'new'){
			bodyMsg.setReadOnly(false);
			patientCombo.show();
			patientField.hide();
			deletebtn1.disable();
			deletebtn2.disable();
			replybtn.disable();
			sendbtn.enable();
			sm.deselectAll();
		}
		else if(action == 'old'){
			bodyMsg.setReadOnly(true);
			patientCombo.hide();
			patientField.show();
			deletebtn1.enable();
			deletebtn2.enable();
			replybtn.enable();
			sendbtn.disable();
		}
		else if(action == 'reply'){
			var msg = bodyMsg.getValue();
			bodyMsg.setValue('<br><br><br><qoute style="margin-left: 10px; padding-left: 10px; border-left: solid 3px #cccccc; display: block;">' + msg + '</quote>');
			bodyMsg.setReadOnly(false);
			sendbtn.enable();
			patientCombo.hide();
			patientField.show();
		}
	},
	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		this.storeMsgs.load();
		callback(true);
	}
});

Ext.define('App.view.patient.charts.BPPulseTemp',
{
	extend : 'Ext.container.Container',
	layout :
	{
		type : 'vbox',
		align : 'stretch'
	},
	style : 'background-color:#fff',
	defaults :
	{
		xtype : 'panel',
		layout : 'fit',
		flex : 1
	},
	initComponent : function()
	{
		var me = this;

		me.items = [
		{
			title : _('blood_pressure'),
			margin : 5,
			items : [
			{
				xtype : 'chart',
				style : 'background:#fff',
				store : me.store,
				animate : false,
				shadow : true,
				legend :
				{
					position : 'right'
				},
				axes : [
				{
					title : _('blood_pressure'),
					type : 'Numeric',
					position : 'left',
					fields : ['bp_systolic', 'bp_diastolic', 'bp_systolic_normal', 'bp_diastolic_normal'],
					grid :
					{
						odd :
						{
							opacity : 1,
							stroke : '#bbb',
							'stroke-width' : 0.5
						}
					}
				},
				{
					title : _('date'),
					type : 'Time',
					dateFormat : 'Y-m-d h:i:s a',
					position : 'bottom',
					fields : ['date']
				}],
				series : [
				{
					title : _('systolic'),
					type : 'line',
					axis : 'left',
					xField : 'date',
					yField : 'bp_systolic',
					smooth : true,
					highlight :
					{
						size : 10,
						radius : 10
					},
					markerConfig :
					{
						type : 'circle',
						size : 5,
						radius : 5,
						'stroke-width' : 0
					},
					tips :
					{
						trackMouse : true,
						renderer : function(storeItem, item)
						{
							this.update('Date: ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>Systolic: ' + storeItem.get('bp_systolic'));
						}
					}
				},
				{
					title : _('diastolic'),
					type : 'line',
					axis : 'left',
					xField : 'date',
					yField : 'bp_diastolic',
					smooth : true,
					highlight :
					{
						size : 5,
						radius : 5
					},
					markerConfig :
					{
						type : 'cross',
						size : 5,
						radius : 5,
						'stroke-width' : 0
					},
					tips :
					{
						trackMouse : true,
						renderer : function(storeItem, item)
						{
							this.update(_('date') + ': ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>' + _('diastolic') + ': ' + storeItem.get('bp_diastolic'));
						}
					}

				},
				//                            {
				//                                type     : 'area',
				//                                highlight: true,
				//                                axis     : 'left',
				//                                xField   : 'date',
				//                                yField   : ['bp_diastolic_normal', 'bp_systolic_normal'],
				//                                style    : {
				//                                    opacity: 0.93
				//                                }
				//                            },
				{
					type : 'line',
					showMarkers : false,
					axis : 'left',
					xField : 'date',
					yField : 'bp_diastolic_normal',
					style :
					{
						stroke : '#000000',
						'stroke-width' : 1
					}
				},
				{
					type : 'line',
					showMarkers : false,
					axis : 'left',
					xField : 'date',
					yField : 'bp_systolic_normal',
					style :
					{
						stroke : '#000000',
						'stroke-width' : 1
					}
				}]
			}]
		},
		{
			title : 'Pulse',
			margin : '0 5 5 5',
			items : [
			{
				xtype : 'chart',
				style : 'background:#fff',
				store : me.store,
				animate : false,
				shadow : true,
				legend :
				{
					position : 'right'
				},
				axes : [
				{
					title : _('pulse_per_min'),
					type : 'Numeric',
					position : 'left',
					fields : ['pulse'],
					grid :
					{
						odd :
						{
							opacity : 1,
							stroke : '#bbb',
							'stroke-width' : 0.5
						}
					}
				},
				{
					title : _('date'),
					type : 'Time',
					dateFormat : 'Y-m-d h:i:s a',
					position : 'bottom',
					fields : ['date']

				}],
				series : [
				{
					title : _('pulse'),
					type : 'line',
					axis : 'left',
					xField : 'date',
					yField : 'pulse',
					smooth : true,
					highlight :
					{
						size : 10,
						radius : 10
					},
					markerConfig :
					{
						type : 'circle',
						size : 5,
						radius : 5,
						'stroke-width' : 0
					},
					tips :
					{
						trackMouse : true,
						renderer : function(storeItem, item)
						{
							this.update(_('date') + ': ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>' + _('pulse_per_min') + ': ' + storeItem.get('pulse'));
						}
					}
				}]
			}]
		},
		{
			title : _('temperature'),
			margin : '0 5 5 5',
			items : [
			{

				xtype : 'chart',
				store : me.store,
				animate : false,
				shadow : true,
				legend :
				{
					position : 'right'
				},
				axes : [
				{
					title : _('temp_fahrenheits'),
					type : 'Numeric',
					position : 'left',
					fields : ['temp_f'],
					grid :
					{
						odd :
						{
							opacity : 1,
							stroke : '#bbb',
							'stroke-width' : 0.5
						}
					}
				},
				{
					title : _('date'),
					type : 'Time',
					dateFormat : 'Y-m-d h:i:s a',
					position : 'bottom',
					fields : ['date']

				}],
				series : [
				{
					title : _('temp_fahrenheits'),
					type : 'line',
					axis : 'left',
					xField : 'date',
					yField : 'temp_f',
					smooth : true,
					highlight :
					{
						size : 10,
						radius : 10
					},
					markerConfig :
					{
						type : 'circle',
						size : 5,
						radius : 5,
						'stroke-width' : 0
					},
					tips :
					{
						trackMouse : true,
						renderer : function(storeItem, item)
						{
							this.update(_('date') + ': ' + Ext.Date.format(storeItem.get('date'), 'Y-m-d h:i:s a') + '<br>' + _('temp_fahrenheits') + ': ' + storeItem.get('temp_f'));
						}
					}
				}]
			}]
		}];

		me.callParent(arguments);

	}
});
Ext.define('App.view.patient.charts.HeadCircumference',
{
	extend : 'Ext.panel.Panel',
	layout : 'fit',
	margin : 5,
	initComponent : function()
	{
		var me = this;

		me.items = [
		{
			xtype : 'chart',
			store : me.store,
			animate : false,
			shadow : false,
			legend :
			{
				position : 'right'
			},
			axes : [
			{
				title : me.xTitle,
				type : 'Numeric',
				position : 'left',
				fields : ['PP', 'P3', 'P5', 'P10', 'P25', 'P50', 'P75', 'P90', 'P95', 'P97'],
				grid :
				{
					odd :
					{
						opacity : 1,
						stroke : '#bbb',
						'stroke-width' : 0.5
					}
				},
				minimum : me.xMinimum,
				maximum : me.xMaximum
			},
			{
				title : me.yTitle,

				type : 'Numeric',
				position : 'bottom',
				fields : ['age'],
				minimum : me.yMinimum,
				maximum : me.yMaximum
			}],
			series : [
			{
				title : _('circumference_cm'),
				type : 'scatter',
				axis : 'left',
				xField : 'age',
				yField : 'PP',
				smooth : true,
				highlight :
				{
					size : 10,
					radius : 10
				},
				markerConfig :
				{
					type : 'circle',
					size : 5,
					radius : 5,
					'stroke-width' : 0
				},
				tips :
				{
					trackMouse : true,
					renderer : function(storeItem, item)
					{
						this.update(me.yTitle + ' : ' + storeItem.get('age') + '<br>' + me.xTitle + ': ' + storeItem.get('PP'));
					}
				}
			},
			{
				title : '97%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P97',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '95%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P95',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '75%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P75',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '50%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P50',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 3,
					opacity : 0.5
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 4
				}
			},
			{
				title : '25%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P25',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '10%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P10',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '5%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P5',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '3%',
				type : 'line',
				axis : 'left',
				xField : 'age',
				yField : 'P3',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			}]
		}];

		me.callParent(arguments);

	}
});
Ext.define('App.view.patient.charts.HeightForStature',
{
	extend : 'Ext.panel.Panel',
	layout : 'fit',
	margin : 5,
	title : _('weight_for_age'),

	initComponent : function()
	{
		var me = this;

		me.items = [
		{

			xtype : 'chart',
			store : me.store,
			animate : false,
			shadow : false,
			legend :
			{
				position : 'right'
			},
			axes : [
			{
				title : _('weight_kg'),
				type : 'Numeric',
				position : 'left',
				fields : ['PP', 'P3', 'P5', 'P10', 'P25', 'P50', 'P75', 'P85', 'P90', 'P95', 'P97'],
				grid :
				{
					odd :
					{
						opacity : 1,
						stroke : '#bbb',
						'stroke-width' : 0.5
					}
				},
				minimum : 7,
				maximum : 31
			},
			{
				title : _('length_cm'),
				type : 'Numeric',
				position : 'bottom',
				fields : ['height'],
				minimum : 77,
				maximum : 121.5
			}],
			series : [
			{
				title : _('weight_kg'),
				type : 'scatter',
				axis : 'left',
				xField : 'height',
				yField : 'PP',
				smooth : true,
				highlight :
				{
					size : 10,
					radius : 10
				},
				markerConfig :
				{
					type : 'circle',
					size : 5,
					radius : 5,
					'stroke-width' : 0
				},
				tips :
				{
					trackMouse : true,
					renderer : function(storeItem, item)
					{
						this.update(_('length_cm') + ': ' + storeItem.get('height') + '<br>' + _('weightArray') + ': ' + storeItem.get('PP'));
					}
				}
			},
			{
				title : '97%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P97',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '95%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P95',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '85%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P85',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '75%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P75',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '50%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P50',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 3,
					opacity : 0.5
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 4
				}
			},
			{
				title : '25%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P25',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '10%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P10',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '5%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P5',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			},
			{
				title : '3%',
				type : 'line',
				axis : 'left',
				xField : 'height',
				yField : 'P3',
				smooth : true,
				showMarkers : false,
				style :
				{
					stroke : '#000000',
					'stroke-width' : 1,
					opacity : 0.3
				},
				highlight :
				{
					stroke : '#FF9900',
					size : 2
				}
			}]
		}];

		me.callParent(arguments);

	}
});
Ext.define('App.store.patient.AppointmentRequests', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.AppointmentRequest'
});
Ext.define('App.view.patient.encounter.AppointmentRequestGrid', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.grid.DeleteColumn'
	],
	xtype: 'appointmentrequestgrid',
	itemId: 'AppointmentRequestGrid',
	frame: true,
	store: Ext.create('App.store.patient.AppointmentRequests'),
	initComponent: function(){
		var me = this;

		me.columns = [
			{
				xtype: 'griddeletecolumn',
				width: 25
			},
			{
				xtype: 'datecolumn',
				text: _('requested_date'),
				dataIndex: 'requested_date',
				width: 120,
				format: g('date_display_format')
			},
			{
				xtype: 'datecolumn',
				text: _('approved_date'),
				dataIndex: 'approved_date',
				width: 150,
				format: g('date_display_format')
			},
			{
				text: _('notes'),
				dataIndex: 'notes',
				flex: 1
			}
		];

		me.callParent();
	},
	tbar: [
		_('appointment_requests'),
		'->',
		{
			text: _('appointment_request'),
			itemId: 'AppointmentRequestAddBtn',
			action: 'encounterRecordAdd',
			iconCls: 'icoAdd'
		}
	]


});
Ext.define('App.view.patient.encounter.HealthCareFinancingAdministrationOptions', {
	extend: 'Ext.form.Panel',
	xtype: 'hcafaoptions',

	pid: null,
	eid: null,

	initComponent: function(){
		var me = this;
		me.callParent();
		me.loadHCFAForm();
	},

	loadHCFAForm: function(){
		var me = this;

		me.getFormItems(this, 10, function(panel){

		});
	}

});
Ext.define('App.view.patient.encounter.CurrentProceduralTerminology', {
    extend:'Ext.panel.Panel',
    alias:'widget.currentproceduralterminology',
    autoScroll:true,
    border:false,
    bodyBorder:false,
    bodyPadding:5,
    bodyStyle: 'background-color:#fff',
    layout:'border',
    pid:null,
    eid:null,
    initComponent:function () {
        var me = this;


        me.referenceCptStore = Ext.create('App.store.patient.QRCptCodes');

        me.encounterCptStore = Ext.create('App.store.patient.EncounterServices', {
            autoSync:true,
            listeners:{
                scope:me,
                beforesync:me.beforesync
            }
        });


        me.cptFormEdit = Ext.create('App.ux.grid.RowFormEditing', {
            autoCancel:false,
            errorSummary:false,
            clicksToEdit:1,
            enableRemove:true,
            items:[
                {
                    fieldLabel: _('full_description'),
                    xtype:'displayfield',
                    name:'code_text',
                    anchor:'100%'
                },
                {
                    xtype:'container',
                    layout:'column',
                    items:[
                        {
                            xtype:'fieldcontainer',
                            layout:'anchor',
                            columnWidth:.5,
                            margin:'0 3 0 0',
                            defaults:{ xtype:'textfield' },
                            items:[
                                {
                                    fieldLabel: _('place_of_service'),
                                    name:'place_of_service',
                                    anchor:'100%'
                                },
                                {
                                    xtype:'checkbox',
                                    labelWidth:105,
                                    fieldLabel: _('emergency') + '?',
                                    name:'emergency'
                                },
                                {
                                    fieldLabel: _('charges'),
                                    name:'charge',
                                    anchor:'100%'
                                }
                            ]
                        },
                        {
                            xtype:'fieldcontainer',
                            layout:'anchor',
                            columnWidth:.5,
                            margin:'0 0 0 3',
                            defaults:{ xtype:'textfield', anchor:'100%', labelWidth:110 },
                            items:[
                                {
                                    fieldLabel: _('days_of_units'),
                                    name:'days_of_units'
                                },
                                {
                                    fieldLabel: _('essdt_fam_plan'),
                                    name:'essdt_plan'
                                },
                                {
                                    fieldLabel: _('modifiers'),
                                    xtype:'livecptsearch',
                                    hideLabel:false,
                                    name:'modifiers'
                                }

                            ]
                        }

                    ]
                },
                {
                    xtype:'liveicdxsearch',
                    fieldLabel: _('diagnosis'),
                    hideLabel:false,
                    name:'diagnosis'
                }
            ],
            listeners:{
                scope:me,
                afterremove:me.onCompleteRemove
            }
        });

        me.items = [
            {
                xtype:'panel',
                title: _('cpt_search'),
                itemId:'leftCol',
                region:'west',
                width:450,
                hidden:true,
                titleCollapse:true,
                margin:'0 5 0 0',
                bodyStyle:'background-color:#fff',
                layout:{
                    type:'vbox',
                    align:'stretch',
                    padding:5
                },
                items:[
                    {
                        xtype:'fieldset',
                        title: _('cpt_quick_reference_options'),
                        padding:'10 15',
                        margin:'0 0 3 0',
                        layout:'anchor',
                        items:{
                            xtype:'combobox',
                            anchor:'100%',
                            editable:false,
                            queryMode:'local',
                            valueField:'value',
                            displayField:'name',
                            store:Ext.create('Ext.data.Store', {
                                fields:['name', 'value'],
                                data:[
                                    { name: _('show_related_cpt_for_current_diagnostics'), value:0 },
                                    { name: _('show_cpt_history_for_this_patient'), value:1 },
                                    { name: _('show_cpt_commonly_used_by_clinic'), value:2 }
                                ]
                            }),
                            listeners:{
                                scope:me,
                                change:me.onQuickReferenceOption
                            }
                        }
                    },
                    Ext.create('Ext.ux.LiveSearchGridPanel', {
                        margins:0,
                        flex:1,
                        store:me.referenceCptStore,
                        viewConfig:{
                            copy:true,
                            stripRows:true,
                            loadMask:true,
                            plugins:[
                                {
                                    ptype:'gridviewdragdrop',
                                    dragGroup:'CPTGridDDGroup'
                                }
                            ]
                        },
                        columns:[
                            {
                                text: _('code'),
                                width:70,
                                sortable:true,
                                dataIndex:'code'
                            },
                            {
                                text: _('description'),
                                flex:1,
                                sortable:true,
                                dataIndex:'code_text_medium'
                            }
                        ]
                    })
                ],
                listeners:{
                    scope:me,
                    collapse:me.onQuickReferenceCollapsed
                }
            },
            {
                xtype:'panel',
                title: _('encounter_cpts'),
                region:'center',
                itemId:'rightCol',
                bodyStyle:'background-color:#fff',
                layout:{
                    type:'vbox',
                    align:'stretch',
                    padding:5
                },
                items:[
                    {
                        xtype:'fieldset',
                        title: _('cpt_live_sarch'),
                        padding:'10 15',
                        margin:'0 0 3 0',
                        layout:'anchor',
                        items:{
                            xtype:'livecptsearch',
                            listeners:{
                                scope:me,
                                select:me.onLiveCptSelect
                            }
                        }

                    },
                    {
                        xtype:'grid',
                        flex:1,
                        margins:0,
                        store:me.encounterCptStore,
                        columns:[
                            {
                                text: _('code'),
                                width:70,
                                sortable:true,
                                dataIndex:'code'
                            },
                            {
                                text: _('description'),
                                flex:1,
                                sortable:true,
                                dataIndex:'code_text'
                            },
                            {
                                text: _('status'),
                                width:50,
                                sortable:true,
                                dataIndex:'status',
                                renderer:me.status
                            }
                        ],
                        tbar:[
                            {
                                text: _('quick_reference'),
                                action:'referenceCptBtn',
                                enableToggle:true,
                                scope:me,
                                toggleHandler:me.onQuickReferenceToggle
                            },
                            '->',
                            {
                                text: _('reload'),
                                handler: function(){
                                    me.encounterCptStoreLoad(null);
                                }
                            }
                        ],
                        viewConfig:{
                            itemId:'view',
                            plugins: {
                                ptype:'gridviewdragdrop',
                                dropGroup:'CPTGridDDGroup'

                            },
                            listeners:{
                                scope:me,
                                drop:me.onCptDropped
                            }
                        },
                        plugins:me.cptFormEdit

                    }
                ]

            }
        ];


        me.callParent(arguments);

    },


    status:function(val){
        if(val == '0') {
            return '<img style="padding-left: 10px" src="resources/images/icons/no.gif" />';
        } else if(val == '1') {
            return '<img style="padding-left: 10px" src="resources/images/icons/yes.gif" />';
        } else if(val == '2') {
            return '<img style="padding-left: 10px" src="resources/images/icons/icohelp.png" />';
        }
        return val;
    },

    onQuickReferenceCollapsed:function () {
        var btn = this.query('button[action="referenceCptBtn"]');
        if (btn[0].pressed) {
            btn[0].toggle(false);
        }
    },

    onQuickReferenceToggle:function (btn, pressed) {
        if (pressed) {
            this.getComponent('leftCol').show();
        } else {
            this.getComponent('leftCol').hide();
        }

    },

    onQuickReferenceOption:function (combo, value) {
        this.loadCptQuickReferenceGrid(value);
    },


    onCompleteRemove:function () {
        app.msg('Sweet!', _('cpt_removed_from_this_encounter'));
    },

    onLiveCptSelect:function (btn, record) {
        var me = this;
        btn.reset();
	    delete record[0].data.id;
	    record[0].data.eid = me.eid;
        me.encounterCptStore.add(record[0].data);

    },

    loadCptQuickReferenceGrid:function (filter) {
        this.referenceCptStore.load({params:{pid:this.pid, eid:this.eid, filter:filter}});
    },

    beforesync:function(options){
        if(options.create){
            options.create[0].data.eid = this.eid;
        }
    },

    onCptDropped:function(node, data, dropRecord, dropPosition, dropFunction){
        app.msg('Sweet!', _('cpt_added_to_this_encounter'));
        this.cptFormEdit.cancelEdit();
        var store = dropRecord.store,
            dropIndex = store.indexOf(dropRecord),
            index = dropPosition == 'before' ? dropIndex - 1  : dropIndex + 1;


        this.cptFormEdit.startEdit(index, 0)
    },

    setDefaultQRCptCodes:function(){
        var combo = this.down('combobox');
        if (combo.getValue() != 1) {
            combo.setValue(1);
        } else {
            this.loadCptQuickReferenceGrid(1);
        }
    },

    encounterCptStoreLoad:function(pid, eid, callback){
        this.pid = pid ? pid : this.pid;
        this.eid = eid ? eid : this.eid;
        this.encounterCptStore.load({
            filters:[
                {
                    property:'eid',
                    value: this.eid
                }
            ],
            callback:function(){
                callback ? callback() : null;
            }
        });
    }


});
Ext.define('App.view.patient.encounter.ICDs', {
	extend: 'Ext.form.FieldSet',
	alias: 'widget.icdsfieldset',
	title: _('dx_codes'),
	padding: '10 15',
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	requires: [ 'App.ux.LiveICDXSearch' ],
	autoFormSync: true,
	dxGroup: {},
	initComponent: function(){
		var me = this;

		me.items = [
			{
				xtype:'container',
				layout:'hbox',
				items:[
					{
						xtype:'combobox',
						store: Ext.create('Ext.data.Store', {
							fields: ['option', { name:'value', type: 'int' }],
							data : [
								{ option:'DX:1', value: 1 },
								{ option:'DX:2', value: 2 },
								{ option:'DX:3', value: 3 },
								{ option:'DX:4', value: 4 },
								{ option:'DX:5', value: 5 },
								{ option:'DX:6', value: 6 },
								{ option:'DX:7', value: 7 },
								{ option:'DX:8', value: 8 },
								{ option:'DX:9', value: 9 }
							]
						}),
						width: 55,
						itemId: this.id + '-group-cmb',
						queryMode: 'local',
						displayField: 'option',
						valueField: 'value',
						value: 1,
						margin: '0 3 0 0',
						forceSelection: true,
						editable: false
					},
					{
						xtype: 'liveicdxsearch',
						itemId: 'liveicdxsearch',
						emptyText: me.emptyText,
						name: 'dxCodes',
						flex: 1,
						listeners: {
							scope: me,
							select: me.onLiveIcdSelect,
							blur: function(field){
								field.reset();
							}
						}
					}
				]
			}
		];

		me.callParent(arguments);
	},

	getGroupContainer: function(group){

		var me = this;

		if(!this.dxGroup[group]){
			this.dxGroup[group] = Ext.widget('container',{
				layout: {
					type: 'table',
					columns: 6
				},
				itemId: this.id + '-group-' + group,
				margin: '5 0 0 0',
				items:[
					{ xtype:'container', itemId: this.id + '-dx-order-1', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-2', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-3', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-4', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-5', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-6', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-7', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-8', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-9', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-10', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-11', action: 'pointer' },
					{ xtype:'container', itemId: this.id + '-dx-order-12', action: 'pointer' }
				],
				listeners:{
					afterrender:function(dxsContainer){

						var dxContainers = dxsContainer.items.items;

						for(var k=0; k < dxContainers.length; k++){

							new Ext.dd.DropTarget(dxContainers[k].el, {
								// must be same as for tree
								ddGroup: 'group-' + group + '-dx',
								dropPos: false,
								dxsContainer: dxsContainer,
								dxContainer: dxContainers[k],

								notifyOver: function(dd, e, data){

//									say('notifyOver');

									var dx = data.panel,
										dxContainer = this.dxContainer,
										proxy = dd.proxy;

									if(dxContainer.items.items.length == 0){
										// is over empty dx container
										return false;
									}else if(dxContainer.items.items[0] == dx){
										return false;
									}else{

										var dragDxContainerIndex = dxsContainer.items.items.indexOf(dx.ownerCt),
											dropDxContainerIndex = dxsContainer.items.items.indexOf(dxContainer);

										this.dropBefore = dragDxContainerIndex > dropDxContainerIndex;
										this.dropPos = dxsContainer.items.items.indexOf(dxContainer);
									}
									return true;
								},

								notifyDrop: function(dd, e, data){

									dd.panelProxy.hide();
									dd.proxy.hide();
									Ext.suspendLayouts();
									if(this.lastPos !== false){

										var parentDragContainer = data.panel.ownerCt,
											parentDropContainer = this.dxsContainer.items.items[this.dropPos],
											parentDropDx = this.dxsContainer.items.items[this.dropPos].items.items[0],
											parentDragDx = data.panel;


										parentDragContainer.remove(parentDragDx, false);
										parentDropContainer.remove(parentDropDx, false);

										parentDropContainer.add(parentDragDx);
										parentDragContainer.add(parentDropDx);

									}

									Ext.resumeLayouts(true);
									delete this.dropPos;

									me.onReOrder(dxsContainer);

									return true;
								}
							});
						}
					}
				}
			});
		}

		this.add(this.dxGroup[group]);

		return this.dxGroup[group];
	},

	onLiveIcdSelect: function(field, record){
		var me = this,
			soap = me.up('form').getForm().getRecord(),
			group = me.getDxGroupCombo().getValue(),
			order = me.getNextOrder(group),
			dxRecords;

		dxRecords = this.store.add({
			pid: soap.data.pid,
			eid: soap.data.eid,
			uid: app.user.id,
			code: record[0].data.code,
			dx_group: group,
			dx_order: order,
			code_type: record[0].data.code_type,
			code_text: record[0].data.code_text
		});

		me.addIcd(dxRecords[0], group, order);
		field.reset();
	},

	removeIcds: function(){

		Ext.Object.each(this.dxGroup, function(key, group){
			Ext.destroy(group);
		});

		this.dxGroup = {};
	},

	loadIcds: function(store){

		var me = this,
			dxs = store.data.items;

		me.store = store;
		me.removeIcds();
		me.loading = true;

		for(var i = 0; i < dxs.length; i++){
			me.addIcd(dxs[i], dxs[i].data.dx_group, dxs[i].data.dx_order);
		}
		me.loading = false;
		me.getIcdLiveSearch().reset();
	},

	addIcd: function(record, group, order){

		this.getDxCell(group, order).add({
			xtype: 'panel',
			closable: true,
			title: record.data.code,
			dxRecord: record,
			width: 100,
			margin: '0 5 0 0',
			name: this.name,
			editable: false,
			action: 'Dx',
			draggable: {
				moveOnDrag: false,
				ddGroup: 'group-' + group + '-dx'
			}
		});
	},

	getDxCell: function(group, order){
		return this.getGroupContainer(group).getComponent(this.id + '-dx-order-' + order);
	},

	getIcdLiveSearch: function(){
		return this.query('liveicdxsearch')[0];
	},

	getDxGroupCombo: function(){
		return this.query('#' + this.id + '-group-cmb')[0];
	},

	getNextOrder: function(group){
		var pointers = this.getGroupContainer(group).query('container[action=pointer]'),
			i, len = pointers.length;

		for(i=0; i < len; i++){
			if(pointers[i].items.items.length == 0) return (i + 1);
		}
		return false;
	},

	onReOrder: function(group){
		var orders = group.query('container[action=pointer]'),
			len;

		len = orders.length;
		for(var i=0; i < len; i++){
			if(orders[i].items.items.length > 0 && orders[i].items.items[0].action == 'Dx'){
				orders[i].items.items[0].dxRecord.set({dx_order: (i+1)});
			}
		}
	},

	sync: function(){
		this.store.sync();
	}
});
Ext.define('App.view.patient.windows.PossibleDuplicates', {
	extend: 'App.ux.window.Window',
	title: _('possible_duplicates'),
	itemId: 'PossiblePatientDuplicatesWindow',
	closeAction: 'hide',
	bodyStyle: 'background-color:#fff',
	modal: true,
	closable: false,
	requires: [
		'Ext.toolbar.Paging',
		'Ext.ux.SlidingPager'
	],
	initComponent: function(){
		var me = this;

		me.items = [
			{
				xtype: 'grid',
				store: me.store = Ext.create('App.store.patient.PatientPossibleDuplicates'),
				width: 700,
				maxHeight: 700,
				frame: true,
				margin: 5,
				hideHeaders: true,
				columns: [
					{
						dataIndex: 'image',
						width: 65,
						renderer: function(v){
							var src =  v != '' ? v : app.patientImage;
							return '<img src="' + src + '" class="icon32Round" />';
						}
					},
					{
						dataIndex: 'fullname',
						flex: 1,
						renderer: function(v, meta, record){
							var phone = record.data.phones !== '' ? record.data.phones : '000-000-0000',
								driver_lic = record.data.drivers_license !== '' ? record.data.drivers_license : '0000000000';
                            //say(record);
							return '<table cellpadding="1" cellspacing="0" border="0" width="100%" style="font-size: 12px;">' +
								'<tbody>' +

								'<tr>' +
								'<td width="20%"><b>' + _('record_number') + ':</b></td>' +
								'<td>' + record.data.record_number +'</td>' +
								'</tr>' +

								'<tr>' +
								'<td><b>' + _('patient') + ':</b></td>' +
								'<td>' + record.data.name + ' (' + record.data.sex + ') ' + record.data.DOBFormatted + '</td>' +
								'</tr>' +

								'</tr>' +
								'<tr>' +
								'<td><b>' + _('address') + ':</b></td>' +
								'<td>' + record.data.fulladdress + '</td>' +
								'</tr>' +

								'<tr>' +
								'<td><b>' + _('home_phone') + ':</b></td>' +
								'<td>' + phone + '</td>' +
								'</tr>' +

								'<tr>' +
								'<td><b>' + _('driver_lic') + ':</b></td>' +
								'<td>' + driver_lic + '</td>' +
								'</tr>' +

								'<tr>' +
								'<td><b>' + _('employer_name') + ':</b></td>' +
								'<td>' + record.data.employer_name + '</td>' +
								'</tr>' +

								'<tr>' +
								'<td><b>' + _('social_security') + ':</b></td>' +
								'<td>' + record.data.SS +'</td>' +
								'</tr>' +
								'</tbody>' +
								'</table>';

						}
					}
				],
				bbar: {
					xtype: 'pagingtoolbar',
					pageSize: 10,
					store: me.store,
					displayInfo: true,
					plugins: Ext.create('Ext.ux.SlidingPager')
				}
			}
		];

		me.buttons = [
			{
				text: _('cancel'),
				itemId: 'PossiblePatientDuplicatesCancelBtn',
				handler: function(btn){
					btn.up('window').close();
				}
			},
			'-',
			{
				text: _('continue'),
				itemId: 'PossiblePatientDuplicatesContinueBtn'
			}
		];

		me.callParent();
	}
});
Ext.define('App.store.patient.DoctorsNotes', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.DoctorsNote',
	autoLoad: false
});



Ext.define('App.view.patient.DoctorsNotes', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.store.patient.DoctorsNotes',
		'App.ux.grid.RowFormEditing',
		'App.ux.form.fields.MultiText',
		'App.ux.combo.Templates'
	],
	xtype: 'patientdoctorsnotepanel',
	title: _('doctors_notes'),
	itemId: 'DoctorsNotes',
	columnLines: true,
	store: Ext.create('App.store.patient.DoctorsNotes', {
		storeId: 'DoctorsNotesStore',
		groupField: 'order_date',
		remoteFilter: true,
		pageSize: 200,
		sorters: [
			{
				property: 'order_date',
				direction: 'DESC'
			}
		]
	}),
	selModel: Ext.create('Ext.selection.CheckboxModel', {
		showHeaderCheckbox: false
	}),
	features: [
		{
			ftype: 'grouping'
		}
	],
	columns: [
		{
			xtype: 'actioncolumn',
			width: 20,
			items: [
				{
					icon: 'resources/images/icons/cross.png',
					tooltip: _('remove')
				}
			]
		},
		{
			xtype: 'datecolumn',
			text: _('date'),
			dataIndex: 'order_date',
			format: g('date_display_format')
		},
		{
			text: _('type'),
			dataIndex: 'template_id',
			renderer: function(v){
				return App.Current.getController('patient.DoctorsNotes').templatesRenderer(v);
			},
			allowBlank: false
		},
		{
			xtype: 'datecolumn',
			text: _('from'),
			dataIndex: 'from_date',
			format: g('date_display_format')
		},
		{
			xtype: 'datecolumn',
			text: _('to'),
			dataIndex: 'to_date',
			format: g('date_display_format')
		},
		{
			text: _('comments'),
			dataIndex: 'comments',
			flex: 1
		},
		{
			text: _('restrictions'),
			dataIndex: 'string_restrictions',
			flex: 1
		}

	],
	plugins: [
		{
			ptype: 'rowformediting',
			clicksToEdit: 2,
			items: [
				{
					xtype: 'container',
					layout: {
						type: 'hbox'
					},
					items: [
						{
							xtype: 'fieldset',
							layout: 'anchor',
							title: _('general'),
							height: 145,
							width: 300,
							defaults: {
								margin: '0 0 5 0'
							},
							items: [
								{
									xtype: 'datefield',
									fieldLabel: _('order_date'),
									format: g('date_display_format'),
									name: 'order_date'
								},
								{
									xtype: 'documentstemplatescombo',
									fieldLabel: _('document'),
									name: 'template_id'
								},
								{
									xtype: 'datefield',
									fieldLabel: _('from'),
									format: g('date_display_format'),
									name: 'from_date'
								},
								{
									xtype: 'datefield',
									fieldLabel: _('to'),
									format: g('date_display_format'),
									name: 'to_date'
								}
							]
						},
						{
							xtype: 'fieldset',
							layout: 'fit',
							title: _('comments'),
							flex: 1,
							height: 145,
							margin: '0 5',
							items: [
								{
									xtype: 'textareafield',
									anchor: '100%',
									margin: 5,
									name: 'comments'
								}
							]
						},
						{
							xtype: 'fieldset',
							title: _('restrictions'),
							height: 145,
							width: 400,
							autoScroll: true,
							items: [
								{
									xtype: 'multitextfield',
									name: 'restrictions'
								}
							]
						}
					]
				}
			]
		}
	],
	tbar: [
		'->',
		'-',
		{
			text: _('new_order'),
			iconCls: 'icoAdd',
			action: 'encounterRecordAdd',
			itemId: 'newDoctorsNoteBtn'

		},
		'-',
		{
			text: _('print'),
			iconCls: 'icoPrint',
			disabled: true,
			margin: '0 5 0 0',
			itemId: 'printDoctorsNoteBtn'
		}
	]
});

Ext.define('App.store.patient.PatientImmunization', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.PatientImmunization'
});



Ext.define('App.store.patient.Allergies', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.Allergies'
});
Ext.define('App.store.patient.PatientActiveProblems', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.PatientActiveProblem'],
	model: 'App.model.patient.PatientActiveProblem'
});
Ext.define('App.store.patient.Medications', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Medications',
    groupField: 'STR',
    startCollapsed: true
});
Ext.define('App.view.patient.ItemsToReview', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.itemstoreview',
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	frame: true,
	bodyPadding: 5,
	bodyBorder: true,
	bodyStyle: 'background-color:white',
	showRating: true,
	autoScroll: true,
	itemId: 'ItemsToReviewPanel',
	items: [
		{
			xtype: 'container',
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			defaults: {
				xtype: 'grid',
				margin: '0 0 5 0'
			},
			items: [
				{
					title: _('immunizations'),
					frame: true,
					height: 180,
					flex: 1,
					store: Ext.create('App.store.patient.PatientImmunization'),
					itemId: 'ItemsToReviewImmuGrid',
					margin: '0 5 5 0',
					columns: [
						{
							header: _('immunization'),
							width: 250,
							dataIndex: 'vaccine_name'
						},
						{
							header: _('date'),
							width: 90,
							xtype: 'datecolumn',
							format: 'Y-m-d',
							dataIndex: 'administered_date'
						},
						{
							header: _('notes'),
							flex: 1,
							dataIndex: 'note'
						}
					]
				},
				{
					title: _('allergies'),
					frame: true,
					height: 180,
					flex: 1,
					store: Ext.create('App.store.patient.Allergies'),
					itemId: 'ItemsToReviewAllergiesGrid',
					columns: [
						{
							header: _('type'),
							width: 100,
							dataIndex: 'allergy_type'
						},
						{
							header: _('name'),
							width: 100,
							dataIndex: 'allergy'
						},
						{
							header: _('severity'),
							flex: 1,
							dataIndex: 'severity'
						}
					]
				}
			]
		},
		{
			xtype: 'container',
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			defaults: {
				xtype: 'grid',
				margin: '0 0 5 0'
			},
			items: [
				{
					title: _('active_problems'),
					frame: true,
					height: 180,
					flex: 1,
					margin: '0 5 5 0',
					store: Ext.create('App.store.patient.PatientActiveProblems'),
					itemId: 'ItemsToReviewActiveProblemsGrid',
					columns: [
						{
							header: _('problem'),
							width: 250,
							dataIndex: 'code_text'
						},
						{
							xtype: 'datecolumn',
							header: _('begin_date'),
							width: 90,
							format: 'Y-m-d',
							dataIndex: 'begin_date'
						},
						{
							xtype: 'datecolumn',
							header: _('end_date'),
							flex: 1,
							format: 'Y-m-d',
							dataIndex: 'end_date'
						}
					]
				},
				{
					title: _('medications'),
					frame: true,
					height: 180,
					flex: 1,
					store: Ext.create('App.store.patient.Medications'),
					itemId: 'ItemsToReviewMedicationsGrid',
					columns: [
						{
							header: _('medication'),
							width: 250,
							dataIndex: 'STR'
						},
						{
							xtype: 'datecolumn',
							header: _('begin_date'),
							width: 90,
							format: 'Y-m-d',
							dataIndex: 'begin_date'
						},
						{
							xtype: 'datecolumn',
							header: _('end_date'),
							flex: 1,
							format: 'Y-m-d',
							dataIndex: 'end_date'
						}
					]
				}
			]
		},
		{
			xtype: 'fieldset',
			title: _('social_history'),
			items: [
				{
					fieldLabel: _('smoking_status'),
					xtype: 'mitos.smokingstatuscombo',
					itemId: 'reviewsmokingstatuscombo',
					allowBlank: false,
					labelWidth: 100,
					width: 325
				}
			]
		}
	],
	buttons: [
		{
			text: _('review_all'),
			name: 'review',
			itemId: 'encounterRecordAdd'
		}
	]
});
Ext.define('App.view.patient.EncounterDocumentsGrid', {
	extend: 'Ext.grid.Panel',
	requires: [
		'Ext.grid.feature.Grouping'
	],
	xtype: 'encounterdocumentsgrid',
	title: _('documents'),
	split: true,
	features: [
		{
			ftype: 'grouping',
			collapsible: false,
			groupHeaderTpl: '{name}\'s'
		}
	],
	selType: 'checkboxmodel',
	store: Ext.create('Ext.data.Store', {
		fields: ['id', 'record_id', 'description', 'document_type', 'controller', 'method'],
		proxy: {
			type: 'memory'
		},
		groupField: 'document_type'
	}),
	columns: [
		{
			header: _('description'),
			dataIndex: 'description',
			flex: 1
		}
	],
	tools: [
		{
			type:'print',
			itemId: 'EncounterDocumentsPrintBtn'
		}
	],
	loadDocs: function(eid){
		App.app.getController('patient.encounter.EncounterDocuments').loadDocumentsByEid(this, eid);
	}
});
Ext.define('App.view.patient.CheckoutAlertsView',
{
	extend : 'Ext.view.View',
	alias : 'widget.checkoutalertsview',
	trackOver : true,
	cls : 'checkoutalert',
	itemSelector : 'div.alert-div',
	loadMask : true,
	singleSelect : true,
	emptyText : '<span style="color: #616161; font-size: 12px;">Sweet! ' + _('no_alerts_found') + '.</span>',
	initComponent : function()
	{
		var me = this;

		me.tpl = '<table>' +
			'<tpl for=".">' +
			'<tr class="alert-div>' +
			'<div class="alert-div">' +
			'<img class="alert-img" src="{icon}" />' +
			'<div class="alert-msg">{alert}</div>' +
			'</div>' +
			'</tr>' +
			'</tpl>' +
			'</table>';

		me.callParent(arguments);
	}
});

Ext.define('App.view.patient.Vitals', {
	extend: 'Ext.panel.Panel',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'App.ux.form.fields.DateTime'
	],
	alias: 'widget.vitalspanel',
	title: _('vitals'),
	layout: 'border',
	bodyPadding: 5,
	items: [

		// VITALS HEADER BLOCKS
		{
			xtype: 'container',
			height: 100,
			region: 'north',
			itemId: 'vitalsBlocks',
			layout: {
				type: 'hbox',
				align: 'stretch'
			},
			defaults: {
				xtype: 'container',
				cls: 'latest-vitals-items',
				margin: '0 5 5 5',
				width: 130
			},
			items: [
				{
					itemId: 'bpBlock',
					margin: '0 5 5 0',
					html: '<p class="title">' + _('bp') + '</p><p class="value">--/--</p><p class="extra">' + _('systolic') + '/' + _('diastolic') + '</p>'
				},
				{
					itemId: 'tempBlock',
					html: '<p class="title">' + _('temp') + '</p><p class="value">--</p><p class="extra">--</p>'
				},
				{
					itemId: 'weighBlock',
					html: '<p class="title">' + _('weight') + '</p><p class="value">--</p>'
				},
				{
					itemId: 'heightBlock',
					html: '<p class="title">' + _('height') + '</p><p class="value">--</p>'
				},
				{
					itemId: 'bmiBlock',
					html: '<p class="title">' + _('bmi') + '</p><p class="value">--</p><p class="extra">--</p>'
				},
				{
					itemId: 'notesBlock',
					margin: '0 5 5 5',
					html: '<p class="title">' + _('notes') + '</p><p class="value" style="text-align: left"> -- </p><p class="extra">--</p>',
					flex: 1
				}
			]
		},
		{
			xtype: 'grid',
			region: 'center',
			flex: 1,
			columnLines: true,
			itemId: 'historyGrid',
			multiSelect: true,
			plugins: [
				{
					ptype: 'rowediting'
				}
			],
			viewConfig: {
				getRowClass: function(record, rowIndex, rowParams, store){
					return record.data.auth_uid === 0 ? 'unsignedVital' : '';
				}
			},
			tbar: [
				{
					xtype:'button',
					icon:'resources/images/icons/blueInfo.png',
					focusCls:'',
					handler:function(){
						App.app.getController('InfoButton').doGetInfoByUrl('https://vsearch.nlm.nih.gov/vivisimo/cgi-bin/query-meta?v%3Aproject=medlineplus&query=vitals+signs&x=0&y=0');
					}
				},
				'->',
				{
					text: _('vitals'),
					iconCls: 'icoAdd',
					itemId: 'vitalAddBtn',
					action: 'encounterRecordAdd'
				},
				'-',
				{
					text: _('sign'),
					icon: 'resources/images/icons/pen.png',
					itemId: 'vitalSignBtn',
					action: 'encounterRecordAdd'
				}
			]

		}
	],
	initComponent:function(){
		var me = this;

		var columns = [
			{
				xtype:'datecolumn',
				text: _('date'),
				dataIndex: 'date',
				format: 'Y-m-d g:i a',
				width: 180,
				editor:{
					xtype: 'mitos.datetime',
					timeFormat: 'g:i a'
				}
			},
			{
				text: _('bp'),
				columns:[
					{
						text: _('systolic'),
						dataIndex: 'bp_systolic',
						width: 65,
						editor: {
							xtype: 'textfield',
							vtype: 'numeric'
						}
					},
					{
						text: _('diastolic'),
						dataIndex: 'bp_diastolic',
						width: 65,
						editor: {
							xtype: 'textfield',
							vtype: 'numeric'
						}
					}
				]
			}
		];

		if(g('units_of_measurement') != 'metric'){
			columns.push({
				text: _('temp'),
				dataIndex: 'temp_f',
				width: 70,
				editor: {
					xtype: 'textfield',
					itemId: 'vitalTempFField',
					vtype: 'numericWithDecimal',
					enableKeyEvents: true
				},
				renderer:function(v){
					return v === 0 || v === null ? '' : v + '&deg;F'
				}
			});
		}else{
			columns.push({
				text: _('temp'),
				dataIndex: 'temp_c',
				width: 70,
				editor: {
					xtype: 'textfield',
					itemId: 'vitalTempCField',
					vtype: 'numericWithDecimal',
					enableKeyEvents: true
				},
				renderer:function(v){
					return v === 0 || v === null ? '' : v + '&deg;C'
				}
			});
		}

		columns.push({
			text: _('temp_location'),
			dataIndex: 'temp_location',
			editor: {
				xtype: 'gaiaehr.combo',
				list: 62
			}
		});

		if(g('units_of_measurement') != 'metric'){
			columns.push({
				text: _('weight_lbs'),
				dataIndex: 'weight_lbs',
				width: 80,
				editor: {
					xtype: 'textfield',
					itemId: 'vitalWeightLbsField',
					vtype: 'numericWithSlash',
					enableKeyEvents: true
				},
				renderer:function(v){
					return v === 0 || v === null ? '' : v + ' lbs/oz'
				}
			});
			columns.push({
				text: _('height_in'),
				dataIndex: 'height_in',
				width: 70,
				editor: {
					xtype: 'textfield',
					itemId: 'vitalHeightInField',
					vtype: 'numericWithDecimal',
					enableKeyEvents: true
				},
				renderer:function(v){
					return v === 0 || v === null ? '' : v + ' in'
				}
			});
		}else{
			columns.push({
				text: _('weight'),
				dataIndex: 'weight_kg',
				width: 80,
				editor: {
					xtype: 'textfield',
					itemId: 'vitalWeightKgField',
					vtype: 'numericWithDecimal',
					enableKeyEvents: true
				},
				renderer:function(v){
					return v === 0 || v === null ? '' : v + ' kg'
				}
			});
			columns.push({
				text: _('height_cm'),
				dataIndex: 'height_cm',
				width: 70,
				editor: {
					xtype: 'textfield',
					itemId: 'vitalHeightCmField',
					vtype: 'numericWithDecimal',
					enableKeyEvents: true
				},
				renderer:function(v){
					return v === 0 || v === null ? '' : v + ' cm'
				}
			});
		}

		columns.push({
			text: _('pulse'),
			dataIndex: 'pulse',
			width: 60,
			editor: {
				xtype: 'textfield',
				vtype: 'numeric'
			},
			renderer:function(v){
				return v === 0 || v === null ? '' : v;
			}
		});

		columns.push({
			text: _('respiration'),
			dataIndex: 'respiration',
			editor: {
				xtype: 'textfield',
				vtype: 'numeric'
			},
			renderer:function(v){
				return v === 0 || v === null ? '' : v;
			}
		});


//		{
//			text: _('oxygen_saturation'),
//			dataIndex: 'oxygen_saturation'
//		},
//		{
//			text: _('head_circumference_in'),
//			dataIndex: 'head_circumference_in',
//			width: 150
//		},
//		{
//			text: _('head_circumference_cm'),
//			dataIndex: 'head_circumference_cm',
//			width: 150,
//			hidden: true
//		},
//		{
//			text: _('waist_circumference_in'),
//			dataIndex: 'waist_circumference_in',
//			width: 150
//		},
//		{
//			text: _('waist_circumference_cm'),
//			dataIndex: 'waist_circumference_cm',
//			width: 150,
//			hidden: true
//		},

		columns.push({
			text: _('bmi'),
			dataIndex: 'bmi',
			width: 50
		});

//		{
//			text: _('bmi_status'),
//			dataIndex: 'bmi_status'
//		}

		columns.push({
			text: _('other_notes'),
			dataIndex: 'other_notes',
			flex: 1,
			editor: {
				xtype: 'textfield'
			}
		});

		columns.push({
			text: _('administer_by'),
			dataIndex: 'administer_by'
		});

		columns.push({
			text: _('authorized_by'),
			dataIndex: 'authorized_by'
		});

		me.items[1].columns = columns;

		me.callParent();
	}
});

Ext.define('App.view.patient.NewPatient', {
	extend: 'App.ux.RenderPanel',
	pageTitle: _('patient_entry_form'),
	initComponent: function(){

		var me = this;

		me.pageBody = [
			me.newPatientPanel = Ext.create('App.view.patient.Patient')
		];
		me.callParent(arguments);

	},
	/**
	 *
	 * @param {function} callback
	 */
	confirmationWin: function(callback){
		Ext.Msg.show({
			title: _('please_confirm') + '...',
			msg: _('do_you_want_to_create_a_new_patient'),
			icon: Ext.MessageBox.QUESTION,
			buttons: Ext.Msg.YESNO,
			scope: this,
			fn: function(btn){
				callback(btn);
			}
		});
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 * @param {function} [callback] - callback
	 */
	onActive: function(callback){
		var me = this;
		this.confirmationWin(function(btn){
			if(btn == 'yes'){
				me.newPatientPanel.loadNew();
				app.unsetPatient(null, true);
				callback(true);
			}else{
				app.nav.goBack();
				callback(false);
			}
		});
	}
});
Ext.define('App.view.patient.ProgressNote', {
	extend           : 'Ext.panel.Panel',
    alias            : 'widget.progressnote',
    bodyPadding      : 5,
    autoScroll       : true,
    loadMask         : false,
	initComponent: function() {
		var me = this;

        me.tpl = new Ext.XTemplate(
            '<div class="progressNote">' +
            '   <div class="secession general-data">' +
            '       <div class="title"> ' + _('general') + ' </div>' +
            '       <table width="100%">' +
            '           <tr>' +
            '               <td>' +
            '                   <div class="header row">' + _('name') + ': {patient_name} </div>' +
            '                   <div class="header row">' + _('record') + ': #{pid} </div>' +
            '                   <div class="header row">' + _('provider_date') + ': {open_by} </div>' +
            '                   <div class="header row">' + _('onset_date') + ': {[values.onset_date || "-"]} </div>' +
            '                   <div class="header row">' + _('provider') + ': {[values.signed_by || "-"]} </div>' +
            '               </td>' +
            '               <td>' +
            '                   <div class="header row">' + _('service_date') + ': {service_date} </div>' +
            '                   <div class="header row">' + _('visit_category') + ': {visit_category} </div>' +
            '                   <div class="header row">' + _('facility') + ': {facility} </div>' +
            '                   <div class="header row">' + _('priority') + ': {priority} </div>' +
            '                   <div class="header row">' + _('signed_on') + ': {[values.close_date || "-"]} </div>' +
            '               </td>' +
            '           </tr>' +
            '           <tr>' +
            '               <td colspan="2">' +
            '                   <div class="header row" style="white-space: normal;">' + _('chief_complaint') + ': {brief_description} </div>' +
            '               </td>' +
            '           </tr>' +
            '       </table>' +
            '   </div>' +
            /**
             * Review of System Secession
             */
            '   <tpl if="reviewofsystems">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + _('review_of_systems') + ' </div>' +
            '           <tpl for="reviewofsystems">' +
            '               <tpl if="this.isNotNull(value)">' +
            '                   <div class="pblock"> {name}: {value} </div>' +
            '               </tpl>' +
            '           </tpl>' +
            '       </div>' +
            '   </tpl>' +
            /**
             * Review of System Checks Secession
             */
            '   <tpl if="reviewofsystemschecks">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + _('review_of_system_checks') + ' </div>' +
            '           <tpl for="reviewofsystemschecks">' +
            '               <tpl if="this.isNotNull(value)">' +
            '                   <div class="pblock"> {name}: {value} </div>' +
            '               </tpl>' +
            '           </tpl>' +
            '       </div>' +
            '   </tpl>' +

            /**
             * SOAP Secession
             */
            '   <tpl for="soap">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + _('soap') + ' </div>' +
            '           <p><span>' + _('subjective') + ':</span> {[this.doHtmlDecode(values.subjective) || "-"]} </p>' +
            '           <p><span>' + _('objective') + ':</span> {[this.doHtmlDecode(values.objective) || "-"]}</p>' +
            '           <p><span>' + _('assessment') + ':</span> {[this.doHtmlDecode(values.assessment) || "-"]}</p>' +
            '           <p><span>' + _('plan') + ':</span> {[this.doHtmlDecode(values.plan) || "-"]}</p>' +
            '       </div>' +
            '   </tpl>' +
            /**
             * Speech Dictation Secession
             */
            '   <tpl for="speechdictation">' +
            '       <div class="secession">' +
            '           <div class="title"> ' + _('speech_dictation') + ' </div>' +
            '           <p><span>' + _('dictation') + ':</span> {dictation}</p>' +
            '           <p><span>' + _('additional_notes') + ':</span> {additional_notes}</p>' +
            '       </div>' +
            '   </tpl>' +
            /**
             * Vitals Secession
             */
            '   <tpl if="vitals">' +
            '       <div class="secession vitals-data">' +
            '           <div class="title"> ' + _('vitals') + ' </div>' +
            '           <div style="overflow-x: auto">' +
            '               <table>' +
            '                   <tr>' +
            '                       <td>' +
            '                          <table class="x-grid-table x-grid-table-vitals vitals-column">' +
            '                              <tbody>' +
            '                                  <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td x-grid-table-vitals-date">' +
            '                                           <div class="x-grid-cell-inner ">' + _('date_&_time') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('weight_lbs') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('weight_kg') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('height_in') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('height_cm') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('bp_systolic') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('bp_diastolic') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('pulse') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('respiration') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('temp_f') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('temp_c') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('temp_location') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('oxygen_saturation') + '%</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('head_circumference_in') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('head_circumference_cm') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('waist_circumference_in') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('waist_circumference_cm') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('bmi') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('bmi_status') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('other_notes') + '</div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('administer') + '<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">' + _('signed_by') + '<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                               </tbody>' +
            '                           </table>' +
            '                       </td>' +
            '                       <tpl for="vitals">' +
            '                           <td>' +
            '                           <table class="x-grid-table x-grid-table-vitals vitals-column">' +
            '                               <tbody>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td x-grid-table-vitals-date">' +
            '                                           <div class="x-grid-cell-inner ">{date}</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row first">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.weight_lbs)]}</div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row first">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.weight_kg)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
		        '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.height_in)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.height_cm)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.bp_systolic)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.bp_diastolic)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.pulse)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.respiration)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.temp_f)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.temp_c)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.temp_location.toUpperCase())]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.oxygen_saturation)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.head_circumference_in)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.head_circumference_cm)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
		        '                       <tpl if="!this.isMetric()">' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.waist_circumference_in)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       <tpl else>',
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.waist_circumference_cm)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
	            '                       </tpl>',
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.bmi)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.bmi_status)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[this.getVitalsValue(values.other_notes)]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row x-grid-data-row">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[(values.administer_by == null || values.administer_by == " ") ? "-" : values.administer_by]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                                   <tr class="x-grid-row  x-grid-row-alt">' +
            '                                       <td class="x-grid-cell x-grid-td">' +
            '                                           <div class="x-grid-cell-inner ">{[(values.authorized_by == null || values.authorized_by == " ") ? "-" : values.authorized_by]}<div>' +
            '                                       </td>' +
            '                                   </tr>' +
            '                               </tbody>' +
            '                           </table>' +
            '                           </td>' +
            '                       </tpl>' +
            '                   </tr>' +
            '               </table>' +
            '           </div>' +
            '       </div>' +
            '   </tpl>' +
            '</div>',
            {

	            isNotNull: function(value){
	                return value != 'null' && value != null;
	            },

		        isNotEmpty:function(value){

	            },

		        getVitalsValue:function(value){
			        return (value == 0 || value == null) ? '-' : value;
		        },

	            isMetric:function(){
		            return g('units_of_measurement') == 'metric';
	            },

	            doHtmlDecode:function(v){
		            return Ext.String.htmlDecode(v);
	            }



            }
        );

		me.callParent(arguments);
	}

});

Ext.define('App.view.patient.RemindersAlert', {
	extend: 'Ext.window.Window',
	requires: [
		'Ext.grid.plugin.RowEditing'
	],
	title: _('reminders'),
	width: 700,
	closeAction: 'hide',
	initComponent: function(){

		var me = this;

		me.items = [
			{
				xtype: 'grid',
				itemId: 'RemindersAlertGrid',
				margin: 5,
				frame : true,
				store: Ext.create('App.store.patient.Reminders'),
				plugins: {
					ptype: 'cellediting',
					autoCancel: false,
					errorSummary: false,
					clicksToEdit: 2
				},
				columns: [
					{
						xtype: 'datecolumn',
						text: _('date'),
						format: g('date_display_format'),
						dataIndex: 'date'
					},
					{
						text: _('note'),
						dataIndex: 'body',
						flex: 1
					},
					{
						text: _('active'),
						width: 50,
						dataIndex: 'active',
						renderer: function(v, m, r){
							return app.boolRenderer(v, m, r);
						},
						editor: {
							xtype: 'checkbox'
						}
					}
				]
			}
		];



		me.callParent();

	},
	buttons: [
		'->',
		{
			text: _('ok'),
			itemId: 'RemindersAlertOkBtn'
		},
		'-',
		{
			text: _('cancel'),
			itemId: 'RemindersAlertCancelBtn'
		}
	]
});
Ext.define('App.store.patient.Reminders', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.Reminders'
});
Ext.define('App.view.patient.Reminders', {
	extend: 'Ext.grid.Panel',
	requires: [
		'Ext.grid.plugin.RowEditing'
	],
	xtype: 'patientreminderspanel',
	title: _('reminders'),
	store: Ext.create('App.store.patient.Reminders'),
	plugins: {
		ptype:'rowediting',
		autoCancel: false,
		errorSummary: false,
		clicksToEdit: 2
	},
	columns: [
		{
			xtype: 'datecolumn',
			text: _('date'),
			format: 'Y-m-d',
			dataIndex: 'date'
		},
		{
			header: _('type'),
			dataIndex: 'type',
			width: 200,
			editor: {
				xtype: 'gaiaehr.combo',
				list: 130
			}
		},
		{
			text: _('note'),
			dataIndex: 'body',
			flex: 1,
			editor: {
				xtype: 'textfield'
			}
		},
		{
			text: _('user'),
			width: 225,
			dataIndex: 'user_name'
		},
		{
			text: _('active'),
			width: 50,
			dataIndex: 'active',
			renderer: function(v, m, r){
				return app.boolRenderer(v, m, r);
			},
			editor: {
				xtype: 'checkbox'
			}
		}
	],
	tbar: [
		'->',
		{
			text: _('add_reminder'),
			iconCls: 'icoAdd',
			itemId: 'RemindersAddBtn'
		}
	]
});
Ext.define('App.store.patient.PatientsOrders', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.PatientsOrders',
	remoteSort: false,
	autoLoad: false
});



Ext.define('App.view.patient.Results', {
	extend: 'Ext.panel.Panel',
	requires: [
		'Ext.grid.plugin.CellEditing',
		'Ext.grid.plugin.RowEditing',
        'Ext.tab.Panel',
		'App.store.patient.PatientsOrders',
		'App.ux.LiveLabsSearch',
        'App.ux.LiveRadsSearch',
        'App.ux.window.voidComment'
	],
	title: _('results'),
	xtype: 'patientresultspanel',
	layout: 'border',
    border: false,
    init: function() {
        var voidCommentWindow;
    },
	items: [
		{
            /**
             * Order Grid
             * ----------
             */
			xtype: 'grid',
            itemId: 'orderResultsGrid',
			action: 'orders',
			region: 'center',
			split: true,
            border: false,
			columnLines: true,
			allowDeselect: true,
			store: Ext.create('App.store.patient.PatientsOrders', {
				remoteFilter: true
			}),
			plugins: [
				{
                    pluginId: 'resultRowEditor',
					ptype: 'rowediting',
					errorSummary: false
				}
			],
			columns: [
				{
					xtype: 'actioncolumn',
					width: 25,
					items: [
						{
							icon: 'resources/images/icons/blueInfo.png',
							tooltip: 'Get Info',
							handler: function(grid, rowIndex, colIndex, item, e, record){
								App.app.getController('InfoButton').doGetInfo(
                                    record.data.code,
                                    record.data.code_type,
                                    record.data.description
                                );
							}
						}
					]
				},
                {
                    header: _('void'),
                    itemid: 'voidField',
                    groupable: false,
                    width: 30,
                    align: 'center',
                    dataIndex: 'void',
                    tooltip: _('void'),
                    editor:
                    {
                        xtype: 'checkbox',
                        listeners:
                        {
                            change: function( chkbox )
                            {
                                if(!this.voidCommentWindow)
                                    this.voidCommentWindow = Ext.create('App.ux.window.voidComment');
                                this.voidCommentWindow.showAt(chkbox.getXY());
                            }
                        }
                    },
                    renderer: function(v, meta, record)
                    {
                        return app.voidRenderer(v);
                    }
                },
                {
                    header: _('type'),
                    width: 100,
                    dataIndex: 'order_type',
                    renderer: function(v, meta, record)
                    {
                        var style = '';
                        if(record.data.void) style = 'text-decoration: line-through;';
                        if(record.data.order_type == 'lab')
                            return '<span style="'+style+'">'+_('laboratory')+'</span>';
                        if(record.data.order_type == 'rad')
                            return '<span style="'+style+'">'+_('radiology')+'</span>';
                    },
                    editor: {
                        xtype: 'combobox',
                        itemId: 'orderTypeCombo',
                        store: Ext.create('Ext.data.Store', {
                            fields: ['type', 'order_type'],
                            data: [
                                {"type": "Laboratory", "order_type": "lab"},
                                {"type": "Radiology", "order_type": "rad"}
                            ]
                        }),
                        allowBlank: false,
                        editable: false,
                        queryMode: 'local',
                        displayField: 'type',
                        valueField: 'order_type'
                    }
                },
                {
                    xtype: 'datecolumn',
                    format: 'Y-m-d',
                    header: _('date_ordered'),
                    dataIndex: 'date_ordered',
                    menuDisabled: true,
                    resizable: false,
                    width: 100,
                    editor: {
                        xtype: 'datefield',
                        allowBlank: false
                    },
                    renderer: function(v, meta, record)
                    {
                        var dataOrdered = record.data.date_ordered;
                        if(record.data.void)
                            return '<span style="text-decoration: line-through;">'+dataOrdered+'</span>';
                        return '<span>'+dataOrdered+'</span>';
                    }
                },
				{
					header: _('order_description'),
					dataIndex: 'description',
					menuDisabled: true,
					resizable: false,
					flex: 1,
                    renderer: function(v, meta, record)
                    {
                        if(record.data.void)
                            return '<span style="text-decoration: line-through;">'+ v + '</span>';
                        return '<span>'+ v + '</span>';
                    }
				},
				{
					header: _('status'),
					dataIndex: 'status',
					menuDisabled: true,
					resizable: false,
					width: 60,
                    renderer: function(v, meta, record)
                    {
                        if(record.data.void)
                            return '<span style="text-decoration: line-through;">'+ v + '</span>';
                        return '<span>'+ v + '</span>';
                    }
				}
			],
			bbar: [
				'->',
				{
					text: _('new_result'),
					itemId: 'NewOrderResultBtn',
					iconCls: 'icoAdd',
                    disabled: true
				}
			]
		},
        {
            /**
             * Orders Card [ Laboratory or Radiology ]
             * ---------------------------------------
             */
            xtype: 'panel',
            border: false,
            region: 'south',
            split: true,
            itemId: 'documentTypeCard',
            height: 350,
            hidden: true,
            layout: 'card',
            activeItem: 0,
            items: [
                {
                    /**
                     * Laboratory Order Panel
                     * ---------------------
                     */
                    xtype: 'panel',
                    frame: false,
                    itemId: 'laboratoryResultPanel',
                    layout: {
                        type: 'border'
                    },
                    tools: [
                        {
                            xtype: 'button',
                            text: _('view_document'),
                            icon: 'resources/images/icons/icoView.png',
                            action: 'orderDocumentViewBtn'
                        }
                    ],
                    items: [
                        {
                            xtype: 'form',
                            title: _('report_info'),
                            itemId: 'laboratoryResultForm',
                            region: 'west',
                            collapsible: true,
                            autoScroll: true,
                            width: 260,
                            bodyPadding: 5,
                            split: true,
                            layout: {
                                type: 'vbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'fieldset',
                                    title: _('report_info'),
                                    defaults: {
                                        xtype: 'textfield',
                                        anchor: '100%'
                                    },
                                    layout: 'anchor',
                                    items: [
                                        {
                                            xtype: 'datefield',
                                            fieldLabel: _('report_date'),
                                            name: 'result_date',
                                            format: 'Y-m-d',
                                            allowBlank: false
                                        },
                                        {
                                            fieldLabel: _('report_number'),
                                            name: 'lab_order_id',
                                            allowBlank: false
                                        },
                                        {
                                            fieldLabel: _('status'),
                                            name: 'result_status'
                                        },
                                        {
                                            xtype: 'datefield',
                                            fieldLabel: _('observation_date'),
                                            name: 'observation_date',
                                            format: 'Y-m-d',
                                            allowBlank: false
                                        },
                                        {
                                            fieldLabel: _('specimen'),
                                            name: 'specimen_text'
                                        },
                                        {
                                            xtype: 'textareafield',
                                            fieldLabel: _('specimen_notes'),
                                            name: 'specimen_notes',
                                            height: 50
                                        },
                                        {
                                            xtype: 'filefield',
                                            labelAlign: 'top',
                                            fieldLabel: _('upload_document'),
                                            action: 'orderresultuploadfield',
                                            submitValue: false
                                        }
                                    ]
                                },
                                {
                                    xtype: 'fieldset',
                                    title: _('laboratory_info'),
                                    defaults: {
                                        xtype: 'textfield',
                                        anchor: '100%'
                                    },
                                    layout: 'anchor',
                                    margin: 0,
                                    collapsible: true,
                                    collapsed: true,
                                    items: [
                                        {
                                            fieldLabel: _('name'),
                                            name: 'lab_name'
                                        },
                                        {
                                            xtype: 'textareafield',
                                            fieldLabel: _('address'),
                                            name: 'lab_address',
                                            height: 50
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'grid',
                            itemId: 'observationsGrid',
                            action: 'observations',
                            flex: 1,
                            region: 'center',
                            split: true,
                            border: false,
                            columnLines: true,
                            plugins: [
                                {
                                    ptype: 'cellediting',
                                    clicksToEdit: 1
                                }
                            ],
                            columns: [
                                {
                                    xtype: 'actioncolumn',
                                    width: 25,
                                    items: [
                                        {
                                            icon: 'resources/images/icons/blueInfo.png',  // Use a URL in the icon config
                                            tooltip: 'Get Info',
                                            handler: function(grid, rowIndex, colIndex, item, e, record){
                                                App.app.getController('InfoButton').doGetInfo(
                                                    record.data.code,
                                                    record.data.code_type,
                                                    record.data.code_text
                                                );
                                            }
                                        }
                                    ]
                                },
                                {
                                    text: _('name'),
                                    menuDisabled: true,
                                    dataIndex: 'code_text',
                                    width: 350
                                },
                                {
                                    text: _('value'),
                                    menuDisabled: true,
                                    dataIndex: 'value',
                                    width: 180,
                                    editor: {
                                        xtype: 'textfield'
                                    },
                                    renderer: function(v, meta, record){
                                        var red = ['LL', 'HH', '>', '<', 'AA', 'VS'],
                                            orange = ['L', 'H', 'A', 'W', 'MS'],
                                            blue = ['B', 'S', 'U', 'D', 'R', 'I'],
                                            green = ['N'];

                                        if(Ext.Array.contains(green, record.data.abnormal_flag))
                                        {
                                            return '<span style="color:green;">' + v + '</span>';
                                        }
                                        else if(Ext.Array.contains(blue, record.data.abnormal_flag))
                                        {
                                            return '<span style="color:blue;">' + v + '</span>';
                                        }
                                        else if(Ext.Array.contains(orange, record.data.abnormal_flag))
                                        {
                                            return '<span style="color:orange;">' + v + '</span>';
                                        }
                                        else if(Ext.Array.contains(red, record.data.abnormal_flag))
                                        {
                                            return '<span style="color:red;">' + v + '</span>';
                                        }
                                        else
                                        {
                                            return v;
                                        }
                                    }
                                },
                                {
                                    text: _('units'),
                                    menuDisabled: true,
                                    dataIndex: 'units',
                                    width: 75,
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    text: _('abnormal'),
                                    menuDisabled: true,
                                    dataIndex: 'abnormal_flag',
                                    width: 75,
                                    editor: {
                                        xtype: 'textfield'
                                    },
                                    renderer: function(v, attr){
                                        var red = ['LL', 'HH', '>', '<', 'AA', 'VS'],
                                            orange = ['L', 'H', 'A', 'W', 'MS'],
                                            blue = ['B', 'S', 'U', 'D', 'R', 'I'],
                                            green = ['N'];

                                        if(Ext.Array.contains(green, v))
                                        {
                                            return '<span style="color:green;">' + v + '</span>';
                                        }
                                        else if(Ext.Array.contains(blue, v))
                                        {
                                            return '<span style="color:blue;">' + v + '</span>';
                                        }
                                        else if(Ext.Array.contains(orange, v))
                                        {
                                            return '<span style="color:orange;">' + v + '</span>';
                                        }
                                        else if(Ext.Array.contains(red, v))
                                        {
                                            return '<span style="color:red;">' + v + '</span>';
                                        }
                                        else
                                        {
                                            return v;
                                        }
                                    }
                                },
                                {
                                    text: _('range'),
                                    menuDisabled: true,
                                    dataIndex: 'reference_rage',
                                    width: 150,
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    text: _('notes'),
                                    menuDisabled: true,
                                    dataIndex: 'notes',
                                    width: 300,
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                },
                                {
                                    text: _('status'),
                                    menuDisabled: true,
                                    dataIndex: 'observation_result_status',
                                    width: 60,
                                    editor: {
                                        xtype: 'textfield'
                                    }
                                }
                            ]
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            itemId: 'OrderResultBottomToolbar',
                            defaults: {
                                minWidth: 75
                            },
                            items: [
                                {
                                    text: _('sign'),
                                    iconCls: 'icoSing',
                                    disabled: true,
                                    itemId: 'OrderResultSignBtn'
                                },
                                '->',
                                {
                                    text: _('reset'),
                                    action: 'orderResultResetBtn'
                                },
                                {
                                    text: _('save'),
                                    action: 'orderResultSaveBtn'
                                }
                            ]
                        }
                    ]
                },
                {
                    /**
                     * Radiology Order Panel
                     * ---------------------
                     */
                    xtype: 'panel',
                    itemId: 'radiologyResultPanel',
                    frame: true,
                    layout: {
                        type: 'border'
                    },
                    items: [
                        {
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'bottom',
                            ui: 'footer',
                            itemId: 'radiologyResultBottomToolbar',
                            defaults: {
                                minWidth: 75
                            },
                            items: [
                                {
                                    text: _('sign'),
                                    iconCls: 'icoSing',
                                    disabled: true,
                                    itemId: 'radiologyResultSignBtn'
                                },
                                '->',
                                {
                                    text: _('reset'),
                                    action: 'radiologyResultResetBtn'
                                },
                                {
                                    text: _('save'),
                                    action: 'radiologyResultSaveBtn'
                                }
                            ]
                        }
                    ]
                }
            ]
        }
	]
});

Ext.define('App.store.patient.PatientSocialHistory', {
	extend: 'Ext.data.Store',
	requires:['App.model.patient.PatientSocialHistory'],
	model: 'App.model.patient.PatientSocialHistory',
	groupField: 'category_code_text'
});



Ext.define('App.view.patient.SocialHistory', {
	extend: 'Ext.grid.Panel',
	requires:[
		'Ext.grid.plugin.RowEditing',
		'Ext.grid.feature.Grouping',
		'App.store.patient.PatientSocialHistory',
		'App.ux.combo.Combo',
	],
	xtype: 'patientsocialhistorypanel',
	itemId: 'PatientSocialHistoryGrid',
	columnLines: true,
	store: Ext.create('App.store.patient.PatientSocialHistory',{
		remoteFilter: true
	}),
	plugins: [
		{
			ptype: 'rowediting',
			errorSummary: false
		}
	],
	features: [
		{
			ftype: 'grouping',
			groupHeaderTpl: _('type') + ': {name}'
		}
	],
	columns: [
		{
			text: _('type'),
			dataIndex: 'category_code_text',
			width: 250
		},
		{
			text: _('observation'),
			dataIndex: 'observation',
			flex: 1,
			itemId: 'socialhistorypanelobservationcolumn',
			editor: {
				xtype: 'textfield',
				allowBlank: false
			}
		},
		{
			text: _('note'),
			dataIndex: 'note',
			flex: 1,
			editor: {
				xtype: 'textfield'
			}
		},
		{
			xtype: 'datecolumn',
			text: _('start'),
			dataIndex: 'start_date',
			format: 'Y-m-d',
			width: 120,
			editor: {
				xtype: 'datefield',
				format: 'Y-m-d',
				allowBlank: false
			}
		},
		{
			xtype: 'datecolumn',
			text: _('end'),
			dataIndex: 'end_date',
			format: 'Y-m-d',
			width: 120,
			editor: {
				xtype: 'datefield',
				format: 'Y-m-d'
			}
		}
	],
	tbar: [
		{
			xtype: 'tbtext',
			text: _('social_history'),
			width: 100
		},
		{
			xtype: 'gaiaehr.combo',
			width: 250,
			list: 101,
			allowBlank: false,
			action: 'socialHistoryTypeCombo'
		},
		{
			iconCls: 'icoAdd',
			disabled: true,
			itemId: 'encounterRecordAdd',
			action: 'socialHistoryAddBtn'
		}
	]
});
Ext.define('App.view.patient.Visits', {
	extend: 'App.ux.RenderPanel',
	pageTitle: _('visits_history'),
	uses: [
		'Ext.grid.Panel',
		'Ext.ux.PreviewPlugin'
	],
	showRating: true,
	initComponent: function(){
		var me = this;

		me.store = Ext.create('App.store.patient.Encounters', {
			remoteFilter: true
		});

		function open(val){
			if(val !== null){
				return '<img src="resources/images/icons/yes.gif" />';
			}else{
				return '<img src="resources/images/icons/no.gif" />';
			}
		}

		//******************************************************************
		// Visit History Grid
		//******************************************************************
		me.historyGrid = Ext.create('Ext.grid.Panel', {
			title: _('encounter_history'),
			store: me.store,
			columns: [
				{
					header: 'eid',
					sortable: false,
					dataIndex: 'eid',
					hidden: true
				},
				{
					width: 150,
					header: _('date'),
					sortable: true,
					dataIndex: 'service_date',
					renderer: Ext.util.Format.dateRenderer('Y-m-d H:i:s')
				},
				{
					flex: 1,
					header: _('reason'),
					sortable: true,
					dataIndex: 'brief_description'
				},
				{
					width: 180,
					header: _('provider'),
					sortable: false,
					dataIndex: 'provider'
				},
				{
					width: 120,
					header: _('facility'),
					sortable: false,
					dataIndex: 'facility'
				},
				{
					width: 120,
					header: _('billing_facility'),
					sortable: true,
					dataIndex: 'billing_facility'
				},
				{
					width: 45,
					header: _('close') + '?',
					sortable: true,
					dataIndex: 'close_date',
					renderer: me.openBool
				}
			],
			viewConfig: {
				itemId: 'view',
				plugins: [
					{
						pluginId: 'preview',
						ptype: 'preview',
						bodyField: 'brief_description',
						previewExpanded: false
					}
				],
				listeners: {
					scope: me,
					itemclick: me.gridItemClick,
					itemdblclick: me.gridItemDblClick
				}
			},
			tbar: Ext.create('Ext.PagingToolbar', {
				store: me.store,
				displayInfo: true,
				emptyMsg: 'No Encounters Found',
				plugins: Ext.create('Ext.ux.SlidingPager', {}),
				items: [
					{
						iconCls: '',
						text: _('show_details'),
						enableToggle: true,
						scope: me,
						toggleHandler: me.onDetailToggle
					},
					'-',
					{
						text: _('new_encounter'),
						scope: me,
						handler: me.createNewEncounter
					}
				]
			})
		});
		me.pageBody = [me.historyGrid];

		me.callParent(arguments);
	},

	openBool: function(val){
		if(val !== null){
			return '<img src="resources/images/icons/yes.gif" />';
		}else{
			return '<img src="resources/images/icons/no.gif" />';
		}
	},

	onDetailToggle: function(btn, pressed){
		this.historyGrid.getComponent('view').getPlugin('preview').toggleExpanded(pressed);
	},

	gridItemClick: function(view){
		view.getPlugin('preview').toggleRowExpanded();
	},

	gridItemDblClick: function(view, record){
		app.openEncounter(record.data.eid);
	},

	createNewEncounter: function(){
		app.createNewEncounter();
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		if(this.checkIfCurrPatient()){
			this.updateTitle(app.patient.name + ' (' + _('encounters') + ')');
			this.store.clearFilter(true);
			this.store.filter([
				{
					property: 'pid',
					value: app.patient.pid
				}
			]);
			callback(true);
		}else{
			callback(false);
			this.currPatientError();
		}
	}
});

Ext.define('App.view.patient.VisitCheckout', {
	extend:'App.ux.RenderPanel',
	id:'panelVisitCheckout',
	pageTitle:'Visit Checkout',
    showRating:true,
	initComponent:function(){
		var me = this;

		me.VisitVoucherStore = Ext.create('App.store.account.Voucher',{
			remoteFilter:true
		});

		me.pageBody = Ext.create('Ext.panel.Panel', {
			itemId:'visitpayment',
			defaults:{
				bodyStyle:'padding:15px',
				bodyBorder:true,
				labelWidth:110
			},
			layout:{
				type:'vbox',
				align:'stretch'
			},
			items:[
				{
					xtype:'container',
					flex:1,
					layout:{
						type:'hbox',
						align:'stretch'
					},
					items:[
						me.invoicePanel = Ext.widget('panel',{
							title:_('services_charges'),
							border:true,
							frame:true,
							bodyBorder:true,
							bodyStyle:'background-color:#fff',
							margin:'5 5 0 5',
							flex:2,
                            layout:{
                                type:'vbox',
                                align:'stretch'
                            },
							items:[
                                {
                                    xtype:'container',
                                    flex:1,
                                    autoScroll:true,
                                    items:[
                                        me.invoiceGrid = Ext.widget('grid', {
                                            frame:false,
                                            border:false,
                                            enableColumnMove:false,
                                            enableColumnHide:false,
                                            sortableColumns:false,
                                            columns:[
                                                {
                                                    xtype:'actioncolumn',
                                                    width:20,
                                                    items:[
                                                        {
                                                            icon:'resources/images/icons/delete.png',
                                                            tooltip:_('remove'),
                                                            scope:me,
                                                            handler:me.onRemoveCharge
                                                        }
                                                    ]
                                                },
                                                {
                                                    header:_('item'),
                                                    dataIndex:'name',
                                                    flex:1,
                                                    editor:{
                                                        xtype:'livecptsearch',
                                                        allowBlank:false
                                                    }
                                                },
                                                {
                                                    header:_('price'),
                                                    width:80,
                                                    dataIndex:'amountOriginal',
                                                    align:'right',
                                                    renderer:me.currencyRenderer
                                                },
                                                {
                                                    header:_('charge'),
                                                    width:80,
                                                    dataIndex:'amount',
                                                    align:'right',
                                                    editor:{
                                                        xtype:'textfield',
                                                        allowBlank:false
                                                    },
                                                    renderer:me.currencyRenderer
                                                }
                                            ],
                                            plugins:[
                                                Ext.create('Ext.grid.plugin.CellEditing', {
                                                    clicksToEdit:2
                                                })
                                            ]
                                        }),
                                        {
                                            xtype:'container',
                                            border:false,
                                            padding:1,
                                            height:200,
                                            items:[
                                                {
                                                    xtype:'container',
                                                    style:'float:right',
                                                    layout:'anchor',
                                                    width:150,
                                                    items:[
                                                        me.total = Ext.widget('mitos.currency',{
                                                            fieldLabel:_('total'),
                                                            labelWidth:70,
                                                            anchor:'100%',
                                                            labelAlign:'right',
                                                            cls:'charges_total',
                                                            margin:'2 0 1 0'
                                                        }),
                                                        me.paid = Ext.widget('mitos.currency',{
                                                            fieldLabel:_('paid'),
                                                            labelWidth:70,
                                                            anchor:'100%',
                                                            labelAlign:'right',
                                                            margin:'1 0'
                                                        }),
                                                        me.balance = Ext.widget('mitos.currency',{
                                                            fieldLabel:_('balance'),
                                                            labelWidth:70,
                                                            anchor:'100%',
                                                            labelAlign:'right',
                                                            cls:'charges_balance',
                                                            margin:'2 0 1 0'
                                                        })
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    xtype:'form',
                                    height:135,
                                    border: false,
                                    items:[
                                        {
                                            xtype:'fieldset',
                                            layout:'column',
                                            margin:'5 10',
                                            title:_('payment'),
                                            items:[
                                                me.billingNotes = Ext.widget('textarea',{
                                                    xtype:'textarea',
                                                    anchor:'100%',
                                                    name:'notes',
                                                    columnWidth:.5,
                                                    height:85,
                                                    emptyText:_('additional_billing_notes')

                                                }),
                                                {
                                                    xtype:'container',
                                                    layout:'anchor',
                                                    columnWidth:.5,
                                                    margin:'0 0 0 15',
                                                    items:[
                                                        me.method = Ext.widget('mitos.paymentmethodcombo',{
                                                            fieldLabel: _('payment_method'),
                                                            labelWidth: 100,
                                                            name: 'method',
                                                            anchor:'100%'
                                                        }),
                                                        me.ref = Ext.widget('textfield',{
                                                            fieldLabel: _('reference_#'),
                                                            labelWidth: 100,
                                                            name: 'reference',
                                                            anchor:'100%'
                                                        }),
                                                        me.amount = Ext.widget('mitos.currency',{
                                                            fieldLabel: _('amount'),
                                                            xtype: 'mitos.currency',
                                                            labelWidth: 100,
                                                            name: 'amount',
                                                            anchor:'100%'
                                                        })
                                                    ]
                                                }
                                            ]
                                        }

                                    ]
                                }
							],
							buttons:[
								'->',
								{
									text:_('save_and_print'),
									scope:me,
                                    action:'saveprint',
									handler:me.onInvoiceSave
								},
								{
									text:_('save'),
									scope:me,
                                    action:'save',
									handler:me.onInvoiceSave
								}
							],
							listeners:{
								scope:me,
								render:me.onInvoicePanelRender
							}
						}),
						me.docsGrid = Ext.widget('encounterdocumentsgrid', {
							title:_('documents'),
							frame:true,
							margin:'5 5 0 0',
							flex:1
						})
					]
				},
				{
					xtype:'container',
					layout:'hbox',
					defaults:{ height:170 },
					items:[
						me.notesReminders = Ext.widget('form', {
							title:_('notes_and_reminders'),
							frame:true,
							flex:2,
							action:'formnotes',
							bodyPadding:10,
							margin:'5 5 0 5',
							bodyBorder:true,
							bodyStyle:'background-color:#fff',
							defaults:{ anchor:'100%'},
							items:[
								{
									xtype:'displayfield',
									fieldLabel:_('message'),
									name:'message'
								},
								{
									xtype:'textfield',
									fieldLabel:_('note'),
									name:'new_note',
									action:'notes'
								},
								{
									xtype:'textfield',
									grow:true,
									fieldLabel:_('reminders'),
									name:'new_reminder',
									action:'notes'
								}
							],
							buttons:[
								{
									text:_('reset'),
									scope:me,
									handler:me.resetNotes
								},
								'-',
								{
									text:_('save'),
									scope:me,
									handler:me.onCheckoutSaveNotes
								}
							]
						}),
						me.followUp = Ext.widget('form', {
							title:_('followup_information'),
							frame:true,
							flex:1,
							margin:'5 5 5 0',
							bodyPadding:10,
							bodyBorder:true,
							bodyStyle:'background-color:#fff',
							defaults:{
								labelWidth:110,
								anchor:'100%'
							},
							items:[
								{
									fieldLabel:_('time'),
									xtype:'textfield',
									name:'followup_time'
								},
								{
									fieldLabel:_('facility'),
									xtype:'activefacilitiescombo',
									name:'followup_facility'
								}
							],
							buttons:[
								{
									text:_('schedule_appointment'),
									scope:me,
									handler:me.scheduleAppointment
								}
							]
						})
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onInvoicePanelRender:function(grid){
		var me = this;

		grid.getHeader().add(
			{
				xtype:'button',
				text:_('service'),
				iconCls:'icoAdd',
				margin:'0 5 0 0',
				scope:me,
				handler:me.onNewService
			},
			{
				xtype:'button',
				text:_('copay'),
				iconCls:'icoAdd',
				margin:'0 5 0 0',
				scope:me,
				handler:me.onAddCoPay
			}
//			{
//				xtype:'button',
//				text:_('payment'),
//				iconCls:'icoAdd',
//				scope:me,
//				handler:me.onAddPaymentClick
//			}
		)
	},

	onNewService:function(btn){
		this.invoiceGrid.getStore().add({code_text:' ', charge:'20.00', ins:false});
	},

	onAddCoPay:function(btn){
		this.invoiceGrid.getStore().add({code_text:'Co-Pay', charge:'00.00', ins:false});
	},

	onAddService:function(){
		var totalField = this.query('[action="totalField"]')[0];
	},

	onRemoveCharge:function(grid, rowIndex){
		var me = this,
			store = grid.getStore(),
            record = store.getAt(rowIndex);
		store.remove(record);
		me.updateTotalBalance();
	},

    //***************************************************************
    //***************************************************************
    //***************************************************************

    onInvoiceSave:function(btn){

        var me = this,
            params = {},
            print = btn.action == 'saveprint',
            servicesRec = me.VisitVoucherStore.data.items,
            lines = [];

        for(var i=0; i < servicesRec.length; i++){
            lines.push(servicesRec[i].data);
        }

        params.pid = me.pid;
        params.eid = me.eid;
        params.lines = lines;
        params.payment = {
            amount: me.amount.getValue(),
            method: me.method.getValue(),
            notes: me.billingNotes.getValue(),
            ref: me.ref.getValue()
        };

        AccBilling.setVisitVoucher(params, function(provider, response){


        });
    },



	cancelPrint:function(btn){
		var win = btn.up('window');
		win.close();
	},

	resetReceiptForm:function(){
		var fields = this.query('[action="receipt"]');
		for(var i = 0; i < fields.length; i++){
			fields[i].reset();
		}
	},

	resetNotes:function(){
		var fields = this.query('[action="notes"]');
		for(var i = 0; i < fields.length; i++){
			fields[i].reset();
		}
	},

	onAddPaymentClick:function(){
		app.onPaymentEntryWindow();
	},

	currencyRenderer:function(v){
		return ('<span style="float:right; padding-right:17px">' + app.currency + ' ' + v + '</span>');
	},

	onCheckoutSaveNotes:function(){
		var me = this, form, values, container = me.query('form[action="formnotes"]');
		form = container[0].getForm();
		values = form.getFieldValues();
		values.date = Ext.Date.format(new Date(), 'Y-m-d H:i:s');
		values.pid = app.patient.pid;
		values.eid = me.eid;
		values.uid = app.user.id;
		values.type = 'administrative';

		// TODO: fix this method...

		if(form.isValid()){
			Patient.addPatientNoteAndReminder(values, function(provider, response){
				if(response.result.success){
					app.msg('Sweet!', _('note_and_reminder'));
				}else{
					app.msg('Oops!', _('note_entry_error'));
				}
			});
		}
	},

	scheduleAppointment:function(btn){
		var form = btn.up('form').getForm(),
			time = form.findField('followup_time').getValue(),
			facility = form.findField('followup_facility').getValue(),
			calendar = Ext.getCmp('app-calendar'),
			date;

		switch(time){
			case '1 Day':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 1);
				break;
			case '2 Days':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 2);
				break;
			case '3 Days':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 3);
				break;
			case '1 Week':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 7);
				break;
			case '2 Weeks':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 14);
				break;
			case '3 Weeks':
				date = Ext.Date.add(new Date(), Ext.Date.DAY, 21);
				break;
			case '1 Month':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 1);
				break;
			case '2 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 2);
				break;
			case '3 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 3);
				break;
			case '4 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 4);
				break;
			case '5 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 5);
				break;
			case '6 Months':
				date = Ext.Date.add(new Date(), Ext.Date.MONTH, 6);
				break;
			case '1 Year':
				date = Ext.Date.add(new Date(), Ext.Date.YEAR, 1);
				break;
			case '2 Year':
				date = Ext.Date.add(new Date(), Ext.Date.YEAR, 2);
				break;
			default:
				date = new Date();
				break;
		}
		app.navigateTo('panelCalendar');
		calendar.facility = facility;
		calendar.setStartDate(date);
	},

	getVisitOtherInfo:function(){
		var me = this, forms, fields = [];
		forms = me.query('form');
		Encounter.getEncounterFollowUpInfoByEid(me.eid, function(provider, response){
			forms[1].getForm().setValues(response.result);
		});
		Encounter.getEncounterMessageByEid(me.eid, function(provider, response){
			forms[0].getForm().setValues(response.result);
		});
		for(var i = 0; i < forms.length; i++){
			fields.push(forms[i].getForm().getFields().items);
		}
	},

    calculatePercent:function(percent, value){
        return 100 * ( percent / value );
    },

	setVoucher:function(){
		var me = this;
		me.docsGrid.loadDocs(me.eid);

		me.getVisitOtherInfo();

		me.VisitVoucherStore.load({
			filters:[
				{
					property:'encounterId',
					value : me.eid
				},
				{
					property: 'type',
					value: 'visit'
				}
			],
            callback:function(records, operation, success){

	            var voucher = records[0];

				if(voucher){

					voucher.voucherlines().load({
						callback:function(){
							// say('hello');
						}
					});

				}else{

					AccVoucher.getVisitCheckOutCharges({pid:me.pid,eid:me.eid},function(provicer,response){
						var charges = response.result;
						if(charges.length > 0){
							var rec = me.VisitVoucherStore.add({
									encounterId:me.eid,
									date:new Date(),
									type:'visit'
								}),
								store = rec[0].voucherlines();

							me.invoiceGrid.reconfigure(store);
							for(var i=0; i < charges.length; i++){
								store.add(charges[i]);
							}

			                me.paid.setValue(0.00);
                            me.updateTotalBalance();
						}
					});
				}
            }
		})
	},

    updateTotalBalance:function(){
        var me = this,
            amount   = me.amount.getValue(),
            paid   = me.paid.getValue(),
            records = me.invoiceGrid.getStore().data.items,
            form = me.invoicePanel.down('form'),
            total = 0.00, balance;

        for(var i=0; i < records.length; i++){
            total = eval(total) + eval(records[i].data.amount);
        }
        me.total.setValue(total);
        balance = total - paid;
        me.balance.setValue(balance);
        me.setPaid(balance == 0.00 && records.length > 0);
    },

	setPaid:function(paid){
		var form = this.invoicePanel.down('form');
		if(paid){
			form.addBodyCls('paid');
			form.down('fieldset').setVisible(false);
		}else{
			form.removeBodyCls('paid');
			form.down('fieldset').setVisible(true);
		}
	},

	setVisitPanel:function(){
		this.pid = app.patient.pid;
		this.eid = app.patient.eid;
		this.uid = app.user.id;
		this.updateTitle(app.patient.name + ' - #' + app.patient.pid + ' (' + _('visit_checkout') + ')');
		this.setVoucher();
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive:function(callback){
		var me = this;
		if(app.patient.pid && app.patient.eid){
			me.setVisitPanel();
			callback(true);
		}else{
			callback(false);
			me.currPatientError();
		}
	}


});

Ext.define('App.view.fees.Billing',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelBilling',
	pageTitle : _( 'billing' ),
	uses : ['Ext.grid.Panel'],
	pageLayout : 'card',

	initComponent : function()
	{
		var me = this;
		me.paymentstatus = 1;
		me.patient = null;
		me.pastDue = null;
		me.dateRange =
		{
			start : null,
			limit : null
		};

		me.patientListStore = Ext.create( 'App.store.fees.Billing' );

		/**
		 *  Encounter data grid.
		 * Gives a list of encounter based on the patient search
		 *
		 */
		me.encountersGrid = Ext.create( 'Ext.grid.Panel',
		{
			store : me.patientListStore,
			selModel : Ext.create( 'Ext.selection.CheckboxModel',
			{
				listeners :
				{
					scope : me,
					selectionchange : me.onSelectionChanged
				}
			} ),
			viewConfig :
			{
				stripeRows : true
			},
			columns : [
			{
				header : _( 'service_date' ),
				dataIndex : 'service_date',
				width : 200
			},
			{
				header : _( 'patient' ),
				dataIndex : 'patientName',
				width : 200
			},
			{
				header : _( 'primary_provider' ),
				dataIndex : 'primaryProvider',
				width : 200
			},
			{
				header : _( 'encounter_provider' ),
				dataIndex : 'encounterProvider',
				flex : 1
			},
			{
				header : _( 'insurance' ),
				dataIndex : 'insurance',
				width : 200
			},
			{
				header : _( 'billing_stage' ),
				dataIndex : 'billing_stage',
				renderer : me.stage,
				width : 135
			}],
			// ToolBar for Encounter DataGrid.
			tbar : [
			{
				xtype : 'fieldcontainer',
				itemId : 'fieldContainerPatientSearch',
				items : [
				{
					xtype : 'displayfield',
					fieldLabel : _( 'patient_search' )
				},
				{
					xtype : 'patienlivetsearch',
					itemId : 'patienlivetsearch',
					width : 235,
					margin : '0 5 0 0'
				}]
			},
			{
				xtype : 'fieldcontainer',
				itemId : 'fieldContainerDateRange',
				items : [
				{
					xtype : 'datefield',
					itemId : 'datefrom',
					fieldLabel : _( 'from' ),
					labelWidth : 35,
					width : 150,
					format : g('date_display_format')
				},
				{
					xtype : 'datefield',
					itemId : 'dateto',
					fieldLabel : _( 'to' ),
					labelWidth : 35,
					padding : '0 5 0 0',
					width : 150,
					format : g('date_display_format')
				}]
			},
			{
				xtype : 'fieldcontainer',
				itemId : 'fieldContainerInsurance',
				items : [
				{
					xtype : 'mitos.providerscombo',
					itemId : 'provider',
					labelWidth : 60,
					typeAhead : true,
					padding : '0 5 0 5',
					fieldLabel : _( 'provider' ),
					defaultValue : 'All'

				},
				{
					xtype : 'mitos.insurancepayertypecombo',
					itemId : 'insurance',
					labelWidth : 60,
					padding : '0 5 0 5',
					fieldLabel : _( 'insurance' ),
					defaultValue : 'All'

				}]
			}, '-',
			{
				xtype : 'fieldcontainer',
				itemId : 'fieldContainerSearch',
				layout : 'vbox',
				items : [
				{
					xtype : 'button',
					width : 80,
					margin : '0 0 3 0',
					text : _( 'search' ),
					listeners :
					{
						scope : me,
						click : me.ReloadGrid
					}
				}]
			}, '-',
			{
				xtype : 'fieldcontainer',
				itemId : 'fieldContainerGenerate1500',
				layout : 'vbox',
				items : [
				{
					xtype : 'button',
					width : 170,
					margin : '0 0 3 0',
					text : _( 'generate_cms1500_pdf' )
				},
				{
					xtype : 'button',
					width : 170,
					margin : '0 0 3 0',
					text : _( 'generate_cms1500_text' )
				}]
			}, '-',
			{
				xtype : 'fieldcontainer',
				itemId : 'fieldContainerGenerateANSI',
				layout : 'vbox',
				items : [
				{
					xtype : 'button',
					text : _( 'generate_x12' )
				}]
			}, '->',
			{
				xtype : 'tbtext',
				text : _( 'past_due' ) + ':'
			},
			{
				text : _( '30+' ),
				enableToggle : true,
				action : 30,
				toggleGroup : 'pastduedates',
				enableKeyEvents : true,
				scale : 'large',
				listeners :
				{
					scope : me,
					click : me.onBtnClicked
				}
			},
			{
				text : _( '60+' ),
				enableToggle : true,
				action : 60,
				scale : 'large',
				toggleGroup : 'pastduedates',
				listeners :
				{
					scope : me,
					click : me.onBtnClicked
				}
			},
			{
				text : _( '120+' ),
				enableToggle : true,
				action : 120,
				scale : 'large',
				toggleGroup : 'pastduedates',
				listeners :
				{
					scope : me,
					click : me.onBtnClicked
				}
			},
			{
				text : _( '180+' ),
				enableToggle : true,
				action : 180,
				scale : 'large',
				toggleGroup : 'pastduedates',
				listeners :
				{
					scope : me,
					click : me.onBtnClicked
				}
			}],
			listeners :
			{
				scope : me,
				itemdblclick : me.rowDblClicked
			}
		} );

		/**
		 * Panel: encounterBillingDetails
		 */
		me.encounterBillingDetails = Ext.create( 'Ext.panel.Panel',
		{
			defaultTitle : _( 'encounter_billing_details' ),
			title : _( 'encounter_billing_details' ),
			layout : 'border',
			bodyStyle : 'background-color:#fff',
			items : [Ext.create( 'Ext.container.Container',
			{
				region : 'center',
				layout : 'border',
				style : 'background-color:#fff',
				items : [me.icdForm = Ext.create( 'Ext.form.Panel',
				{
					region : 'north',
					border : false,
					items : [
					{
						xtype : 'fieldset',
						title : _( 'encounter_general_info' ),
						margin : '5 5 0 5',
						items : [
						{
							xtype : 'fieldcontainer',
							layout :
							{
								type : 'hbox'
							},
							defaults :
							{
								margin : '0 10'
							},
							hideLabel : true,
							items : [
							{
								xtype : 'datefield',
								name : 'service_date',
								fieldLabel : _( 'service_date' ),
								labelAlign : 'right',
								labelWidth : 80,
								format : g('date_display_format')
							},
							{
								xtype : 'activeinsurancescombo',
								name : 'insurance',
								fieldLabel : _( 'insurance' ),
								labelAlign : 'right'
							},
							{
								xtype : 'textfield',
								name : 'facility',
								fieldLabel : _( 'facility' ),
								labelAlign : 'right',
								labelWidth : 60,
								flex : 1
							}]
						},
						{
							xtype : 'fieldcontainer',
							layout :
							{
								type : 'hbox'
							},
							defaults :
							{
								margin : '0 10'
							},
							hideLabel : true,
							items : [
							{
								xtype : 'datefield',
								name : 'hosp_date',
								fieldLabel : _( 'hosp_date' ),
								labelAlign : 'right',
								labelWidth : 80,
								format : g('date_display_format')
							},
							{
								xtype : 'activeinsurancescombo',
								name : 'sec_insurance',
								fieldLabel : _( 'sec_insurance' ),
								labelAlign : 'right'
							},
							{
								xtype : 'mitos.providerscombo',
								name : 'provider',
								fieldLabel : _( 'provider' ),
								labelAlign : 'right',
								labelWidth : 60,
								flex : 1
							}]
						},
						{
							xtype : 'fieldcontainer',
							layout :
							{
								type : 'hbox'
							},
							defaults :
							{
								margin : '0 10'
							},
							hideLabel : true,
							items : [
							{
								xtype : 'mitos.authorizationscombo',
								name : 'authorization',
								fieldLabel : _( 'authorization' ),
								labelAlign : 'right',
								labelWidth : 80
							},
							{
								xtype : 'textfield',
								name : 'sec_authorization',
								fieldLabel : _( 'sec_authorization' ),
								labelAlign : 'right'
							},
							{
								xtype : 'textfield',
								name : 'referal_by',
								fieldLabel : _( 'referal_by' ),
								labelAlign : 'right',
								labelWidth : 60,
								flex : 1
							}]
						}]
					},
					{
						xtype : 'icdsfieldset',
						title : _( 'encounter_icd9' ),
						margin : '5 5 0 5'
					}]
				} ), me.cptPanel = Ext.create( 'App.view.patient.encounter.CurrentProceduralTerminology',
				{
					region : 'center'
				} )]
			} ), me.progressNote = Ext.create( 'App.view.patient.ProgressNote',
			{
				title : _( 'encounter_progress_note' ),
				region : 'east',
				margin : 5,
				bodyStyle : 'padding:15px',
				width : 500,
				autoScroll : true,
				collapsible : true,
				animCollapse : true,
				collapsed : false
			} )],
			buttons : [
			{
				text : _( 'encounters' ),
				scope : me,
				action : 'encounters',
				tooltip : _( 'back_to_encounter_list' ),
				handler : me.onBtnCancel
			}, '->',
			{
				xtype : 'tbtext',
				action : 'page',
				text : '( 1 of 1 )'
			},
			{
				text : _( 'back' ),
				scope : me,
				action : 'back',
				iconCls : 'icoArrowLeftSmall',
				tooltip : _( 'previous_encounter_details' ),
				handler : me.onBtnBack
			},
			{
				text : _( 'save' ),
				scope : me,
				action : 'save',
				tooltip : _( 'save_billing_details' ),
				handler : me.onBtnSave
			},
			{
				text : _( 'cancel' ),
				scope : me,
				action : 'cancel',
				tooltip : _( 'cancel_and_go_back_to_encounter_list' ),
				handler : me.onBtnCancel
			},
			{
				text : _( 'next' ),
				scope : me,
				action : 'next',
				iconCls : 'icoArrowRightSmall',
				iconAlign : 'right',
				tooltip : _( 'next_encounter_details' ),
				handler : me.onBtnNext
			}]
		} );

		me.pageBody = [me.encountersGrid, me.encounterBillingDetails];
		me.callParent( arguments );
	},

	/**
	 * Function: stage
	 */
	stage : function(val)
	{

		say(val);
		switch(val)
		{
			case 0:
				return '<img src="resources/images/icons/stage0.png" />';
				break;
			case 1:
				return '<img src="resources/images/icons/stage1.png" />';
				break;
			case 2:
				return '<img src="resources/images/icons/stage2.png" />';
				break;
			case 3:
				return '<img src="resources/images/icons/stage3.png" />';
				break;
			case 4:
				return '<img src="resources/images/icons/stage4.png" />';
				break;
			default:
				return val;
		}
	},

	/**
	 * Event: onBtnClicked
	 */
	onBtnClicked : function(btn)
	{
		var datefrom = this.query( 'datefield[itemId="datefrom"]' ), dateto = this.query( 'datefield[itemId="dateto"]' );
		if (btn.pressed)
		{
			datefrom[0].reset( );
			dateto[0].reset( );
			this.pastDue = btn.action;
		}
		else
		{
			this.pastDue = 0;
		}
		this.ReloadGrid( );

	},

	/**
	 * Event: rowDblClicked
	 */
	rowDblClicked : function()
	{
		this.goToEncounterBillingDetail( );
	},

	/**
	 * Function: goToEncounterBillingDetail
	 */
	goToEncounterBillingDetail : function()
	{
		this.getPageBody( ).getLayout( ).setActiveItem( 1 );
	},

	/**
	 * Function: goToEncounterList
	 */
	goToEncounterList : function()
	{
		this.getPageBody( ).getLayout( ).setActiveItem( 0 );
	},

	/**
	 * Event: onSelectionChanged
	 */
	onSelectionChanged : function(sm, model)
	{
		if (model[0])
		{
			var me = this, title = me.encounterBillingDetails.defaultTitle, backbtn = me.encounterBillingDetails.query( 'button[action="back"]' ), nextBtn = me.encounterBillingDetails.query( 'button[action="next"]' ), pageInfo = me.encounterBillingDetails.query( 'tbtext[action="page"]' ), rowIndex = model[0].index;

			me.pid = model[0].data.pid;
			me.eid = model[0].data.eid;

			me.updateProgressNote( me.eid );
			me.encounterBillingDetails.setTitle( title + ' ( ' + model[0].data.patientName + ' )' );

			me.getEncounterIcds( );

			me.cptPanel.encounterCptStoreLoad( me.pid, me.eid, function()
			{
				me.cptPanel.setDefaultQRCptCodes( );
			} );

			pageInfo[0].setText( '( ' + _( 'page' ) + ' ' + (rowIndex + 1) + ' of ' + sm.store.data.length + ' )' );
			nextBtn[0].setDisabled( rowIndex == sm.store.data.length - 1 );
			backbtn[0].setDisabled( rowIndex == 0 );
		}
	},

	/**
	 * Event: onBtnCancel
	 */
	onBtnCancel : function()
	{
		this.getPageBody( ).getLayout( ).setActiveItem( 0 );
	},

	/**
	 * Event: onBtnBack
	 */
	onBtnBack : function()
	{
		var sm = this.encountersGrid.getSelectionModel( ), currRowIndex = sm.getLastSelected( ).index, prevRowindex = currRowIndex - 1;
		sm.select( prevRowindex );
	},

	/**
	 * Event: onBtnNext
	 */
	onBtnNext : function()
	{
		var sm = this.encountersGrid.getSelectionModel( ), currRowIndex = sm.getLastSelected( ).index, nextRowindex = currRowIndex + 1;
		sm.select( nextRowindex );
	},

	/**
	 * Event: onBtnSave
	 */
	onBtnSave : function()
	{
		var me = this, form = me.icdForm.getForm( ), values = form.getValues( );

		me.updateEncounterIcds( values );
		me.msg( 'Sweet!', _( 'encounter_billing_data_updated' ) );
	},

	/**
	 * Function: getEncounterIcds
	 */
	getEncounterIcds : function()
	{
		var me = this;
		/**
		 * TODO !!
		 */
//		Encounter.getEncounterIcdxCodes(
//		{
//			eid : me.eid
//		}, function(provider, response)
//		{
//			me.icdForm.down( 'icdsfieldset' ).loadIcds( response.result );
//		} );
	},

	/**
	 * Function: updateEncounterIcds
	 */
	updateEncounterIcds : function(data)
	{
		var me = this;

		data.eid = me.eid;
		/**
		 * TODO !!
		 */
//		Encounter.updateEncounterIcdxCodes( data, function(provider, response)
//		{
//			say( response.result );
//			return true;
//		} );
	},

	/**
	 * Function: updateProgressNote
	 */
	updateProgressNote : function(eid)
	{
		var me = this;
		Encounter.getProgressNoteByEid( eid, function(provider, response)
		{
			var data = response.result;
			me.progressNote.tpl.overwrite( me.progressNote.body, data );
		} );
	},

	/**
	 * Function: Search for billing based on the search fields
	 * This function will pass all the fields to the server side
	 * so PHP dataProvider can calculate and do the search against
	 * the SQL Server
	 */
	ReloadGrid : function(btn)
	{
		// Declare some variables
		var topBarItems = this.encountersGrid.getDockedItems('toolbar[dock="top"]')[0],
		datefrom = topBarItems.getComponent( 'fieldContainerDateRange' ).getComponent( 'datefrom' ).getValue( ),
		dateto = topBarItems.getComponent( 'fieldContainerDateRange' ).getComponent( 'dateto' ).getValue( );

		// Check if the dateFrom and dateTo are in use, if they are clear the pastDue variable
		if(datefrom || dateto) this.pastDue = 0;

		// Load the ExtJs dataStore with the new parameters
		this.patientListStore.load(
		{
			params :
			{
				datefrom : datefrom,
				dateto : dateto,
				provider : topBarItems.getComponent( 'fieldContainerInsurance' ).getComponent( 'provider' ).getValue( ),
				insurance : topBarItems.getComponent( 'fieldContainerInsurance' ).getComponent( 'insurance' ).getValue( ),
				patient : topBarItems.getComponent( 'fieldContainerPatientSearch' ).getComponent( 'patienlivetsearch' ).getValue( ),
				pastDue : this.pastDue
			}
		} );

	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function(callback)
	{
		this.ReloadGrid( );
		callback( true );
	}
} );


Ext.define('App.view.fees.PaymentEntryWindow', {
    extend: 'Ext.window.Window',
    title: _('add_new_payment'),
    closeAction: 'hide',
    modal: true,
    initComponent: function(){
        var me = this;
        me.items = [
            {
                xtype: 'form',
                defaults: {
                    margin: 5
                },
                border: false,
                height: 163,
                width: 747,
                items: [
                    {
                        xtype: 'fieldcontainer',
                        layout: 'hbox',
                        items: [
                            {
                                fieldLabel: _('paying_entity'),
                                xtype: 'mitos.payingentitycombo',
                                name: 'paying_entity',
                                action: 'new_payment',
                                labelWidth: 98,
                                width: 220
                            },
                            {
                                xtype: 'patienlivetsearch',
                                fieldLabel: _('from'),
                                hideLabel: false,
                                name: 'payer_id',
                                action: 'new_payment',
                                anchor: null,
                                labelWidth: 42,
                                width: 300,
                                margin: '0 0 0 25'
                            },
                            {
                                xtype: 'textfield',
                                fieldLabel: _('no'),
                                action: 'new_payment',
                                name: 'check_number',
                                labelWidth: 47,
                                width: 167,
                                margin: '0 0 0 25'
                            }
                        ]
                    },
                    {
                        xtype: 'fieldcontainer',
                        layout: 'hbox',
                        items: [
                            {
                                fieldLabel: _('payment_method'),
                                xtype: 'mitos.paymentmethodcombo',
                                action: 'new_payment',
                                labelWidth: 98,
                                name: 'payment_method',
                                width: 220
                            },
                            {
                                xtype: 'mitos.billingfacilitiescombo',
                                fieldLabel: _('pay_to'),
                                action: 'new_payment',
                                labelWidth: 42,
                                name: 'pay_to',
                                width: 300,
                                margin: '0 0 0 25'
                            },
                            {
                                xtype: 'mitos.currency',
                                fieldLabel: _('amount'),
                                action: 'new_payment',
                                name: 'amount',
                                labelWidth: 47,
                                width: 167,
                                margin: '0 0 0 25',
                                enableKeyEvents: true
                            }
                        ]
                    },
                    {
                        fieldLabel: _('post_to_date'),
                        xtype: 'datefield',
                        name: 'post_to_date',
                        action: 'new_payment',
                        format: g('date_display_format'),
                        labelWidth: 98,
                        width: 220
                    },
                    {
                        fieldLabel: _('note'),
                        xtype: 'textareafield',
                        grow: true,
                        action: 'new_payment',
                        name: 'note',
                        labelWidth: 98,
                        anchor: '100%'
                    }
                ]
            }
        ];
        me.buttons = [
            {
                text: _('save'),
                scope: me,
                handler: me.onPaymentSave
            },
            '-',
            {
                text: _('reset'),
                scope: me,
                handler: me.resetNewPayment
            }
        ];
        me.callParent(arguments);
    },
    onPaymentSave: function(){
        var me = this, panel, form, values;
        panel = me.down('form');
        form = panel.getForm();
        values = form.getFieldValues();
        values.date_created = Ext.Date.format(new Date(), 'Y-m-d H:i:s');
        if(form.isValid()){
            Fees.addPayment(values, function(provider, response){
                if(response.result.success){
                    form.reset();
                    me.hide();
                }else{
                    app.msg('Oops!', _('payment_entry_error'))
                }
            });
        }
    },
    resetNewPayment: function(){
        var fields = this.query('[action="new_payment"]');
        for(var i = 0; i < fields.length; i++){
            fields[i].reset();
        }
    }
});

Ext.define('App.view.fees.Payments',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelPayments',
	pageTitle : _('payments'),
	initComponent : function()
	{
		var me = this;

		me.encountersPaymentsStore = Ext.create('App.store.fees.EncountersPayments');

		/**
		 * Search Panel Object
		 * --------------------------------------------------------------------------------------------------------------------------
		 */
		me.searchPanel = Ext.create('Ext.panel.Panel',
		{
			title : _('search'),
			layout : 'border',
			items : [
			{
				xtype : 'form',
				itemId : 'searchPanelForm',
				height : 145,
				region : 'north',
				bodyPadding : 10,
				bodyStyle : 'background-color:transparent',
				margin : '0 0 5 0',
				items : [
				{
					xtype : 'fieldcontainer',
					itemId : 'fieldcontainerSearchItems',
					layout : 'hbox',
					items : [
					{
						fieldLabel : _('paying_entity'),
						itemId : 'fieldPayingEntityCombo',
						xtype : 'mitos.payingentitycombo',
						labelWidth : 95,
						width : 230
					},
					{
						xtype : 'patienlivetsearch',
						fieldLabel : _('from'),
						hideLabel : false,
						itemId : 'fieldPatient',
						name : 'from',
						anchor : null,
						labelWidth : 42,
						width : 470,
						margin : '0 0 0 25'
					},
					{
						xtype : 'textfield',
						fieldLabel : _('no'),
						itemId : 'fieldPatientNo',
						name : 'transaction_number',
						labelWidth : 45,
						width : 230,
						labelAlign : 'right',
						margin : '0 0 0 25',
						fieldStyle : 'text-align: right;'
					}]
				},
				{
					xtype : 'fieldcontainer',
					layout : 'hbox',
					itemId : 'fieldcontainerFacility',
					items : [
					{
						xtype : 'mitos.billingfacilitiescombo',
						itemId : 'fieldFacility',
						fieldLabel : _('pay_to'),
						labelWidth : 95,
						width : 470
					}]
				},
				{
					xtype : 'fieldcontainer',
					itemId: 'fieldcontainerFromTo',
					layout : 'hbox',
					items : [
					{
						fieldLabel : _('from'),
						itemId : 'fieldFromDate',
						xtype : 'datefield',
						format: g('date_display_format'),
						labelWidth : 95,
						width : 230
					},
					{
						fieldLabel : _('to'),
						xtype : 'datefield',
						itemId : 'fieldToDate',
						format: g('date_display_format'),
						margin : '0 0 0 25',
						labelWidth : 42,
						width : 230
					}]
				}],
				buttons : [
				{
					text : _('search'),
					handler: me.onSearchButton,
					scope : me
				}, '-',
				{
					text : _('reset'),
					scope : me,
					handler: me.onFormResetButton
					// TODO: Create the function event to reset the form.
				}]
			},
			{
				xtype : 'grid',
				region : 'center',
				store : me.encountersPaymentsStore,
				columns : [
				{
					header : _('service_date')
				},
				{
					header : _('patient_name')
				},
				{
					header : _('insurance')
				},
				{
					header : _('billing_notes'),
					flex : 1
				},
				{
					header : _('balance_due')
				}]
			}]
		});

		/**
		 * Detail Panel Object
		 * --------------------------------------------------------------------------------------------------------------------------
		 */
		me.detailPanel = Ext.create('Ext.panel.Panel',
		{
			title : _('detail'),
			layout : 'border',
			items : [
			{
				xtype : 'form',
				height : 145,
				region : 'north',
				bodyPadding : 10,
				bodyStyle : 'background-color:transparent',
				margin : '0 0 5 0',
				items : [
				{
					xtype : 'fieldcontainer',
					layout : 'hbox',
					items : [
					{
						fieldLabel : _('paying_entity'),
						xtype : 'mitos.payingentitycombo',
						labelWidth : 95,
						width : 230
					},
					{
						xtype : 'patienlivetsearch',
						fieldLabel : _('from'),
						hideLabel : false,
						itemId : 'patientFrom',
						name : 'from',
						anchor : null,
						labelWidth : 42,
						width : 470,
						margin : '0 0 0 25'
					},
					{
						xtype : 'textfield',
						fieldLabel : _('no'),
						name : 'transaction_number',
						labelWidth : 45,
						width : 230,
						labelAlign : 'right',
						margin : '0 0 0 25',
						fieldStyle : 'text-align: right;'
					}]
				},
				{
					xtype : 'fieldcontainer',
					layout : 'hbox',
					items : [
					{
						fieldLabel : _('payment_method'),
						xtype : 'mitos.paymentmethodcombo',
						labelWidth : 95,
						width : 230
					},
					{
						xtype : 'mitos.billingfacilitiescombo',
						fieldLabel : _('pay_to'),
						labelWidth : 42,
						width : 470,
						margin : '0 0 0 25'
					},
					{
						xtype : 'mitos.currency',
						fieldLabel : _('amount'),
						name : 'amount',
						labelWidth : 45,
						width : 230,
						labelAlign : 'right',
						margin : '0 0 0 25',
						enableKeyEvents : true
					}]
				},
				{
					xtype : 'fieldcontainer',
					layout : 'hbox',
					items : [
					{
						fieldLabel : _('from'),
						xtype : 'datefield',
						format: g('date_display_format'),
						labelWidth : 95,
						width : 230
					},
					{
						fieldLabel : _('to'),
						xtype : 'datefield',
						format: g('date_display_format'),
						margin : '0 0 0 25',
						labelWidth : 42,
						width : 230
					}]
				}],
				buttons : [
				{
					text : _('save')
				}, '-',
				{
					text : _('reset')
				}, '->',
				{
					text : _('add_payment'),
					scope : me,
					handler : me.onAddPaymentClick

				}]
			},
			{
				xtype : 'grid',
				region : 'center',
				//store:me.encountersPaymentsStore,
				plugins : Ext.create('App.ux.grid.RowFormEditing',
				{
					autoCancel : false,
					errorSummary : false,
					clicksToEdit : 1,
					enableRemove : true,
					listeners :
					{
						scope : me,
						beforeedit : me.beforeCptEdit
					}
				}),
				columns : [
				{
					header : _('service_date')
				},
				{
					header : _('patient_name')
				},
				{
					header : _('insurance')
				},
				{
					header : _('billing_notes'),
					flex : 1
				},
				{
					header : _('balance_due')
				}]
			}]
		});

		me.tapPanel = Ext.create('Ext.tab.Panel',
		{
			layout : 'fit',
			items : [me.searchPanel, me.detailPanel]
		});

		me.pageBody = [me.tapPanel];
		me.callParent(arguments);
	},

	/**
	 * Shows the payment entry window.
	 */
	onAddPaymentClick : function()
	{
		app.onPaymentEntryWindow();
	},

	/**
	 * beforeCptEdit Event
	 */
	beforeCptEdit : function(editor, e)
	{
		this.addCptFields(editor.editor, e.record.data)
	},

	/**
	 * addCptFields
	 * Add CPT
	 */
	addCptFields : function(editor, cpts)
	{

		editor.removeAll();

		var testData = this.testData();
		for (var i = 0; i < testData.length; i++)
		{
			editor.add(
			{
				xtype : 'fieldcontainer',
				layout : 'hbox',
				items : [
				{
					xtype : 'textfield',
					width : 100,
					name : 'code',
					readOnly : true,
					margin : '0 5 0 10'
				},
				{
					xtype : 'textfield',
					name : 'copay',
					readOnly : true,
					width : 400,
					margin : '0 5 0 5'
				},
				{
					xtype : 'mitos.currency',
					name : 'remaining',
					readOnly : true,
					width : 100,
					margin : '0 5 0 5'
				},
				{
					xtype : 'mitos.currency',
					name : 'allowed',
					readOnly : true,
					width : 100,
					margin : '0 5 0 5'
				},
				{
					xtype : 'mitos.currency',
					name : 'payment',
					readOnly : true,
					width : 100,
					margin : '0 5 0 5'
				},
				{
					xtype : 'mitos.currency',
					name : 'deductible',
					readOnly : true,
					width : 100,
					margin : '0 5 0 5'
				},
				{
					xtype : 'mitos.currency',
					name : 'takeback',
					readOnly : true,
					width : 100,
					margin : '0 5 0 5'
				},
				{
					xtype : 'checkbox',
					name : 'takeback',
					readOnly : true,
					width : 50,
					margin : '0 5 0 5'
				},
				{
					xtype : 'textfield',
					name : 'takeback',
					readOnly : true,
					width : 100,
					margin : '0 5 0 5'
				}]
			});
		}
	},

	/**
	 * Test Data function
	 */
	testData : function()
	{
		var data = [], i;

		floor = Math.floor((Math.random() * 6) + 1);

		for ( i = 0; i < floor; i++)
		{
			data.push(
			{
				data1 : Math.floor(Math.max((Math.random() * 100), floor)),
				data2 : Math.floor(Math.max((Math.random() * 100), floor)),
				data3 : Math.floor(Math.max((Math.random() * 100), floor)),
				data4 : Math.floor(Math.max((Math.random() * 100), floor)),
				data5 : Math.floor(Math.max((Math.random() * 100), floor)),
				data6 : Math.floor(Math.max((Math.random() * 100), floor)),
				data7 : Math.floor(Math.max((Math.random() * 100), floor)),
				data8 : Math.floor(Math.max((Math.random() * 100), floor)),
				data9 : Math.floor(Math.max((Math.random() * 100), floor))
			});
		}
		return data;
	},

	/**
	 * onBtnClick Event
	 */
	onBtnClick : function(btn)
	{
		var me = this;

		if (btn.action == 'search')
		{
			me.forms.getLayout().setActiveItem(0);
		}
		else
		if (btn.action == 'details')
		{
			me.forms.getLayout().setActiveItem(1);
		}
		else
		if (btn.action == 'new')
		{
			me.window.show();
		}
	},

	/**
	 * Search for patients that own money
	 * This function will pass all the fields to the server side
	 * so PHP dataProvider can calculate and do the search against
	 * the SQL Server
	 */
	onSearchButton: function(btn)
	{
		// Declare some variables and the values from the form
		var	searchForm =  this.searchPanel.getComponent('searchPanelForm'),
		dateFrom = searchForm.getComponent('fieldcontainerFromTo').getComponent('fieldFromDate').getValue(),
		dateTo = searchForm.getComponent('fieldcontainerFromTo').getComponent('fieldToDate').getValue();

		// Load the ExtJs dataStore with the new parameters
		this.encountersPaymentsStore.load(
		{
			params :
			{
				datefrom : dateFrom,
				dateto : dateTo,
				payingEntityCombo : searchForm.getComponent('fieldcontainerSearchItems').getComponent('fieldPayingEntityCombo').getValue(),
				patientSearch : searchForm.getComponent('fieldcontainerSearchItems').getComponent('fieldPatient').getValue(),
				patientNo : searchForm.getComponent('fieldcontainerSearchItems').getComponent('fieldPatientNo').getValue(),
				facility : searchForm.getComponent('fieldcontainerFacility').getComponent('fieldFacility').getValue()
			}
		} );
		//alert(payingEntityCombo);
	},

	/**
	 * Reset the form of search.
	 */
	onFormResetButton: function(btn)
	{
		alert('Hello there');
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function(callback)
	{
		this.encountersPaymentsStore.load();
		callback(true);
	}
});
//end Payments class


Ext.define('App.view.administration.practice.Facilities', {
	extend: 'Ext.grid.Panel',
	xtype: 'facilitiespanel',
	title: _('facilities'),

	initComponent: function(){
		var me = this;

		Ext.apply(me, {
			store: me.store = Ext.create('App.store.administration.Facility'),
			columns: [
				{
					text: _('name'),
					flex: 1,
					sortable: true,
					dataIndex: 'name'
				},
				{
					text: _('phone'),
					width: 100,
					sortable: true,
					dataIndex: 'phone'
				},
				{
					text: _('fax'),
					width: 100,
					sortable: true,
					dataIndex: 'fax'
				},
				{
					text: _('city'),
					width: 100,
					sortable: true,
					dataIndex: 'city'
				}
			],
			plugins: Ext.create('App.ux.grid.RowFormEditing', {
				autoCancel: false,
				errorSummary: false,
				clicksToEdit: 1,
				items: [
					{
						xtype: 'container',
						layout: 'column',
						defaults: {
							xtype: 'container',
							columnWidth: 0.5,
							padding: 5,
							layout: 'anchor',
							defaultType: 'textfield'
						},
						items: [
							{
								defaults: {
									anchor: '100%'
								},
								items: [
									{
										fieldLabel: _('name'),
										name: 'name',
										allowBlank: false
									},
									{
										fieldLabel: _('phone'),
										name: 'phone'
									},
									{
										fieldLabel: _('fax'),
										name: 'fax'
									},
									{
										fieldLabel: _('street'),
										name: 'address'
									},
									{
										fieldLabel: _('city'),
										name: 'city'
									},
									{
										fieldLabel: _('state'),
										name: 'state'
									},
									{
										fieldLabel: _('postal_code'),
										name: 'postal_code'
									},
									{
										fieldLabel: _('country_code'),
										name: 'country_code'
									},
									{
										xtype: 'fieldcontainer',
										layout: 'hbox',
										items: [
											{
												xtype: 'textfield',
												fieldLabel: _('ssn'),
												name: 'ssn',
												margin: '0 10 0 0'
											},
											{
												xtype: 'textfield',
												fieldLabel: _('ein'),
												labelWidth: 40,
												name: 'ein'
											}
										]
									}
								]
							},
							{
								items: [
									{
										fieldLabel: _('billing_attn'),
										name: 'attn',
										anchor: '100%'
									},
									{
										xtype: 'mitos.poscodescombo',
										fieldLabel: _('pos_code'),
										name: 'pos_code',
										anchor: '100%'
									},
									{
										fieldLabel: _('clia_number'),
										name: 'clia',
										anchor: '100%'
									},
									{
										fieldLabel: _('npi'),
										name: 'npi',
										anchor: '100%'
									},
									{
										fieldLabel: _('fda_number'),
										name: 'fda',
										anchor: '100%'
									},
									{
										xtype: 'checkbox',
										fieldLabel: _('active'),
										name: 'active'
									},
									{
										xtype: 'checkbox',
										fieldLabel: _('service_location'),
										name: 'service_location'
									},
									{
										xtype: 'checkbox',
										fieldLabel: _('billing_location'),
										name: 'billing_location'
									},
									{
										xtype: 'checkbox',
										fieldLabel: _('accepts_assignment'),
										name: 'accepts_assignment'
									}
								]
							}
						]
					}
				]
			}),
			tbar: Ext.create('Ext.PagingToolbar', {
				pageSize: 30,
				store: me.store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.SlidingPager', {
				}),
				items: ['-', {
					text: _('add_new_facility'),
					iconCls: 'save',
					scope: me,
					handler: me.addFacility
				}, '-', {
					text: _('show_active_facilities'),
					action: 'active',
					scope: me,
					handler: me.filterFacilitiesby
				}, '-', {
					text: _('show_inactive_facilities'),
					action: 'inactive',
					scope: me,
					handler: me.filterFacilitiesby
				}]

			})
		});

		me.callParent(arguments);
	},

	filterFacilitiesby: function(btn){

//		this.setTitle(_('facilities') + ' (' + Ext.String.capitalize(btn.action) + ')');

		this.store.load({
			filters: [
				{
					property: 'active',
					value: btn.action == 'active' ? 1 : 0
				}
			]
		});
	},

	addFacility: function(){
		var me = this,
			grid = me,
			store = grid.store;

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			active: 1,
			service_location: 1,
			billing_location: 0,
			accepts_assignment: 0
		});
		grid.editingPlugin.startEdit(0, 0);
	}
});

Ext.define('App.model.administration.Department', {
	extend: 'Ext.data.Model',
	table: {
		name: 'departments'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'code',
			type: 'string',
			len: 5
		},
		{
			name: 'title',
			type: 'string',
			len: 100
		},
		{
			name: 'active',
			type: 'bool'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Facilities.getDepartments',
			create: 'Facilities.addDepartment',
			update: 'Facilities.updateDepartment'
		},
		reader: {
			root: 'data'
		}
	}
});

Ext.define('App.store.administration.Departments', {
	extend: 'Ext.data.Store',
	requires: ['App.model.administration.Department'],
	model: 'App.model.administration.Department'
});
Ext.define('App.store.administration.Specialties', {
    model: 'App.model.administration.Specialty',
    extend: 'Ext.data.Store'
});
Ext.define('App.store.administration.FacilityStructures', {
    extend: 'Ext.data.TreeStore',
	requires: ['App.model.administration.FacilityStructure'],
	model: 'App.model.administration.FacilityStructure'
});
Ext.define('App.view.administration.practice.FacilityConfig', {
	extend: 'Ext.panel.Panel',
	requires: [

	],
	xtype: 'facilityconfigpanel',
	title: _('facility_configuration'),
	itemId: 'FacilityStructurePanel',
	layout: {
		type: 'hbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'container',
			margin: 5,
			flex: 1,
			layout: {
				type: 'vbox',
				align: 'stretch'
			},
			items: [
				{
					xtype: 'grid',
					title: _('departments'),
					hideHeaders: true,
					frame: true,
					margin: '0 0 5 0',
					store: Ext.create('App.store.administration.Departments', {
						autoLoad: true
					}),
					viewConfig: {
						plugins: {
							ptype: 'gridviewdragdrop',
							dragGroup: 'facilitygroup1',
							dropGroup: 'facilitygroup2',
							onViewRender: function(view){
								var me = this,
									scrollEl;

								if(me.enableDrag){
									if(me.containerScroll){
										scrollEl = view.getEl();
									}

									me.dragZone = new Ext.view.DragZone({
										view: view,
										copy: true,
										ddGroup: me.dragGroup || me.ddGroup,
										dragText: me.dragText,
										containerScroll: me.containerScroll,
										scrollEl: scrollEl
									});
								}

								if(me.enableDrop){
									me.dropZone = new Ext.grid.ViewDropZone({
										view: view,
										ddGroup: me.dropGroup || me.ddGroup
									});
								}
							}
						},
						listeners: {
							drop: function(node, data, dropRec, dropPosition){

								say(node);
								say(data);
								say(dropRec);
								say(dropPosition);

								//var dropOn = dropRec ? ' ' + dropPosition + ' ' + dropRec.get('name') : ' on empty view';
								//Ext.example.msg('Drag from right to left', 'Dropped ' + data.records[0].get('name') + dropOn);
							}
						}
					},
					columns: [
						{
							text: 'title',
							dataIndex: 'title',
							flex: 1
						}
					]
				},
				{
					xtype: 'grid',
					title: _('specialties'),
					//					hideHeaders: true,
					frame: true,
					flex: 1,
					store: this._sepecialtyStore = Ext.create('App.store.administration.Specialties', {
						autoLoad: true
					}),
					viewConfig: {
						plugins: {
							ptype: 'gridviewdragdrop',
							dragGroup: 'facilitygroup1',
							dropGroup: 'facilitygroup2'
						},
						listeners: {
							drop: function(node, data, dropRec, dropPosition){

								say(node);
								say(data);
								say(dropRec);
								say(dropPosition);

								//var dropOn = dropRec ? ' ' + dropPosition + ' ' + dropRec.get('name') : ' on empty view';
								//Ext.example.msg('Drag from right to left', 'Dropped ' + data.records[0].get('name') + dropOn);
							}
						}
					},
					columns: [
						{
							width: 200,
							text: _('title'),
							dataIndex: 'title',
							sortable: true,
							flex: 1,
							editor: {
								xtype: 'textfield'
							}
						},
						{
							text: _('taxonomy'),
							sortable: true,
							dataIndex: 'taxonomy',
							flex: 1,
							editor: {
								xtype: 'textfield'
							}
						},
						{
							text: _('modality'),
							sortable: true,
							dataIndex: 'modality',
							flex: 1,
							editor: {
								xtype: 'textfield'
							}
						},
						{
							text: _('active'),
							sortable: true,
							dataIndex: 'active',
							renderer: function(v){
								return app.boolRenderer(v);
							},
							editor: {
								xtype: 'checkboxfield'
							}
						}
					],
					plugins: [
						{
							ptype: 'rowediting',
							clicksToEdit: 2
						}
					],
					tools: [
						{
							xtype: 'button',
							text: _('specialty'),
							iconCls: 'icoAdd',
							itemId: 'specialitiesAddBtn'
						}
					],
					bbar: Ext.create('Ext.PagingToolbar', {
						pageSize: 10,
						store: this._sepecialtyStore,
						displayInfo: true,
						plugins: Ext.create('Ext.ux.SlidingPager', {})
					})
				}
			]
		},
		{
			xtype: 'treepanel',
			title: _('facility_structure'),
			itemId: 'FacilityStructureTreePanel',
			store: Ext.create('App.store.administration.FacilityStructures', {
				autoLoad: true
			}),
			columnLines: true,
			rootVisible: false,
			hideHeaders: true,
			frame: true,
			margin: '5 5 5 0',
			flex: 1,
//			useArrows:true,
			viewConfig: {
				plugins: {
					ptype: 'treeviewdragdrop',
					dragGroup: 'facilitygroup1',
					dropGroup: 'facilitygroup1',
					expandDelay: 0,
					allowParentInsert: true,
					allowContainerDrops: true,
					onViewRender: function(view){
						var me = this,
							scrollEl;

						if(me.enableDrag){
							if(me.containerScroll){
								scrollEl = view.getEl();
							}
							me.dragZone = new Ext.tree.ViewDragZone({
								view: view,
								ddGroup: me.dragGroup || me.ddGroup,
								dragText: me.dragText,
								displayField: me.displayField,
								repairHighlightColor: me.nodeHighlightColor,
								repairHighlight: me.nodeHighlightOnRepair,
								scrollEl: scrollEl
							});
						}

						if(me.enableDrop){
							me.dropZone = new Ext.tree.ViewDropZone({
								view: view,
								ddGroup: me.dropGroup || me.ddGroup,
								allowContainerDrops: me.allowContainerDrops,
								appendOnly: me.appendOnly,
								allowParentInserts: me.allowParentInserts,
								expandDelay: me.expandDelay,
								dropHighlightColor: me.nodeHighlightColor,
								dropHighlight: me.nodeHighlightOnDrop,
								sortOnDrop: me.sortOnDrop,
								containerScroll: me.containerScroll,
								handleNodeDrop: function(data, targetNode, position){

									var me = this,
										targetView = me.view,
										parentNode = targetNode ? targetNode.parentNode : targetView.panel.getRootNode(),
										Model = targetView.getStore().treeStore.model,
										records, i, len, record,
										insertionMethod, argList,
										needTargetExpand,
										transferData,
										isDepartment = data.records[0] instanceof App.model.administration.Department,
										isSpecialty = data.records[0] instanceof App.model.administration.Specialty,
										workedRecords = [];

									if(isDepartment || isSpecialty){

										for(i = 0, len = data.records.length; i < len; i++){
											Ext.Array.push(workedRecords, new Model({
												id: '',
												fid: 1,
												foreign_id: data.records[i].data.id,
												foreign_type: isDepartment ? 'D' : 'S',
												text: data.records[i].data.title,
												active: false
											}));
										}
										data.records = workedRecords;

									}

									// If the copy flag is set, create a copy of the models
									if(data.copy){
										records = data.records;
										data.records = [];
										for(i = 0, len = records.length; i < len; i++){
											record = records[i];

											if(record.isNode){
												data.records.push(record.copy(undefined, true));
											}else{
												// If it's not a node, make a node copy
												data.records.push(new Model(record.data, record.getId()));
											}
										}
									}

									// Cancel any pending expand operation
									me.cancelExpand();

									// Grab a reference to the correct node insertion method.
									// Create an arg list array intended for the apply method of the
									// chosen node insertion method.
									// Ensure the target object for the method is referenced by 'targetNode'
									if(position == 'before'){
										insertionMethod = parentNode.insertBefore;
										argList = [null, targetNode];
										targetNode = parentNode;
									}
									else if(position == 'after'){
										if(targetNode.nextSibling){
											insertionMethod = parentNode.insertBefore;
											argList = [null, targetNode.nextSibling];
										}
										else{
											insertionMethod = parentNode.appendChild;
											argList = [null];
										}
										targetNode = parentNode;
									}
									else{
										if(!(targetNode.isExpanded() || targetNode.isLoading())){
											needTargetExpand = true;
										}
										insertionMethod = targetNode.appendChild;
										argList = [null];
									}

									// A function to transfer the data into the destination tree
									transferData = function(){
										var color,
											n;

										// Coalesce layouts caused by node removal, appending and sorting
										Ext.suspendLayouts();

										targetView.getSelectionModel().clearSelections();

										// Insert the records into the target node
										for(i = 0, len = data.records.length; i < len; i++){
											record = data.records[i];
											if(!record.isNode){
												if(record.isModel){
													record = new Model(record.data, record.getId());
												}else{
													record = new Model(record);
												}

											}

											record.save({
												callback: function(rec, operation){
													rec.set({'id': operation.response.result.id});
													rec.save();
												}
											});

											data.records[i] = record;

											argList[0] = record;
											insertionMethod.apply(targetNode, argList);
										}

										// If configured to sort on drop, do it according to the TreeStore's comparator
										if(me.sortOnDrop){
											targetNode.sort(targetNode.getOwnerTree().store.generateComparator());
										}

										Ext.resumeLayouts(true);

										// Kick off highlights after everything's been inserted, so they are
										// more in sync without insertion/render overhead.
										// Element.highlight can handle highlighting table nodes.
										if(Ext.enableFx && me.dropHighlight){
											color = me.dropHighlightColor;

											for(i = 0; i < len; i++){
												n = targetView.getNode(data.records[i]);
												if(n){
													Ext.fly(n).highlight(color);
												}
											}
										}
									};

									// If dropping right on an unexpanded node, transfer the data after it is expanded.
									if(needTargetExpand){
										targetNode.expand(false, transferData);
									}
									// If the node is waiting for its children, we must transfer the data after the expansion.
									// The expand event does NOT signal UI expansion, it is the SIGNAL for UI expansion.
									// It's listened for by the NodeStore on the root node. Which means that listeners on the target
									// node get notified BEFORE UI expansion. So we need a delay.
									// TODO: Refactor NodeInterface.expand/collapse to notify its owning tree directly when it needs to expand/collapse.
									else if(targetNode.isLoading()){
										targetNode.on({
											expand: transferData,
											delay: 1,
											single: true
										});
									}
									// Otherwise, call the data transfer function immediately
									else{
										transferData();
									}
								}
							})
						}
					}
				}
			},
			columns: [
				{
					xtype: 'treecolumn',
					text: 'Config',
					flex: 2,
					sortable: true,
					dataIndex: 'text'
				},
				{
					xtype: 'actioncolumn',
					width: 20,
					icon: 'resources/images/icons/delete.png',
					tooltip: _('delete'),
					handler: function(grid, rowIndex, colIndex, item, e, record){

						if(record.childNodes.length > 0){
							app.msg(_('oops'), _('please_remove_child_records_first'), true);
							return;
						}

						Ext.Msg.show({
							title: _('wait'),
							msg: _('delete_this_record'),
							buttons: Ext.Msg.YESNO,
							icon: Ext.Msg.QUESTION,
							fn: function(btn){
								if(btn == 'yes'){
									record.destroy();
								}

							}
						});
					},
					getClass: function(value, metadata, record){
						if(record.data.id[0] != 'f'){
							return 'x-grid-center-icon';
						}else{
							return 'x-hide-display';
						}
					}
				}
			]
		}
	]
});

Ext.define('App.store.administration.InsuranceCompanies', {
	extend: 'Ext.data.Store',
	model: 'App.model.administration.InsuranceCompany'
});
Ext.define('App.view.administration.practice.Insurance', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.combo.Titles',
		'App.ux.grid.RowFormEditing',
		'App.ux.combo.TransmitMethod'
	],
	xtype: 'insurancecompaniespanel',
	title: _('insurance_companies'),
	store: this._adminInsuranceCmonpanySotrie = Ext.create('App.store.administration.InsuranceCompanies'),
	//	border: false,
	//	frame: false,
	columnLines: true,
	plugins: [
		{
			ptype: 'rowformediting',
			autoCancel: false,
			errorSummary: false,
			items: [
				{
					xtype: 'container',
					layout: 'hbox',
					itemId: 'InsuranceCompanyFormContainer',
					items: [
						{
							xtype: 'fieldset',
							title: _('contact_info'),
							layout: 'hbox',
							margin: '0 10 0 0',
							items: [
								{
									xtype: 'container',
									margin: '0 10 0 0',
									layout: 'anchor',
									defaults: {
										margin: '0 10 5 0'
									},
									items: [
										{
											xtype: 'textfield',
											fieldLabel: _('name'),
											name: 'name',
											allowBlank: false,
											width: 385
										},
										{
											xtype: 'textfield',
											fieldLabel: _('attn'),
											name: 'attn',
											width: 385
										},
										{
											xtype: 'textfield',
											fieldLabel: _('address'),
											name: 'address1',
											width: 385
										},
										{
											xtype: 'textfield',
											fieldLabel: _('address_cont'),
											name: 'address2',
											width: 385
										},
										{
											xtype: 'fieldcontainer',
											margin: '0 0 10 105',
											layout: 'hbox',
											items: [
												{
													xtype: 'textfield',
													width: 150,
													name: 'city'
												},
												{
													xtype: 'textfield',
													width: 50,
													name: 'state'
												},
												{
													xtype: 'textfield',
													width: 75,
													name: 'zip_code'
												}
											]
										}
									]
								},
								{
									xtype: 'container',
									width: 300,
									layout: 'anchor',
									defaults: {
										margin: '0 10 5 0'
									},
									items: [
										{
											xtype: 'textfield',
											fieldLabel: _('phone_number'),
											name: 'phone_number'
										},
										{
											xtype: 'textfield',
											fieldLabel: _('fax_number'),
											name: 'fax_number'
										},
										{
											xtype: 'checkbox',
											fieldLabel: _('active'),
											name: 'active'
										}
									]
								}
							]
						}
					]
				}
			]

		}
	],
	columns: [
		{
			width: 50,
			sortable: true,
			dataIndex: 'id'
		},
		{
			header: _('insurance_name'),
			width: 200,
			sortable: true,
			dataIndex: 'name'
		},
		{
			header: _('attn'),
			width: 200,
			sortable: true,
			dataIndex: 'attn'
		},
		{
			header: _('address'),
			flex: 1,
			sortable: true,
			dataIndex: 'address_full'
		},
		{
			header: _('phone'),
			width: 120,
			sortable: true,
			dataIndex: 'phone1'
		},
		{
			header: _('phone'),
			width: 120,
			sortable: true,
			dataIndex: 'phone2'
		},
		{
			header: _('fax'),
			width: 120,
			sortable: true,
			dataIndex: 'fax'
		},
		{
			header: _('active'),
			width: 55,
			sortable: true,
			dataIndex: 'active',
			renderer: function(v){
				return app.boolRenderer(v);
			}
		}
	],
	tbar: Ext.create('Ext.PagingToolbar', {
		pageSize: 30,
		store: this._adminInsuranceCmonpanySotrie,
		displayInfo: true,
		plugins: Ext.create('Ext.ux.SlidingPager', {
		}),
		items: [
			'-',
			{
				text: _('insurance_company'),
				iconCls: 'icoAdd',
				action: 'insurance',
				itemId: 'addBtn'
			}]

	})
});

Ext.define('App.store.administration.Laboratories', {
    model: 'App.model.administration.Laboratories',
    extend: 'Ext.data.Store',
    proxy:{
        type:'direct',
        api:{
            read:Practice.getLaboratories,
            create:Practice.addLaboratory,
            update:Practice.updateLaboratory
        }
    }
});
Ext.define('App.view.administration.practice.Laboratories', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.combo.Titles',
		'App.ux.grid.RowFormEditing',
		'App.ux.combo.TransmitMethod'
	],
	xtype: 'laboratoriespanel',
	title: _('laboratories'),
	store: Ext.create('App.store.administration.Laboratories'),
	border: false,
	frame: false,
	columnLines: true,
	plugins: [
		{
			ptype: 'rowformediting',
			autoCancel: false,
			errorSummary: false,
			clicksToEdit: 1,
			items: [
				{
					xtype: 'container',
					layout: 'hbox',
					width: 900,
					items: [
						{
							xtype: 'container',
							width: 450,
							layout: 'anchor',
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('name'),
									name: 'name',
									allowBlank: false,
									width: 385
								},
								{
									xtype: 'textfield',
									fieldLabel: _('address'),
									name: 'line1',
									width: 385
								},
								{
									xtype: 'textfield',
									fieldLabel: _('address_cont'),
									name: 'line2',
									width: 385
								},
								{
									xtype: 'fieldcontainer',
									layout: 'hbox',
									defaults: {
										hideLabel: true
									},
									items: [
										{
											xtype: 'displayfield',
											width: 105,
											value: _('city_state_zip')
										},
										{
											xtype: 'textfield',
											width: 150,
											name: 'city'
										},
										{
											xtype: 'displayfield',
											width: 5,
											value: ','
										},
										{
											xtype: 'textfield',
											width: 50,
											name: 'state'
										},
										{
											xtype: 'textfield',
											width: 75,
											name: 'zip'
										}
									]
								}
							]
						},
						{
							xtype: 'container',
							width: 300,
							layout: 'anchor',
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('email'),
									name: 'email',
									width: 275
								},
								{
									xtype: 'fieldcontainer',
									layout: 'hbox',
									defaults: {
										hideLabel: true
									},
									items: [
										{
											xtype: 'displayfield',
											width: 100,
											value: _('phone')
										},
										{
											xtype: 'textfield',
											width: 40,
											name: 'phone_area_code'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 50,
											name: 'phone_prefix'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 70,
											name: 'phone_number'
										}
									]
								},
								{
									xtype: 'fieldcontainer',
									layout: 'hbox',
									defaults: {
										hideLabel: true
									},
									items: [
										{
											xtype: 'displayfield',
											width: 100,
											value: _('fax')
										},
										{
											xtype: 'textfield',
											width: 40,
											name: 'fax_area_code'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 50,
											name: 'fax_prefix'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 70,
											name: 'fax_number'
										}
									]
								},
								{
									xtype: 'transmitmethodcombo',
									fieldLabel: _('default_method'),
									labelWidth: 100,
									width: 275
								}
							]
						},
						{
							xtype: 'checkbox',
							fieldLabel: _('active'),
							labelWidth: 60,
							name: 'active'
						}
					]
				}
			]
		}
	],
	columns: [
		{
			header: _('pharmacy_name'),
			width: 150,
			sortable: true,
			dataIndex: 'name'
		},
		{
			header: _('address'),
			flex: 1,
			sortable: true,
			dataIndex: 'address_full'
		},
		{
			header: _('phone'),
			width: 120,
			sortable: true,
			dataIndex: 'phone_full'
		},
		{
			header: _('fax'),
			width: 120,
			sortable: true,
			dataIndex: 'fax_full'
		},
		{
			header: _('default_method'),
			flex: 1,
			sortable: true,
			dataIndex: 'transmit_method',
			renderer: function (val){
				if(val == '1'){
					return 'Print';
				}else if(val == '2'){
					return 'Email';
				}else if(val == '3'){
					return 'Email';
				}
				return val;
			}
		},
		{
			header: _('active'),
			width: 55,
			sortable: true,
			dataIndex: 'active',
			renderer: function(v){
				return app.boolRenderer(v);
			}
		}
	],
	tbar: [
		'->',
		{
			text: _('laboratory'),
			iconCls: 'icoAdd',
			action: 'laboratory',
			itemId: 'addBtn'
		}
	]
});

Ext.define('App.store.administration.Pharmacies', {
	model: 'App.model.administration.Pharmacies',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'Practice.getPharmacies',
			create: 'Practice.addPharmacy',
			update: 'Practice.updatePharmacy'
		}
	}
});
Ext.define('App.view.administration.practice.Pharmacies', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.combo.Titles',
		'App.ux.grid.RowFormEditing',
		'App.ux.combo.TransmitMethod'
	],
	xtype: 'pharmaciespanel',
	title: _('pharmacies'),
	store: Ext.create('App.store.administration.Pharmacies'),
	border: false,
	frame: false,
	columnLines: true,
	plugins: [
		{
			ptype: 'rowformediting',
			autoCancel: false,
			errorSummary: false,
			clicksToEdit: 1,
			items: [
				{
					xtype: 'container',
					layout: 'hbox',
					items: [
						{
							xtype: 'container',
							width: 400,
							layout: 'anchor',
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('name'),
									name: 'name',
									allowBlank: true,
									width: 385
								},
								{
									xtype: 'textfield',
									fieldLabel: _('address'),
									name: 'address',
									width: 385
								},
								{
									xtype: 'textfield',
									fieldLabel: _('address_cont'),
									name: 'address_cont',
									width: 385
								},
								{
									xtype: 'fieldcontainer',
									layout: 'hbox',
									defaults: {
										hideLabel: true
									},
									items: [
										{
											xtype: 'displayfield',
											width: 105,
											value: _('city_state_zip')
										},
										{
											xtype: 'textfield',
											width: 150,
											name: 'city'
										},
										{
											xtype: 'displayfield',
											width: 5,
											value: ','
										},
										{
											xtype: 'textfield',
											width: 50,
											name: 'state'
										},
										{
											xtype: 'textfield',
											width: 75,
											name: 'zip'
										}
									]
								}
							]
						},
						{
							xtype: 'container',
							width: 300,
							layout: 'anchor',
							items: [

								{
									xtype: 'fieldcontainer',
									layout: 'hbox',
									defaults: {
										hideLabel: true
									},
									items: [
										{
											xtype: 'displayfield',
											width: 100,
											value: _('phone')
										},
										{
											xtype: 'textfield',
											width: 40,
											name: 'phone_area_code'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 50,
											name: 'phone_prefix'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 70,
											name: 'phone_number'
										}
									]
								},
								{
									xtype: 'fieldcontainer',
									layout: 'hbox',
									defaults: {
										hideLabel: true
									},
									items: [
										{
											xtype: 'displayfield',
											width: 100,
											value: _('fax')
										},
										{
											xtype: 'textfield',
											width: 40,
											name: 'fax_area_code'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 50,
											name: 'fax_prefix'
										},
										{
											xtype: 'displayfield',
											width: 10,
											value: '-'
										},
										{
											xtype: 'textfield',
											width: 70,
											name: 'fax_number'
										}
									]
								},
								{
									xtype: 'textfield',
									fieldLabel: _('email'),
									name: 'email',
									width: 385
								},
								{
									xtype: 'transmitmethodcombo',
									fieldLabel: _('default_method'),
									labelWidth: 100,
									width: 275
								}
							]
						},
						{
							xtype: 'checkbox',
							fieldLabel: _('active'),
							labelWidth: 60,
							margin: '0 0 0 10',
							name: 'active'
						}

					]
				}
			]
		}
	],
	columns: [
		{
			header: _('pharmacy_name'),
			width: 150,
			sortable: true,
			dataIndex: 'name'
		},
		{
			header: _('address'),
			flex: 1,
			sortable: true,
			dataIndex: 'address_full'
		},
		{
			header: _('phone'),
			width: 120,
			sortable: true,
			dataIndex: 'phone_full'
		},
		{
			header: _('fax'),
			width: 120,
			sortable: true,
			dataIndex: 'fax_full'
		},
		{
			header: _('default_method'),
			flex: 1,
			sortable: true,
			dataIndex: 'transmit_method',
			renderer: function (val){
				if(val == '1'){
					return 'Print';
				}else if(val == '2'){
					return 'Email';
				}else if(val == '3'){
					return 'Email';
				}
				return val;
			}
		},
		{
			header: _('active'),
			width: 55,
			sortable: true,
			dataIndex: 'active',
			renderer: function(v){
				return app.boolRenderer(v);
			}
		}
	],
	tbar: [
		'->',
		{
			text: _('pharmacy'),
			iconCls: 'icoAdd',
			action: 'pharmacy',
			itemId: 'addBtn'
		}
	]
});

Ext.define('App.model.administration.InsuranceNumber', {
	extend: 'Ext.data.Model',
	table: {
		name: 'insurance_numbers',
		comment: 'Insurance Numbers'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'provider_id',
			type: 'int'
		},
		{
			name: 'insurance_company_id',
			type: 'int'
		},
		{
			name: 'provider_id_text',
			type: 'string',
			store: false
		},
		{
			name: 'insurance_company_id_text',
			type: 'string',
			store: false
		},
		{
			name: 'provider_number',
			type: 'string',
			len: 20
		},
		{
			name: 'rendering_provider_number',
			type: 'string',
			len: 20
		},
		{
			name: 'group_number',
			type: 'string',
			len: 20
		},
		{
			name: 'provider_number_type',
			type: 'string',
			len: 4
		},
		{
			name: 'rendering_provider_number_type',
			type: 'string',
			len: 4
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Insurance.getInsuranceNumbers',
			create: 'Insurance.addInsuranceNumber',
			update: 'Insurance.updateInsuranceNumber'
		}
	}
});
Ext.define('App.store.administration.InsuranceNumbers', {
	extend: 'Ext.data.Store',
	model: 'App.model.administration.InsuranceNumber'
});
Ext.define('App.view.administration.practice.ProviderNumbers', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.combo.Titles',
		'App.ux.grid.RowFormEditing',
		'App.ux.combo.TransmitMethod'
	],
	xtype: 'providersnumberspanel',
	title: _('provider_numbers'),
	store: Ext.create('App.store.administration.InsuranceNumbers'),
	border: false,
	frame: false,
	columnLines: true,
	features: [
		{
			ftype: 'grouping',
			groupHeaderTpl: '{name}'
		}
	],
	plugins: [
		{
			ptype: 'rowformediting',
			autoCancel: false,
			errorSummary: false,
			clicksToEdit: 1,
			items: [
				{
					xtype: 'container',
					layout: 'column',
					items: [
						{
							xtype: 'container',
							defaults:{
								labelWidth: 140
							},
							margin: '0 10 0 0',
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('provider'),
									name: 'provider_id'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('provider_number'),
									name: 'provider_number'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('provider_number_type'),
									name: 'provider_number_type'
								}
							]
						},
						{
							xtype: 'container',
							defaults:{
								labelWidth: 140
							},
							margin: '0 10 0 0',
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('insurance_company'),
									name: 'insurance_company_id'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('rendering_number'),
									name: 'rendering_provider_number'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('rendering_number_type'),
									name: 'rendering_provider_number_type'
								}
							]
						},
						{
							xtype: 'container',
							defaults:{
								labelWidth: 140
							},
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('group_number'),
									name: 'group_number'
								}
							]
						}
					]
				}
			]
		}
	],
	columns: [
		{
			text: _('provider'),
			flex: 1,
			sortable: true,
			dataIndex: 'provider_id_text'
		},
		{
			text: _('insurance'),
			flex: 1,
			sortable: true,
			dataIndex: 'insurance_company_id_text'
		},
		{
			text: _('provider_number'),
			flex: 1,
			sortable: true,
			dataIndex: 'provider_number'
		},
		{
			text: _('rendering_number'),
			flex: 1,
			sortable: true,
			dataIndex: 'rendering_number'
		},
		{
			text: _('group_number'),
			flex: 1,
			sortable: true,
			dataIndex: 'phone'
		}
	],
	tbar: [
		_('group_by'),
		{
			text: _('provider'),
			enableToggle: true,
			toggleGroup: 'insurance_number_group',
			action: 'provider_id_text'
		},
		{
			text: _('insurance'),
			enableToggle: true,
			toggleGroup: 'insurance_number_group',
			action: 'insurance_company_id_text'
		},
		'-',
		'->',
		{
			text: _('insurance_number'),
			iconCls: 'icoAdd',
			action: 'insurance',
			itemId: 'addBtn'
		}
	]
});

Ext.define('App.view.administration.practice.Specialties', {
	extend: 'Ext.grid.Panel',
	xtype: 'specialtiespanel',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'Ext.ux.SlidingPager'
	],
	title: _('specialties'),

	initComponent: function(){
		var me = this;

		Ext.apply(me, {
			store: me.store = Ext.create('App.store.administration.Specialties', {
				autoSync: false
			}),
			columns: [
				{
					width: 200,
					text: _('title'),
					dataIndex: 'title',
					sortable: true,
					flex: 1,
					editor: {
						xtype: 'textfield'
					}
				},
				{
					text: _('taxonomy'),
					sortable: true,
					dataIndex: 'taxonomy',
					flex: 1,
					editor: {
						xtype: 'textfield'
					}
				},
				{
					text: _('modality'),
					sortable: true,
					dataIndex: 'modality',
					flex: 1,
					editor: {
						xtype: 'textfield'
					}
				},
				{
					text: _('active'),
					sortable: true,
					dataIndex: 'active',
					renderer: me.boolRenderer,
					editor: {
						xtype: 'checkboxfield'
					}
				}
			],
			plugins: [
				{
					ptype: 'rowediting',
					clicksToEdit: 1
				}
			],
			tbar: [
				'->',
				{
					xtype: 'button',
					text: _('specialty'),
					iconCls: 'icoAdd',
					itemId: 'specialitiesAddBtn'
				}
			],
			bbar: Ext.create('Ext.PagingToolbar', {
				pageSize: 10,
				store: me.store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.SlidingPager', {})
			})
		});

		me.callParent(arguments);

	}

});

Ext.define('App.view.administration.practice.ReferringProviders', {
	extend: 'Ext.grid.Panel',
	xtype: 'referringproviderspanel',
	requires: [

	],
	title: _('referring_providers'),

	initComponent: function(){
		var me = this;

		Ext.apply(me, {
			store: Ext.create('App.store.administration.ReferringProviders', {
				autoSync: false
			}),
			columns: [
				{
					width: 200,
					text: _('name'),
					sortable: true,
					renderer:function(v, meta, record){
						return record.data.title + ' ' + record.data.fname + ' ' + record.data.mname + ' ' + record.data.lname;
					}
				},
				{
					flex: 1,
					text: _('email'),
					sortable: true,
					dataIndex: 'email'
				},
				{
					flex: 1,
					text: _('phone_number'),
					sortable: true,
					dataIndex: 'phone_number'
				},
				{
					flex: 1,
					text: _('cell_number'),
					sortable: true,
					dataIndex: 'cel_number'
				},
				{
					flex: 1,
					text: _('aditional_info'),
					sortable: true,
					dataIndex: 'notes'
				},
				{
					text: _('active'),
					sortable: true,
					dataIndex: 'active',
					renderer: me.boolRenderer
				}
			],
			plugins: [
				me.formEditing = Ext.create('App.ux.grid.RowFormEditing', {
					clicksToEdit: 1,
					items: [
						{
							xtype: 'fieldcontainer',
							fieldLabel: _('first_middle_last'),
							labelWidth: 130,
							labelAlign: 'right',
							layout: {
								type: 'hbox',
								defaultMargins: {
									top: 0,
									right: 5,
									bottom: 0,
									left: 0
								}
							},
							msgTarget: 'under',
							items: [
								{
									width: 50,
									xtype: 'mitos.titlescombo',
									name: 'title'
								},
								{
									width: 150,
									xtype: 'textfield',
									name: 'fname',
									allowBlank: false
								},
								{
									width: 100,
									xtype: 'textfield',
									name: 'mname'
								},
								{
									width: 150,
									xtype: 'textfield',
									name: 'lname',
									allowBlank: false
								}
							]
						},
						{
							xtype: 'fieldcontainer',
							layout: {
								type: 'hbox',
								defaultMargins: {
									top: 0,
									right: 5,
									bottom: 0,
									left: 0
								}
							},
							items: [
								{
									xtype: 'textfield',
									name: 'email',
									fieldLabel: _('email'),
									labelWidth: 130,
									labelAlign: 'right'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('taxonomy'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'taxonomy'
								}
							]
						},
						{
							xtype: 'fieldcontainer',
							layout: {
								type: 'hbox',
								defaultMargins: {
									top: 0,
									right: 5,
									bottom: 0,
									left: 0
								}
							},
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('upin'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'upin'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('npi'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'npi'
								}
							]
						},
						{
							xtype: 'fieldcontainer',
							layout: {
								type: 'hbox',
								defaultMargins: {
									top: 0,
									right: 5,
									bottom: 0,
									left: 0
								}
							},
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('lic'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'lic'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('ssn'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'ssn'
								}
							]
						},
						{
							xtype: 'fieldcontainer',
							layout: {
								type: 'hbox',
								defaultMargins: {
									top: 0,
									right: 5,
									bottom: 0,
									left: 0
								}
							},
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('phone_number'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'phone_number'
								},
								{
									xtype: 'textfield',
									fieldLabel: _('fax_number'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'fax_number'
								}

							]
						},
						{
							xtype: 'fieldcontainer',
							layout: {
								type: 'hbox',
								defaultMargins: {
									top: 0,
									right: 5,
									bottom: 0,
									left: 0
								}
							},
							items: [
								{
									xtype: 'textfield',
									fieldLabel: _('cell_number'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'cel_number'
								},
								{
									xtype: 'checkbox',
									fieldLabel: _('active'),
									labelWidth: 130,
									labelAlign: 'right',
									name: 'active'
								}

							]
						},
						{
							height: 50,
							xtype: 'textareafield',
							name: 'notes',
							width: 600,
							fieldLabel: _('notes'),
							labelWidth: 130,
							labelAlign: 'right',
							emptyText: _('additional_info')
						}
					]
				})
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					items: [
						'->',
						{
							xtype: 'button',
							text: _('referring_provider'),
							iconCls: 'icoAdd',
							itemId: 'referringProviderAddBtn',
						}
					]
				}
			]
		});

		me.callParent(arguments);

	}

});

Ext.define('App.view.administration.Applications', {
    extend: 'App.ux.RenderPanel',
    pageTitle: _('applications'),

    initComponent: function(){
        var me = this;

        // *************************************************************************************
        // Application Store
        // *************************************************************************************
        me.store = Ext.create('App.store.administration.Applications');

        // *************************************************************************************
        // Application Grid Panel
        // *************************************************************************************
        me.grid = Ext.create('Ext.grid.Panel', {
            store: me.store,
            plugins: [
                me.edditing = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2,
                    errorSummary : false
                })
            ],
            columns: [
                {
                    xtype:'actioncolumn',
                    width:20,
                    items: [
                        {
                            icon: 'resources/images/icons/cross.png',  // Use a URL in the icon config
                            tooltip: 'Remove',
                            scope:me,
                            handler: me.removeApplication
                        }
                    ]

                },
                {
                    text: _('name'),
                    flex: 1,
                    sortable: true,
                    dataIndex: 'app_name',
                    editor:{
                        xtype:'textfield',
                        allowBlank:false
                    }
                },
                {
                    text: _('private_key'),
                    flex: 1,
                    sortable: true,
                    dataIndex: 'pvt_key'
                },
                {
                    text: _('active?'),
                    width: 50,
                    sortable: true,
                    renderer: me.boolRenderer,
                    dataIndex: 'active',
                    editor:{
                        xtype:'checkbox'
                    }
                }
            ],
            tbar:[
                {
                    text:_('add'),
                    iconCls:'icoAdd',
                    scope:me,
                    handler:me.addApplication
                }
            ]
        });
        me.pageBody = [me.grid];
        me.callParent(arguments);
    },

    removeApplication:function(grid, rowIndex, colIndex){
        var me = this,
            record = me.store.getAt(rowIndex);
        Ext.Msg.show({
            title:'Wait!',
            msg: 'This action is final. Are you sure you want to remove <span style="font-weight: bold">"'+record.data.app_name+'"</span>?',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.WARNING,
            fn:function(btn){
                if(btn == 'yes'){
                    me.edditing.cancelEdit();
                    me.store.remove(record);
                    me.store.sync({
                        callback:function(){
                            me.msg('Sweet!', _('record_removed'))
                        }
                    });
                }
            }
        });
    },

    addApplication:function(){
        var me = this;
        me.edditing.cancelEdit();
        me.store.insert(0,{active:1});
        me.edditing.startEdit(0,0);
    },

    /**
     * This function is called from Viewport.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive: function(callback){
        this.store.load();
        callback(true);
    }
});

Ext.define('App.view.administration.Globals', {
	extend: 'App.ux.RenderPanel',
	id: 'panelGlobals',
	pageTitle: 'GaiaEHR ' + _('global_settings'),
	uses: ['App.ux.form.fields.Checkbox'],
	initComponent: function(){
		var me = this;
		// *************************************************************************************
		// Global Data store
		// *************************************************************************************
		me.store = Ext.create('App.store.administration.Globals',{
			groupField: 'gl_category',
			remoteSort: false,
			autoSync: true,
			pageSize: 500,
			sorters: [
				{
					sorterFn: function(o1, o2){

						var getCat = function(o){
								var name = o.get('gl_category');
								if (name === 'General') {
									return 1;
								} else if (name === 'Locale') {
									return 2;
								} else if (name === 'Clinical') {
									return 3;
								} else if (name === 'Email') {
									return 4;
								} else if (name === 'Audit') {
									return 5;
								} else if (name === 'Fax/Scanner') {
									return 6;
								} else {
									return 7;
								}
							},
							cat1 = getCat(o1),
							cat2 = getCat(o2);

						if (cat1 === cat2) {
							return 0;
						}

						return cat1 < cat2 ? -1 : 1;
					}
				}
			]
		});


		//region Store Region
		me.default_top_pane_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('dashboard'),
					"option_id": "app/dashboard/dashboard.ejs.php"
				},
				{
					"title": _('calendar'),
					"option_id": "app/calendar/calendar.ejs.php"
				},
				{
					"title": _('messages'),
					"option_id": "app/messages/messages.ejs.php"
				}
			]
		});
		me.fullname_store = Ext.create('Ext.data.Store', {
			fields: ['format', 'option_id'],
			data: [
				{
					"format": _('last_first_middle'),
					"option_id": "0"
				},
				{
					"format": _('first_middle_last'),
					"option_id": "1"
				}
			]
		});
		me.main_navigation_menu_left_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('main_navigation_menu_left'),
					"option_id": "west"
				},
				{
					"title": _('main_navigation_menu_right'),
					"option_id": "east"
				}
			]
		});
		me.css_header_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('grey_default'),
					"option_id": "ext-all-gray.css"
				},
				{
					"title": _('blue'),
					"option_id": "ext-all.css"
				},
				{
					"title": _('access'),
					"option_id": "ext-all-access.css"
				}
			]
		});
		me.full_new_patient_form_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('oldstyle_static_form_without_search_or_duplication_check'),
					"option_id": "0"
				},
				{
					"title": _('all_demographics_fields_with_search_and_duplication_check'),
					"option_id": "1"
				},
				{
					"title": _('mandatory_or_specified_fields_only_search_and_dup_check'),
					"option_id": "2"
				},
				{
					"title": _('mandatory_or_specified_fields_only_dup_check_no_search'),
					"option_id": "3"
				}
			]
		});
		me.patient_search_results_style_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('encounter_statistics'),
					"option_id": "0"
				},
				{
					"title": _('mandatory_and_specified_fields'),
					"option_id": "1"
				}
			]
		});
		me.units_of_measurement_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('show_both_us_and_metric_main_unit_is_us'),
					"option_id": "1"
				},
				{
					"title": _('show_both_us_and_metric_main_unit_is_metric'),
					"option_id": "2"
				},
				{
					"title": _('show_us_only'),
					"option_id": "3"
				},
				{
					"title": _('show_metric_only'),
					"option_id": "4"
				}
			]
		});
		me.date_display_format_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('yyyy_mm_dd'),
					"option_id": "Y-m-d"
				},
				{
					"title": _('mm_dd_yyyy'),
					"option_id": "m/d/Y"
				},
				{
					"title": _('dd_mm_yyyy'),
					"option_id": "d/m/Y"
				}
			]
		});
		me.time_display_format_store = Ext.create('Ext.data.Store',	{
				fields: ['title', 'option_id'],
				data: [
					{
						"title": _('24_hr'),
						"option_id": "H:i"
					},
					{
						"title": i18n['12 hr'],
						"option_id": "g:i a"
					}
				]
			});
		me.currency_decimals_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('0'),
					"option_id": "0"
				},
				{
					"title": _('1'),
					"option_id": "1"
				},
				{
					"title": _('2'),
					"option_id": "2"
				}
			]
		});
		me.currency_dec_point_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('comma'),
					"option_id": ","
				},
				{
					"title": _('period'),
					"option_id": "."
				}
			]
		});
		me.currency_thousands_sep_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('comma'),
					"option_id": ","
				},
				{
					"title": _('period'),
					"option_id": "."
				},
				{
					"title": _('space'),
					"option_id": " "
				},
				{
					"title": _('none'),
					"option_id": ""
				}
			]
		});
		me.EMAIL_METHOD_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": "PHPMAIL",
					"option_id": "PHPMAIL"
				},
				{
					"title": "SENDMAIL",
					"option_id": "SENDMAIL"
				},
				{
					"title": "SMTP",
					"option_id": "SMTP"
				}
			]
		});
		me.state_country_data_type_store = Ext.create('Ext.data.Store', {
			fields: ['title', 'option_id'],
			data: [
				{
					"title": _('text_field'),
					"option_id": "2"
				},
				{
					"title": _('single_selection_list'),
					"option_id": "1"
				},
				{
					"title": _('single_selection_list_with_ability_to_add_to_the_list'),
					"option_id": "26"
				}
			]
		});
		me.dummyStore = new Ext.data.ArrayStore({
			fields: ['title', 'option_id'],
			data: [
				[_('option_1'), 'Option 1'],
				[_('option_2'), 'Option 2'],
				[_('option_3'), 'Option 3'],
				[_('option_5'), 'Option 5'],
				[_('option_6'), 'Option 6'],
				[_('option_7'), 'Option 7']
			]
		});
		//region end


		me.grid = Ext.create('Ext.grid.Panel',{
			store: me.store,
			features: [
				{
					ftype:'grouping',
					groupHeaderTpl: _('category') + ': {name}'
				}
			],
			plugins:[
				{
					ptype:'cellediting'
				}
			],
			columns:[
				{
					text:_('title'),
					dataIndex:'gl_name',
					flex:1
				},
				{
					text:_('value'),
					dataIndex:'gl_value',
					flex:1,
					editor:{
						xtype:'textfield'
					}
				},
				{
					text:_('category'),
					dataIndex:'gl_category'
				}
			]
		});

		me.pageBody = [ me.grid ];

		me.callParent(arguments);
	},

	/**
	 *
	 * @param form
	 * @param store
	 */
	onGloblasSave: function(form, store){
		var record = form.getRecord(), values = form.getValues();
		Globals.updateGlobals(values, function(){
			store.load();
		});

		this.msg(_('new_global_configuration_saved'), _('refresh_the_application'));
	},
	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		this.store.load();
		callback(true);
	}
});


Ext.define('App.view.administration.Lists', {
    extend: 'App.ux.RenderPanel',
    id: 'panelLists',
    pageTitle: _('select_list_options'),
    pageLayout: 'border',
    uses: [
        'App.ux.form.Panel',
        'Ext.grid.plugin.RowEditing'
    ],
    initComponent: function(){
        var me = this;


        /**
         * Store
         */
        me.listsStore = Ext.create('App.store.administration.Lists');
        me.optionsStore = Ext.create('App.store.administration.ListOptions',{
	        remoteFilter:true
        });

        /**
         * RowEditor Classes
         */
        me.optionsRowEditing = Ext.create('Ext.grid.plugin.RowEditing', {
//            autoCancel: false,
//            errorSummary: false
        });

	    me.listsRowEditing = Ext.create('Ext.grid.plugin.RowEditing', {
//            autoCancel: false,
//            errorSummary: false
        });

        /**
         * Lists Grid
         */
        me.listsGrid = Ext.create('Ext.grid.Panel', {
            store: me.listsStore,
            itemId: 'listsGrid',
            plugins: [ me.listsRowEditing ],
            width: 320,
            margin: '0 2 0 0',
            region: 'west',
            columns: [
                {
	                width: 30,
                    dataIndex: 'id'
                },
                {
                    text: _('select_lists'),
                    flex: 1,
                    sortable: false,
                    dataIndex: 'title',
                    editor: {
	                    xtype:'textfield',
                        allowBlank: false
                    }
                },
                {
                    text: _('active'),
                    width: 55,
                    sortable: false,
                    dataIndex: 'active',
                    renderer: me.boolRenderer,
                    editor: {
                        xtype: 'checkbox',
                        padding: '0 0 0 18'
                    }
                },
                {
                    text: _('in_use'),
                    width: 55,
                    sortable: false,
                    dataIndex: 'in_use',
                    renderer: me.boolRenderer
                }
            ],
            listeners: {
                scope: me,
                select: me.onListsGridClick
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            text: _('new_list'),
                            iconCls: 'icoAddRecord',
                            scope: me,
                            handler: me.onNewList
                        },
                        '->',
                        {
                            text: _('delete_list'),
                            iconCls: 'icoDeleteBlack',
                            itemId: 'listDeleteBtn',
                            disabled: true,
                            scope: me,
                            handler: me.onListDelete,
                            tooltip: _('can_be_disable')
                        }
                    ]
                }
            ]
        });

        /**
         * Options Grid
         */
        me.optionsGrid = Ext.create('Ext.grid.Panel', {
            store: me.optionsStore,
            itemId: 'optionsGrid',
            plugins: [me.optionsRowEditing],
            region: 'center',
            viewConfig: {
                plugins: {
                    ptype: 'gridviewdragdrop',
                    dragText: _('drag_and_drop_reorganize')
                },
                listeners: {
                    scope: me,
                    drop: me.onDragDrop
                }
            },
            columns: [
	            {
		            xtype: 'rownumberer'
	            },
                {
                    text: _('option_title'),
                    width: 200,
                    sortable: true,
                    dataIndex: 'option_name',
                    editor: {
                        allowBlank: false,
                        enableKeyEvents: true,
                        listeners: {
                            scope: me,
                            keyup: me.onOptionTitleChange
                        }
                    }
                },
                {
                    text: _('option_value'),
                    width: 200,
                    sortable: true,
                    dataIndex: 'option_value',
                    editor: {
                        allowBlank: false,
                        itemId: 'optionValueTextField'
                    }
                },
	            {
		            text: _('code'),
		            sortable: true,
		            dataIndex: 'code',
		            width: 120,
		            editor: {
			            allowBlank: true
		            }
	            },
	            {
		            text: _('code_type'),
		            sortable: true,
		            dataIndex: 'code_type',
		            width: 100,
		            editor: {
			            allowBlank: true
		            }
	            },
                {
                    text: _('notes'),
                    sortable: true,
                    dataIndex: 'notes',
                    flex: 1,
	                width: 100,
                    editor: {
                        allowBlank: true
                    }
                },
                {
                    text: _('active'),
                    width: 55,
                    sortable: false,
                    dataIndex: 'active',
                    renderer: me.boolRenderer,
                    editor: {
                        xtype: 'checkbox',
                        margin: 0
                    }
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: ['->', {
                        text: _('add_option'),
                        iconCls: 'icoAddRecord',
                        scope: me,
                        handler: me.onNewOption
                    }]
                }
            ]
        });
        me.pageBody = [me.listsGrid, me.optionsGrid];
        me.callParent(arguments);
    },

    /**
     * This wll load a new record to the grid
     * and start the rowEditor
     */
    onNewList: function(){
        var me = this;
        me.listsRowEditing.cancelEdit();
        me.listsStore.insert(0, Ext.create('App.model.administration.Lists'));
        me.listsRowEditing.startEdit(0, 0);
    },

    /**
     *
     * @param grid
     * @param selected
     */
    onListsGridClick: function(grid, selected){
        var me = this,
	        deleteBtn = me.listsGrid.down('toolbar').getComponent('listDeleteBtn'),
	        inUse = !!selected.data.in_use == '1',
	        listId = selected.data.id;

	    me.optionsStore.clearFilter(true);
	    me.optionsStore.filter([
		    {
			    property:'list_id',
			    value: listId
		    }
	    ]);
        inUse ? deleteBtn.disable() : deleteBtn.enable();
    },

    /**
     * This wll load a new record to the grid
     * and start the rowEditor
     */
    onNewOption: function(){
        var me = this,
	        listId = me.getCurrList(),
	        m;

	    if(listId !== false){
		    me.optionsRowEditing.cancelEdit();
		    m = Ext.create('App.model.administration.ListOptions', {
			    list_id: listId
		    });
		    me.optionsStore.insert(0, m);
		    me.optionsRowEditing.startEdit(0, 0);
	    }
    },

    /**
     * Set the Option Value same as Option Title
     * @param a
     */
    onOptionTitleChange: function(a){
//        var value = a.getValue(), field = a.up('container').getComponent('optionValueTextField');
//        field.setValue(value);
    },

    /**
     * Logic to sort the options
     * @param node
     * @param data
     * @param overModel
     */
    onDragDrop: function(node, data, overModel){
        var me = this,
	        items = overModel.stores[0].data.items,
	        listId = me.getCurrList(),
	        gridItems = [];

        for(var i = 0; i < items.length; i++){
	        Ext.Array.push(gridItems, items[i].data.id);
        }

        var params = {
            list_id: data.records[0].data.list_id,
            fields: gridItems
        };

        Lists.sortOptions(params, function(){
	        me.optionsStore.clearFilter(true);
	        me.optionsStore.filter([
		        {
			        property:'list_id',
			        value: listId
		        }
	        ]);
        });
    },
    /**
     *
     * @param a
     */
    onListDelete: function(a){
        var me = this,
            grid = a.up('grid'),
            store = grid.getStore(),
            sm = grid.getSelectionModel(),
            record = sm.getLastSelected();

        if(!record.data.in_use){
            Ext.Msg.show({
                title: _('please_confirm') + '...',
                icon: Ext.MessageBox.QUESTION,
                msg: _('delete_this_record'),
                buttons: Ext.Msg.YESNO,
                scope: me,
                fn: function(btn){
                    if(btn == 'yes'){
                        store.remove(record);
                        store.sync({
                            success:function(){
                                me.msg('Sweet!', _('record_deleted'));
                                me.optionsStore.removeAll();
                            },
                            failure:function(){
                                me.msg('Oops!', _('unable_to_delete') + ' "' + record.data.title, true);
                            }
                        });
                    }
                }
            });
        }else{
            Ext.Msg.alert('Oops!', _('unable_to_delete') + ' "' + record.data.title + '"<br>' + _('list_currently_used_forms') + '.');
        }
    },

	getCurrList: function(){
		var records = this.listsGrid.getSelectionModel().getSelection();

		if(records.length > 0){
			return records[0].data.id;
		}

		return false;

	},

    /**
     * This function is called from Viewport.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive: function(callback){
        var me = this;
        me.listsStore.load();
        callback(true);
    }
});

Ext.define('App.view.administration.AuditLog', {
	extend: 'App.ux.RenderPanel',
	pageTitle: _('audit_log'),
	itemId: 'AuditLogPanel',

	initComponent: function(){
		var me = this;

		me.store = Ext.create('App.store.administration.TransactionLogs',{
			remoteFilter: true,
			remoteSort: true
		});

		me.pageBody = [

			Ext.create('Ext.grid.Panel', {
				itemId: 'AuditLogGrid',
				store: me.store,
				columns: [
					{
						width: 130,
						text: _('date'),
						dataIndex: 'date',
						renderer: Ext.util.Format.dateRenderer('Y-m-d g:i a')
					},
					{
						width: 200,
						text: _('user'),
						dataIndex: 'user_name'
					},
					{
						width: 200,
						text: _('patient'),
						dataIndex: 'patient_name'
					},
					{
						width: 100,
						text: _('event'),
						dataIndex: 'event'
					},
					{
						width: 200,
						text: _('table'),
						dataIndex: 'table_name'
					},
					{
						flex: 1,
						text: _('sql'),
						dataIndex: 'sql_string'
					},
					{
						flex: 1,
						text: _('data'),
						dataIndex: 'data'
					},
					{
						width: 60,
						text: _('valid'),
						dataIndex: 'is_valid',
						renderer: app.boolRenderer
					}
				],
				tbar: Ext.create('Ext.PagingToolbar', {
					store: me.store,
					displayInfo: true,
					plugins: Ext.create('Ext.ux.SlidingPager'),
					items: [
						'-',
						{
							xtype: 'datefield',
							name: 'from',
							itemId: 'AuditLogGridFromDateField',
							labelWidth: 35,
							width: 150,
							fieldLabel: _('from'),
							labelAlign: 'right',
							format: 'Y-m-d',
							allowBlank: false,
							value: new Date()  // defaults to today
						},
						{
							xtype: 'datefield',
							name: 'to',
							itemId: 'AuditLogGridToDateField',
							labelWidth: 30,
							width: 150,
							fieldLabel: _('to'),
							format: 'Y-m-d',
							labelAlign: 'right',
							allowBlank: false,
							value: new Date()  // defaults to today
						},
						{
							xtype: 'patienlivetsearch',
							itemId: 'AuditLogGridPatientLiveSearch',
							emptyText: _('patient_live_search') + '...',
							width: app.fullMode ? 300 : 250
						},
						{
							xtype: 'button',
							text: _('filter'),
							itemId: 'AuditLogGridFilterBtn'
						},
						{
							xtype: 'button',
							text: _('reset'),
							itemId: 'AuditLogGridResetBtn'
						}
					]
				})
			})
		];

		me.callParent(arguments);
	}

});
Ext.define('App.view.administration.Medications',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelMedications',
	pageTitle : _('medications'),

	initComponent : function()
	{
		var me = this;
		me.query = '';

		me.storeMedications = Ext.create('App.store.administration.Medications');

		me.medicationsGrid = Ext.create('Ext.grid.Panel',
		{
			region : 'center',
			store : me.storeMedications,
			columns : [
			{
				width : 70,
				header : _('number'),
				dataIndex : 'PRODUCTNDC',
				sortable : true
			},
			{
				width : 80,
				header : _('name'),
				dataIndex : 'PROPRIETARYNAME',
				sortable : true
			},
			{
				width : 200,
				header : _('active_component'),
				dataIndex : 'NONPROPRIETARYNAME',
				sortable : true
			},
			{
				width : 175,
				header : _('dosage'),
				dataIndex : 'DOSAGEFORMNAME',
				sortable : true
			},
			{
				width : 45,
				header : _('number'),
				dataIndex : 'ACTIVE_NUMERATOR_STRENGTH',
				sortable : true
			},
			{
				flex : 1,
				header : _('unit'),
				dataIndex : 'ACTIVE_INGRED_UNIT',
				sortable : true
			}],
			plugins : Ext.create('App.ux.grid.RowFormEditing',
			{
				autoCancel : false,
				errorSummary : false,
				clicksToEdit : 1,
				enableRemove : true,
				items : [
				{

					title : 'general',
					xtype : 'container',
					padding : 10,
					layout : 'vbox',
					items : [
					{
						/**
						 * Line one
						 */
						xtype : 'fieldcontainer',
						layout : 'hbox',
						defaults :
						{
							margin : '0 10 5 0'
						},
						items : [
						{
							xtype : 'textfield',
							fieldLabel : _('name'),
							width : 150,
							labelWidth : 50,
							name : 'PROPRIETARYNAME'

						},
						{
							xtype : 'textfield',
							fieldLabel : _('active_component'),
							width : 350,
							labelWidth : 125,
							name : 'NONPROPRIETARYNAME'

						},

						{
							xtype : 'textfield',
							fieldLabel : _('dosage'),
							width : 200,
							labelWidth : 50,
							name : 'DOSAGEFORMNAME'

						}]

					},
					{
						/**
						 * Line two
						 */
						xtype : 'fieldcontainer',
						layout : 'hbox',
						defaults :
						{
							margin : '0 10 5 0'
						},
						items : [
						{
							xtype : 'textfield',
							fieldLabel : _('code'),
							labelWidth : 50,
							width : 150,
							name : 'PRODUCTNDC'

						},
						{
							xtype : 'textfield',
							fieldLabel : _('dose'),
							margin : '0 0 5 0',
							value : 0,
							minValue : 0,
							width : 275,
							labelWidth : 125,
							name : 'ACTIVE_NUMERATOR_STRENGTH'

						},
						{
							xtype : 'textfield',
							name : 'ACTIVE_INGRED_UNIT',
							width : 75

						}]

					}]

				}]

			}),
			tbar : Ext.create('Ext.PagingToolbar',
			{
				store : me.storeMedications,
				displayInfo : true,
				emptyMsg : _('no_office_notes_to_display'),
				plugins : Ext.create('Ext.ux.SlidingPager'),
				items : ['-',
                    {
                        text : 'Add New',
                        scope : me,
                        handler : me.onAddMedication
                    },
                    '-',
                    {
                        xtype : 'textfield',
                        emptyText : _('search'),
                        enableKeyEvents : true,
                        itemId : 'query',
                        listeners :
                        {
                            scope : me,
                            keyup : me.onSearchMedications,
                            buffer : 500
                        }
                    },
                    '-',
                    {
                        text : _('reset'),
                        scope : me,
                        handler : me.onFieldReset
                    },
                    {
                        text: 'Print',
                        iconCls: 'icon-print',
                        handler : function(){
                            App.ux.grid.Printer.printAutomatically = false;
                            App.ux.grid.Printer.print(this.up('grid'));
                        }
                    }
                ]
			})

		});
		me.pageBody = [me.medicationsGrid];
		me.callParent(arguments);
	}, // end of initComponent

	onFieldReset : function()
	{

	},

	onAddMedication : function()
	{
		this.medicationsGrid.editingPlugin.cancelEdit();

		this.storeMedications.insert(0,
		{
		});
		this.medicationsGrid.editingPlugin.startEdit(0, 0);

	},

	onSearchMedications : function(field)
	{
		var me = this, store = me.storeMedications;

		me.query = field.getValue();

		store.proxy.extraParams =
		{
			query : me.query
		};
		store.load();
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function()
	{
		this.medicationsGrid.down('toolbar').getComponent('query').reset();
		this.storeMedications.proxy.extraParams =
		{
		};
		this.storeMedications.load();

	}
});
//ens servicesPage class
Ext.define('App.view.administration.Modules', {
    extend: 'App.ux.RenderPanel',
    id: 'panelModules',
    pageTitle: _('modules'),
    initComponent: function(){
        var me = this;

        // *************************************************************************************
        // Module Data Store
        // *************************************************************************************
        me.store = Ext.create('App.store.administration.Modules');

        me.grid = Ext.create('Ext.grid.Panel', {
            store: me.store,
            plugins: [
                me.edditing = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2,
                    errorSummary : false
                })
            ],
            columns: [
                {
                    text: _('title'),
                    width: 200,
                    sortable: true,
                    dataIndex: 'title'
                },
                {
                    text: _('description'),
                    flex: 1,
                    sortable: true,
                    dataIndex: 'description'
                },
                {
                    text: _('version'),
                    width: 100,
                    sortable: true,
                    dataIndex: 'installed_version'
                },
                {
                    text: _('key_if_required'),
                    flex: 1,
                    sortable: true,
                    dataIndex: 'licensekey',
                    editor:{
                        xtype:'textfield'
                    }
                },
                {
                    text: _('enabled?'),
                    width: 60,
                    sortable: true,
                    renderer: me.boolRenderer,
                    dataIndex: 'enable',
                    editor:{
                        xtype:'checkbox'
                    }
                }
            ]
        });
        me.pageBody = [ me.grid ];
        me.callParent(arguments);
    },


    /**
     * This function is called from Viewport.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive: function(callback){
        this.store.load();
        callback(true);
    }
});

Ext.define('App.view.administration.FloorPlans', {
    extend: 'App.ux.RenderPanel',
    id: 'panelFloorPlans',
    pageTitle: _('floor_plan_editor'),
    pageLayout: 'border',
    floorPlanId: null,
    activeZone: null,
    initComponent: function(){
        var me = this;
        me.floorPlansStore = Ext.create('App.store.administration.FloorPlans');
        me.floorZonesStore = Ext.create('App.store.administration.FloorPlanZones');
        me.floorPlans = Ext.create('Ext.grid.Panel', {
            title: _('floor_plans'),
            region: 'west',
            width: 200,
            split: true,
            hideHeaders: true,
            store: me.floorPlansStore,
            plugins: [
                me.floorPlanEditing = Ext.create('Ext.grid.plugin.RowEditing', {
                    clicksToEdit: 2
                })
            ],
            columns: [
                {
                    dataIndex: 'title',
                    sortable: false,
                    hideable: false,
                    flex: 1,
                    editor: {
                        xtype: 'textfield',
                        emptyText:_('new_floor')
                    }
                }
            ],
            tbar: [
                {
                    text: _('add_floor'),
                    action: 'newFloorPlan',
                    iconCls:'icoAdd',
                    scope: me,
                    handler: me.onNewFloorPlan
                },
                '-',
                {
                    text: _('remove_floor'),
                    action: 'newFloorPlan',
                    iconCls:'icoDelete',
                    scope: me,
                    handler: me.onRemoveFloorPlan
                }
            ],
            listeners: {
                scope: me,
                select: me.onFloorPlanSelected
            }
        });
        me.floorPlanZones = Ext.create('Ext.panel.Panel', {
            title: _('floor_plan'),
            region: 'center',
            bodyCls: 'floorPlan',
            layout: 'absolute',
            tbar: [
                {
                    text: _('add_zone'),
                    action: 'newZone',
                    iconCls:'icoAdd',
                    scope: me,
                    handler: me.onNewZone
                }
            ]
        });
        me.floorPlanZoneEditor = Ext.create('Ext.window.Window', {
            title:_('zone_editor'),
            closeAction:'hide',
            closable:false,
            resizable:false,
            items:[
                {
                    xtype:'form',
                    border:false,
                    bodyPadding: '10',
                    defaults:{
                        labelWidth: 130,
                        anchor:'100%'
                    },
                    items:[
                        {
                            xtype: 'textfield',
                            fieldLabel: _('zone_name'),
                            name: 'title'
                        },
                        {
                            xtype:'colorcombo',
                            fieldLabel: _('bg_color'),
                            name:'bg_color'
                        },
                        {
                            xtype:'colorcombo',
                            fieldLabel: _('border_color'),
                            name:'border_color'
                        },
                        {
                            xtype: 'numberfield',
                            fieldLabel: _('width'),
                            minValue: 30,
                            maxValue: 300,
                            name: 'width'
                        },
                        {
                            xtype: 'numberfield',
                            fieldLabel: _('height'),
                            minValue: 30,
                            maxValue: 300,
                            name: 'height'
                        },
                        {
                            xtype: 'checkbox',
                            fieldLabel: _('show_priority_color'),
                            name: 'show_priority_color'
                        },
                        {
                            xtype: 'checkbox',
                            fieldLabel: _('show_patient_preview'),
                            name: 'show_patient_preview'
                        },
                        {
                            xtype: 'checkbox',
                            fieldLabel: _('active'),
                            name: 'active'
                        }
                    ]
                }
            ],
            buttons:[
                {
                    text:_('remove'),
                    xtype:'button',
                    scope:me,
                    handler:me.onZoneRemove
                },
                '->',
                {
                    text:_('cancel'),
                    xtype:'button',
                    scope:me,
                    handler:me.onZoneCancel
                },
                '-',
                {
                    text:_('save'),
                    xtype:'button',
                    scope:me,
                    handler:me.onZoneSave
                }
            ],
            listeners:{
                scope:me,
                afterrender:function(win){
                   win.alignTo(this.floorPlanZones.getEl(), 'tr-tr', [-130, 70]);
                }
            }
        });
        me.listeners = {
            show: function(){
                me.nav = Ext.create('Ext.util.KeyNav', Ext.getDoc(),{
                    scope: me,
                    left: function(){
                        me.moveZone('left');
                    },
                    up: function(){
                        me.moveZone('up');
                    },
                    right: function(){
                        me.moveZone('right');
                    },
                    down: function(){
                        me.moveZone('down');
                    }
                });
            },
            hide: function(){
                if(me.nav) Ext.destroy(me.nav);
                me.setEditMode(false);
            }
        };
        me.pageBody = [me.floorPlans, me.floorPlanZones ];
        me.callParent(arguments);
    },
    setEditMode:function(show, zone){
        var me = this,
	        el = me.activeZone ? me.activeZone.getEl() : null;

        if(el){
                me.setEditor(show, zone);
        }else{
            me.setEditor(show, zone);
        }
    },
    setEditor:function(show, zone){
        var me = this;
        if(show){
            me.activeZone = zone;
            me.getEditor().zone = zone;
            me.floorPlanZones.focus();
            me.getEditor().getForm().loadRecord(zone.record);
	        if(me.floorPlanZoneEditor.hidden){
		        me.floorPlanZoneEditor.show(zone.getEl());
	        }

        }else{
            me.floorPlanZoneEditor.hide();
            me.getEditor().getForm().reset();
            me.activeZone = null;
        }
    },
    getEditor:function(){
        return this.floorPlanZoneEditor.down('form');
    },
    onZoneCancel:function(btn){
        var me = this,
            zone = me.activeZone,
            record = zone.record,
            config;
        record.reject();
        config = {
            text: record.data.title,
            scale: record.data.scale,
            style:{
                'border-color':record.data.border_color,
                'background-color':record.data.bg_color
            },
            width:record.data.width,
            height:record.data.height
        };
        me.activeZone.setPosition(record.data.x, record.data.y);
        me.applyZoneConfig(zone, config);
        me.setEditMode(false);
    },
    onZoneSave:function(){
        var me = this,
            editor = me.getEditor(),
            form = editor.getForm(),
            values = form.getValues(),
            record = form.getRecord(),
            config;
        record.set(values);
        config = {
            text: record.data.title,
            scale: record.data.scale,
            style:{
                'border-color':record.data.border_color,
                'background-color':record.data.bg_color
            },
            width:record.data.width,
            height:record.data.height
        };
        record.store.sync();
        me.applyZoneConfig(editor.zone, config);
        me.setEditMode(false);
    },
    onZoneHandler:function(zone){
        var me = this;
        me.setEditMode(true, zone);
    },
    onZoneRemove:function(){
        var me = this,
            editor = this.getEditor(),
            form = editor.getForm(),
            record = form.getRecord(),
            zone = editor.zone;
        Ext.Msg.show({
            title:'Wait!',
            msg: _('remove_final_notice') + ' <span style="font-weight: bold">"'+record.data.title+'"</span>?',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.WARNING,
            fn:function(btn){
                if(btn == 'yes'){
                    me.floorZonesStore.remove(record);
                    me.floorZonesStore.sync({
                        success:function(){
                            me.floorPlanZones.remove(zone, true);
                            editor.up('window').hide();
                        }
                    });
                }
            }
        });
    },
    onRemoveFloorPlan:function(btn){
        var me = this,
            grid = btn.up('grid'),
            store = grid.store,
            sm = grid.getSelectionModel(),
            record = sm.getLastSelected();
        Ext.Msg.show({
            title:'Wait!',
            msg: _('remove_final_notice') + ' <span style="font-weight: bold">"'+record.data.title+'"</span>?',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.WARNING,
            fn:function(btn){
                if(btn == 'yes'){
                    store.remove(record);
                    store.sync({
                        callback:function(){
                            sm.deselectAll();
                            me.floorPlanZones.removeAll();
                            me.msg('Sweet!',_('record_removed'))
                        }
                    });

                }
            }
        });

    },
    onNewZone: function(){
        var me = this;
        me.floorZonesStore.add({
            floor_plan_id: me.floorPlanId,
            title: _('new_zone'),
            x: 5,
            y: 5,
            show_priority_color: 1,
            show_patient_preview: 1,
            active: 0
        });
        me.floorZonesStore.sync({
            callback: function(batch){
                me.createZone(batch.operations[0].records[0]);
            }
        });
    },
    createZone: function(record){
        var me = this, zone;
        zone = me.floorPlanZones.add(
            Ext.create('Ext.button.Split', {
                text: record.data.title,
                draggable: {
                    listeners: {
                        scope: me,
                        dragend: me.zoneDragged
                    }
                },
                scale: record.data.scale,
                style:{
                    'border-color':record.data.border_color,
                    'background-color':record.data.bg_color
                },
                x: record ? record.data.x : 5,
                y: record ? record.data.y : 5,
                width:record.data.width,
                height:record.data.height,
                scope:me,
                handler: me.onZoneHandler
            })
        );
        zone.record = record;
    },
    applyZoneConfig:function(zone, config){
        zone.setText(config.text);
        zone.getEl().applyStyles(config.style);
        zone.setScale(config.scale);
        zone.setSize(config.width, config.height);
    },
    moveZone: function(direction){
        if(app.currCardCmp == this && this.activeZone != null){
            var x = this.activeZone.x, y = this.activeZone.y;
            if(direction == 'left'){
                x = x - 1;
            }else if(direction == 'right'){
                x = x + 1;
            }else if(direction == 'up'){
                y = y - 1;
            }else if(direction == 'down'){
                y = y + 1;
            }
            this.activeZone.setPosition(x, y);
            this.activeZone.record.set({x:x,y:y});
        }
    },
    zoneDragged: function(drag){
        var zone = drag.comp;
        zone.record.set({
            x: zone.x,
            y: zone.y
        });
    },
    onNewFloorPlan: function(){
        this.floorPlansStore.add({});
    },
    onFloorPlanSelected: function(model, record){
        this.setEditMode(false);
        this.floorPlanId = record.data.id;
        this.reloadFloorPlanZones();
    },
    reloadFloorPlanZones: function(){
        var me = this;
        me.floorPlanZones.removeAll();
        me.floorZonesStore.load({
            params:{ floor_plan_id: this.floorPlanId },
            scope: me,
            callback: function(records, operation, success){
                me.setEditMode(false);
                for(var i = 0; i < records.length; i++) me.createZone(records[i]);
            }
        });
    },
    /**
     * This function is called from Viewport.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive: function(callback){
        var me = this;
        me.floorPlansStore.load({
            callback:function(){
                me.floorPlans.getSelectionModel().select(0);
            }
        });
        callback(true);
    }
});

Ext.define('App.view.administration.PreventiveCare',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelPreventiveCare',
	pageTitle : _('preventive_care'),
	uses : ['Ext.grid.Panel', 'App.ux.combo.CodesTypes', 'App.ux.combo.Titles'],
	initComponent : function()
	{
		var me = this;

		me.active = 1;
		me.dataQuery = '';
		me.category_id = '3';

		me.store = Ext.create('App.store.administration.PreventiveCare');
		me.activeProblemsStore = Ext.create('App.store.administration.PreventiveCareActiveProblems');
		me.medicationsStore = Ext.create('App.store.administration.PreventiveCareMedications');
		me.labsStore = Ext.create('App.store.administration.PreventiveCareLabs');

		function code_type(val)
		{
			if (val == '1')
			{
				return 'CPT4';
			}
			else
			if (val == '2')
			{
				return 'ICD9';
			}
			else
			if (val == '3')
			{
				return 'HCPCS';
			}
			else
			if (val == '100')
			{
				return 'CVX';
			}
			return val;
		}


		me.guidelineGrid = Ext.create('Ext.grid.Panel',
		{
			region : 'center',
			store : me.store,
			columns : [
			{
				xtype : 'actioncolumn',
				width : 30,
				items : [
				{
					icon : 'resources/images/icons/delete.png',
					tooltip : _('remove'),
					handler : function(grid, rowIndex, colIndex)
					{
						var rec = grid.getStore().getAt(rowIndex);
					},
					getClass : function()
					{
						return 'x-grid-icon-padding';
					}
				}]
			},

			{
				flex : 1,
				header : _('description'),
				sortable : true,
				dataIndex : 'description'
			},
			{
				width : 100,
				header : _('age_start'),
				sortable : true,
				dataIndex : 'age_start'
			},
			{
				width : 100,
				header : _('age_end'),
				sortable : true,
				dataIndex : 'age_end'
			},
			{
				width : 100,
				header : _('sex'),
				sortable : true,
				dataIndex : 'sex'
			},
			{
				width : 100,
				header : _('frequency'),
				sortable : true,
				dataIndex : 'frequency'
			}],
			plugins : Ext.create('App.ux.grid.RowFormEditing',
			{
				autoCancel : false,
				errorSummary : false,
				clicksToEdit : 1,
				listeners :
				{
					scope : me,
					beforeedit : me.beforeServiceEdit,
					edit : me.onServiceEdit,
					canceledit : me.onServiceCancelEdit

				},
				items : [
				{
					/**
					 * CVX Container
					 */
					xtype : 'tabpanel',
					action : _('immunizations'),
					layout : 'fit',
					plain : true,
					listeners :
					{
						scope : me,
						tabchange : me.onFormTapChange
					},
					items : [
					{
						title : _('general'),
						xtype : 'container',
						padding : 10,
						layout : 'vbox',
						items : [
						{
							/**
							 * line One
							 */
							xtype : 'fieldcontainer',
							layout : 'hbox',
							defaults :
							{
								margin : '0 10 5 0',
								action : 'field'
							},
							items : [
							{

								xtype : 'textfield',
								fieldLabel : _('description'),
								name : 'description',
								labelWidth : 130,
								width : 703
							},
							{
								xtype : 'gaiaehr.sexcombo',
								fieldLabel : _('sex'),
								name : 'sex',
								width : 100,
								labelWidth : 30

							},
							{
								fieldLabel : _('active'),
								xtype : 'checkboxfield',
								labelWidth : 75,
								name : 'active'
							}]
						},
						{
							/**
							 * Line two
							 */
							xtype : 'fieldcontainer',
							layout : 'hbox',
							defaults :
							{
								margin : '0 10 5 0',
								action : 'field'
							},
							items : [
							{
								xtype : 'mitos.codestypescombo',
								fieldLabel : _('coding_system'),
								labelWidth : 130,
								value : 'CVX',
								name : 'coding_system',
								readOnly : true

							},
							{
								xtype : 'numberfield',
								fieldLabel : _('frequency'),
								margin : '0 0 5 0',
								value : 0,
								minValue : 0,
								width : 150,
								name : 'frequency'

							},
							{
								xtype : 'mitos.timecombo',
								name : 'frequency_time',
								width : 100

							},
							{
								xtype : 'numberfield',
								fieldLabel : _('age_start'),
								name : 'age_start',
								labelWidth : 75,
								width : 140,
								value : 0,
								minValue : 0

							},
							{
								fieldLabel : _('must_be_pregnant'),
								xtype : 'checkboxfield',
								labelWidth : 105,
								name : 'pregnant'

							}]

						},
						{
							/**
							 * Line three
							 */
							xtype : 'fieldcontainer',
							layout : 'hbox',
							defaults :
							{
								margin : '0 10 5 0',
								action : 'field'
							},
							items : [
							{
								xtype : 'textfield',
								fieldLabel : _('code'),
								name : 'code',
								labelWidth : 130
							},
							{
								xtype : 'numberfield',
								fieldLabel : _('times_to_perform'),
								name : 'times_to_perform',
								width : 250,
								value : 0,
								minValue : 0,
								tooltip : _('greater_than_1_or_just_check_perform_once')

							},
							{

								xtype : 'numberfield',
								fieldLabel : _('age_end'),
								name : 'age_end',
								labelWidth : 75,
								width : 140,
								value : 0,
								minValue : 0

							},
							{
								fieldLabel : _('perform_only_once'),
								xtype : 'checkboxfield',
								labelWidth : 105,
								name : 'only_once'
							}]

						}]
					},
					{
						title : _('active_problems'),
						action : 'problems',
						xtype : 'grid',
						margin : 5,
						store : me.activeProblemsStore,
						columns : [

						{
							xtype : 'actioncolumn',
							width : 20,
							items : [
							{
								icon : 'resources/images/icons/delete.png',
								tooltip : _('remove'),
								scope : me,
								handler : me.onRemoveRelation
							}]
						},
						{
							header : _('code'),
							width : 100,
							dataIndex : 'code'
						},
						{
							header : _('description'),
							flex : 1,
							dataIndex : 'code_text'
						}],
						bbar :
						{
							xtype : 'liveicdxsearch',
							margin : 5,
							fieldLabel : _('add_problem'),
							hideLabel : false,
							listeners :
							{
								scope : me,
								select : me.addActiveProblem
							}
						}
					},
					{
						title : _('medications'),
						action : 'medications',
						xtype : 'grid',
						width : 300,
						store : me.medicationsStore,
						columns : [
						{
							xtype : 'actioncolumn',
							width : 20,
							items : [
							{
								icon : 'resources/images/icons/delete.png',
								tooltip : _('remove'),
								scope : me,
								handler : me.onRemoveRelation
							}]
						},
						{
							header : _('code'),
							width : 100,
							dataIndex : 'code'
						},
						{
							header : _('description'),
							flex : 1,
							dataIndex : 'code_text'
						}],
						bbar :
						{
							xtype : 'rxnormlivetsearch',
							margin : 5,
							fieldLabel : _('add_problem'),
							hideLabel : false,
							listeners :
							{
								scope : me,
								select : me.addMedications
							}
						}
					},
					{
						title : _('labs'),
						action : 'labs',
						xtype : 'grid',
						store : me.labsStore,
						width : 300,
						columns : [
						{
							xtype : 'actioncolumn',
							width : 20,
							items : [
							{
								icon : 'resources/images/icons/delete.png',
								tooltip : _('remove'),
								scope : me,
								handler : me.onRemoveRelation
							}]
						},
						{
							header : _('value_name'),
							flex : 1,
							dataIndex : 'value_name'
						},
						{
							header : _('less_than'),
							flex : 1,
							dataIndex : 'less_than',
							editor :
							{
								xtype : 'numberfield'
							}
						},
						{
							header : _('greater_than'),
							flex : 1,
							dataIndex : 'greater_than',
							editor :
							{
								xtype : 'numberfield'
							}
						},
						{
							header : _('equal_to'),
							flex : 1,
							dataIndex : 'equal_to',
							editor :
							{
								xtype : 'numberfield'
							}
						}],

						plugins : Ext.create('Ext.grid.plugin.CellEditing',
						{
							autoCancel : true,
							errorSummary : false,
							clicksToEdit : 2,
							listeners :
							{
								scope : me,
								edit : me.afterLabTimeEdit

							}
						}),
						bbar :
						{
							xtype : 'labslivetsearch',
							margin : 5,
							fieldLabel : _('add_labs'),
							hideLabel : false,
							listeners :
							{
								scope : me,
								select : me.addLabs
							}
						}
					}]

				}]
			}),

			tbar : me.PagingToolbar = Ext.create('Ext.PagingToolbar',
			{
				store : me.store,
				displayInfo : true,
				emptyMsg : _('no_office_notes_to_display'),
				plugins : Ext.create('Ext.ux.SlidingPager',
				{
				}),
				items : ['-',
				{
					xtype : 'mitos.preventivecaretypescombo',
					width : 150,
					listeners :
					{
						scope : me,
						select : me.onCodeTypeSelect
					}
				}]
			})
		});
		// END GRID

		me.pageBody = [me.guidelineGrid];
		me.callParent(arguments);
	},

	onServiceEdit : function(context, e)
	{

	},

	onServiceCancelEdit : function(context, e)
	{

	},

	afterLabTimeEdit : function(editor, e)
	{

	},

	beforeServiceEdit : function(context, e)
	{
		var editor = context.editor, grids = editor.query('grid');
		for (var i = 0; i < grids.length; i++)
		{
			grids[i].store.load(
			{
				params :
				{
					id : e.record.data.id
				}
			});
		}
	},

	onFormTapChange : function(panel, newCard, oldCard)
	{
		//say(newCard);
		//this.ImmuRelationStore.proxy.extraParams = { code_type: newCard.action, selected_id:this.getSelectId() };
		//this.ImmuRelationStore.load();
	},

	//	onSearch: function(field) {
	//		var me = this,
	//			store = me.store;
	//		me.dataQuery = field.getValue();
	//
	//		store.proxy.extraParams = {active: me.active, code_type: me.code_type, query: me.dataQuery};
	//		me.store.load();
	//	},

	onCodeTypeSelect : function(combo, record)
	{
		var me = this;
		me.category_id = record[0].data.option_value;
		if (me.category_id == 'dismiss')
		{

		}
		else
		{
			me.PagingToolbar.moveFirst();
			//            me.store.proxy.pageParam = 1;
			//            me.store.proxy.startParam = 0;
			me.store.proxy.extraParams =
			{
				category_id : me.category_id
			};
			me.store.load();
		}
	},

	//	onNew: function(form, model) {
	//		form.getForm().reset();
	//		var newModel = Ext.ModelManager.create({}, model);
	//		form.getForm().loadRecord(newModel);
	//	},

	addActiveProblem : function(field, model)
	{

		this.activeProblemsStore.add(
		{
			code : model[0].data.code,
			code_text : model[0].data.code_text,
			guideline_id : this.getSelectId()
		});
		field.reset();
	},
	addMedications : function(field, model)
	{
		this.medicationsStore.add(
		{

			code : model[0].data.id,
			code_text : model[0].data.PROPRIETARYNAME,
			guideline_id : this.getSelectId()
		});
		field.reset();

	},
	addLabs : function(field, model)
	{

		this.labsStore.add(
		{
			code : model[0].data.loinc_number,
			value_name : model[0].data.loinc_name,
			less_than : '0',
			greater_than : '0',
			equal_to : '0',
			preventive_care_id : this.getSelectId()
		});
		field.reset();

	},

	onRemoveRelation : function(grid, rowIndex, colIndex)
	{
		var me = this, store = grid.getStore(), record = store.getAt(rowIndex);
		store.remove(record);
	},

	getSelectId : function()
	{
		var row = this.guidelineGrid.getSelectionModel().getLastSelected();
		return row.data.id;
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function(callback)
	{
		this.guidelineGrid.query('combobox')[0].setValue(this.category_id);
		this.store.proxy.extraParams =
		{
			category_id : this.category_id
		};
		this.store.load();
		callback(true);
	}
});
//ens servicesPage class

Ext.define('App.model.administration.AclGroup', {
	extend: 'Ext.data.Model',
	table: {
		name: 'acl_groups'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'title',
			type: 'string'
		},
		{
			name: 'active',
			type: 'bool',
			index: true
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'ACL.getAclGroups',
			create: 'ACL.addAclGroup',
			update: 'ACL.updateAclGroup'
		},
		reader: {
			root: 'data'
		}
	}
});

Ext.define('App.store.administration.AclGroups', {
    model: 'App.model.administration.AclGroup',
    extend: 'Ext.data.Store'
});
Ext.define('App.view.administration.practice.Practice', {
	extend: 'App.ux.RenderPanel',
	xtype: 'practicepanel',
	pageTitle: _('practice_settings'),
	requires: [
		'App.view.administration.practice.Facilities',
		'App.view.administration.practice.FacilityConfig',
		'App.view.administration.practice.Laboratories',
		'App.view.administration.practice.Pharmacies',
		'App.view.administration.practice.ProviderNumbers',
		'App.view.administration.practice.ReferringProviders',
//		'App.view.administration.practice.Specialties'
	],
	pageBody: [
		{
			xtype: 'tabpanel',
			activeTab: 0,
			items: [
				{
					xtype: 'pharmaciespanel'
				},
				{
					xtype: 'laboratoriespanel'
				},
				{
					xtype: 'insurancecompaniespanel'
				},
				{
					xtype: 'providersnumberspanel'
				},
				{
					xtype: 'referringproviderspanel'
				},
//				{
//					xtype: 'specialtiespanel'
//				},
				{
					xtype: 'facilitiespanel'
				},
				{
					xtype: 'facilityconfigpanel'
				}
			]
		}
	]
});

Ext.define('App.view.administration.ExternalDataLoads', {
	extend: 'App.ux.RenderPanel',
	id: 'panelExternalDataLoads',
	pageTitle: _('external_data_loads'),
	/**
	 * define the layout 'accordion'
	 * and few more configs
	 */
	pageLayout: {
		type: 'accordion',
		animate: true,
		activeOnTop: true
	},
	initComponent: function(){
		var me = this;
		/**
		 * var stores is used to hold all the stores inside this class
		 * this way, if I want to reload all the stores at once, I can do it
		 * using a for loop
		 *
		 * see function loadStores()
		 *
		 * @type {Array}
		 */
		me.stores = [];

		me.stores.push(
			me.icd9Store = Ext.create('App.store.administration.ExternalDataLoads', {
				codeType: 'ICD9'
			})
		);
		me.stores.push(
			me.icd10Store = Ext.create('App.store.administration.ExternalDataLoads', {
				codeType: 'ICD10',
				groupField: 'version'
			})
		);
		me.stores.push(
			me.rxnormStore = Ext.create('App.store.administration.ExternalDataLoads', {
				codeType: 'RXNORM'
			})
		);
		me.stores.push(
			me.snomedStore = Ext.create('App.store.administration.ExternalDataLoads', {
				codeType: 'SNOMED'
			})
		);
		me.stores.push(
			me.hcpcsStore = Ext.create('App.store.administration.ExternalDataLoads', {
				codeType: 'HCPCS'
			})
		);


		/**
		 * Since all the grid are very similar I created a function that return a grid
		 */
		me.icd9Grid = me.getCodeGrid('Available ICD9 Data', me.icd9Store, false);
		me.icd10Grid = me.getCodeGrid('Available ICD10 Data', me.icd10Store, true);
		me.rxnormGrid = me.getCodeGrid('Available RxNorm Data', me.rxnormStore, false);
		me.snomedGrid = me.getCodeGrid('Available SNOMED Data', me.snomedStore, false);
		me.hcpcsGrid = me.getCodeGrid('Available HCPCS Data', me.hcpcsStore, false);

		/**
		 * Same thing with the forms
		 */
		me.icd9Form = me.getCodeForm('ICD9');
		me.icd10Form = me.getCodeForm('ICD10');
		me.rxnormForm = me.getCodeForm('RXNORM');
		me.snomedForm = me.getCodeForm('SNOMED');
		me.hcpcsForm = me.getCodeForm('HCPCS');

		/**
		 * Here are the panels used inside the accordion layout
		 */
		me.icd9 = Ext.create('Ext.form.Panel', {
			title: _('update_icd9'),
			layout: 'border',
			items: [me.icd9Grid, me.icd9Form]
		});

		me.icd10 = Ext.create('Ext.panel.Panel', {
			title: _('update_icd10'),
			layout: 'border',
			items: [me.icd10Grid, me.icd10Form]
		});

		me.rxnorm = Ext.create('Ext.panel.Panel', {
			title: _('update_rxnorm'),
			layout: 'border',
			items: [me.rxnormGrid, me.rxnormForm]
		});

		me.snomed = Ext.create('Ext.panel.Panel', {
			title: _('update_snomed'),
			layout: 'border',
			items: [me.snomedGrid, me.snomedForm]
		});
		me.hcpcs = Ext.create('Ext.panel.Panel', {
			title: _('update_hcpcs'),
			layout: 'border',
			items: [me.hcpcsGrid, me.hcpcsForm]
		});

		me.pageBody = [me.icd9, me.icd10, me.rxnorm, me.snomed, me.hcpcs];
		me.callParent(arguments);
	},

	getCodeForm: function(action){
		var me = this;
		return Ext.create('Ext.form.Panel', {
			bodyPadding: 10,
			region: 'center',
			action: action,
			frame: true,
			bodyStyle: 'background-color:white',
			bodyBorder: true,
			margin: '5 0 5 0',
			items: [
				{
					xtype: 'fieldset',
					styleHtmlContent: true,
					action: action,
					title: _('current_version_installed'),
					html: _('no_data_installed'),
					tpl: _('revision_name') + ':  {revision_name}<br>' + _('revision_number') + ':  {revision_number}<br>' + _('revision_version') + ': {revision_version}<br>' + _('revision_date') + ':    {revision_date}<br>' + _('imported_on') + ':      {imported_date}'
				},
				{
					xtype: 'fieldset',
					title: _('installation'),
					action: 'installation',
					styleHtmlContent: true,
					html: me.getInstallationDetails(action)
				},
				{
					xtype: 'fieldset',
					title: _('upload'),
					action: 'upload',
					items: [
						{

							xtype: 'filefield',
							name: 'filePath',
							buttonText: _('upload'),
							emptyText: _('data_file'),
							width: 350,
							labelWidth: 50,
							allowBlank: false
						}
					]
				}
			],
			api: {
				submit: 'ExternalDataUpdate.updateCodesWithUploadFile'
			},
			buttons: [
				{
					text: _('update'),
					action: action,
					scope: me,
					handler: me.uploadFile
				}
			]
		});
	},

	getCodeGrid: function(title, store, grouping){
		var me = this;
		return Ext.create('Ext.grid.Panel', {
			title: title,
			store: store,
			region: 'west',
			width: 500,
			margin: '5 0 5 0',
			padding: 0,
			split: true,
			columns: me.getDefaultColumns(),
			listeners: {
				scope: me,
				itemdblclick: me.onCodeDblClick
			},
			features: grouping ? [
				{
					ftype: 'grouping'
				}
			] : []
		});
	},

	getDefaultColumns: function(){
		return [
			{
				xtype: 'datecolumn',
				header: _('date'),
				dataIndex: 'date',
				format: g('date_display_format')
			},
			{
				header: _('version'),
				dataIndex: 'version'
			},
			{
				header: _('file'),
				dataIndex: 'basename',
				width: 300
			}
		];
	},

	getInstallationDetails: function(action){
		if(action == 'ICD9'){
			return '<p>Steps to install the ICD 9 data:</p>' +
				'<ol>' +
				'<li>The raw data feed release can be obtained from <a href="https://www.cms.gov/Medicare/Coding/ICD9ProviderDiagnosticCodes/codes.html">this location</a></li>' +
				'<li>Upload the downloaded .zip file, or place the downloaded ICD 9 database zip file into the following directory: contrib/icd9</li>' +
				'<li>Double Click the zip file from the "Available ICD9 Data" grid to install</li>' +
				'</ol>' +
				'<p style="color:red">NOTE: Importing external data can take more than an hour depending on your hardware configuration. For example, one of the RxNorm data tables contain in excess of 6 million rows.</p>'
		}
		else if(action == 'ICD10'){
			return '<p>Steps to install the ICD 10 data:</p>' +
				'<ol>' +
				'<li>The raw data feed release can be obtained from <a href="https://www.cms.gov/Medicare/Coding/ICD10">this location</a></li>' +
				'<li>Upload the downloaded .zip file, or place the downloaded ICD 10 database zip files into the following directory: contrib/icd10</li>' +
				'<li>Double Click the zip file from the "Available ICD10 Data" grid to install</li>' +
				'</ol>' +
				'<p>These are the ICD10 2012 links:</p>' +
				'<ol>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/DiagnosisGEMs_2012.zip">DiagnosisGEMs_2012</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/ProcedureGEMs_2012.zip">ProcedureGEMs_2012</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/ReimbursementMapping_2012.zip">ReimbursementMapping_2012</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/2012_PCS_long_and_abbreviated_titles.zip">2012_PCS_long_and_abbreviated_titles</a></li>' +
				'<li><a href="https://www.cms.gov/Medicare/Coding/ICD10/Downloads/ICD10OrderFiles_2012.zip">ICD10OrderFiles_2012</a></li>' +
				'</ol>' +
				'<p style="color:red">NOTE: Importing external data can take more than an hour depending on your hardware configuration. For example, one of the RxNorm data tables contain in excess of 6 million rows.</p>'
		}
		else if(action == 'RXNORM'){
			return '<p>Steps to install the RxNorm data:</p>' +
				'<ol>' +
				'<li>The first step is to open an account with the Unified Medical Language System web site <a href="https://utslogin.nlm.nih.gov/cas/login">here</a></li>' +
				'<li>Then the raw data feed release can be obtained from <a href="http://www.nlm.nih.gov/research/umls/rxnorm/docs/rxnormfiles.html">this location</a></li>' +
				'<li>Upload the downloaded .zip file, or place the downloaded RxNorm database zip file into the following directory: contrib/rxnorm.</li>' +
				'<li>Double Click the zip file from the "Available RxNorm Data" grid to install</li>' +
				'</ol>' +
				'<p style="color:red">NOTE: Only the full monthly RxNorm release is currently supported</p>'
		}
		else if(action == 'SNOMED'){
			return 'Lorem ipsum dolor sit amet, porta nam suscipit sed id, ' +
				'vestibulum velit tortor velit viverra, non enim justo, ' +
				'purus nec, libero sociis lobortis, eu et leo mauris velit. ' +
				'Magnis tellus blandit fringilla, morbi mauris commodo, nec morbi ac non'
		}
		else if(action == 'HCPCS'){
			return '<p>Steps to install the HCPCS data:</p>' +
				'<ol>' +
				'<li>The raw data feed release can be obtained from <a href="http://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets/Alpha-Numeric-HCPCS.html">this location</a></li>' +
				'<li>Upload the downloaded .zip file, or place the downloaded zip files into the following directory: contrib/hcpcs</li>' +
				'<li>Double Click the zip file from the "Available HCPCS Data" grid to install</li>' +
				'</ol>' +
				'<p>These is the HCPCS 2013 direct link:</p>' +
				'<ol>' +
				'<li><a href="http://www.cms.gov/Medicare/Coding/HCPCSReleaseCodeSets/Downloads/13anweb.zip">13anweb</a></li>' +
				'</ol>' +
				'<p style="color:red">NOTE: Importing external data can take more than an hour depending on your hardware configuration.</p>'
		}

	},

	uploadFile: function(btn){
		var me = this, form = btn.up('form').getForm();
		if(form.isValid()){
			form.submit({
				waitMsg: _('uploading_and_updating_code_database') + '...',
				scope: me,
				params: {
					codeType: btn.action
				},
				success: function(fp, o){
					//say(o.result);
				},
				failure: function(fp, o){
					//say(o.result);
				}
			});
		}
	},

	onCodeDblClick: function(grid, record){
		var me = this,
			log = app.log;

		log.ActivityMonitor(false);
		grid.el.mask(_('installing_database_please_wait') + '...');
		ExternalDataUpdate.updateCodes(record.data, function(provider, response){
			grid.el.unmask();
			if(response.result.success){
				me.setCurrentCodesInfo();
				me.alert(_('new_database_installed'), 'info');
			}
			else{
				me.alert(response.result.error, 'error');
			}
			log.ActivityMonitor(true);
		});
	},

	setCurrentCodesInfo: function(){
		var me = this, codes, fieldset;
		ExternalDataUpdate.getCurrentCodesInfo(function(provider, response){
			codes = response.result;
			for(var i = 0; i < codes.length; i++){
				if(codes[i].data !== false){
					fieldset = me.query('fieldset[action="' + codes[i].data.codeType + '"]')[0];
					fieldset.update(codes[i].data);
				}
			}
		});
	},

	loadStores: function(){
		var me = this;
		for(var i = 0; i < me.stores.length; i++){
			me.stores[i].load({
				params: {
					pid: me.pid
				}
			});
		}
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		this.loadStores();
		this.setCurrentCodesInfo();
		callback(true);
	}
});

Ext.define('App.view.miscellaneous.Amendments', {
	extend: 'App.ux.RenderPanel',
	requires: [
		'Ext.ux.SlidingPager'
	],
	itemId: 'AmendmentsPanel',
	pageTitle: _('amendments'),

	initComponent: function(){

		var me = this;

		me.controller = App.app.getController('miscellaneous.Amendments');

		me.pageBody = [
			{
				xtype:'grid',
				itemId: 'AmendmentsGrid',
				store: me.store = Ext.create('App.store.miscellaneous.Amendments',{
					remoteFilter: true,
					remoteSort: true,
					sorters:[
						{
							property: 'cancel_date',
							direction: 'DESC'
						}
					]
				}),
				columns:[
					{
						text: _('type'),
						width: 70,
						dataIndex: 'amendment_type',
						renderer: function(v, meta, record){
							var str;

							if(v === 'P'){
								str = _('patient');
							}else if(v === 'D'){
								str = _('doctor');
							}else if(v === 'O'){
								str = _('organization');
							}else{
								str = v;
							}

							return me.newRenderer(str, meta, record);
						}
					},
					{
						text: _('dates'),
						columns: [
							{
								text: _('received'),
								width: 130,
								dataIndex: 'create_date',
								renderer: me.dateNewRenderer
							},
							{
								text: _('responded'),
								width: 130,
								dataIndex: 'response_date',
								renderer: me.dateNewRenderer
							},
							{
								text: _('appended'),
								width: 130,
								dataIndex: 'response_date',
								renderer: function(v, meta, record){
									if(record.data.amendment_status == 'A'){
										return me.dateNewRenderer(v, meta, record);
									}else{
										return me.dateNewRenderer(null, meta, record);
									}
								}
							}
						]
					},
					{
						text: _('message'),
						flex: 1,
						dataIndex: 'amendment_message',
						renderer: me.newRenderer
					},
					{
						text: _('response_message'),
						flex: 1,
						dataIndex: 'response_message',
						renderer: me.newRenderer
					},
					{
						text: _('status'),
						width: 100,
						dataIndex: 'amendment_status',
						renderer: function(v, meta, record){
							var str;

							if(v === 'W'){
								str = _('waiting_response');
							}else if(v === 'A'){
								str = _('approved');
							}else if(v === 'D'){
								str = _('denied');
							}else if(v === 'C'){
								str = _('canceled');
							}else if(v === 'E'){
								str = _('error');
							}else{
								str = v;
							}

							me.controller.updateIsViewed(record);

							return me.newRenderer(str, meta, record);
						}
					},
					{
						text: _('approved_denied_by'),
						width: 200,
						dataIndex: 'responded_by',
						renderer: me.newRenderer
					}
				],
				bbar: {
					xtype: 'pagingtoolbar',
					pageSize: 25,
					store: me.store,
					displayInfo: true,
					plugins: new Ext.ux.SlidingPager()
				}
			}
		];

		me.callParent();
	},

	newRenderer: function(v, meta, record){
		if(!record.data.is_read){
			meta.style = 'font-weight:bold';
		}
		return v;
	},

	dateNewRenderer: function(v, meta, record){
		if(!record.data.is_read){
			meta.style = 'font-weight:bold';
		}
		return Ext.Date.format(v, g('date_time_display_format'));
	}

});

Ext.define('App.view.miscellaneous.MySettings',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelMySettings',
	pageTitle : _('my_settings'),
	uses : ['Ext.grid.Panel'],
	initComponent : function()
	{
		var panel = this;
		// *************************************************************************************
		// User Settings Form
		// Add or Edit purpose
		// *************************************************************************************
		panel.uSettingsForm = Ext.create('App.ux.form.Panel',
		{
			id : 'uSettingsForm',
			bodyStyle : 'padding: 10px;',
			cls : 'form-white-bg',
			frame : true,
			hideLabels : true,
			items : [
			{
				xtype : 'textfield',
				hidden : true,
				id : 'id',
				name : 'id'
			},
			{
				xtype : 'fieldset',
				title : _('appearance_settings'),
				collapsible : true,
				defaultType : 'textfield',
				layout : 'anchor',
				defaults :
				{
					labelWidth : 89,
					anchor : '100%',
					layout :
					{
						type : 'hbox',
						defaultMargins :
						{
							top : 0,
							right : 5,
							bottom : 0,
							left : 0
						}
					}
				},
				items : [
				{
					// fields
				},
				{

				},
				{

				}]
			},
			{
				xtype : 'fieldset',
				title : _('locale_settings'),
				collapsible : true,
				defaultType : 'textfield',
				layout : 'anchor',
				defaults :
				{
					labelWidth : 89,
					anchor : '100%',
					layout :
					{
						type : 'hbox',
						defaultMargins :
						{
							top : 0,
							right : 5,
							bottom : 0,
							left : 0
						}
					}
				},
				items : [
				{
					// fields
				},
				{

				},
				{

				}]
			},
			{
				xtype : 'fieldset',
				title : _('calendar_settings'),
				collapsible : true,
				defaultType : 'textfield',
				layout : 'anchor',
				defaults :
				{
					labelWidth : 89,
					anchor : '100%',
					layout :
					{
						type : 'hbox',
						defaultMargins :
						{
							top : 0,
							right : 5,
							bottom : 0,
							left : 0
						}
					}
				},
				items : [
				{
					// fields
				},
				{

				},
				{

				}]
			}],
			dockedItems : [
			{
				xtype : 'toolbar',
				dock : 'top',
				items : [
				{
					text : _('save'),
					iconCls : 'save',
					id : 'cmdSave',
					disabled : true,
					handler : function()
					{

					}
				}]
			}]
		});
		panel.pageBody = [panel.uSettingsForm];
		panel.callParent(arguments);
	},
	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function(callback)
	{
		callback(true);
	}
});
// End ExtJS

Ext.define('App.view.miscellaneous.OfficeNotes',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelOfficeNotes',
	pageTitle : _('office_notes'),
	pageLayout : 'border',
	initComponent : function()
	{
		var me = this;

		me.store = Ext.create('App.store.miscellaneous.OfficeNotes');

		me.form = Ext.create('Ext.form.FormPanel',
		{
			region : 'north',
			frame : true,
			height : 97,
			margin : '0 0 3 0',
			items : [
			{
				xtype : 'textareafield',
				allowBlank : false,
				grow : true,
				margin : 0,
				itemId : 'body',
				name : 'body',
				anchor : '100%',
				emptyText : _('type_new_note_here') + '...',
				listeners :
				{
					scope : me,
					validitychange : me.onValidityChange
				}
			}],
			dockedItems : [
			{
				xtype : 'toolbar',
				dock : 'top',
				items : [
				{
					text : _('save'),
					iconCls : 'save',
					itemId : 'cmdSave',
					disabled : true,
					scope : me,
					handler : me.onNoteSave
				}, '-',
				{
					text : _('hide_this_note'),
					iconCls : 'save',
					itemId : 'cmdHide',
					tooltip : _('hide_selected_office_note'),
					disabled : true,
					scope : me,
					handler : me.onNoteHide

				}, '-',
				{
					text : _('reset'),
					iconCls : 'save',
					itemId : 'cmdReset',
					disabled : true,
					scope : me,
					handler : me.onFormReset
				}]
			}]
		});

		me.grid = Ext.create('Ext.grid.Panel',
		{
			region : 'center',
			store : me.store,
			listeners :
			{
				scope : me,
				itemclick : me.onItemClick
			},
			columns : [
			{
				width : 150,
				header : _('date'),
				sortable : true,
				dataIndex : 'date',
				renderer : Ext.util.Format.dateRenderer('Y-m-d H:i:s')
			},
			{
				width : 150,
				header : _('user'),
				sortable : true,
				dataIndex : 'user'
			},
			{
				flex : 1,
				header : _('note'),
				sortable : true,
				dataIndex : 'body'
			}],
			tbar : Ext.create('Ext.PagingToolbar',
			{
				store : me.store,
				displayInfo : true,
				emptyMsg : _('no_office_notes_to_display'),
				plugins : Ext.create('Ext.ux.SlidingPager',
				{
				}),
				items : [
				{
					text : _('show_only_active_notes'),
					iconCls : 'save',
					enableToggle : true,
					pressed : true,
					handler : function()
					{
						//me.cmdShowAll.toggle(false);
						me.store.load(
						{
							params :
							{
								show : 'active'
							}
						});
					}
				}, '-',
				{
					text : _('show_all_notes'),
					iconCls : 'save',
					enableToggle : true,
					handler : function()
					{
						//me.cmdShow.toggle(false);
						me.store.load(
						{
							params :
							{
								show : 'all'
							}
						});
					}
				}]
			})
		});
		// END GRID
		me.pageBody = [me.form, me.grid];
		me.callParent(arguments);
	},

	onNoteSave : function(btn)
	{
		var form = btn.up('form').getForm(), store = this.store, record = form.getRecord(), values = form.getValues(), storeIndex = store.indexOf(record);
		if (storeIndex == -1)
		{
			store.add(values);
		}
		else
		{
			record.set(values);
		}
		store.sync();
		//store.load();
	},

	onNoteHide : function()
	{

	},

	onFormReset : function(btn)
	{
		var panel = this.form, form = panel.getForm(), toolbar = panel.down('toolbar'), savebtn = toolbar.getComponent('cmdSave'), hidebtn = toolbar.getComponent('cmdHide'), resetbtn = toolbar.getComponent('cmdReset');
		form.reset();
		savebtn.disable();
		hidebtn.disable();
		resetbtn.disable();
		savebtn.setText('Save');
	},

	onItemClick : function(grid, record)
	{
		var panel = this.form, form = panel.getForm(), toolbar = panel.down('toolbar'), savebtn = toolbar.getComponent('cmdSave'), hidebtn = toolbar.getComponent('cmdHide'), resetbtn = toolbar.getComponent('cmdReset');
		form.reset();
		form.loadRecord(record);
		savebtn.enable();
		hidebtn.enable();
		resetbtn.enable();
		savebtn.setText('Update');
	},

	onValidityChange : function()
	{
		var panel = this.form, textfield = panel.getComponent('body'), toolbar = panel.down('toolbar'), savebtn = toolbar.getComponent('cmdSave'), resetbtn = toolbar.getComponent('cmdReset');

		if (textfield.isValid())
		{
			savebtn.enable();
			resetbtn.enable();
		}
		else
		{
			savebtn.disable();
		}
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function(callback)
	{
		this.store.load(
		{
			params :
			{
				show : 'active'
			}
		});
		callback(true);
	}
});
//ens oNotesPage class

Ext.define('App.view.miscellaneous.Websearch',
{
	extend : 'App.ux.RenderPanel',
	id : 'panelWebsearch',
	pageTitle : _('national_library'),
	pageLayout : 'border',
	uses : ['Ext.grid.Panel'],
	initComponent : function()
	{

		var page = this;
		var search_type;
        var term;
		var rec;
		if (!Ext.ModelManager.isRegistered('webSearch'))
		{
            page.store = Ext.create('App.store.miscellaneous.webSearch');
            page.codingStore = Ext.create('Ext.data.Store',
            {
                fields: ['search', 'name'],
                data :
                    [
                        {"search":"code", "name":"Code"},
                        {"search":"term", "name":"Term"}
                    ]
            });
		}

		page.searchPanel = Ext.create('Ext.panel.Panel',
		{
			region : 'north',
			bodyPadding : '8 11 5 11',
			margin : '0 0 2 0',
			layout : 'anchor',
			items : [
			{
				xtype : 'radiogroup',
				fieldLabel : _('search_by'),
				items : [
                    {
                        boxLabel : _('heath_topics'),
                        name : 'type',
                        inputValue : 'health_topics'
                    },
                    {
                        boxLabel : 'SNOMED CT',
                        name : 'type',
                        inputValue : 'snomed'
                    },
                    {
                        boxLabel : 'RxCUI',
                        name : 'type',
                        inputValue : 'rxcui'
                    },
                    {
                        boxLabel : 'LOINC',
                        name : 'type',
                        inputValue : 'loinc'
                    },
                    {
                        boxLabel : 'NDC',
                        name : 'type',
                        inputValue : 'ndc'
                    },
                    {
                        boxLabel : 'ICD-9-CM',
                        name : 'type',
                        inputValue : 'icd9cm'
                    }
				],
				listeners :
				{
					change : function()
					{
						var value = this.getValue();
						search_type = value.type;
						page.searchField.enable();
						page.searchField.reset();
					}
				}
			},
            page.termField = Ext.create('Ext.form.ComboBox',
            {
                name: 'term',
                fieldLabel: _('code_term') + ':',
                store: page.codingStore,
                anchor : '100%',
                queryMode: 'local',
                displayField: 'name',
                valueField: 'search',
                editable: false,
                listeners:
                {
                    change: function()
                    {
                        term = this.getValue();
                    }
                }
            }),
            page.searchField = Ext.create('Ext.form.field.Text',
			{
				emptyText : _('web_search') + '...',
				enableKeyEvents : true,
				hideLabel : true,
				anchor : '100%',
				disabled : true,
				listeners :
				{
					keyup : function()
					{
						var query = this.getValue();
						if (query.length > 2)
						{
							page.store.load(
							{
								params :
								{
									type: search_type,
									q: query,
                                    term: term
								}
							});
						}
					},
					buffer : 500,
					focus : function()
					{
						page.viewPanel.collapse();
					}
				}
			}
            )]
		});
		page.searchRow = function(value, p, record)
		{
			return Ext.String.format('<div class="topic"><span class="search_title">{0}</span><br><span class="search_source">{1}</span><br><span class="search_snippet" style="white-space: normal;">{2}</span></div>', value, record.get('source') || "Unknown", record.get('snippet') || "Unknown");
		};
		page.onotesGrid = Ext.create('Ext.grid.Panel',
		{
			margin : '0 0 2 0',
			region : 'center',
			store : page.store,
			viewConfig :
			{
				deferEmptyText : false,
				emptyText : '<p class="search_nothing_found" style="padding: 10px 0 0 20px; font-size: 24px">' + _('nothing_found') + '!</p>',
				stripeRows : true,
				loadingText : _('searching') + '... ' + _('please_wait')
			},
			columns : [
			{
				flex : 1,
				header : _('search_results'),
				sortable : true,
				dataIndex : 'title',
				renderer : page.searchRow
			},
			{
				hidden : true,
				sortable : true,
				dataIndex : 'source'
			},
			{
				hidden : true,
				sortable : true,
				dataIndex : 'snippet'
			}],
			tbar : Ext.create('Ext.PagingToolbar',
			{
				store : page.store,
				displayInfo : true,
				emptyMsg : _('nothing_to_display'),
				plugins : Ext.create('Ext.ux.SlidingPager',
				{
				})
			}),
			listeners :
			{
				itemclick : function(DataView, record, item, rowIndex)
				{
					rec = page.store.getAt(rowIndex);
					page.viewPanel.update(rec.data);
                    page.viewPanel.expand();
				}
			}
		});
		// END GRID
		page.viewPanel = Ext.create('Ext.panel.Panel',
		{
			region : 'south',
			height : 300,
			collapsible : true,
			collapsed : true,
			layout : 'fit',
			frame : true,
			bodyBorder : true,
			tpl : Ext.create('Ext.XTemplate', '<div class="search_container">', '<div class="search_data">', '<h3 class="search_title">' + _('title') + ': {title}</h3>', '<h4 class="search_source">' + _('source') + ': {source}</h4>', '</div>', '<div class="search_body">{FullSummary}</div>', '</div>')
		});

		page.pageBody = [page.searchPanel, page.onotesGrid, page.viewPanel];
		page.callParent(arguments);
        page.termField.select('code');
	}, // end of initComponent
	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive : function(callback)
	{
		callback(true);
	}
});
//ens UserPage class

Ext.define('App.view.signature.SignatureWindow', {
	extend      : 'Ext.window.Window',
	title       : _('please_sign'),
	closeAction : 'hide',
	height      : 250,
	width       : 500,
	bodyStyle   : 'background-color:#fff',
	modal       : true,
    layout		: 'fit',
	initComponent: function() {
		var me = this;

        me.html = me.signature = '<iframe id="svgSignature" src="app/view/signature/signature.svg" height="100%" width="100%" scrolling="no" frameborder="0"></iframe>';

        me.buttons = [
            {
                text: _('save'),
                scope:me,
                handler:me.signatureSave
            },
            {
                text: _('reset'),
                scope:me,
                handler:me.signatureCancel
            }
        ];

		this.callParent(arguments);

	},

    signatureSave:function(){
        var svg = document.getElementById('svgSignature').contentWindow;
    },

    signatureCancel:function(){
        var svg = document.getElementById('svgSignature').contentWindow;
        svg.clearSignature();
        //this.close();
    }



});

Ext.define('App.store.miscellaneous.AddressBook', {
	model: 'App.model.miscellaneous.AddressBook',
	extend: 'Ext.data.Store'
});
Ext.define('App.store.patient.CarePlanGoals', {
	extend: 'Ext.data.Store',
	requires: [
		'App.model.patient.CarePlanGoal'
	],
	model: 'App.model.patient.CarePlanGoal'
});
Ext.define('App.store.patient.CognitiveAndFunctionalStatus', {
	extend: 'Ext.data.Store',
	requires: [
		'App.model.patient.CognitiveAndFunctionalStatus'
	],
	model: 'App.model.patient.CognitiveAndFunctionalStatus'
});
Ext.define('App.store.patient.SmokeStatus', {
	extend: 'Ext.data.Store',
	requires:['App.model.patient.SmokeStatus'],
	model: 'App.model.patient.SmokeStatus',
	remoteFilter: true
});



Ext.define('App.store.patient.PatientPossibleDuplicates', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.PatientPossibleDuplicate'
});
Ext.define('App.store.administration.ActiveProblems',
{
	model : 'App.model.administration.ActiveProblems',
	extend : 'Ext.data.Store',
	proxy :
	{
		type : 'direct',
		api :
		{
			read : Services.getActiveProblems,
			create : Services.addActiveProblems,
			destroy : Services.removeActiveProblems
		},
		reader :
		{
			totalProperty : 'totals',
			root : 'rows'
		}
	},
	autoLoad : false
});
Ext.define('App.store.administration.Applications', {
    model: 'App.model.administration.Applications',
    extend: 'Ext.data.Store',
    autoSync: true,
    autoLoad: false
});
Ext.define('App.store.administration.DefaultDocuments',
{
	model : 'App.model.administration.DefaultDocuments',
	extend : 'Ext.data.Store',
	proxy :
	{
		type : 'direct',
		api :
		{
			read : DocumentHandler.getDefaultDocumentsTemplates,
			create : DocumentHandler.addDocumentsTemplates,
			update : DocumentHandler.updateDocumentsTemplates
		}
	},
	autoSync : true,
	autoLoad : false

});
Ext.define('App.store.administration.DocumentsTemplates', {
	model: 'App.model.administration.DocumentsTemplates',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'DocumentHandler.getDocumentsTemplates',
			create: 'DocumentHandler.addDocumentsTemplates',
			update: 'DocumentHandler.updateDocumentsTemplates'
		}
	},
	autoSync: true,
	autoLoad: false
});
Ext.define('App.store.administration.DocumentToken', {
    model: 'App.model.administration.DocumentToken',
    extend: 'Ext.data.Store',
    data: [
        {
            title: _('patient_id'),
            token: '[PATIENT_ID]'
        },
        {
            title: _('patient_name'),
            token: '[PATIENT_NAME]'
        },
        {
            title: _('patient_full_name'),
            token: '[PATIENT_FULL_NAME]'
        },
        {
            title: _('patient_mothers_maiden_name'),
            token: '[PATIENT_MAIDEN_NAME]'
        },
        {
            title: _('patient_last_name'),
            token: '[PATIENT_LAST_NAME]'
        },
        {
            title: _('patient_birthdate'),
            token: '[PATIENT_BIRTHDATE]'
        },
        {
            title: _('patient_marital_status'),
            token: '[PATIENT_MARITAL_STATUS]'
        },
        {
            title: _('patient_home_phone'),
            token: '[PATIENT_HOME_PHONE]'
        },
        {
            title: _('patient_mobile_phone'),
            token: '[PATIENT_MOBILE_PHONE]'
        },
        {
            title: _('patient_work_phone'),
            token: '[PATIENT_WORK_PHONE]'
        },
        {
            title: _('patient_email'),
            token: '[PATIENT_EMAIL]'
        },
        {
            title: _('patient_social_security'),
            token: '[PATIENT_SOCIAL_SECURITY]'
        },
        {
            title: _('patient_sex'),
            token: '[PATIENT_SEX]'
        },
        {
            title: _('patient_age'),
            token: '[PATIENT_AGE]'
        },
        {
            title: _('patient_city'),
            token: '[PATIENT_CITY]'
        },
        {
            title: _('patient_state'),
            token: '[PATIENT_STATE]'
        },
        {
            title: _('patient_home_address_line_1'),
            token: '[PATIENT_HOME_ADDRESS_LINE_ONE]'
        },
        {
            title: _('patient_home_address_line_1'),
            token: '[PATIENT_HOME_ADDRESS_LINE_TWO]'
        },
        {
            title: _('patient_home_address_zip_code'),
            token: '[PATIENT_HOME_ADDRESS_ZIP_CODE]'
        },
        {
            title: _('patient_home_address_city'),
            token: '[PATIENT_HOME_ADDRESS_CITY]'
        },
        {
            title: _('patient_home_address_state'),
            token: '[PATIENT_HOME_ADDRESS_STATE]'
        },
        {
            title: _('patient_postal_address_line_1'),
            token: '[PATIENT_POSTAL_ADDRESS_LINE_ONE]'
        },
        {
            title: _('patient_postal_address_line_2'),
            token: '[PATIENT_POSTAL_ADDRESS_LINE_TWO]'
        },
        {
            title: _('patient_postal_address_zip_code'),
            token: '[PATIENT_POSTAL_ADDRESS_ZIP_CODE]'
        },
        {
            title: _('patient_postal_address_city'),
            token: '[PATIENT_POSTAL_ADDRESS_CITY]'
        },
        {
            title: _('patient_postal_address_state'),
            token: '[PATIENT_POSTAL_ADDRESS_STATE]'
        },
        {
            title: _('patient_tabacco'),
            token: '[PATIENT_TABACCO]'
        },
        {
            title: _('patient_alcohol'),
            token: '[PATIENT_ALCOHOL]'
        },
        {
            title: _('patient_drivers_license'),
            token: '[PATIENT_DRIVERS_LICENSE]'
        },
        {
            title: _('patient_employeer'),
            token: '[PATIENT_EMPLOYEER]'
        },
        {
            title: _('patient_first_emergency_contact'),
            token: '[PATIENT_FIRST_EMERGENCY_CONTACT]'
        },
        {
            title: _('patient_referral'),
            token: '[PATIENT_REFERRAL]'
        },
        {
            title: _('patient_date_referred'),
            token: '[PATIENT_REFERRAL_DATE]'
        },
        {
            title: _('patient_balance'),
            token: '[PATIENT_BALANCE]'
        },
        {
            title: _('patient_picture'),
            token: '[PATIENT_PICTURE]'
        },
        {
            title: _('patient_primary_plan'),
            token: '[PATIENT_PRIMARY_PLAN]'
        },
        {
            title: _('patient_primary_plan_insured_person'),
            token: '[PATIENT_PRIMARY_INSURED_PERSON]'
        },
        {
            title: _('patient_primary_plan_contract_number'),
            token: '[PATIENT_PRIMARY_CONTRACT_NUMBER]'
        },
        {
            title: _('patient_primary_plan_expiration_date'),
            token: '[PATIENT_PRIMARY_EXPIRATION_DATE]'
        },
        {
            title: _('patient_secondary_plan'),
            token: '[PATIENT_SECONDARY_PLAN]'
        },
        {
            title: _('patient_secondary_insured_person'),
            token: '[PATIENT_SECONDARY_INSURED_PERSON]'
        },
        {
            title: _('patient_secondary_plan_contract_number'),
            token: '[PATIENT_SECONDARY_CONTRACT_NUMBER]'
        },
        {
            title: _('patient_secondary_plan_expiration_date'),
            token: '[PATIENT_SECONDARY_EXPIRATION_DATE]'
        },
        {
            title: _('patient_referral_details'),
            token: '[PATIENT_REFERRAL_DETAILS]'
        },
        {
            title: _('patient_referral_reason'),
            token: '[PATIENT_REFERRAL_REASON]'
        },
        {
            title: _('patient_head_circumference'),
            token: '[PATIENT_HEAD_CIRCUMFERENCE]'
        },
        {
            title: _('patient_height'),
            token: '[PATIENT_HEIGHT]'
        },
        {
            title: _('patient_pulse'),
            token: '[PATIENT_PULSE]'
        },
        {
            title: _('patient_respiratory_rate'),
            token: '[PATIENT_RESPIRATORY_RATE]'
        },
        {
            title: _('patient_temperature'),
            token: '[PATIENT_TEMPERATURE]'
        },
        {
            title: _('patient_weight'),
            token: '[PATIENT_WEIGHT]'
        },
        {
            title: _('patient_pulse_oximeter'),
            token: '[PATIENT_PULSE_OXIMETER]'
        },
        {
            title: _('patient_blood_preasure'),
            token: '[PATIENT_BLOOD_PREASURE]'
        },
        {
            title: _('patient_body_mass_index'),
            token: '[PATIENT_BMI]'
        },
        {
            title: _('patient_active_allergies_list'),
            token: '[PATIENT_ACTIVE_ALLERGIES_LIST]'
        },
        {
            title: _('patient_inactive_allergies_list'),
            token: '[PATIENT_INACTIVE_ALLERGIES_LIST]'
        },
        {
            title: _('patient_active_medications_list'),
            token: '[PATIENT_ACTIVE_MEDICATIONS_LIST]'
        },
        {
            title: _('patient_inactive_medications_list'),
            token: '[PATIENT_INACTIVE_MEDICATIONS_LIST]'
        },
        {
            title: _('patient_active_problems_list'),
            token: '[PATIENT_ACTIVE_PROBLEMS_LIST]'
        },
        {
            title: _('patient_inactive_problems_list'),
            token: '[PATIENT_INACTIVE_PROBLEMS_LIST]'
        },
        {
            title: _('patient_active_immunizations_list'),
            token: '[PATIENT_ACTIVE_IMMUNIZATIONS_LIST]'
        },
        {
            title: _('patient_inactive_immunizations_list'),
            token: '[PATIENT_INACTIVE_IMMUNIZATIONS_LIST]'
        },
        {
            title: _('patient_active_dental_list'),
            token: '[PATIENT_ACTIVE_DENTAL_LIST]'
        },
        {
            title: _('patient_inactive_dental_list'),
            token: '[PATIENT_INACTIVE_DENTAL_LIST]'
        },
        {
            title: _('patient_active_surgery_list'),
            token: '[PATIENT_ACTIVE_SURGERY_LIST]'
        },
        {
            title: _('patient_inactive_surgery_list'),
            token: '[PATIENT_INACTIVE_SURGERY_LIST]'
        },
        {
            title: _('encounter_date'),
            token: '[ENCOUNTER_DATE]'
        },
        {
            title: _('encounter_subjective_part'),
            token: '[ENCOUNTER_SUBJECTIVE]'
        },
        {
            title: _('encounter_subjective_part'),
            token: '[ENCOUNTER_OBJECTIVE]'
        },
        {
            title: _('encounter_assessment'),
            token: '[ENCOUNTER_ASSESSMENT]'
        },
        {
            title: _('encounter_assessment_list'),
            token: '[ENCOUNTER_ASSESSMENT_LIST]'
        },
        {
            title: _('encounter_assessment_code_list'),
            token: '[ENCOUNTER_ASSESSMENT_CODE_LIST]'
        },
        {
            title: _('encounter_assessment_full_list'),
            token: '[ENCOUNTER_ASSESSMENT_FULL_LIST]'
        },
        {
            title: _('encounter_plan'),
            token: '[ENCOUNTER_PLAN]'
        },
        {
            title: _('encounter_medications'),
            token: '[ENCOUNTER_MEDICATIONS]'
        },
        {
            title: _('encounter_immunizations'),
            token: '[ENCOUNTER_IMMUNIZATIONS]'
        },
        {
            title: _('encounter_allergies'),
            token: '[ENCOUNTER_ALLERGIES]'
        },
        {
            title: _('encounter_active_problems'),
            token: '[ENCOUNTER_ACTIVE_PROBLEMS]'
        },
        {
            title: _('encounter_surgeries'),
            token: '[ENCOUNTER_SURGERIES]'
        },
        {
            title: _('encounter_dental'),
            token: '[ENCOUNTER_DENTAL]'
        },
        {
            title: _('encounter_laboratories'),
            token: '[ENCOUNTER_LABORATORIES]'
        },
        {
            title: _('encounter_procedures_terms'),
            token: '[ENCOUNTER_PROCEDURES_TERMS]'
        },
        {
            title: _('encounter_cpt_codes_list'),
            token: '[ENCOUNTER_CPT_CODES]'
        },
        {
            title: _('encounter_signature'),
            token: '[ENCOUNTER_SIGNATURE]'
        },
        {
            title: _('orders_laboratories'),
            token: '[ORDERS_LABORATORIES]'
        },
        {
            title: _('orders_x_rays'),
            token: '[ORDERS_XRAYS]'
        },
        {
            title: _('orders_referral'),
            token: '[ORDERS_REFERRAL]'
        },
        {
            title: _('orders_other'),
            token: '[ORDERS_OTHER]'
        },
        {
            title: _('current_date'),
            token: '[CURRENT_DATE]'
        },
        {
            title: _('current_time'),
            token: '[CURRENT_TIME]'
        },
        {
            title: _('current_user_name'),
            token: '[CURRENT_USER_NAME]'
        },
        {
            title: _('current_user_full_name'),
            token: '[CURRENT_USER_FULL_NAME]'
        },
        {
            title: _('current_user_license_number'),
            token: '[CURRENT_USER_LICENSE_NUMBER]'
        },
        {
            title: _('current_user_dea_license_number'),
            token: '[CURRENT_USER_DEA_LICENSE_NUMBER]'
        },
        {
            title: _('current_user_dm_license_number'),
            token: '[CURRENT_USER_DM_LICENSE_NUMBER]'
        },
        {
            title: _('current_user_npi_license_number'),
            token: '[CURRENT_USER_NPI_LICENSE_NUMBER]'
        },
        {
            title: _('referral_id'),
            token: '[REFERRAL_ID]'
        },
	    {
            title: _('referral_date'),
            token: '[REFERRAL_DATE]'
        },
	    {
            title: _('referral_reason'),
            token: '[REFERRAL_REASON]'
        },
	    {
            title: _('referral_diagnosis'),
            token: '[REFERRAL_DIAGNOSIS]'
        },
	    {
            title: _('referral_service_request'),
            token: '[REFERRAL_SERVICE]'
        },
	    {
            title: _('referral_risk_level'),
            token: '[REFERRAL_RISK_LEVEL]'
        },
	    {
            title: _('referral_by'),
            token: '[REFERRAL_BY_TEXT]'
        },
	    {
            title: _('referral_to'),
            token: '[REFERRAL_TO_TEXT]'
        }
    ]
});
Ext.define('App.store.administration.ExternalDataLoads',
	{
		model: 'App.model.administration.ExternalDataLoads',
		extend: 'Ext.data.Store',
		constructor: function(config){
			var me = this;
			me.proxy =
			{
				type: 'direct',
				api: {
					read: 'ExternalDataUpdate.getCodeFiles'
				},
				extraParams: {
					codeType: config.codeType
				}
			};
			me.callParent(arguments);
		},
		remoteSort: false,
		autoLoad: false
	});
Ext.define('App.store.administration.Facility', {
    model: 'App.model.administration.Facility',
    extend: 'Ext.data.Store',
    proxy: {
        type: 'direct',
        api: {
            read: 'Facilities.getFacilities',
            create: 'Facilities.addFacility',
            update: 'Facilities.updateFacility',
            destroy: 'Facilities.deleteFacility'
        }
    }
});
Ext.define('App.store.administration.FloorPlans', {
	model: 'App.model.administration.FloorPlans',
	extend: 'Ext.data.Store',
	autoSync: false,
	autoLoad: false
});
Ext.define('App.store.administration.FormListOptions', {
    model: 'App.model.administration.FormListOptions',
    extend: 'Ext.data.Store',
    autoLoad: false
});
Ext.define('App.store.administration.FormsList', {
    model: 'App.model.administration.FormsList',
    extend: 'Ext.data.Store',
    proxy: {
        type: 'direct',
        api: {
            read: FormLayoutBuilder.getForms
        }
    },
    autoSync: true,
    remoteSort: true,
    autoLoad: false
});
Ext.define('App.store.administration.Globals', {
	requires: [ 'App.model.administration.Globals' ],
    model: 'App.model.administration.Globals',
    extend: 'Ext.data.Store'
});
Ext.define('App.store.administration.HeadersAndFooters',
{
	model : 'App.model.administration.HeadersAndFooters',
	extend : 'Ext.data.Store',
	proxy :
	{
		type : 'direct',
		api :
		{
			read : DocumentHandler.getHeadersAndFootersTemplates,
			create : DocumentHandler.addDocumentsTemplates,
			update : DocumentHandler.updateDocumentsTemplates
		}
	},
	autoSync : true,
	autoLoad : false

});
Ext.define('App.store.administration.ImmunizationRelations', {
	model: 'App.model.administration.ImmunizationRelations',
	extend: 'Ext.data.Store',
	autoLoad: false,
	autoSync: true,
	remoteSort: false

});
Ext.define('App.store.administration.LabObservations', {
	model: 'App.model.administration.LabObservations',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'Laboratories.getLabObservations',
			create: 'Laboratories.addLabObservation',
			update: 'Laboratories.updateLabObservation',
			destroy: 'Laboratories.removeLabObservation'
		},
		writer: {
			writeAllFields: true
		}
	},
	autoSync: true,
	autoLoad: false
});
Ext.define('App.store.administration.LayoutTree', {
    model: 'App.model.administration.LayoutTree',
    extend: 'Ext.data.TreeStore',
    folderSort: false,
    autoLoad: false
});
Ext.define('App.store.administration.ListOptions', {
    model: 'App.model.administration.ListOptions',
    extend: 'Ext.data.Store',
	pageSize:300,
	remoteSort: true,
	sorters: [
		{
			property: 'seq',
			direction: 'ASC'
		}
	]
});
Ext.define('App.store.administration.Lists', {
    model: 'App.model.administration.Lists',
    extend: 'Ext.data.Store',
	pageSize:300,
	sorters: [
		{
			property: 'title',
			direction: 'ASC'
		}
	]
});
Ext.define('App.store.administration.AuditLog', {
    model: 'App.model.administration.AuditLog',
    extend: 'Ext.data.Store',
    autoLoad : false
});
Ext.define('App.store.administration.Medications',{
	model : 'App.model.administration.Medications',
	extend : 'Ext.data.Store',
	buffered: true,
	leadingBufferZone: 100,
	pageSize: 50,
	remoteFilter: true
});
Ext.define('App.store.administration.Modules', {
    model: 'App.model.administration.Modules',
    extend: 'Ext.data.Store'
});
Ext.define('App.store.administration.ParentFields', {
	model: 'App.model.administration.ParentFields',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'FormLayoutBuilder.getParentFields'
		}
	},
	autoLoad: false
});
Ext.define('App.store.administration.PreventiveCare', {
	model: 'App.model.administration.PreventiveCare',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'PreventiveCare.getGuideLinesByCategory',
			create: 'PreventiveCare.addGuideLine',
			update: 'PreventiveCare.updateGuideLine'
		},
		reader: {
			totalProperty: 'totals',
			root: 'rows'
		},
		extraParams: {
			code_type: this.code_type,
			query: this.query,
			active: this.active
		}
	},
	autoSync: true,
	remoteSort: false,
	autoLoad: false
});
Ext.define('App.store.administration.PreventiveCareActiveProblems', {
	model: 'App.model.administration.PreventiveCareActiveProblems',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'PreventiveCare.getGuideLineActiveProblems',
			create: 'PreventiveCare.addGuideLineActiveProblems',
			destroy: 'PreventiveCare.removeGuideLineActiveProblems'
		}
	},
	remoteSort: false,
	autoLoad: false
});
Ext.define('App.store.administration.PreventiveCareLabs', {
	model: 'App.model.administration.PreventiveCareLabs',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'PreventiveCare.getGuideLineLabs',
			create: 'PreventiveCare.addGuideLineLabs',
			destroy: 'PreventiveCare.removeGuideLineLabs',
			update: 'PreventiveCare.updateGuideLineLabs'
		}
	},
	remoteSort: false,
	autoLoad: false
});
Ext.define('App.store.administration.PreventiveCareMedications', {
	model: 'App.model.administration.PreventiveCareMedications',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'PreventiveCare.getGuideLineMedications',
			create: 'PreventiveCare.addGuideLineMedications',
			destroy: 'PreventiveCare.removeGuideLineMedications'
		}
	},
	remoteSort: false,
	autoLoad: false
});
Ext.define('App.store.administration.ProviderCredentializations', {
    model: 'App.model.administration.ProviderCredentialization',
    extend: 'Ext.data.Store'
});
Ext.define('App.store.administration.Services', {
	model: 'App.model.administration.Services',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'DataManager.getServices',
			create: 'DataManager.addService',
			update: 'DataManager.updateService'
		},
		reader: {
			totalProperty: 'totals',
			root: 'rows'
		},
		writer: {
			writeAllFields: true
		},
		extraParams: {
			code_type: this.code_type,
			query: this.query,
			active: this.active
		}
	},
	autoSync: true,
	remoteSort: true,
	autoLoad: false
});
Ext.define('App.store.administration.TransactionLogs', {
	model: 'App.model.administration.TransactionLog',
	extend: 'Ext.data.Store'

});
Ext.define('App.store.administration.User', {
    model: 'App.model.administration.User',
    extend: 'Ext.data.Store',
    autoLoad: false
});
Ext.define('App.view.administration.Layout', {
    extend: 'App.ux.RenderPanel',
    id: 'panelLayout',
    pageTitle: _('layout_form_editor'),
    pageLayout: 'border',
    initComponent: function(){
        var me = this;

        me.currForm = null;
        me.currField = null;

	    /**
	     *
	     * @type {App.store.administration.LayoutTree}
	     */
        me.fieldsGridStore = Ext.create('App.store.administration.LayoutTree');

        /**
         * Xtype Combobox store
         */
        me.fieldXTypesStore = Ext.create('App.store.administration.XtypesComboModel');

        /**
         * Forms grid store (left grid)
         */
        me.formsGridStore = Ext.create('App.store.administration.FormsList');

        /**
         * Field available on this form as parent items (fieldset / fieldcontainer )
         * use to get the "Child of" combobox data
         */
        me.parentFieldsStore = Ext.create('App.store.administration.ParentFields');

        /**
         * This are the select lists available to use for comboboxes
         * this lists can be created an modified at "Lists" administration panel.
         */
        me.selectListoptionsStore = Ext.create('App.store.administration.FormListOptions');

        /**
         * This grid only available if the field is a Combobox
         */
        me.selectListGrid = Ext.create('Ext.grid.Panel', {
            store: me.selectListoptionsStore,
            collapseMode: 'mini',
            height:200,
            split: true,
            border: false,
            titleCollapse: false,
            hideCollapseTool: true,
            collapsible: true,
            collapsed: true,
            columns: [
                {
                    text: _('name'),
                    flex: 1,
                    sortable: false,
                    dataIndex: 'option_name'
                },
                {
                    text: _('value'),
                    flex: 1,
                    sortable: false,
                    dataIndex: 'option_value'
                }
            ]
        });

        /**
         * form to create and modified the fields
         */
        me.fieldForm = Ext.create('Ext.form.Panel', {
            flex:2,
            border: false,
            autoScroll: true,
            fieldDefaults: {
                msgTarget: 'side',
                labelWidth: 100
            },
            defaults: {
                anchor: '100%'
            },
            items: [
                {
                    fieldLabel: _('type'),
                    xtype: 'combo',
                    name: 'xtype',
                    displayField: 'name',
                    valueField: 'value',
                    allowBlank: false,
                    editable: false,
                    store: me.fieldXTypesStore,
                    queryMode: 'local',
                    margin: '5 5 5 10',
                    itemId: 'xtype',
                    listeners: {
                        scope: me,
                        change: me.onXtypeChange
                    }
                },
                {
                    fieldLabel: _('child_of'),
                    xtype: 'combo',
                    name: 'parentId',
                    displayField: 'name',
                    valueField: 'value',
                    editable: false,
                    hideTrigger: true,
	                allowBlank: false,
                    store: me.parentFieldsStore,
                    queryMode: 'local',
                    margin: '5 5 5 10',
                    emptyText: 'None',
                    itemId: 'parentFields',
                    listeners: {
                        scope: me,
                        expand: me.onParentFieldsExpand
                    }
                },
                {
                    xtype: 'fieldset',
                    itemId: 'aditionalProperties',
                    title: _('aditional_properties'),
                    margin: '0 5 5 5',
                    defaults: {
                        anchor: '100%'
                    },
                    items: [
                        {
                            fieldLabel: _('title'),
                            xtype: 'textfield',
                            name: 'title',
                            itemId: 'title',
                            allowBlank: false,
                            hidden: true
                        },
                        {
                            fieldLabel: _('field_label'),
                            xtype: 'textfield',
                            name: 'fieldLabel',
                            itemId: 'fieldLabel',
                            hidden: true
                        },
                        {
                            fieldLabel: _('box_label'),
                            xtype: 'textfield',
                            name: 'boxLabel',
                            itemId: 'boxLabel',
                            allowBlank: false,
                            hidden: true
                        },
                        {
                            fieldLabel: _('label_width'),
                            xtype: 'textfield',
                            name: 'labelWidth',
                            itemId: 'labelWidth',
                            hidden: true
                        },
                        {
                            fieldLabel: _('hide_label'),
                            xtype: 'checkbox',
                            name: 'hideLabel',
                            itemId: 'hideLabel',
                            hidden: true
                        },
                        {
                            fieldLabel: _('empty_text'),
                            xtype: 'textfield',
                            name: 'emptyText',
                            itemId: 'emptyText',
                            hidden: true
                        },
                        {
                            fieldLabel: _('layout'),
                            xtype: 'textfield',
                            name: 'layout',
                            itemId: 'layout',
                            hidden: true
                        },
                        {
                            fieldLabel: _('name'),
                            xtype: 'textfield',
                            name: 'name',
                            itemId: 'name',
                            allowBlank: false,
                            hidden: true,
	                        listeners:{
		                        scope:me,
		                        change: me.onNameValueChange
	                        }
                        },
                        {
                            fieldLabel: _('input_value'),
                            xtype: 'textfield',
                            name: 'inputValue',
                            itemId: 'inputValue',
                            hidden: true
                        },
                        {
                            fieldLabel: _('width'),
                            xtype: 'textfield',
                            name: 'width',
                            itemId: 'width',
                            emptyText: 'ei. 5 for 5px',
                            hidden: true
                        },
                        {
                            fieldLabel: _('height'),
                            xtype: 'textfield',
                            name: 'height',
                            itemId: 'height',
                            emptyText: 'ei. 5 for 5px',
                            hidden: true
                        },
                        {
                            fieldLabel: _('anchor'),
                            xtype: 'textfield',
                            name: 'anchor',
                            itemId: 'anchor',
                            emptyText: 'ei. 100%',
                            hidden: true
                        },
                        {
                            fieldLabel: _('flex'),
                            xtype: 'checkbox',
                            name: 'flex',
                            itemId: 'flex',
                            hidden: true
                        },
                        {
                            fieldLabel: _('collapsible'),
                            xtype: 'checkbox',
                            name: 'collapsible',
                            itemId: 'collapsible',
                            hidden: true
                        },
                        {
                            fieldLabel: _('checkbox_toggle'),
                            xtype: 'checkbox',
                            name: 'checkboxToggle',
                            itemId: 'checkboxToggle',
                            hidden: true
                        },
                        {
                            fieldLabel: _('collapsed'),
                            xtype: 'checkbox',
                            name: 'collapsed',
                            itemId: 'collapsed',
                            hidden: true
                        },
                        {
                            fieldLabel: _('margin'),
                            xtype: 'textfield',
                            name: 'margin',
                            itemId: 'margin',
                            emptyText: 'ei. 5 5 5 5',
                            hidden: true
                        },
                        {
                            fieldLabel: _('column_width'),
                            xtype: 'textfield',
                            name: 'columnWidth',
                            itemId: 'columnWidth',
                            emptyText: 'ei. .5',
                            hidden: true
                        },
                        {
                            fieldLabel: _('is_required'),
                            xtype: 'checkbox',
                            name: 'allowBlank',
                            itemId: 'allowBlank',
                            hidden: true
                        },
                        {
                            fieldLabel: _('min_length'),
                            xtype: 'numberfield',
                            name: 'minLength',
                            itemId: 'minLength',
	                        minValue: 0,
                            hidden: true
                        },
                        {
                            fieldLabel: _('max_length'),
                            xtype: 'numberfield',
                            name: 'maxLength',
                            itemId: 'maxLength',
	                        minValue: 0,
                            hidden: true
                        },
                        {
                            fieldLabel: _('value'),
                            xtype: 'textfield',
                            name: 'value',
                            itemId: 'value',
                            hidden: true
                        },
                        {
                            fieldLabel: _('max_value'),
                            xtype: 'textfield',
                            name: 'maxValue',
                            itemId: 'maxValue',
                            hidden: true
                        },
                        {
                            fieldLabel: _('min_value'),
                            xtype: 'textfield',
                            name: 'minValue',
                            itemId: 'minValue',
                            hidden: true
                        },
                        {
                            fieldLabel: _('max_value'),
                            xtype: 'timefield',
                            name: 'maxValue',
                            itemId: 'timeMaxValue',
                            hidden: true
                        },
                        {
                            fieldLabel: _('min_value'),
                            xtype: 'timefield',
                            name: 'minValue',
                            itemId: 'timeMinValue',
                            hidden: true
                        },
                        {
                            fieldLabel: _('grow'),
                            xtype: 'checkbox',
                            name: 'grow',
                            itemId: 'grow',
                            hidden: true
                        },
                        {
                            fieldLabel: _('grow_min'),
                            xtype: 'textfield',
                            name: 'growMin',
                            itemId: 'growMin',
                            hidden: true
                        },
                        {
                            fieldLabel: _('grow_max'),
                            xtype: 'textfield',
                            name: 'growMax',
                            itemId: 'growMax',
                            hidden: true
                        },
                        {
                            fieldLabel: _('increment'),
                            xtype: 'textfield',
                            name: 'increment',
                            itemId: 'increment',
                            hidden: true
                        },
                        {
                            fieldLabel: _('list_options'),
                            xtype: 'mitos.listscombo',
                            name: 'list_id',
                            itemId: 'list_id',
                            hidden: true,
                            allowBlank: false,
                            listeners: {
                                scope: me,
                                change: me.onSelectListSelect
                            }
                        },
	                    {
		                    fieldLabel: _('code'),
		                    xtype: 'textfield',
		                    name: 'code',
		                    itemId: 'code',
		                    emptyText: 'ei. SNOMED:254687942 or ICD10:H25.091',
		                    hidden: true
	                    },
	                    {
		                    fieldLabel: _('item_id'),
		                    xtype: 'textfield',
		                    name: 'itemId',
		                    itemId: 'itemId',
		                    emptyText: 'sencha itemId',
		                    hidden: true
	                    },
	                    {
		                    fieldLabel: _('action'),
		                    xtype: 'textfield',
		                    name: 'action',
		                    itemId: 'action',
		                    emptyText: 'sencha action',
		                    hidden: true
	                    }
                    ]
                }
            ]
        });

        /**
         * this container holds the form and the select list grid.
         * remember that the select list grid only shows if
         * the field xtype is a combobox
         */
        me.formContainer = Ext.create('Ext.panel.Panel', {
            title: _('field_configuration'),
            border: true,
            split: true,
            width: 390,
            region: 'east',
            layout: {
                type:'vbox',
                align:'stretch'
            },
            bodyStyle: 'background-color:#fff!important',
            items: [
	            me.fieldForm,
	            me.selectListGrid
            ],
            buttons:[
                {
                    text: _('delete'),
                    iconCls: 'icoDeleteBlack',
                    scope: me,
                    handler: me.onFieldDelete
                },
                {
                    text: _('reset'),
                    iconCls: 'icoReload',
                    scope: me,
                    handler: me.onFormReset
                },
                {
                    text: _('save'),
                    iconCls: 'save',
                    scope: me,
                    handler: me.onFieldSave
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    items: [
                        '->',
                        {
                            text: _('add_new'),
                            iconCls: 'icoAddRecord',
                            scope: me,
                            handler: me.onFormReset
                        },
                        '-',
                        {
                            text: _('add_child'),
                            iconCls: 'icoAddRecord',
                            itemId: 'addChild',
                            disabled: true,
                            scope: me,
                            handler: me.onAddChild
                        },
                        '-',
                        {
                            text: _('form_preview'),
                            iconCls: 'icoPreview',
                            enableToggle: true,
                            listeners: {
                                scope: me,
                                toggle: me.onFormPreview
                            }
                        }
                    ]
                }
            ]
        });

        /**
         * This is the fields associated with the current Form selected
         */
        me.fieldsGrid = Ext.create('Ext.tree.Panel', {
            store: me.fieldsGridStore,
            region: 'center',
            border: true,
            sortable: false,
            rootVisible: false,
            title: _('field_editor_demographics'),
            viewConfig: {
                plugins: {
                    ptype: 'treeviewdragdrop',
	                expandDelay:0,
                    allowParentInsert: false
                },
                listeners: {
                    scope: me,
                    drop: me.onDragDrop,
	                itemkeydown: me.onFieldKeyDown
                }
            },
            columns: [
                {
                    xtype: 'treecolumn',
                    text: _('field_type'),
                    sortable: false,
                    dataIndex: 'xtype',
                    width: 200,
                    align: 'left'
                },
                {
                    text: _('title'),
                    sortable: false,
                    dataIndex: 'title',
                    width: 100,
                    align: 'left'
                },
                {
                    text: _('label'),
                    sortable: false,
                    dataIndex: 'fieldLabel',
                    flex: 1,
                    align: 'left'
                }
            ],
            listeners: {
                scope: me,
	            selectionchange: me.onFieldsGridSelectionChange
            }
        });

        /**
         * Form grid will show the available forms to modified.
         * the user will not have the options to create
         * forms, just to modified the fields of existing forms.
         */
        me.formsGrid = Ext.create('Ext.grid.Panel', {
            title: _('form_list'),
            region: 'west',
            store: me.formsGridStore,
            width: 200,
            border: true,
            split: true,
            hideHeaders: true,
            columns: [
                {
                    dataIndex: 'id',
                    hidden: true
                },
                {
                    flex: 1,
                    sortable: true,
                    dataIndex: 'name'
                }
            ],
            listeners: {
                scope: me,
                itemclick: me.onFormGridItemClick
            }
        });

        /**
         * this panel will render the current form to preview
         * all the changes done.
         */
        me.fromPreview = Ext.create('Ext.form.Panel', {
            region: 'south',
            height: 300,
            collapsible: true,
            titleCollapse: false,
            hideCollapseTool: true,
            collapsed: true,
            border: true,
            split: true,
            collapseMode: 'header',
            bodyStyle: 'padding: 5px',
            layout: 'anchor',
            fieldDefaults: {
                msgTarget: 'side'
            },
            tools: [
                {
                    itemId: 'refresh',
                    type: 'refresh',
                    scope: me,
                    handler: me.previewFormRender
                }
            ]
        });
        me.pageBody = [
	        me.fieldsGrid,
	        me.formsGrid,
	        me.formContainer,
	        me.fromPreview
        ];
        me.callParent(arguments);
    },

    /**
     * if the form is valid send the POST request
     */
    onFieldSave: function(){
        var me = this,
            form = me.fieldForm.getForm(),
            record = form.getRecord(),
            store = me.fieldsGridStore,
            parentNode = store.getNodeById(record.data.parentId) || store.getRootNode(),
            values = form.getValues();

        if(form.isValid()){

            values.form_id = record.data.form_id;
            values.leaf = (values.xtype != 'fieldcontainer' && values.xtype != 'fieldset');
            record.set(values);

            if(record.data.id == ''){
	            parentNode.appendChild(record);
            }

            me.fieldsGridStore.sync({
               success:function(batch, options){
                   me.previewFormRender();
                   me.loadCurrFormParentField();

	               //say(batch);
	               //say(options);

                   // this is the quick way to apply the return changes to the model
	               if(record.data.id == ''){
		               //say(batch.proxy.reader.rawData.id);
		               record.set({ id: batch.proxy.reader.rawData.id });
		               record.commit();
	               }

	               me.fieldsGrid.getSelectionModel().select(record);
                   me.msg('Sweet!', _('record_saved'));
               },
               failure:function(batch){

	               record.remove();

	               me.msg('Oops!', batch.proxy.reader.rawData.message, true);
                   me.loadFieldsGrid();
               }
           });
        }
    },

	/**
	 * Delete Field logic
	 * @param record
	 */
	deleteField:function(record){
		var me = this;

		//say(record.childNodes);

		if(record.childNodes.length > 0){
			me.msg(_('oops'), _('children_fields_must_be_remove_first'), true);
			return;
		}

		Ext.Msg.show({
			title: _('please_confirm') + '...',
			icon: Ext.MessageBox.QUESTION,
			msg: _('delete_this_field'),
			buttons: Ext.Msg.YESNO,
			scope: this,
			fn: function(btn){
				if(btn == 'yes'){
					record.remove();
					me.fieldsGridStore.sync({
						success:function(){
							me.previewFormRender();
							me.msg('Sweet!', _('record_removed'));
						},
						failure:function(batch){
							me.msg('Oops!', batch.proxy.reader.rawData.message, true);
							me.loadFieldsGrid();
						}
					});
				}
			}
		});
	},

	/**
	 *
	 * @param view
	 * @param record
	 * @param item
	 * @param idex
	 * @param e
	 */
	onFieldKeyDown:function(view, record, item, idex, e){
		if(e.getKey() == e.DELETE){
			this.deleteField(record);
		}
	},

    /**
     *
     */
    onFieldDelete: function(){
        var me = this,
	        form = me.fieldForm.getForm(),
	        record = form.getRecord();

	    me.deleteField(record);
    },

    /**
     *
     * @param node
     * @param data
     * @param overModel
     */
    onDragDrop: function(node, data, overModel){
        var me = this;

        me.fieldsGridStore.sync({
            success:function(){
                me.previewFormRender();
                me.msg(_('sweet'), _('field_updated'));
            },
            failure:function(batch){
                Ext.Msg.alert(_('oops'), batch.proxy.reader.rawData.error);
                me.loadFieldsGrid();
            }
        });
    },

    /**
     * This is to reset the Form and load
     * a new Model with the currForm id
     */
    onFormReset: function(){
        var me = this,
            formPanel = me.fieldForm,
            form = formPanel.getForm(),
            selection = me.fieldsGrid.getSelectionModel(),
	        record = Ext.create('App.model.administration.LayoutTree', {
		        form_id: me.currForm,
		        parentId: 'root'
	        });

	    selection.deselectAll();
        form.reset();
        form.loadRecord(record);
    },

	onNameValueChange:function(field, value){
		field.setDisabled(field.up('form').getForm().getRecord().data.id != 0);
	},

    /**
     *
     * load a new model with the form_id and parentId values.
     * This is the easy way to add a child to a fieldset or fieldcontainer.
     */
    onAddChild: function(){
        var me = this,
            formPanel = me.fieldForm,
            form = formPanel.getForm(),
            row = me.fieldsGrid.getSelectionModel();

        row.deselectAll();
        form.reset();

        form.loadRecord(
            Ext.create('App.model.administration.LayoutTree',{
                form_id: me.currForm,
                parentId: me.currField
            })
        );
    },

    /**
     *
     * This will load the current field data to the form,
     * set the currField, and enable the Add Child btn if
     * the field allows child items (fieldset or fieldcontainer)
     *
     * @param sm
     * @param records
     */
    onFieldsGridSelectionChange: function(sm, records){
        var me = this,
            formPanel = me.fieldForm,
            form = formPanel.getForm();

	    if(records.length > 0){
		    form.loadRecord(records[0]);
		    me.currField = records[0].data.id;
		    if(records[0].data.xtype == 'fieldset' || records[0].data.xtype == 'fieldcontainer'){
			    me.formContainer.down('toolbar').getComponent('addChild').enable();
		    }else{
			    me.formContainer.down('toolbar').getComponent('addChild').disable();
		    }
		    formPanel.el.unmask();
	    }else{
		    me.onFormReset();
	    }
    },

    /**
     *
     * @param DataView
     * @param record
     */
    onFormGridItemClick: function(DataView, record){
        var me = this;

        me.currForm = record.get('id');
        me.fieldsGrid.setTitle(_('field_editor') + ' (' + record.get('name') + ')');
        me.loadFieldsGrid();
        me.onFormReset();
    },

    /**
     *
     * This will load the Select List options. This Combobox shows only when
     * a Type of Combobox is selected
     *
     * @param combo
     * @param value
     */
    onSelectListSelect: function(combo, value){
        var me = this;

        me.selectListoptionsStore.load({
            params: {
                list_id: value
            }
        });
    },

    /**
     *
     * This is to handle a error when loading a combobox store.
     *
     * @param combo
     */
    onParentFieldsExpand: function(combo){
        combo.picker.loadMask.destroy();
    },

    /**
     * onXtypeChange will search the combo value and enable/disable
     * the fields appropriate for the xtype selected
     *
     * @param combo
     * @param value
     */
    onXtypeChange: function(combo, value){
        var me = this;

        if(value == 'combobox'){
            me.selectListGrid.setTitle(_('select_list_options'));
            me.selectListGrid.expand();
            me.selectListGrid.enable();
        }else{
            me.selectListGrid.setTitle('');
            me.selectListGrid.collapse();
            me.selectListGrid.disable();
        }

        /**
         *
         * @param searchStr
         */
        Array.prototype.find = function(searchStr){
            var returnArray = false;

            for(var i = 0; i < this.length; i++){
                if(typeof (searchStr) == 'function'){
                    if(searchStr.test(this[i])){
                        if(!returnArray){
                            returnArray = [];
                        }
                        returnArray.push(i);
                    }
                }else{
                    if(this[i] === searchStr){
                        if(!returnArray){
                            returnArray = [];
                        }
                        returnArray.push(i);
                    }
                }
            }

            return returnArray;
        };

        var addProp = me.fieldForm.getComponent('aditionalProperties');
        var is = addProp.items.keys;

        /**
         *
         * @param items
         */
        function enableItems(items){
            for(var i = 0; i < is.length; i++){
                if(!items.find(is[i])){
                    addProp.getComponent(is[i]).hide();
                    addProp.getComponent(is[i]).disable();
                }else{
                    addProp.getComponent(is[i]).show();
                    addProp.getComponent(is[i]).enable();
                }
            }
        }

        var items;
        if(value == 'fieldset'){
            items = [
                'itemId',
                'action',
                'title',
                'collapsible',
                'collapsed',
                'checkboxToggle',
                'margin',
                'columnWidth',
                'layout'
            ];
        }else if(value == 'fieldcontainer'){
            items = [
                'itemId',
                'action',
                'fieldLabel',
                'labelWidth',
                'hideLabel',
                'width',
                'layout',
                'margin',
                'columnWidth'
            ];
        }else if(value == 'combobox'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'emptyText',
                'fieldLabel',
                'hideLabel',
                'labelWidth',
                'margin',
                'allowBlank',
                'list_id'
            ];
        }else if(value == 'checkbox'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'boxLabel',
                'inputValue',
                'fieldLabel',
                'hideLabel',
                'labelWidth',
                'margin'
            ];
        }else if(value == 'textfield'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'anchor',
                'emptyText',
                'fieldLabel',
                'hideLabel',
                'labelWidth',
                'allowBlank',
                'margin',
                'minLength',
                'maxLength'
            ];
        }else if(value == 'textareafield'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'anchor',
                'height',
                'emptyText',
                'fieldLabel',
                'hideLabel',
                'labelWidth',
                'allowBlank',
                'grow',
                'growMin',
                'growMax',
                'margin',
                'minLength',
                'maxLength'
            ];
        }else if(value == 'numberfield'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'value',
                'emptyText',
                'maxValue',
                'minValue',
                'increment',
                'fieldLabel',
                'labelWidth',
                'hideLabel',
                'margin'
            ];
        }else if(value == 'timefield'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'value',
                'emptyText',
                'timeMaxValue',
                'timeMinValue',
                'increment',
                'fieldLabel',
                'labelWidth',
                'hideLabel',
                'margin'
            ];
        }else if(value == 'radiofield'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'boxLabel',
                'labelWidth',
                'hideLabel',
                'margin',
                'inputValue'
            ];
        }else if(value == 'datefield' || value == 'mitos.datetime'){
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'value',
                'layout',
                'emptyText',
                'fieldLabel',
                'labelWidth',
                'hideLabel',
                'allowBlank',
                'margin'
            ];
        }else if(value == 'checkboxwithfamilyhistory'){
	        items = [
                'itemId',
                'action',
                'name',
                'width',
                'boxLabel',
                'inputValue',
                'fieldLabel',
                'hideLabel',
                'labelWidth',
                'margin',
                'code'
            ];
        }else{
            items = [
                'itemId',
                'action',
                'name',
                'width',
                'emptyText',
                'fieldLabel',
                'labelWidth',
                'hideLabel',
                'margin'
            ];
        }
        enableItems(items);
    },

    /**
     *
     * On toggle down/true expand the preview panel and re-render the form
     *
     * @param btn
     * @param toggle
     */
    onFormPreview: function(btn, toggle){
        var me = this;

        if(toggle === true){
            me.fromPreview.expand(false);
            me.previewFormRender();
        }else{
            me.fromPreview.collapse(false);
        }
    },

    /**
     *
     *  this function re-render the preview form
     */
    previewFormRender: function(){
        var me = this,
	        form = this.fromPreview;

        if(form.collapsed !== true){
            form.el.mask();
            me.getFormItems(form, me.currForm, function(){
                form.el.unmask();
            });
        }

    },

    /**
     *
     *  re-load the fields grid (main TreeGrid)
     *  check if a form is selected, if not the select the first choice
     *  save the form id inside this.currForm and load the grid and the
     *  parent fields of this form.
     *
     *  parentFieldsStore is use to create the child of select list
     */
    loadFieldsGrid: function(){
        var me = this;

        me.fieldsGridStore.load({
            params: {
                currForm: me.currForm
            }
        });

        me.loadCurrFormParentField();
        me.previewFormRender();
        me.fieldsGrid.doLayout()
    },

    loadCurrFormParentField:function(){
	    var me = this;
	    me.parentFieldsStore.load({ params:{ currForm: me.currForm } });
    },

    /**
     * This function is called from Viewport.js when
     * this panel is selected in the navigation panel.
     * place inside this function all the functions you want
     * to call every this panel becomes active
     */
    onActive: function(callback){
        var me = this,
	        sm = me.formsGrid.getSelectionModel();

        if(me.currForm === null){
            me.formsGridStore.load({
	            filters:[
		            {
			            property:'active',
			            value:1
		            }
	            ],
                callback:function(records){
	                sm.select(records[0]);
	                me.currForm = records[0].data.id;
	                me.loadFieldsGrid();
	                me.onFormReset();
                }
            });
        }

        callback(true);
    }
});
Ext.define('App.store.administration.XtypesComboModel', {
	model: 'App.model.administration.XtypesComboModel',
	extend: 'Ext.data.Store',
	proxy: {
		type: 'direct',
		api: {
			read: 'CombosData.getFiledXtypes'
		}
	},
	autoLoad: true
});
Ext.define('App.store.miscellaneous.OfficeNotes', {
	extend    : 'Ext.data.Store',
	model     : 'App.model.miscellaneous.OfficeNotes',
	autoLoad  : false
});
Ext.define('App.store.miscellaneous.Amendments', {
	model: 'App.model.miscellaneous.Amendment',
	extend: 'Ext.data.Store'
});
Ext.define('App.store.account.VoucherLine', {
	extend: 'Ext.data.Store',
	model     : 'App.model.account.VoucherLine',
    remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.account.Voucher', {
	extend: 'Ext.data.Store',
	model     : 'App.model.account.Voucher',
    remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.fees.Billing',
{
	extend : 'Ext.data.Store',
	model : 'App.model.fees.Billing',
	autoLoad : false
});
Ext.define('App.store.fees.Checkout', {
	extend    : 'Ext.data.Store',
	model     : 'App.model.fees.Checkout',
	autoLoad  : false
});
Ext.define( 'App.store.fees.EncountersPayments',
{
	extend : 'Ext.data.Store',
	model : 'App.model.fees.EncountersPayments',
	autoLoad : false
} );

Ext.define( 'App.store.fees.PaymentTransactions',
{
	extend : 'Ext.data.Store',
	model : 'App.model.fees.PaymentTransactions',
	autoLoad : false
} );
Ext.define('App.store.navigation.Navigation', {
	extend  : 'Ext.data.TreeStore',
	requires: ['App.model.navigation.Navigation'],
	model   : 'App.model.navigation.Navigation'
});
Ext.define('App.store.patient.encounter.snippetTree', {
	model: 'App.model.patient.encounter.snippetTree',
	extend: 'Ext.data.TreeStore'
});
Ext.define('App.store.patient.encounter.Procedures', {
    model: 'App.model.patient.encounter.Procedures',
    extend: 'Ext.data.Store',
	autoLoad:false
});
Ext.define('App.store.patient.AdvanceDirectives', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.AdvanceDirective'
});
Ext.define('App.store.patient.CptCodes', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.CptCodes',
    remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.Dental', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Dental',
    remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.Disclosures', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Disclosures',
	remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.EncounterServices', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.EncounterService'
});
Ext.define('App.store.patient.Encounters', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.Encounter'],
	model: 'App.model.patient.Encounter',
	remoteSort: true
});
Ext.define('App.store.patient.CVXCodes', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.CVXCodes'],
	model: 'App.model.patient.CVXCodes',
	remoteSort: false,
	autoLoad: false
});



Ext.define('App.store.patient.ImmunizationCheck', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.ImmunizationCheck',
	remoteSort: true,
	autoLoad  : false
});


Ext.define('App.store.patient.LaboratoryTypes', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.LaboratoryTypes',
	remoteSort: false
});
Ext.define('App.store.patient.MeaningfulUseAlert', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.MeaningfulUseAlert',
	remoteSort: true,
	autoLoad  : false
});
Ext.define('App.store.patient.Notes', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Notes',
	remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.Patient', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Patient',
	remoteSort: true,
	autoLoad  : false
});
Ext.define('App.store.patient.PatientArrivalLog', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientArrivalLog',
	remoteSort: true,
	autoLoad  : false
});
Ext.define('App.store.patient.PatientCalendarEvents', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientCalendarEvents',
	remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.PatientDocuments', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientDocuments',
	remoteSort: false,
	autoLoad  : false,
	autoSync:true
});
Ext.define('App.store.patient.DismissedAlerts', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.DismissedAlerts',
    remoteSort: false,
	autoLoad  : false,
    autoSync  : true
});
Ext.define('App.store.patient.PatientLabsResults', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientLabsResults',
	remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.PatientsLabOrderItems', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientsLabOrderItems',
	remoteSort: false,
	autoLoad  : false
});



Ext.define('App.store.patient.PatientsOrderObservations', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.PatientsOrderObservation',
	remoteSort: false,
	autoLoad: false
});



Ext.define('App.store.patient.PatientsOrderResults', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.PatientsOrderResult',
	remoteSort: false,
	autoLoad: false
});



Ext.define('App.store.patient.PatientsPrescriptionMedications', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientsPrescriptionMedications',
	remoteSort: false,
	autoLoad  : false
});



Ext.define('App.store.patient.PatientsPrescriptions', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientsPrescriptions',
	remoteSort: false,
	autoLoad  : false
});



Ext.define('App.store.patient.PatientsXrayCtOrders', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PatientsXrayCtOrders',
	remoteSort: false,
	autoLoad  : false
});



Ext.define('App.store.patient.PreventiveCare', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.PreventiveCare',
	remoteSort: false,
	autoLoad  : false
});



Ext.define('App.store.patient.QRCptCodes', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.QRCptCodes',
	remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.Referrals', {
	extend: 'Ext.data.Store',
	model: 'App.model.patient.Referral',
	autoLoad: false
});



Ext.define('App.store.patient.Surgery', {
	extend: 'Ext.data.Store',
	model     : 'App.model.patient.Surgery',
	remoteSort: false,
	autoLoad  : false
});
Ext.define('App.store.patient.VectorGraph', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.VectorGraph'],
	model   : 'App.model.patient.VectorGraph'
});
Ext.define('App.store.patient.VisitPayment', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.VisitPayment'],
	model   : 'App.model.patient.VisitPayment'
});
Ext.define('App.store.patient.Vitals', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.Vitals'],
	pageSize: 10,
	model   : 'App.model.patient.Vitals'
});
Ext.define('App.store.patient.charts.BMIForAge', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.BMIForAge'],
	model   : 'App.model.patient.charts.BMIForAge'
});
Ext.define('App.store.patient.charts.HeadCircumferenceInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.HeadCircumferenceInf'],
	model   : 'App.model.patient.charts.HeadCircumferenceInf'
});
Ext.define('App.store.patient.charts.LengthForAgeInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.LengthForAgeInf'],
	model   : 'App.model.patient.charts.LengthForAgeInf'
});
Ext.define('App.store.patient.charts.StatureForAge', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.StatureForAge'],
	model   : 'App.model.patient.charts.StatureForAge'
});
Ext.define('App.store.patient.charts.WeightForAge', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForAge'],
	model   : 'App.model.patient.charts.WeightForAge'
});
Ext.define('App.store.patient.charts.WeightForAgeInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForAgeInf'],
	model   : 'App.model.patient.charts.WeightForAgeInf'
});
Ext.define('App.store.patient.charts.WeightForRecumbentInf', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForRecumbentInf'],
	model   : 'App.model.patient.charts.WeightForRecumbentInf'
});
Ext.define('App.store.patient.charts.WeightForStature', {
	extend: 'Ext.data.Store',
	requires: ['App.model.patient.charts.WeightForStature'],
	model   : 'App.model.patient.charts.WeightForStature'
});
Ext.define('App.store.areas.PatientAreas', {
	extend: 'Ext.data.Store',
	requires: ['App.model.areas.PatientArea'],
	model: 'App.model.areas.PatientArea',
	pageSize: 10
});
Ext.define('App.store.areas.PoolAreas', {
	extend: 'Ext.data.Store',
	requires: ['App.model.areas.PoolArea'],
	model: 'App.model.areas.PoolArea'
});
Ext.define('App.store.areas.PoolDropAreas', {
	extend: 'Ext.data.Store',
	requires: ['App.model.areas.PoolDropAreas'],
	pageSize: 10,
	model   : 'App.model.areas.PoolDropAreas'
});
Ext.define('App.controller.administration.AuditLog', {
	extend: 'Ext.app.Controller',

	requires: [

	],

	refs: [
		{
			ref: 'AuditLogPanel',
			selector: '#AuditLogPanel'
		},
		{
			ref: 'AuditLogGrid',
			selector: '#AuditLogGrid'
		},
		{
			ref: 'AuditLogGridFromDateField',
			selector: '#AuditLogGridFromDateField'
		},
		{
			ref: 'AuditLogGridToDateField',
			selector: '#AuditLogGridToDateField'
		},
		{
			ref: 'AuditLogGridPatientLiveSearch',
			selector: '#AuditLogGridPatientLiveSearch'
		},
		{
			ref: 'AuditLogGridFilterBtn',
			selector: '#AuditLogGridFilterBtn'
		},
		{
			ref: 'AuditLogGridResetBtn',
			selector: '#AuditLogGridResetBtn'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#AuditLogPanel': {
				activate: me.onAuditLogPanelActivate
			},
			'#AuditLogGrid': {
				itemdblclick: me.onAuditLogGridItemDblClick
			},
			'#AuditLogGridPatientLiveSearch': {
				select: me.onAuditLogGridPatientLiveSearchSelect
			},
			'#AuditLogGridFilterBtn': {
				click: me.onAuditLogGridFilterBtnClick
			},
			'#AuditLogGridResetBtn': {
				click: me.onAuditLogGridResetBtnClick
			}
		});

	},

	onAuditLogGridItemDblClick: function(grid, record){

		//say(record);

	},

	onAuditLogPanelActivate: function(panel){
		this.doFilterAuditGrid(panel.query('#AuditLogGridFilterBtn')[0]);
	},

	onAuditLogGridPatientLiveSearchSelect: function(){

	},

	onAuditLogGridFilterBtnClick: function(btn){
		this.doFilterAuditGrid(btn);
	},

	onAuditLogGridResetBtnClick: function(btn){
		btn.up('toolbar').query('#AuditLogGridFromDateField')[0].setRawValue('');
		btn.up('toolbar').query('#AuditLogGridToDateField')[0].setValue(new Date());
		btn.up('toolbar').query('#AuditLogGridPatientLiveSearch')[0].reset();
		this.doFilterAuditGrid(btn);
	},

	doFilterAuditGrid: function(btn){

		var fromField = btn.up('toolbar').query('#AuditLogGridFromDateField')[0],
			toField =  btn.up('toolbar').query('#AuditLogGridToDateField')[0],
			patient = btn.up('toolbar').query('#AuditLogGridPatientLiveSearch')[0].getValue(),
			store = btn.up('grid').getStore(),
			filters = [
				{
					property: 'date',
					operator: '>=',
					value: fromField.getRawValue() + ' 00:00:00'

				},
				{
					property: 'date',
					operator: '<=',
					value: toField.getRawValue() + ' 23:59:59'
				}
			];

		if(patient){
			Ext.Array.push(filters, {
				property: 'pid',
				value: patient
			});
		}

		if(fromField.isValid() && toField.isValid()){
			store.clearFilter(true);
			store.filter(filters);
		}


	}

});

Ext.define('App.controller.administration.CPT', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'CptAdminGrid',
			selector: 'cptadmingrid'
		},
		{
			ref: 'AdminCpt4CodeOnlyActiveBtn',
			selector: '#adminCpt4CodeOnlyActiveBtn'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'cptadmingrid': {
				activate: me.onCptAdminGridActive
			},
			'#adminCpt4CodeSearchField': {
				keyup: me.onAdminCpt4CodeSearchFieldKeyUp
			}
		});
	},

	onCptAdminGridActive: function(grid){
		grid.getStore().load();
	},

	onAdminCpt4CodeSearchFieldKeyUp: function(field){
		var me = this,
			store = me.getCptAdminGrid().getStore();
		me.dataQuery = field.getValue();
		store.proxy.extraParams = {
			onlyActive: me.getAdminCpt4CodeOnlyActiveBtn().pressed,
			query: me.dataQuery
		};

		store.loadPage(1);
	}

});
Ext.define('App.controller.administration.DataPortability', {
    extend: 'Ext.app.Controller',

	refs: [
		{
			ref:'DataPortabilityPanel',
			selector:'#DataPortabilityPanel'
		}
	],

	init: function() {
		var me = this;

		me.control({
			'#DataPortabilityExportBtn':{
				click: me.onDataPortabilityExportBtnClick
			}
		});

	},

	onDataPortabilityExportBtnClick: function(btn){

		var iframe = Ext.create('App.ux.ManagedIframe',{
			src: g('url') + '/dataProvider/DataPortability.php?token=' + app.user.token +'&site=' + g('site')
		});

		this.getDataPortabilityPanel().add(iframe);
		this.getDataPortabilityPanel().update(_('download_shortly'));
	}

});

Ext.define('App.controller.administration.FacilityStructure', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'FacilityStructurePanel',
			selector: '#FacilityStructurePanel'
		},
		{
			ref: 'FacilityStructureTreePanel',
			selector: '#FacilityStructureTreePanel'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#FacilityStructurePanel': {
				activate: me.onFacilityStructurePanelActivate
			}
		});

	},

	onFacilityStructurePanelActivate: function(){
		this.getFacilityStructureTreePanel().getStore().load();
	}

});
Ext.define('App.controller.administration.HL7', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'HL7ServersPanel',
			selector: 'hl7serverspanel'
		},
		{
			ref: 'HL7ServersGrid',
			selector: '#hl7serversgrid'
		},
		{
			ref: 'HL7ClientsGrid',
			selector: '#hl7clientsgrid'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'hl7serverspanel': {
				activate: me.onHL7ServersPanelActive
			},
			'#hl7serversgrid': {
				beforeedit: me.onHL7ServersGridBeforeEdit,
				validateedit: me.onHL7ServersGridValidateEdit
			},
			'#hl7serversgrid #addHL7ServerBtn': {
				click: me.onAddHL7ServerBtnClick
			},
			'#hl7serversgrid #removeHL7ServerBtn': {
				click: me.onRemoveHL7ServerBtnClick
			},
			'#hl7clientsgrid #addHL7ClientBtn': {
				click: me.onAddHL7ClientBtnClick
			},
			'#hl7clientsgrid #removeHL7ClientBtn': {
				click: me.onRemoveHL7ClientBtnClick
			}
		});

	},

	onAddHL7ServerBtnClick: function(){
		var me = this,
			grid = me.getHL7ServersGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {});
		grid.editingPlugin.startEdit(0, 0);
	},

	onAddHL7ClientBtnClick: function(){
		var me = this,
			grid = me.getHL7ClientsGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {});
		grid.editingPlugin.startEdit(0, 0);
	},

	onRemoveHL7ServerBtnClick: function(){

	},

	onRemoveHL7ClientBtnClick: function(){

	},

	serverStartHandler: function(record){
		HL7ServerHandler.start({ id: record.data.id, ip: record.data.ip, port: record.data.port }, function(provider, response){
			record.set({'online': response.result.online, token: response.result.token});
			record.commit();
		});
	},

	serverStopHandler: function(record){
		HL7ServerHandler.stop({ token: record.data.token, ip: record.data.ip, port: record.data.port }, function(provider, response){
			record.set({'online': response.result.online});
			record.commit();
		});
	},

	onHL7ServersPanelActive: function(){
		this.reloadStore();
	},

	reloadStore: function(){
		this.getHL7ServersGrid().getStore().load();
		this.getHL7ClientsGrid().getStore().load();
	},

	onHL7ServersGridBeforeEdit: function(plugin, e){
		var multiField = plugin.editor.query('multitextfield')[0],
			data = e.record.data.allow_ips;

		Ext.Function.defer(function(){
			multiField.setValue(data);
		}, 10);
	},

	onHL7ServersGridValidateEdit: function(plugin, e){
		var multiField = plugin.editor.query('multitextfield')[0],
			values = multiField.getValue();
		e.record.set({ allow_ips: values });
	}

});
Ext.define('App.controller.administration.DecisionSupport', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'DecisionSupportAdminPanel',
			selector: 'decisionSupportAdminPanel'
		},
		{
			ref: 'DecisionSupportAdminGrid',
			selector: '#decisionSupportAdminGrid'
		},
		{
			ref: 'DecisionSupportRuleAddBtn',
			selector: '#decisionSupportRuleAddBtn'
		},
		{
			ref: 'DecisionSupportEditorTabPanel',
			selector: '#decisionSupportEditorTabPanel'
		},

		// editor grids
		{
			ref: 'DecisionSupportProcGrid',
			selector: 'grid[action=PROC]'
		},
		{
			ref: 'DecisionSupportProBGrid',
			selector: 'grid[action=PROB]'
		},
		{
			ref: 'DecisionSupportSociGrid',
			selector: 'grid[action=SOCI]'
		},
		{
			ref: 'DecisionSupportMediGrid',
			selector: 'grid[action=MEDI]'
		},
		{
			ref: 'DecisionSupportAlleGrid',
			selector: 'grid[action=ALLE]'
		},
		{
			ref: 'DecisionSupportLabGrid',
			selector: 'grid[action=LAB]'
		},
		{
			ref: 'DecisionSupportVitaGrid',
			selector: 'grid[action=VITA]'
		},
		{
			ref: 'DecisionSupportVitalCombo',
			selector: '#DecisionSupportVitalCombo'
		},
		{
			ref: 'DecisionSupportSocialHistoryCombo',
			selector: '#DecisionSupportSocialHistoryCombo'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#decisionSupportAdminPanel': {
				activate: me.onDecisionSupportAdminPanelActive
			},
			'#decisionSupportRuleAddBtn': {
				click: me.onDecisionSupportRuleAddBtnClick
			},

			'#decisionSupportAdminGrid': {
				beforeedit: me.onDecisionSupportAdminGridBeforeEdit
			},

			'#DecisionSupportProcedureCombo': {
				select: me.onDecisionSupportProcedureComboSelect
			},
			'#DecisionSupportProblemCombo': {
				select: me.onDecisionSupportProblemComboSelect
			},
			'#DecisionSupportMedicationCombo': {
				select: me.onDecisionSupportMedicationComboSelect
			},
			'#DecisionSupportMedicationAllergyCombo': {
				select: me.onDecisionSupportMedicationAllergyComboSelect
			},
			'#DecisionSupportLabCombo': {
				select: me.onDecisionSupportLabComboSelect
			},
			'#DecisionSupportVitalAddBtn': {
				click: me.onDecisionSupportVitalAddBtnClick
			},
			'#DecisionSupportSocialHistoryAddBtn': {
				click: me.onDecisionSupportSocialHistoryAddBtnClick
			},
			'#DecisionSupportSocialHistoryCombo': {
				beforerender: me.onDecisionSupportSocialHistoryComboBeforeRender
			}
		});
	},

	onDecisionSupportAdminPanelActive: function(){
		this.getDecisionSupportAdminGrid().getStore().load();
	},

	onDecisionSupportRuleAddBtnClick: function(btn){
		var grid = btn.up('grid');

		grid.editingPlugin.cancelEdit();
		grid.getStore().insert(0, {
			create_date: new Date(),
			update_date: new Date(),
			create_uid: app.user.id,
			update_uid: app.user.id,
			active: 1
		});
		grid.editingPlugin.startEdit(0, 0);
	},

	onDecisionSupportAdminGridBeforeEdit: function(plugin, context){
		var editor = plugin.editor,
			record = context.record,
			grids = editor.query('grid'),
            grid,
            store,
            i;

		this.getDecisionSupportEditorTabPanel().setActiveTab(0);

		for(i = 0; i < grids.length; i++){
			grid = grids[i],
				store = grid.getStore();
			store.grid = grid;
			store.load({
				filters: [
					{
						property: 'rule_id',
						value: record.data.id
					},
					{
						property: 'concept_type',
						value: grid.action
					}
				],
				callback: function(records, operation, success){
					this.grid.setTitle(this.grid.initialConfig.title + ' (' + records.length + ')')
				}
			});
		}
	},

	onDecisionSupportProcedureComboSelect: function(cmb, records){
		var grid = cmb.up('grid'),
			store = grid.getStore(),
            foo;

		grid.editingPlugin.cancelEdit();
		foo = store.add({
			rule_id: this.getRuleId(),
			concept_type: grid.action,
			concept_code: records[0].data.code,
			concept_text: records[0].data.code_text,
			concept_code_type: records[0].data.code_type
		});
		grid.editingPlugin.startEdit(foo[0], 2);
	},

	onDecisionSupportProblemComboSelect: function(cmb, records){
		var grid = cmb.up('grid'),
			store = grid.getStore(),
            foo;

		grid.editingPlugin.cancelEdit();
		foo = store.add({
			rule_id: this.getRuleId(),
			concept_type: grid.action,
			concept_code: records[0].data.ConceptId,
			concept_text: records[0].data.FullySpecifiedName,
			concept_code_type: records[0].data.CodeType
		});
		grid.editingPlugin.startEdit(foo[0], 2);
	},

	onDecisionSupportMedicationComboSelect: function(cmb, records){
		var grid = cmb.up('grid'),
			store = grid.getStore(),
            foo;

		grid.editingPlugin.cancelEdit();
		foo = store.add({
			rule_id: this.getRuleId(),
			concept_type: grid.action,
			concept_code: records[0].data.RXCUI,
			concept_text: records[0].data.STR,
			concept_code_type: records[0].data.CodeType
		});
		grid.editingPlugin.startEdit(foo[0], 2);
	},

	onDecisionSupportMedicationAllergyComboSelect: function(cmb, records){
		var grid = cmb.up('grid'),
			store = grid.getStore(),
            foo;

		grid.editingPlugin.cancelEdit();
		foo = store.add({
			rule_id: this.getRuleId(),
			concept_type: grid.action,
			concept_code: records[0].data.RXCUI,
			concept_text: records[0].data.STR,
			concept_code_type: records[0].data.CodeType
		});
		grid.editingPlugin.startEdit(foo[0], 2);
	},

	onDecisionSupportLabComboSelect: function(cmb, records){
		var grid = cmb.up('grid'),
			store = grid.getStore(),
            foo;

		grid.editingPlugin.cancelEdit();
		foo = store.add({
			rule_id: this.getRuleId(),
			concept_type: grid.action,
			concept_code: records[0].data.loinc_number,
			concept_text: records[0].data.loinc_name,
			concept_code_type: 'LOINC'
		});
		grid.editingPlugin.startEdit(foo[0], 2);
	},

	onDecisionSupportVitalAddBtnClick: function(){
		var cmb = this.getDecisionSupportVitalCombo(),
			cmcStore = cmb.getStore(),
			record = cmcStore.findRecord('option_value', cmb.getValue()),
			grid = cmb.up('grid'),
			store = grid.getStore(),
            foo;

		grid.editingPlugin.cancelEdit();
		foo = store.add({
			rule_id: this.getRuleId(),
			concept_type: grid.action,
			concept_code: record.data.code,
			concept_text: record.data.option_name,
			concept_code_type: record.data.code_type
		});
		grid.editingPlugin.startEdit(foo[0], 2);
	},

	onDecisionSupportSocialHistoryAddBtnClick: function(){
		var cmb = this.getDecisionSupportSocialHistoryCombo(),
			cmcStore = cmb.getStore(),
			record = cmcStore.findRecord('option_value', cmb.getValue()),
			grid = cmb.up('grid'),
			store = grid.getStore(),
            foo;

		grid.editingPlugin.cancelEdit();
		foo = store.add({
			rule_id: this.getRuleId(),
			concept_type: grid.action,
			concept_code: record.data.code,
			concept_text: record.data.option_name,
			concept_code_type: record.data.code_type
		});
		grid.editingPlugin.startEdit(foo[0], 2);
	},

	onDecisionSupportSocialHistoryComboBeforeRender: function(cmb){
		cmb.getStore().on('load', function(store){
			store.insert(0,{
				code: 'smoking_status',
				option_name: _('smoking_status'),
				option_value: 'smoking_status',
				code_type: ''
			});
		});
	},

	getRuleId: function(){
		return this.getDecisionSupportEditorTabPanel().up('form').getForm().getRecord().data.id;
	},

	doRemoveRule: function(record){
		record.store.remove(record);
	},

	doRemoveRuleConcept: function(record){
		record.store.remove(record);
	}

});

Ext.define('App.controller.administration.Practice', {
    extend: 'Ext.app.Controller',

	refs: [
		{
			ref:'PracticePanel',
			selector:'practicepanel'
		}
	],

	init: function() {
		var me = this;

		me.control({
			'practicepanel grid':{
				activate: me.onPracticeGridPanelsActive
			},
			'practicepanel button[toggleGroup=insurance_number_group]':{
				toggle: me.onInsuranceNumberGroupToggle
			},
			'practicepanel toolbar > #addBtn':{
				click: me.onAddBtnClick
			}
		});

	},

	onPracticeGridPanelsActive: function(grid){
		grid.getStore().load();
	},

	onAddBtnClick: function(btn){
		var	grid = btn.up('grid'),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			active: 1
		});
		grid.editingPlugin.startEdit(0, 0);
	},


	onInsuranceNumberGroupToggle:function(btn, pressed){
		var grid = btn.up('grid');

		if(pressed) {
			grid.view.features[0].enable();
			grid.getStore().group(btn.action);
		}else{
			grid.view.features[0].disable();
		}
	}




});
Ext.define('App.controller.administration.ReferringProviders', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'ReferringProvidersPanel',
			selector: 'referringproviderspanel'
		},
		{
			ref: 'ReferringProviderAddBtn',
			selector: '#referringProviderAddBtn'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#referringProviderAddBtn': {
				click: me.onReferringProviderAddBtnClick
			}
		});

	},

	onReferringProviderAddBtnClick: function(btn){
		var grid = btn.up('grid');

		grid.editingPlugin.cancelEdit();
		grid.getStore().insert(0, {
			create_date: new Date(),
			update_date: new Date(),
			create_uid: app.user.id,
			update_uid: app.user.id,
			active: 1
		});
		grid.editingPlugin.startEdit(0, 0);
	}

});
Ext.define('App.controller.administration.Specialties', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'SpecialtiesPanel',
			selector: 'specialtiespanel'
		},
		{
			ref: 'SpecialtiesAddBtn',
			selector: '#specialtiesAddBtn'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#specialtiesAddBtn': {
				click: me.onSpecialtiesAddBtnClick
			}
		});

	},

	onSpecialtiesAddBtnClick: function(btn){
		var grid = btn.up('grid');

		grid.editingPlugin.cancelEdit();
		grid.getStore().insert(0, {
			create_date: new Date(),
			update_date: new Date(),
			create_uid: app.user.id,
			update_uid: app.user.id,
			active: 1
		});
		grid.editingPlugin.startEdit(0, 0);
	}

});
Ext.define('App.controller.administration.TemplatePanels', {
	extend: 'Ext.app.Controller',

	requires: [],

	refs: [
		{
			ref: 'TemplatePanelsWindow',
			selector: '#TemplatePanelsWindow'
		},
		{
			ref: 'TemplatePanelsGrid',
			selector: '#TemplatePanelsGrid'
		},
		{
			ref: 'TemplatePanelsCombo',
			selector: '#TemplatePanelsCombo'
		},
		{
			ref: 'SoapTemplatesBtn',
			selector: '#SoapTemplatesBtn'
		},
		{
			ref: 'encounterPanel',
			selector: '#encounterPanel'
		},
		{
			ref: 'soapPanel',
			selector: '#soapPanel'
		},
		{
			ref: 'soapForm',
			selector: '#soapForm'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'viewport': {
				encounterload: me.onEncounterLoad
			},
			'#soapPanel': {
				activate: me.onSoapPanelActivate,
				afterrender: me.onSoapPanelAfterRender
			},
			'#TemplatePanelsCombo': {
				select: me.onTemplatePanelsComboSelect
			},
			'#SoapTemplatesBtn': {
				click: me.onSoapTemplatesBtnClick
			},
			'#TemplatePanelsAddBtn': {
				click: me.onTemplatePanelsAddBtnClick
			},
			'#TemplatePanelsCancelBtn': {
				click: me.onTemplatePanelsCancelBtnClick
			}
		});

	},

	onEncounterLoad: function(encounter){

		if(!this.getTemplatePanelsWindow()){
			Ext.create('App.view.patient.windows.TemplatePanels');
		}

		var me = this,
			store = me.getTemplatePanelsCombo().getStore();

		store.load({
			filters: [
				{
					property: 'specialty_id',
					value: encounter.get('specialty_id')
				},
				{
					property: 'active',
					value: 1
				}
			]
		});
	},

	onSoapPanelAfterRender: function(){
		this.getSoapForm().getDockedItems('toolbar[dock="bottom"]')[0].insert(0,{
			xtype: 'button',
			text: _('templates'),
			itemId: 'SoapTemplatesBtn'
		});
	},

	onSoapPanelActivate: function(){
		var hasTemplates = this.getTemplatePanelsCombo().getStore().data.items.length > 0,
			btn = this.getSoapTemplatesBtn();

		if(hasTemplates){
			btn.disabled = false;
			btn.setDisabled(false);
			btn.setTooltip(_('clinical_templates'));
		}else{
			btn.disabled = true;
			btn.setDisabled(true);
			btn.setTooltip(_('no_templates_found'));
		}

	},

	onSoapTemplatesBtnClick: function(){
		this.doTemplatePanelsWindowShow();
	},

	onTemplatePanelsComboSelect: function(cmb, records){
		var me = this,
			grid = me.getTemplatePanelsGrid(),
			sm = grid.getSelectionModel(),
			store = records[0].templates();

		grid.reconfigure(store);
		store.load({
			callback: function(){
				sm.selectAll();
			}
		});
	},

	doTemplatePanelsWindowShow: function(){
		this.getTemplatePanelsGrid().getStore().removeAll();
		this.getTemplatePanelsCombo().reset();
		return this.getTemplatePanelsWindow().show();
	},

	onTemplatePanelsAddBtnClick: function(){
		var me = this,
			cmb = me.getTemplatePanelsCombo(),
			records = me.getTemplatePanelsGrid().getSelectionModel().getSelection();

		if(!cmb.isValid()) return;

		if(records.length === 0){
			app.msg(_('oops'), _('no_templates_to_add'), true);
			return;
		}

		Ext.Msg.show({
			title: _('wait'),
			msg: _('add_templates_message'),
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){
				if(btn == 'yes'){
					me.doAddTemplates(records);
					me.getTemplatePanelsWindow().close();
				}
			}
		});
	},

	doAddTemplates: function(templates){

		for(var i = 0; i < templates.length; i++){

			var type = templates[i].get('template_type'),
				data = eval('(' + templates[i].data.template_data + ')');

			if(!data) {
				say('Error: data eval issue -- ' + templates[i].data.template_data);
				continue;
			}

			switch (type){

				case 'LAB':
					App.app.getController('patient.LabOrders').doAddOrderByTemplate(data);
					break;
				case 'RAD':
					App.app.getController('patient.RadOrders').doAddOrderByTemplate(data);
					break;
				case 'RX':
					App.app.getController('patient.RxOrders').doAddOrderByTemplate(data);
					break;
				default:
					say('Error: no template_type found -- ' + type);
					continue;
					break;
			}
		}
	},

	onTemplatePanelsCancelBtnClick: function(){
		this.getTemplatePanelsWindow().close();
	}

});
Ext.define('App.controller.administration.Users', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'AdminUsersPanel',
			selector: '#AdminUsersPanel'
		},
		{
			ref: 'AdminUserGridPanel',
			selector: '#AdminUserGridPanel'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#AdminUserGridPanel': {
				beforeedit: me.onAdminUserGridPanelBeforeEdit
			},
			'#UserGridEditFormProviderCredentializationActiveBtn': {
				click: me.onUserGridEditFormProviderCredentializationActiveBtnClick
			},
			'#UserGridEditFormProviderCredentializationInactiveBtn': {
				click: me.onUserGridEditFormProviderCredentializationInactiveBtnClick
			}
		});

	},

	onAdminUserGridPanelBeforeEdit: function(plugin, context){
		var grid = plugin.editor.down('grid'),
			store = grid.getStore(),
			filters = [
				{
					property: 'provider_id',
					value: context.record.data.id
				}
			],
			params = {};

		store.clearFilter(true);
		if(context.record.data.id > 0 && context.record.data.npi != ''){
			params = {
				providerId: context.record.data.id,
				fullList: true
			};
			Ext.Array.push(filters, {
				property: 'provider_id',
				value: null
			});

		}

		store.load({
			filters: filters,
			params: params
		});
	},

	onUserGridEditFormProviderCredentializationActiveBtnClick: function(btn){
		var store = btn.up('grid').getStore(),
			records = store.data.items,
			now = Ext.Date.format(new Date(), 'Y-m-d');

		for(var i = 0; i < records.length; i++){
			records[i].set({
				start_date: now,
				end_date: '9999-12-31',
				active: true
			});
		}
	},

	onUserGridEditFormProviderCredentializationInactiveBtnClick: function(btn){
		var store = btn.up('grid').getStore(),
			records = store.data.items,
			date = new Date(),
			yesterday = Ext.Date.format(Ext.Date.subtract(date, Ext.Date.DAY, 1), 'Y-m-d');

		for(var i = 0; i < records.length; i++){
			records[i].set({
				start_date: yesterday,
				end_date: yesterday,
				active: false
			});
		}

	}
});
Ext.define('App.controller.areas.FloorPlan', {
	extend: 'Ext.app.Controller',
	refs: [
		{
			ref: 'FloorPlanPanel',
			selector: '#FloorPlanPanel'
		},
		{
			ref: 'FloorPlanPatientZonePanel',
			selector: '#FloorPlanPatientZonePanel'
		},
		{
			ref: 'FloorPlanAreasCombo',
			selector: '#FloorPlanAreasCombo'
		},
		{
			ref: 'FloorPlanPatientZoneDetailWindow',
			selector: '#FloorPlanPatientZoneDetailWindow'
		},
		{
			ref: 'FloorPlanPatientZoneDetailRemovePatientBtn',
			selector: '#FloorPlanPatientZoneDetailRemovePatientBtn'
		},
		{
			ref: 'FloorPlanPatientZoneAssignmentWindow',
			selector: '#FloorPlanPatientZoneAssignmentWindow'
		},
		{
			ref: 'FloorPlanPatientZoneAssignmentCombo',
			selector: '#FloorPlanPatientZoneAssignmentCombo'
		},
		{
			ref: 'FloorPlanPatientProviderAssignmentCombo',
			selector: '#FloorPlanPatientProviderAssignmentCombo'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#FloorPlanPanel': {
				activate: me.onFloorPlanPanelActivate,
				deactivate: me.onFloorPlanPanelDeactivate
			},
			'#FloorPlanPatientZoneDetailRemovePatientBtn': {
				click: me.onFloorPlanPatientZoneDetailRemovePatientBtnClick
			},
			'#FloorPlanAreasCombo': {
				select: me.onFloorPlanAreasComboSelect
			},
			'#FloorPlanPatientZoneAssignmentCancelBtn': {
				click: me.onFloorPlanPatientZoneAssignmentCancelBtnClick
			},
			'#FloorPlanPatientZoneAssignmentSaveBtn': {
				click: me.onFloorPlanPatientZoneAssignmentSaveBtnClick
			},
			'#FloorPlanPatientZoneAssignmentCombo': {
				beforeselect: me.onFloorPlanPatientZoneAssignmentComboBeforeSelect
			}
		});

		me.floorPlanZonesStore = Ext.create('App.store.administration.FloorPlanZones');

	},

	onFloorPlanPanelActivate: function(){
		if(this.getFloorPlanAreasCombo().getValue() == null){
			this.renderZones();
		}else{
			this.setZones();
		}
	},

	onFloorPlanPanelDeactivate: function(){
		if(this.getFloorPlanPatientZoneDetailWindow()){
			this.getFloorPlanPatientZoneDetailWindow().close();
		}
	},

	onFloorPlanPatientZoneDetailRemovePatientBtnClick: function(btn){
		var me = this,
			win = btn.up('window');
		me.unAssignPatient(win.zone, win.zone.data);
		win.close();
	},

	onFloorPlanAreasComboSelect: function(cmb, records){
		var me = this;
		me.loadZones(records[0], function(){
			me.setZones();
		});
	},

	renderZones: function(){
		var me = this,
			cmb = me.getFloorPlanAreasCombo();

		cmb.getStore().load({
			callback: function(records){
				if(records.length > 0){
					cmb.setValue(records[0].data.id);
					me.onFloorPlanAreasComboSelect(cmb, records);
				}else{
					cmb.setValue('');
					me.getFloorPlanPatientZonePanel().removeAll();
				}
			}
		});
	},

	createZone: function(record){
		var me = this, zone;

		zone = me.getFloorPlanPatientZonePanel().add({
			xtype: 'splitbutton',
			text: record.data.title,
			scale: record.data.scale,
			itemId: record.data.id,
			style: {
				'border-color': record.data.border_color,
				'background-color': record.data.bg_color
			},
			x: record.data.x,
			y: record.data.y,
			width: record.data.width,
			height: record.data.height,
			scope: me,
			handler: me.onZoneClicked,
			tooltip: _('patient_name') + ': [empty]',
			listeners: {
				scope: me,
				render: me.initializeZone,
				arrowclick: me.onZoneArrowClicked
			},
			// patient zone specific reference data --->
			pid: null,
			zoneId: record.data.id,
			priority: null,
			patientZoneId: null
			// <---
		});

		zone.record = record;
	},

	loadZones: function(cmbRecord, callback){
		var me = this;
		me.getFloorPlanPatientZonePanel().removeAll();
		me.floorPlanZonesStore.load({
			params: {
				floor_plan_id: cmbRecord.data.id
			},
			scope: me,
			callback: function(records, operation, success){
				for(var i = 0; i < records.length; i++){
					me.createZone(records[i]);
				}
				callback();
			}
		});
	},

	initializeZone: function(panel){
		var me = this;
		panel.dragZone = Ext.create('Ext.dd.DragZone', panel.getEl(), {
			ddGroup: 'patientPoolAreas',

			getDragData: function(e){
				var sourceEl = panel.btnEl.dom, d;
				if(sourceEl){
					d = sourceEl.cloneNode(true);
					d.id = Ext.id();
					return panel.dragData = {
						sourceEl: sourceEl,
						repairXY: Ext.fly(sourceEl).getXY(),
						ddel: d,
						patientData: panel.data,
						zone: panel
					};
				}else{
					return false;
				}
			},

			getRepairXY: function(e){
				return this.dragData.repairXY;
			},

			b4MouseDown: function(e){
				this.autoOffset(e.getPageX(), e.getPageY());
			}
		});

		panel.dragZone.lock();

		panel.dropZone = Ext.create('Ext.dd.DropZone', panel.getEl(), {
			ddGroup: 'patientPoolAreas',

			notifyOver: function(dd, e, data){
				if(panel.pid == null){
					return Ext.dd.DropZone.prototype.dropAllowed;
				}else{
					return Ext.dd.DropZone.prototype.dropNotAllowed;
				}
			},

			notifyDrop: function(dd, e, data){
				panel.data = data.patientData;
				if(data.zone){
					me.unAssignPatient(data.zone, panel.data);
				}
				me.assignPatient(panel, panel.data);
			}
		});
	},

	onZoneClicked: function(btn){
		app.setPatient(btn.data.pid, btn.data.name, null, function(){
			btn.data.eid ? app.openEncounter(btn.data.eid) : app.openPatientSummary();
		});
	},

	onZoneArrowClicked: function(zone){
		var me = this;

		if(!me.getFloorPlanPatientZoneDetailWindow()){
			Ext.create('Ext.Window', {
				width: 300,
				closeAction: 'hide',
				itemId: 'FloorPlanPatientZoneDetailWindow',
				tpl: new Ext.XTemplate(
					'<div class="zoneSummaryContainer">' +
					'   <div class="zoneSummaryArea">' +
					'       <tpl if="this.patientImg(image)">',
					'           <img src="{image}" height="96" width="96">' +
					'       <tpl else>',
					'           <img src="' + app.patientImage + '" height="96" width="96">',
					'       </tpl>',
					'       <p>Name: {name}</p>' +
					'       <p>DOB: {DOB}</p>' +
					'       <p>Age: {age.str}</p>' +
					'       <p>Sex: {sex}</p>' +
					'   </div>' +
					'</div>',
					{
						patientImg: function(image){
							return image != null && image != '';
						}
					}
				),
				buttons: [
					{
						text: _('remove_patient'),
						itemId: 'FloorPlanPatientZoneDetailRemovePatientBtn'
					}
				]
			});
		}

		if(zone.data){
			var win = me.getFloorPlanPatientZoneDetailWindow();

			win.zone = zone;
			win.update(zone.data.patient);
			win.show();
			win.alignTo(zone.getEl(), 'tl-tr?');
			win.focus();
		}
	},

	assignPatient: function(zone, data){
		var me = this,
			params = {
				zone_id: zone.zoneId,
				pid: data.pid
			};

		PatientZone.addPatientToZone(params, function(response){
			data.patientZoneId = response.data.id;
			app.msg('Sweet!', data.name + ' ' + _('successfully_moved') + '.');
			me.setZone(zone, data);
		});
	},

	unAssignPatient: function(zone, data){
		var me = this;
		PatientZone.removePatientFromZone({id: data.patientZoneId}, function(){
			me.unSetZone(zone)
		});
	},

	setZone: function(zone, data){
		zone.pid = data.pid;
		zone.priority = data.priority;
		zone.patientZoneId = data.patientZoneId;

		if(zone.dropZone) zone.dropZone.lock();
		if(zone.dragZone) zone.dragZone.unlock();

		zone.setTooltip(_('patient_name') + ':' + data.name);
		zone.addCls(data.priority);
		zone.addCls('zone-in-use');
		zone.data = data;
	},

	unSetZone: function(zone){
		zone.pid = null;
		zone.data = null;
		if(zone.dropZone) zone.dropZone.unlock();
		if(zone.dragZone) zone.dragZone.lock();
		zone.setTooltip(_('patient_name') + ': [empty]');
		zone.removeCls(zone.priority);
		zone.removeCls('zone-in-use');
		zone.data = null;
	},

	setZones: function(){
		var me = this,
			panel = me.getFloorPlanPatientZonePanel(),
			floorPlanId = me.getFloorPlanAreasCombo().getValue(),
			zones = panel.items.items,
			zone,
			data;

		PatientZone.getPatientsZonesByFloorPlanId(floorPlanId, function(response){

			zones = panel.items.items;
			data = response;

			for(var j = 0; j < zones.length; j++){
				me.unSetZone(zones[j]);
			}

			for(var i = 0; i < data.length; i++){
				zone = panel.getComponent(data[i].zoneId);
				zone.data = data[i];
				me.setZone(zone, data[i]);
			}
		})
	},

	setFloorPlan: function(floorPlanId){

	},

	promptPatientZoneAssignment: function(pid, floorPlanId){
		var me = this;

		if(!me.getFloorPlanPatientZoneAssignmentWindow()){

			Ext.create('Ext.window.Window', {
				title: _('patient_zone_assignment'),
				itemId: 'FloorPlanPatientZoneAssignmentWindow',
				items: [
					{
						xtype: 'combobox',
						width: 300,
						margin: 10,
						itemId: 'FloorPlanPatientZoneAssignmentCombo',
						queryMode: 'local',
						valueField: 'id',
						displayField: 'display',
						fieldLabel: _('zone'),
						labelAlign: 'top',
						editable: false,
						store: Ext.create('Ext.data.Store', {
							sorters: [
								{
									property: 'title'
								}
							],
							fields: [
								{
									name: 'id',
									type: 'int'
								},
								{
									name: 'title',
									type: 'string'
								},
								{
									name: 'display',
									type: 'string',
									convert: function(v, record){
										if(record.data.in_use){
											return '<span style="text-decoration: line-through; color: #c1c1c1">' +
												record.data.title + '</span> (' + _('inuse') + ')';
										}
										return record.data.title;
									}
								},
								{
									name: 'in_use',
									type: 'bool'
								}
							]
						})
					},
					{
						xtype: 'activeproviderscombo',
						margin: '0 10 10 10',
						width: 300,
						fieldLabel: _('provider'),
						labelAlign: 'top',
						itemId: 'FloorPlanPatientProviderAssignmentCombo'
					}
				],
				buttons: [
					{
						text: _('cancel'),
						itemId: 'FloorPlanPatientZoneAssignmentCancelBtn'
					},
					{
						text: _('save'),
						itemId: 'FloorPlanPatientZoneAssignmentSaveBtn'
					}
				]
			});
		}

		FloorPlans.getFloorPlanZonesByFloorPlanId(floorPlanId, function(result){
			var field = me.getFloorPlanPatientZoneAssignmentCombo();
			field.reset();
			field.getStore().loadData(result);
		});
		me.getFloorPlanPatientZoneAssignmentWindow().pid = pid;
		me.getFloorPlanPatientZoneAssignmentWindow().show();

	},

	onFloorPlanPatientZoneAssignmentCancelBtnClick: function(btn){
		this.getFloorPlanPatientZoneAssignmentWindow().close();
	},

	onFloorPlanPatientZoneAssignmentSaveBtnClick: function(btn){
		var zone_id = this.getFloorPlanPatientZoneAssignmentCombo().getValue(),
			provider_id = this.getFloorPlanPatientProviderAssignmentCombo().getValue(),
			win = this.getFloorPlanPatientZoneAssignmentWindow();

		if(zone_id && zone_id != null){
			PatientZone.addPatientToZone({
				zone_id: zone_id,
				provider_id: provider_id,
				pid: win.pid
			}, function(response){
				app.msg('Sweet!', _('patient_successfully_assigned_to_zone'));

				// TODO set zone with the data on hand
				// me.setZone(zone, data);
			});
		}

		win.close();

	},

	onFloorPlanPatientZoneAssignmentComboBeforeSelect: function(cmb, record){
		return !record.data.in_use;

	}

});
Ext.define('App.controller.dashboard.Dashboard', {
	extend: 'Ext.app.Controller',
	refs: [
		{
			ref: 'DashboardRenderPanel',
			selector: '#DashboardPanel'
		},
		{
			ref: 'DashboardPanel',
			selector: 'portalpanel'
		},
		{
			ref: 'DashboardLeftColumn',
			selector: '#DashboardColumn1'
		},
		{
			ref: 'DashboardRightColumn',
			selector: '#DashboardColumn2'
		}
	],

	addLeftPanel: function(title, item, index){
		var panel;
		if(index){
			panel = this.getDashboardLeftColumn().insert(index, {
				xtype: 'portlet',
				title: title,
				items: [item]
			});
		}else{
			panel = this.getDashboardLeftColumn().add({
				xtype: 'portlet',
				title: title,
				items: [item]
			});
		}
		return panel;
	},

	addRightPanel: function(title, item, index){
		var panel;
		if(index){
			panel = this.getDashboardRightColumn().insert(index, {
				xtype: 'portlet',
				title: title,
				items: [item]
			});
		}else{
			panel = this.getDashboardRightColumn().add({
				xtype: 'portlet',
				title: title,
				items: [item]
			});
		}
		return panel;
	},

	getColumns: function(){
		return this.getDashboardPanel().items;
	}

});
Ext.define('App.controller.dashboard.panel.NewResults', {
	extend: 'App.controller.dashboard.Dashboard',

	init: function(){
		if(!a('view_dashboard_new_results')) return;

		var me = this;

		me.control({
			'portalpanel':{
				render: me.onDashboardPanelBeforeRender
			},
			'#DashboardPanel':{
				activate: me.onDashboardPanelActivate
			},
			'#DashboardNewResultsGrid':{
				itemdblclick: me.onDashboardNewResultsGridItemDoubleClick
			}
		});

		me.addRef([
			{
				ref: 'DashboardRenderPanel',
				selector:'#DashboardPanel'
			},
			{
				ref: 'DashboardNewResultsGrid',
				selector:'#DashboardNewResultsGrid'
			}
		]);
	},

	onDashboardNewResultsGridItemDoubleClick: function(grid, record){
		grid.el.mask(_('please_wait'));

		app.setPatient(record.data.pid, null, null, function(){
			app.openPatientSummary();
			app.onMedicalWin('laboratories');
			grid.el.unmask();
		});
	},


	onDashboardPanelActivate: function(){
		this.getDashboardNewResultsGrid().getStore().load();
	},

	onDashboardPanelBeforeRender: function(){
		this.addRightPanel(_('new_results'), Ext.create('App.view.dashboard.panel.NewResults'));
	}

});
Ext.define('App.controller.dashboard.panel.DailyVisits', {
	extend: 'App.controller.dashboard.Dashboard',

	init: function(){
		if(!a('view_dashboard_daily_visits')) return;

		var me = this;

		me.control({
			'portalpanel': {
				render: me.onDashboardPanelBeforeRender
			},
			'#DashboardPanel': {
				activate: me.onDashboardPanelActivate
			}
		});

		me.addRef([
			{
				ref: 'DashboardRenderPanel',
				selector: '#DashboardPanel'
			},
			{
				ref: 'DashboardDailyVisitsChart',
				selector: '#DashboardDailyVisitsChart'
			}
		]);
	},

	onDashboardPanelActivate: function(){
		this.loadChart();
	},

	onDashboardPanelBeforeRender: function(){
		this.addRightPanel(_('daily_visits'), Ext.create('App.view.dashboard.panel.DailyVisits'));
	},

	loadChart: function(){
		var me = this,
			store = me.getDashboardDailyVisitsChart().getStore(),
			data = [],
			time,
			i,
			j;

		Encounter.getTodayEncounters(function(response){

			var encounters = response;
			for(i=0; i < encounters.length; i++){
				time = Ext.Date.parse(encounters[i].service_date, 'Y-m-d H:i:s').setMinutes(0,0,0);
				var found = false;

				for(j=0; j < data.length; j++){
					if(data[j].time == time){
						data[j].total = data[j].total + 1;
						found = true;
					}
				}

				if(!found){
					data.push({
						total: 1,
						time: time
					});
				}
			}

			store.loadData(data);
		});
	}

});
Ext.define('App.controller.miscellaneous.Amendments', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'AmendmentsPanel',
			selector: '#AmendmentsPanel'
		},
		{
			ref: 'AmendmentsGrid',
			selector: '#AmendmentsGrid'
		},
		{
			ref: 'AmendmentDetailsWindow',
			selector: '#AmendmentDetailsWindow'
		},
		{
			ref: 'AmendmentDetailsForm',
			selector: '#AmendmentDetailsForm'
		},
		{
			ref: 'AmendmentDetailsDataGrid',
			selector: '#AmendmentDetailsDataGrid'
		},
		{
			ref: 'AmendmentDetailsResponseMessageField',
			selector: '#AmendmentDetailsResponseMessageField'
		},
		{
			ref: 'AmendmentDetailsApproveBtn',
			selector: '#AmendmentDetailsApproveBtn'
		},
		{
			ref: 'AmendmentDetailsDenyBtn',
			selector: '#AmendmentDetailsDenyBtn'
		},
		{
			ref: 'AmendmentDetailsResponseText',
			selector: '#AmendmentDetailsResponseText'
		},
		{
			ref: 'AmendmentDetailsUserLiveSearch',
			selector: '#AmendmentDetailsUserLiveSearch'
		},
		{
			ref: 'AmendmentDetailsAssignBtn',
			selector: '#AmendmentDetailsAssignBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'#AmendmentsPanel' :{
				activate: me.onAmendmentsPanelActivate
			},
			'#AmendmentsGrid' :{
				itemdblclick: me.onAmendmentsPanelItemDblClick
			},
			'#AmendmentDetailsDenyBtn' :{
				click: me.onAmendmentDetailsDenyBtnClick
			},
			'#AmendmentDetailsApproveBtn' :{
				click: me.onAmendmentDetailsApproveBtnClick
			},
			'#AmendmentDetailsAssignBtn' :{
				click: me.onAmendmentDetailsAssignBtnClick
			}
		});

		if(a('amendments_access')){

			me.cronSkip = 2;
			var cron = App.app.getController('Cron'),
				count = 2;
			cron.checkForUnreadAmendments = function(){
				count++;
				if(count && (count % me.cronSkip !== 0)) return;
				Amendments.getUnViewedAmendments(a('amendments_view_unassigned'), function(response){
					if(response.total > 0){
						var messages = [];
						for(var i=0; i < response.data.length; i++){
							Ext.Array.push(messages, response.data[i].id);
						}
						app.notification.add(
							'new_amendment_notification',
							_('pending_amendment') + ' (' + response.total + ')',
							messages,
							'miscellaneous.Amendments',
							'onNewAmendmentClick'
						);
					}else{
						app.notification.remove('new_amendment_notification');
					}
				});
			};
			cron.addCronFn('me.checkForUnreadAmendments()');
		}
	},

	onAmendmentsPanelActivate: function(){
		var store = this.getAmendmentsGrid().getStore(),
			filters = [{
				property: 'assigned_to_uid',
				value: app.user.id
			}];

		store.clearFilter(true);

		if(a('amendments_view_unassigned')){
			Ext.Array.push(filters, {
				property: 'assigned_to_uid',
				value: '0'
			});
		}

		store.filter(filters);
	},

	updateIsViewed: function(record){
		if(record.data.is_viewed === false){
			Amendments.updateAmendment({
				id: record.data.id,
				is_viewed: true
			});
		}
	},

	updateIsRead: function(record){
		if(record.data.is_read === false){
			Amendments.updateAmendment({
				id: record.data.id,
				is_read: true
			});
		}
	},

	onNewAmendmentClick: function(){
		this.getController('Navigation').goTo('App.view.miscellaneous.Amendments');
	},

	onAmendmentsPanelItemDblClick: function(grid, record){

		if(!this.getAmendmentDetailsWindow()){
			Ext.create('App.view.miscellaneous.AmendmentDetails');
		}
		this.getAmendmentDetailsWindow().show();

		var me = this,
			form = me.getAmendmentDetailsForm().getForm(),
			dataGrid = me.getAmendmentDetailsDataGrid(),
			dataStore = dataGrid.getStore(),
			data = [];

		Ext.Object.each(record.data.amendment_data, function(key, value){
			for(var i = 0; i < value.length; i++){
				value[i].data_key = key;
				value[i].approved = true;
				Ext.Array.push(data, value[i]);
			}
		});

		dataStore.removeAll();

		if(data.length > 0){
			dataGrid.show();
			dataStore.loadData(data);
		}else{
			dataGrid.hide();

		}

		me.getAmendmentDetailsUserLiveSearch().reset();
		form.reset(true);
		form.loadRecord(record);


		if(record.data.amendment_status == 'W'){

			me.getAmendmentDetailsUserLiveSearch().setVisible(a('amendments_assign'));
			me.getAmendmentDetailsAssignBtn().setVisible(a('amendments_assign'));

			me.getAmendmentDetailsApproveBtn().setDisabled(true);
			me.getAmendmentDetailsDenyBtn().setDisabled(!a('amendments_response'));
			me.getAmendmentDetailsResponseText().hide();
			me.getAmendmentDetailsResponseText().setText('');

			app.setPatient(record.data.pid, null, null, function(patient){
				if(patient.pid === null){
					app.msg(_('oops'), _('patient_not_found'), true);
					me.getAmendmentDetailsApproveBtn().setDisabled(!a('amendments_response'));
					return;
				}
				me.getAmendmentDetailsApproveBtn().setDisabled(false);
				app.openPatientSummary();
			});

		}else{

			me.getAmendmentDetailsUserLiveSearch().setVisible(false);
			me.getAmendmentDetailsAssignBtn().setVisible(false);

			me.getAmendmentDetailsApproveBtn().setDisabled(true);
			me.getAmendmentDetailsDenyBtn().setDisabled(true);
			me.getAmendmentDetailsResponseText().show();

			var msg = '';
			if(record.data.amendment_status == 'A'){
				msg += _('approved') + ' - ' + Ext.Date.format(record.data.response_date, g('date_time_display_format'));
			}else if(record.data.amendment_status == 'D'){
				msg += _('denied') + ' - ' + Ext.Date.format(record.data.response_date, g('date_time_display_format'));
			}else if(record.data.amendment_status == 'C'){
				msg += _('canceled') + ' - ' + Ext.Date.format(record.data.cancel_date, g('date_time_display_format'));
			}

			me.getAmendmentDetailsResponseText().setText(msg);

		}
	},

	onAmendmentDetailsDenyBtnClick: function(){
		var form = this.getAmendmentDetailsForm().getForm(),
			record = form.getRecord(),
			messageField = this.getAmendmentDetailsResponseMessageField(),
			dataStore = this.getAmendmentDetailsDataGrid().getStore(),
			dataRecords = dataStore.data.items,
			amendment_data = {};

		messageField.allowBlank = false;

		if(!messageField.isValid()) return;

		if(dataRecords.length > 0){
			for(var i = 0; i < dataRecords.length; i++){
				dataRecords[i].set({approved: false});
				var key = dataRecords[i].data.data_key;

				if(!amendment_data[key]) amendment_data[key] = [];
				delete dataRecords[i].data.data_key;

				Ext.Array.push(amendment_data[key], dataRecords[i].data);
			}
		}

		record.set({
			amendment_data: amendment_data,
			is_synced: false,
			response_uid: app.user.id,
			response_date: new Date(),
			update_uid: app.user.id,
			update_date: new Date(),
			amendment_status: 'D',
			response_message: this.getAmendmentDetailsResponseMessageField().getValue()
		});

		record.save({
			callback: function(){
				app.msg(_('sweet'), _('record_saved'));
			}
		});

		this.getAmendmentDetailsWindow().close();
	},

	onAmendmentDetailsApproveBtnClick: function(){
		var me = this,
			form = me.getAmendmentDetailsForm().getForm(),
			record = form.getRecord(),
			messageField = me.getAmendmentDetailsResponseMessageField(),
			dataStore = me.getAmendmentDetailsDataGrid().getStore(),
			dataRecords = dataStore.data.items,
			amendment_data = {};

		messageField.allowBlank = true;

		Ext.Msg.show({
			title: _('wait'),
			msg: _('amendment_approval_confirmation'),
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){
				if(btn == 'yes'){

					if(dataRecords.length > 0){
						for(var i = 0; i < dataRecords.length; i++){
							var key = dataRecords[i].data.data_key;
							if(!amendment_data[key]) amendment_data[key] = [];
							delete dataRecords[i].data.data_key;
							Ext.Array.push(amendment_data[key], dataRecords[i].data);
						}
					}

					record.set({
						amendment_data: amendment_data,
						is_synced: false,
						response_uid: app.user.id,
						response_date: new Date(),
						update_uid: app.user.id,
						update_date: new Date(),
						amendment_status: 'A',
						response_message: me.getAmendmentDetailsResponseMessageField().getValue()
					});

					me.doUpdatePatientData(amendment_data, record.data.pid, record.data.eid);

					record.save({
						callback: function(){
							app.msg(_('sweet'), _('record_saved'));
							app.setPatient(record.data.pid, null, null, function(){
								app.openPatientSummary();
							});

						}
					});
					me.getAmendmentDetailsWindow().close();
				}
			}
		});
	},

	onAmendmentDetailsAssignBtnClick: function(btn){
		var me = this,
			record = me.getAmendmentDetailsForm().getForm().getRecord(),
			searchField = me.getAmendmentDetailsUserLiveSearch(),
			assigned_user = searchField.getValue();

		if(!searchField.isValid()) return;


		me.getAmendmentDetailsWindow().mask(_('saving'));

		record.set({
			assigned_date: new Date(),
			assigned_to_uid: assigned_user
		});

		record.save({
			success: function(){
				app.msg(_('sweet'), _('amendment_assigned'));
				me.getAmendmentDetailsWindow().unmask();
				me.getAmendmentDetailsWindow().close();
			},
			failure: function(){
				app.msg(_('opps'), _('record_error'), true);
				me.getAmendmentDetailsWindow().unmask();
			}
		});

	},


	doUpdatePatientData: function(data, pid, eid){

		if(data.demographics){

			var panel = app.getActivePanel();
			if(panel.itemId == 'PatientSummaryPanel'){
				var values = {};
				for(var i = 0; i < data.demographics.length; i++){
					values[data.demographics[i].field_name] = data.demographics[i].new_value;
				}
				app.patient.record.set(values);
				app.patient.record.save();
			}
		}
	}

});
Ext.define('App.controller.AlwaysOnTop', {
	extend: 'Ext.app.Controller',

	alwaysOnTopManager: null,

	init: function() {
		this.control({
			'component{isFloating()}': {
				'render': function (component, options) {
					this.onComponentRender(component, options);
				}
			}
		});
		/* Uncommenting the code below makes sure that all Ext.window.MessageBoxes stay on top. */
		/*
		 Ext.override(Ext.window.MessageBox, {
		 alwaysOnTop: true
		 });
		 */
		/* Uncommenting the code below makes sure that all form errormessages stay on top.
		 Necessary if you have a form inside a alwaysOnTop window. */
		/*
		 Ext.override(Ext.tip.ToolTip, {
		 alwaysOnTop: true
		 });
		 */
	},

	onComponentRender: function (component, options) {
		if (component.alwaysOnTop) {
			if (!this.alwaysOnTopManager) {
				this.alwaysOnTopManager = Ext.create('Ext.ZIndexManager');
			}
			this.alwaysOnTopManager.register(component);
		}
		if (this.alwaysOnTopManager) {
			/* Making sure the alwaysOnTopManager always has the highest zseed */
			if (Ext.ZIndexManager.zBase > this.alwaysOnTopManager.zseed) {
				this.alwaysOnTopManager.zseed = this.alwaysOnTopManager.getNextZSeed();
			}
		}
	}

});
Ext.define('App.controller.Cron', {
    extend: 'Ext.app.Controller',

    // in seconds - interval to run me.cronTask (check PHP session, refresh Patient Pool Areas, and PHP Cron Job)
	cronTaskInterval: 10,

	fns:[
		'app.getPatientsInPoolArea()',
		'me.checkSession()',
		//'CronJob.run()'
	],

	init: function() {
		var me = this,
            i;

		/**
		 * TaskScheduler
		 */
		me.cronTask = {
			scope: me,
			run: function(){
				/**
				 * loop for functions
				 */
				for(i=0; i < me.fns.length; i++){
					eval(me.fns[i]);
				}
			},
			interval: me.cronTaskInterval * 1000
		};

	},

	start:function(){
		Ext.TaskManager.start(this.cronTask);
	},

	stop:function(){
		Ext.TaskManager.stop(this.cronTask);
	},


	/**
	 *This will add the function to the functions array
	 *
	 * @param {string} fn example 'app.getPatientsInPoolArea()'
	 */
	addCronFn:function(fn){
		this.fns.push(fn);
	},

	/**
	 * This will remove the function from the functions array
	 *
	 * @param {string} fn example 'app.getPatientsInPoolArea()'
	 */
	removeCronFn:function(fn){
		Ext.Array.remove(this.fns, fn);
	},

	checkSession: function(){
		authProcedures.ckAuth(function(provider, response){
			if(!response.result.authorized){
				window.location.reload();
			}
		});
	}

});

Ext.define('App.controller.DualScreen', {
    extend: 'Ext.app.Controller',
	requires:[

	],
	refs: [
        {
            ref:'DualViewport',
            selector:'#dualViewport'
        },
        {
            ref:'Header',
            selector:'#RenderPanel-header'
        },
        {
            ref:'TabPanel',
            selector:'#dualViewport tabpanel'
        }
	],

	isDual: false,
	appMask: null,
	init: function() {
		var me = this;

		me._loggedout = false;
		me._enable = true;
		me._screen = null;

		me.control({
			'#dualViewport':{
				render:me.onDualViewportRender,
				beforerender:me.onDualViewportBeforeRender
			}
		});

	},

	startDual:function(){
		var me = this;
		me.enable();
		if(me._screen == null || me._screen.closed){
			me._screen = window.open('./?dual=true','_target','fullscreen=yes,menubar=no',true);
		}
	},

	stopDual:function(){
		this.disable();
		this._screen.close();
		this._screen = null;
	},

	enable:function(){
		this._enable = true;
	},

	disable:function(){
		this._enable = false;
	},

	isEnabled:function(){
		return this._enable;
	},

	onDualViewportBeforeRender:function(){
		this.isDual = true;
		window.app = window.opener.app;
		app.on('patientset', this.onPatientSet, this);
		app.on('patientunset', this.onPatientUnset, this);
	},

	onDualViewportRender:function(){
		Ext.get('mainapp-loading').remove();
		Ext.get('mainapp-loading-mask').fadeOut({
			remove: true
		});
		this.onPatientUnset(false);
		this.initHandShakeTask();
	},

	onPatientSet:function(){
        var title,
            store;

		if(!this.isDual || this._loggedout) return;
		title = app.patient.name + ' - #' + app.patient.pid + ' - ' + app.patient.age.str,
			store = this.getActiveStore();

		this.unmask();
		this.getHeader().update(title);
		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	onPatientUnset:function(filter){
        var store;

		if(!this.isDual || this._loggedout) return;
		store = this.getActiveStore();

		this.mask(_('no_patient_selected'));
		this.getHeader().update('');

		if(filter === false) return;
		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	getActiveStore:function(){
		var panel = this.getTabPanel().getActiveTab();

		if(panel.getStore){
			return panel.getStore();
		}if(panel.xtype == 'patientdocumentspanel' ||
			panel.xtype == 'patientimmunizationspanel' ||
			panel.xtype == 'patientmedicationspanel' ||
			panel.xtype == 'patientimmunizationspanel'){
			return panel.down('grid').getStore();
		}
	},

	mask:function(msg){
		var me = this;
		if(me.appMask == null){
			me.appMask = new Ext.LoadMask(me.getDualViewport(), {
				msg : '<img height="86" width="254" src="resources/images/gaiaehr-med-dark.png"><p>' + msg + '</p>',
				maskCls: 'dualAppMask',
				cls: 'dualAppMaskMsg',
				autoShow: true
			});
		}else{
			me.appMask.show();
			me.appMask.msgEl.query('p')[0].innerHTML = msg;
		}
	},

	unmask:function(){
		if(this.appMask) this.appMask.hide();
	},

	initHandShakeTask:function(){
		var me = this,
			task = {
			run: function(){
				if(window.opener == null) window.close();
				if(!window.opener.app.logged && !me._loggedout){
					me.mask(_('logged_out'));
					me._loggedout = true;
				}
			},
			interval: 1000,
			scope: me
		};
		Ext.TaskManager.start(task);
	}

});

Ext.define('App.controller.Header', {
    extend: 'Ext.app.Controller',
	requires:[
	],
	refs: [
        {
            ref:'AppHeaderRight',
            selector:'#AppHeaderRight'
        },
        {
            ref:'AppHeaderLeft',
            selector:'#AppHeaderLeft'
        }
	],

	init: function() {
		var me = this;
	},

	/**
	 *
	 * @param {object}  btn         btn config
	 * @param {string}  area        left or right
	 * @param {int}     position    position index
	 */
	addHeaderBtn: function(btn, area, position){

		btn = btn || {};
		area = area || 'left';
		position = position || 0;

		var comp = area == 'left' ? this.getAppHeaderLeft() : this.getAppHeaderRight(),
			btnConf = Ext.apply(btn, {
			xtype: 'button',
			scale: 'large',
			margin: '0 3 0 0',
			cls: 'headerLargeBtn',
			padding: 0
		});

		comp.insert(position, btnConf);

	}

});
Ext.define('App.controller.InfoButton', {
	extend: 'Ext.app.Controller',
	requires: [


	],

	init: function(){
		var me = this;

		me.medline  = 'http://apps2.nlm.nih.gov/medlineplus/services/mpconnect.cfm?';
		me.language = _('lang_code').match(/^es/) ? 'es' : 'en';
		me.codeSytem = {
			'ICD10CM': '2.16.840.1.113883.6.90',
			'ICD10-CM': '2.16.840.1.113883.6.90',
			'ICD-10-CM': '2.16.840.1.113883.6.90',
			'ICD9CM': '2.16.840.1.113883.6.103',
			'ICD9-CM': '2.16.840.1.113883.6.103',
			'ICD-9-CM': '2.16.840.1.113883.6.103',
			'SNOMED': '2.16.840.1.113883.6.96',
			'RXCUI': '2.16.840.1.113883.6.88',
			'NDC': '2.16.840.1.113883.6.69',
			'LN': '2.16.840.1.113883.6.1',
			'LOINC': '2.16.840.1.113883.6.1'
		};

		me.control({

		});

	},

	doGetInfo: function(code, codeType, codeText){
		var me = this;

		var url = me.medline;
		url += 'mainSearchCriteria.v.c=' + code;
		url += '&mainSearchCriteria.v.cs=' + me.codeSytem[codeType];
		url += '&informationRecipient.languageCode.c=' + me.language;

		window.open(url, "_blank", "toolbar=no, scrollbars=yes, resizable=yes, top=10, left=10, width=1000, height=600");
//		WebSearchCodes.Search({ code: code, codeType: codeType, codeText: codeText }, function(data){
//			me.getInformationWindow(data);
//		})
	},

	doGetInfoByUrl: function(url){
		var me = this;
		window.open(url, "_blank", "toolbar=no, scrollbars=yes, resizable=yes, top=10, left=10, width=1000, height=600");
	},

	getInformationWindow: function(data){
		Ext.widget('window', {
			title: _('information'),
			autoShow: true,
			width: 800,
			height: 600,
			data: data,
			autoScroll: true,
			tpl: new Ext.XTemplate(
				'<div class="externalinfo-container">' +
				'<h1>{feed.title._value}</h1>' +
				'<h2>{feed.subtitle._value}</h2>' +
				'<p><span>Author:</span> {feed.author.name._value}</h1>' +
				'<p><span>Updated:</span> {feed.updated._value}</h1>' +
				'<div class="entries">' +
				'   <tpl for="feed.entry">' +
					'<div class="externalinfo-entry">' +
					'<h3><a href="{link.href}">{title._value}</a></h3>' +
					'{summary._value}' +
					'</div>' +
				'   </tpl>' +
				'</div>' +
				'</div>'
			)
		});
	}


});
Ext.define('App.controller.KeyCommands', {
    extend: 'Ext.app.Controller',
	refs: [
        {
            ref:'viewport',
            selector:'viewport'
        }
	],

	enabled: false,

	init: function() {
		this.enableKeyCommands();
	},

	enableKeyCommands: function(){
		if(this.enabled) return;
		Ext.getBody().on('keyup', this.onKeyUp, this);
		this.enabled = true;
	},

	disableKeyCommands: function(){
		Ext.getBody().un('keyup', this.onKeyUp, this);
		this.enabled = false;
	},


	onKeyUp: function(e, t, eOpts){

		if(e.getKey() == e.ALT || e.getKey() == e.CTRL || e.getKey() == e.SHIFT){
			return;
		}

		if(e.altKey || e.ctrlKey || e.shiftKey){
			var event = 'KEY-';
			if(e.altKey) event += 'ALT-';
			if(e.ctrlKey) event += 'CTRL-';
			if(e.shiftKey) event += 'SHIFT-';
			event += String.fromCharCode(e.getCharCode());
			app.fireEvent(event, e, t);
		}

		if(e.altKey && e.ctrlKey && e.shiftKey){
			var action = '';

			if(e.getKey() == e.A){
				action = 'allergies';
			}else if(e.getKey() == e.I){
				action = 'immunization';
			}else if(e.getKey() == e.M){
				action = 'medications';
			}else if(e.getKey() == e.P){
				action = 'activeproblems';
			}else if(e.getKey() == e.R){
				action = 'laboratories';
			}else if(e.getKey() == e.C){
				action = 'social';

			// close window
			}else if(e.getKey() == e.W){
				var cmp = Ext.getCmp(e.getTarget(null, null, true).id);

				if(cmp.xtype == 'window'){
					cmp.close();
				}else{
					var win = cmp.up('window');
					if(win) win.close();
				}
				return;
			}

			if(action != ''){
				app.onMedicalWin(action);
			}

		}
	}



});
Ext.define('App.controller.LogOut', {
    extend: 'Ext.app.Controller',
	requires:[
		'App.ux.ActivityMonitor'
	],
	init: function() {
		var me = this;

		/**
		 * in seconds - interval to check for
		 * mouse and keyboard activity
		 */
		me.activityMonitorInterval = 10;
		/**
		 * in minutes - Maximum time application can
		 * be inactive (no mouse or keyboard input)
		 */
		me.activityMonitorMaxInactive = eval(g('timeout'));

		me.cron = me.getController('Cron');

		me.control({
			'treepanel[action=mainNav]':{
				beforerender: me.onNavigationBeforeRender
			},
			'menuitem[action=logout]':{
				click: me.appLogout
			}
		});

	},

	onNavigationBeforeRender:function(treepanel){
		treepanel.getStore().on('load', function(){
			this.ActivityMonitor(true);
		}, this);
	},

	ActivityMonitor:function(start){
		var me = this;

		if(start){
			App.ux.ActivityMonitor.init({
				interval: me.activityMonitorInterval * 1000,
				maxInactive: (1000 * 60 * me.activityMonitorMaxInactive),
				verbose: false,
				controller: me,
				isInactive: function(){
					me.startAutoLogout();
				}
			});
			me.cron.start();
			App.ux.ActivityMonitor.start();
		}else{
			me.cron.stop();
			App.ux.ActivityMonitor.stop();
		}
	},

	cancelAutoLogout: function(){
		var me = this;
		app.el.unmask();
		me.LogoutTask.stop(me.LogoutTaskTimer);
		me.logoutWarinigWindow.destroy();
		delete me.logoutWarinigWindow;
		App.ux.ActivityMonitor.start();
	},

	startAutoLogout: function(){
		var me = this;
		me.logoutWarinigWindow = Ext.create('Ext.Container', {
			floating: true,
			cls: 'logout-warning-window',
			html: 'Logging Out in...',
			seconds: 10
		}).show();

		app.el.mask();

		if(!me.LogoutTask)
			me.LogoutTask = new Ext.util.TaskRunner();
		if(!me.LogoutTaskTimer){
			me.LogoutTaskTimer = me.LogoutTask.start({
				scope: me,
				run: me.logoutCounter,
				interval: 1000
			});
		}else{
			me.LogoutTask.start(me.LogoutTaskTimer);
		}
	},

	logoutCounter: function(){
		var me = this, sec = me.logoutWarinigWindow.seconds - 1;
		if(sec <= 0){
			me.logoutWarinigWindow.update('Logging Out... Bye! Bye!');
			me.appLogout(true);
		}else{
			me.logoutWarinigWindow.update('Logging Out in ' + sec + 'sec');
			me.logoutWarinigWindow.seconds = sec;
		}
	},

	appLogout: function(auto){
		var me = this,
			nav = me.getController('Navigation');

		if(auto === true){
			me.ActivityMonitor(false);
			if(app.patient.pid) Patient.unsetPatient(app.patient.pid);
			authProcedures.unAuth(function(){
				nav.navigateTo('App.view.login.Login', null, true);
				window.onbeforeunload = null;
				window.location.reload();
			});
		}else{
			Ext.Msg.show({
				title: _('please_confirm') + '...',
				msg: _('are_you_sure_to_quit') + ' GaiaEHR?',
				icon: Ext.MessageBox.QUESTION,
				buttons: Ext.Msg.YESNO,
				fn: function(btn){
					if(btn == 'yes'){
						if(app.patient.pid) Patient.unsetPatient(app.patient.pid);
						authProcedures.unAuth(function(){
							me.ActivityMonitor(false);
							nav.navigateTo('App.view.login.Login', null, true);
							window.onbeforeunload = null;
							window.location.reload();
						});
					}
				}
			});
		}
	}
});

Ext.define('App.controller.Navigation', {
    extend: 'Ext.app.Controller',
	requires:[
		'Ext.util.History'
	],
	refs: [
        {
            ref:'viewport',
            selector:'viewport'
        },
        {
            ref:'mainNavPanel',
            selector:'panel[action=mainNavPanel]'
        },
        {
            ref:'mainNav',
            selector:'treepanel[action=mainNav]'
        },
        {
            ref:'patientPoolArea',
            selector:'panel[action=patientPoolArea]'
        },
        {
            ref:'appFooter',
            selector:'container[action=appFooter]'
        },
        {
            ref:'appFooterDataView',
            selector:'container[action=appFooter] > dataview'
        }
	],

	navKey: 'ALT',
	navKeysEnabled: false,

	init: function() {
		var me = this;

		me.navKey = this.setNavKey(this.navKey);

		me.activePanel = null;
		me.altIsDown = false;

		Ext.util.History.init();
		Ext.util.History.on('change', me.urlChange, me);

		if(me.navKeysEnabled) me.enableNavKeys();

		me.control({
			'viewport':{
				patientset: me.onPatientSet,
				patientunset: me.onPatientUnset
			},
			'treepanel[action=mainNav]':{
				selectionchange: me.onNavigationNodeSelected,
				beforerender: me.onNavigationBeforeRender
			},
			'panel[action=mainNavPanel]':{
				render: me.onNavRender,
				beforecollapse: me.onNavCollapsed,
				beforeexpand: me.onNavExpanded
			}
		});

	},

	getTopNavigation:function(){
		return app
	},

	/**
	 *
	 * @param {object} treepanel
	 */
	onNavigationBeforeRender:function(treepanel){
		treepanel.getStore().on('load', this.afterNavigationLoad, this);
	},

	navigateToDefault: function(){
		this.navigateTo('App.view.dashboard.Dashboard');
	},

	/**
	 *
	 * @param {string} cls  - example: 'App.view.ExamplePanel'
	 * @param {function} [callback] - callback function
	 * @param {bool} resetParams true to reset all params
	 */
	navigateTo: function(cls, callback, resetParams){
		var params = resetParams !== true ? this.getUrlParams() : [];
		params[0] = cls;
		this.setUrlParams(params);
		if(typeof callback == 'function') callback(true);
	},


	goTo: function(cls, callback, resetParams){
		this.navigateTo(cls, callback, resetParams);
	},

	/**
	 *
	 * @param {object} model
	 * @param {array} selected
	 */
	onNavigationNodeSelected: function(model, selected){
		if(0 < selected.length){
			if(selected[0].data.leaf){
				this.navigateTo(selected[0].data.id);
			}
		}
	},

	/**
	 * this logic can be move to here eventually...
	 */
	afterNavigationLoad: function(){
		var me = this;

		app.removeAppMask();
		me.navigateToDefault();

		Ext.Function.defer(function(){
			me.doSortCategory('administration')
		}, 500);
	},

	doSortCategory: function(category){
		var store = this.getMainNav().getStore().getNodeById(category);

		if(!store) return;
		store.sort(function(node1, node2){
			var text1 = node1.get('text'),
				text2 = node2.get('text');

			if(text1 > text2){
				return 1;
			}else if(text1 < text2){
				return -1;
			}else{
				return 0;
			}
		});
	},

	setUrlParams:function(params){
		var url = '#!/';
		if(params.length > 0) url += params.join('/');
		window.location = url;
	},

	getUrlParams:function(){
		if(window.location.hash){
			return window.location.hash.substring(1).replace(/!\//, '').split('/');
		}
		return [];
	},

	/**
	 * this method handle the card layout when the URL changes
	 * @param {string} url
	 */
	urlChange:function(url){
		var me = this,
			tree = me.getMainNav(),
			treeStore = tree.getStore(),
			cls = me.getUrlParams()[0],
			ref = me.getNavRefByClass(cls),
			layout = me.getViewport().MainPanel.getLayout(),
			sm = tree.getSelectionModel(),
			node = treeStore.getNodeById(cls);

		this.url = url;
		sm.select(node);

		// ignore the Login
		if(cls == 'App.view.login.Login') return;

		// if the panel is 'undefined' added to MainPanel
		if (typeof me[ref] == 'undefined') {
			me.getViewport().MainPanel.el.mask();
			me[ref] = me.getViewport().MainPanel.add(Ext.create(cls));

		// if the class is destroyed then render it
		} else {
			if (me[ref].isDestroyed) me[ref].render();
		}

		// fire global event
		me.getViewport().fireEvent('beforenavigation', me[ref]);

		// call panel onActive method
		me[ref].onActive(function(success){
			me.getViewport().MainPanel.el.unmask();
			if(success){
				me.activePanel = layout.setActiveItem(me[ref]);
			}
		});

		// fire global event
		me.getViewport().fireEvent('afternavigation', me[ref]);

		app.doLayout();

	},

	/**
	 * this method acts as pressing the browser back btn
	 */
	goBack: function(){
		Ext.util.History.back();
	},

	/**
	 * this method gets the instance reference of a main panel class
	 * @param {string} cls
	 * @returns {*}
	 */
	getPanelByCls:function(cls){
		var me = this,
			ref = me.getNavRefByClass(cls);
		if (typeof me[ref] == 'undefined') {
			return me[ref] = me.getViewport().MainPanel.add(Ext.create(cls));
		}else{
			return me[ref];
		}
	},

	/**
	 * this method gets the reference string of the class string App.view.Panel => App_view_Panel
	 * @param {string} cls
	 * @returns {XML|Ext.dom.AbstractElement|Object|Ext.dom.Element|string|*}
	 */
	getNavRefByClass: function(cls) {
		return  cls.replace(/\./g, '_');
	},

	/**
	 * this method gets the class string of a reference string App_view_Panel => App.view.Panel
	 * @param ref
	 * @returns {XML|Ext.dom.AbstractElement|Object|Ext.dom.Element|string|*}
	 */
	getClassByNavRef: function(ref) {
		return ref.replace(/_/g, '.');
	},

	/**
	 *
	 * @param panel
	 */
	onNavRender: function(panel){
		if(panel.collapsed){
			this.onNavCollapsed();
		}else{
			this.onNavExpanded();
		}
	},

	/**
	 * this method shows the footer poolarea
	 */
	onNavCollapsed: function(){
		var me = this,
			navView = me.getPatientPoolArea(),
			foot = me.getAppFooter(),
			footView = me.getAppFooterDataView();

		if(footView){
			foot.setHeight(60);
			footView.show();
		}

		me.getMainNavPanel().isCollapsed = true;
		navView.hide();
	},

	/**
	 * this method hides the footer poolarea
	 */
	onNavExpanded: function(){
		var me = this,
			navView = me.getPatientPoolArea(),
			foot = me.getAppFooter(),
			footView = me.getAppFooterDataView();

		if(footView){
			foot.setHeight(30);
			footView.hide();
		}

		me.getMainNavPanel().isCollapsed = false;
		navView.show();
	},

	/**
	 *
	 * @param viewport
	 * @param patient
	 */
	onPatientSet:function(viewport, patient){
//		say('onPatientSet');
//		say(patient);
	},

	/**
	 *
	 * @param viewport
	 */
	onPatientUnset:function(viewport){
//		say('onPatientUnset');
	},

	captureDownKey:function(e){

		if(e.getKey() == e.ALT){
			this.altIsDown = true;
			return;
		}
		if(!this.altIsDown) return;
		this.getViewport().fireEvent('navkey', e, e.getKey());
	},

	captureUpKey:function(e){
		if(e.getKey() == e.ALT) this.altIsDown = false;
	},

	setNavKey:function(key){
		return this.navKey = Ext.EventObjectImpl[key];
	},

	getNavKey:function(){
		return this.navKey;
	},

	getExtraParams: function(){
		var params = this.getUrlParams();
		for(var i=0; i < params.length; i++){
			if(params[i].match(/^{.*}$/)) return eval('('+params[i]+')');
		}
		return false;
	},

	enableNavKeys: function(){
		Ext.getBody().on('keydown', this.captureDownKey, this);
		Ext.getBody().on('keyup', this.captureUpKey, this);
	},

	disabledNavKeys: function(){
		Ext.getBody().un('keydown', this.captureDownKey, this);
		Ext.getBody().un('keyup', this.captureUpKey, this);
	}

});
Ext.define('App.controller.ScriptCam', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'webCamWindow',
			selector: 'scriptcamwindow'
		},
		{
			ref: 'ScriptCamCameras',
			selector: 'combobox[action=ScriptCamCameras]'
		}
		//        {
		//            ref:'photoIdImage',
		//            selector:'image[action=photoIdImage]'
		//        }
	],

	init: function(){
		var me = this;

		me.userMedia = null;


		me.control({
//			'scriptcamwindow': {
//				render: me.onWebCamWindowRender
//			},
//			'image': {
//				render: me.onImageRender
//			},
			'button[action=onWebCam]': {
				click: me.onWebCamClick
			},
			'button[action=onCaptureImage]': {
				click: me.onCapture
			}
		})
	},

//	onImageRender: function(img){
//		img.el.on('click', function(e, el){
//			Ext.widget('window', {
//				html: '<img src="' + img.src + '">'
//			}).show();
//		});
//	},

	onWebCamClick: function(btn){
		var me = this;

		me.action = btn.up('panel').action;
		me.imgPanel = btn.up('panel');

//		if(me.action == 'patientImage'){
//			me.width = 480;
//			me.height = 480;
//		}else{
//			me.width = 595;
//			me.height = 360;
//		}

		navigator.getMedia = ( navigator.getUserMedia ||
			navigator.webkitGetUserMedia ||
			navigator.mozGetUserMedia ||
			navigator.msGetUserMedia);
		navigator.getMedia({
			video: true,
			audio: false
		}, me.onConnect, me.onError);
	},

	onConnect: function(stream){
		var me = app.getController('ScriptCam');

		me.win = Ext.create('Ext.window.Window', {
			title: '...',
			html: ('<video id="WebCamVideo" width="640" height="480"></video>'),
			autoShow: true,
			buttons: [
				'->',
				{
					text: _('capture_img'),
					action: 'onCaptureImage'
				}
			],
			listeners: {
				close: function(){
					stream.stop();
				}
			}
		});

		me.video = document.getElementById('WebCamVideo');
		me.video.src = window.URL ? window.URL.createObjectURL(stream) : stream;
		me.video.play();
	},

	onError: function(error){
		say(error);
	},

	onClose: function(){
		var video = document.getElementById('WebCamVideo');
		video.src = window.URL ? window.URL.createObjectURL(stream) : stream;
		video.play();
	},

	onCapture: function(){
		var me = this,
			canvas = document.createElement('canvas'),
			ctx = canvas.getContext('2d'),
			imgCmp = me.imgPanel.down('image'),
			field = me.imgPanel.down('textareafield'),
			dataURL;

		canvas.width = me.video.videoWidth / 4;
		canvas.height = me.video.videoHeight / 4;
		ctx.drawImage(me.video, 0, 0, canvas.width, canvas.height);
		dataURL = canvas.toDataURL();
		canvas.remove();
		imgCmp.setSrc(dataURL);
		field.setValue(dataURL);
		me.win.close();
	}
});
Ext.define('App.controller.Support', {
    extend: 'Ext.app.Controller',
	requires:[
		'App.ux.ManagedIframe'
	],
	refs: [
        {
            ref:'viewport',
            selector:'viewport'
        }
	],

	init: function() {
		var me = this;
		me.control({
			'button[action=supportBtn]':{
				click: me.supportBtnClick
			}
		});

	},

	supportBtnClick: function(btn){
		var me = this;

		me.getSupportWindow();
		me.winSupport.remove(me.miframe);
		me.winSupport.add(
			me.miframe = Ext.create('App.ux.ManagedIframe',{src: btn.src})
		);
	},

	getSupportWindow:function(){
		var me = this;

		if(me.winSupport){
			me.winSupport.show();
		}else{
			me.winSupport = Ext.create('Ext.window.Window', {
				title: _('support'),
				closeAction: 'hide',
				bodyStyle: 'background-color: #ffffff; padding: 5px;',
				animateTarget: me.Footer,
				resizable: false,
				draggable: false,
				maximizable: false,
				autoScroll: true,
				maximized: true,
				dockedItems: {
					xtype: 'toolbar',
					dock: 'top',
					items: ['-', {
						text: 'List issues',
						iconCls: 'list',
						action: 'supportBtn',
						url: 'http://GaiaEHR.org/projects/GaiaEHR001/issues'
					}, '-', {
						text: 'Create an issue',
						iconCls: 'icoAddRecord',
						action: 'supportBtn',
						url: 'http://GaiaEHR.org/projects/GaiaEHR001/issues/new'
					}]
				}
			});
			me.winSupport.show();
		}


	}

});

Ext.define('App.controller.patient.ActiveProblems', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'ActiveProblemsGrid',
			selector: 'patientactiveproblemspanel'
		},
		{
			ref: 'ActiveProblemLiveSearch',
			selector: '#activeProblemLiveSearch'
		},
        {
            ref: 'AddNoActiveProblemBtn',
            selector: 'patientactiveproblemspanel #addNoActiveProblemBtn'
        },
		{
			ref: 'AddActiveProblemBtn',
			selector: 'patientactiveproblemspanel #addActiveProblemBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientactiveproblemspanel':{
				activate: me.onActiveProblemsGridActive
			},
			'#activeProblemLiveSearch':{
				select: me.onActiveProblemLiveSearchSelect
			},
			'#ActiveProblemStatusCombo':{
				select: me.onActiveProblemStatusComboSelect
			},
			'patientactiveproblemspanel #addActiveProblemBtn':{
				click: me.onAddActiveProblemBtnClick
			},
            'patientactiveproblemspanel #addNoActiveProblemBtn':{
                click: me.AddNoActiveProblemBtnClick
            }
		});
	},


	onAddActiveProblemBtnClick:function(){
		var me = this,
			grid = me.getActiveProblemsGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			created_uid: app.user.id,
			create_date: new Date(),
			begin_date: new Date()
		});
		grid.editingPlugin.startEdit(0, 0);
	},

    /**
     * TODO: We need to add some logic to very if there are a No Active Problem without End Date, if
     * there are an No Active Problem with an expired End Date, we can add another one, or not allow the
     * user to add any other.
     */
    AddNoActiveProblemBtnClick: function(){
        var me = this,
            grid = me.getActiveProblemsGrid(),
            store = grid.getStore();

        grid.editingPlugin.cancelEdit();
        store.insert(0, {
            pid: app.patient.pid,
            eid: app.patient.eid,
            uid: app.user.id,
            created_uid: app.user.id,
            create_date: new Date(),
            begin_date: new Date(),
            code_text: _('no_active_problem'),
            occurrence: 'Unknown or N/A',
            status: 'Active'
        });
        store.sync();
    },

	onActiveProblemsGridActive:function(grid){
		var store = grid.getStore();

		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	onActiveProblemLiveSearchSelect:function(cmb, records){
		var form = cmb.up('form').getForm(),
			record = form.getRecord();

		record.set({
			code: records[0].data.ConceptId,
			code_type: records[0].data.CodeType
		});
	},

	onActiveProblemStatusComboSelect:function(cmb, records){
		var form = cmb.up('form').getForm(),
			record = form.getRecord();

		record.set({
			status_code: records[0].data.code,
			status_code_type: records[0].data.code_type
		});

	}
});

Ext.define('App.controller.patient.AdvanceDirectives', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'AdvanceDirectiveGridPanel',
			selector: 'patientadvancedirectivepanel'
		},
		{
			ref: 'AdvanceDirectiveAddBtn',
			selector: '#AdvanceDirectiveAddBtn'
		},
		{
			ref: 'AdvanceDirectiveReviewBtn',
			selector: '#AdvanceDirectiveReviewBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientadvancedirectivepanel':{
				activate: me.onAdvanceDirectiveGridPanelActivate
			},
			'#AdvanceDirectiveAddBtn':{
				click: me.onAdvanceDirectiveAddBtnClick
			},
			'#AdvanceDirectiveReviewBtn':{
				click: me.onAdvanceDirectiveReviewBtnClick
			}
		});
	},

	onAdvanceDirectiveGridPanelActivate: function(grid){
		var store = grid.getStore();
		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	onAdvanceDirectiveAddBtnClick: function(btn){
		var grid = btn.up('grid'),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		var records = store.insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			create_date: new Date(),
			created_uid: app.user.id,
			start_date: new Date(),
			verified_date: new Date(),
			verified_uid: app.user.id
		});
		grid.editingPlugin.startEdit(records[0], 0);
	},

	onAdvanceDirectiveReviewBtnClick: function(btn){

	}

});
Ext.define('App.controller.patient.Allergies', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'AllergiesGrid',
			selector: 'patientallergiespanel'
		},
		{
			ref: 'AddAllergyBtn',
			selector: 'patientallergiespanel #addAllergyBtn'
		},
        {
            ref: 'AddNoActiveAllergyBtn',
            selector: 'patientallergiespanel #addNoActiveAllergyBtn'
        },

		{
			ref: 'ReviewAllergiesBtn',
			selector: 'patientallergiespanel #reviewAllergiesBtn'
		},
		{
			ref: 'ActiveAllergyBtn',
			selector: 'patientallergiespanel #activeAllergyBtn'
		},
		{
			ref: 'AllergyCombo',
			selector: '#allergyCombo'
		},
		{
			ref: 'AllergyTypesCombo',
			selector: '#allergyTypesCombo'
		},

		{
			ref: 'AllergySearchCombo',
			selector: '#allergySearchCombo'
		},
		{
			ref: 'AllergyMedicationCombo',
			selector: '#allergyMedicationCombo'
		},
		{
			ref: 'AllergyReactionCombo',
			selector: '#allergyReactionCombo'
		},
		{
			ref: 'AllergySeverityCombo',
			selector: '#allergySeverityCombo'
		},
		{
			ref: 'AllergyLocationCombo',
			selector: '#allergyLocationCombo'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientallergiespanel': {
				activate: me.onAllergiesGridActivate
			},
			'patientallergiespanel #addAllergyBtn': {
				click: me.onAddAllergyBtnClick
			},
            'patientallergiespanel #addNoActiveAllergyBtn':{
                click: me.onAddNoActiveAllergyBtnClick
            },
			'patientallergiespanel #activeAllergyBtn': {
				toggle: me.onActiveAllergyBtnToggle
			},
			'patientallergiespanel #reviewAllergiesBtn': {
				toggle: me.onReviewAllergiesBtnClick
			},

			'#allergyTypeCombo': {
				select: me.onAllergyTypeComboSelect
			},
			'#allergyMedicationCombo': {
				select: me.onAllergyLiveSearchSelect
			},
			'#allergyLocationCombo': {
				change: me.onAllergyLocationComboChange
			},
			'#allergySearchCombo': {
				select: me.onAllergySearchComboSelect
			},
			'#allergyReactionCombo': {
				select: me.onAllergyReactionComboSelect
			},
			'#allergySeverityCombo': {
				select: me.onAllergySeverityComboSelect
			},
			'#allergyStatusCombo': {
				select: me.onAllergyStatusComboSelect
			}
		});
	},

	onAllergySearchComboSelect:function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();
		record.set({
			allergy_code: records[0].data.allergy_code,
			allergy_code_type: records[0].data.allergy_code_type
		});
	},

	onAllergyReactionComboSelect:function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();
		record.set({
			reaction_code: records[0].data.code,
			reaction_code_type: records[0].data.code_type
		});
	},

	onAllergySeverityComboSelect:function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();
		record.set({
			severity_code: records[0].data.code,
			severity_code_type: records[0].data.code_type
		});
	},

	onAllergyStatusComboSelect:function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();

		record.set({
			status_code: records[0].data.code,
			status_code_type: records[0].data.code_type
		});
	},

	onAllergyLiveSearchSelect: function(cmb, records){
		var form = cmb.up('form').getForm();

		form.getRecord().set({
			allergy: records[0].data.STR,
			allergy_code: records[0].data.RXCUI,
			allergy_code_type: records[0].data.CodeType
		});
	},

	onAllergyTypeComboSelect: function(combo, records){

		var me = this,
			record = records[0],
			code = record.data.code,
			isDrug = code == '419511003' || code == '416098002' || code == '59037007';

		me.getAllergyMedicationCombo().setVisible(isDrug);
		me.getAllergyMedicationCombo().setDisabled(!isDrug);

		me.getAllergySearchCombo().setVisible(!isDrug);
		me.getAllergySearchCombo().setDisabled(isDrug);

		if(isDrug){
			me.getAllergyMedicationCombo().reset();
		}else{
			me.getAllergySearchCombo().store.load();
		}

		combo.up('form').getForm().getRecord().set({
			allergy_type_code: record.data.code,
			allergy_type_code_type: record.data.code_type
		});
	},

	onAllergyLocationComboChange: function(combo, record){
		var me = this,
			list,
			value = combo.getValue();

		if(value == 'Skin'){
			list = 80;
		}else if(value == 'Local'){
			list = 81;
		}else if(value == 'Abdominal'){
			list = 82;
		}else if(value == 'Systemic / Anaphylactic'){
			list = 83;
		}

		me.getAllergyReactionCombo().getStore().load({
			params: {
				list_id: list
			}
		});
	},

	onAllergiesGridActivate: function(){
		var store = this.getAllergiesGrid().getStore();
		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	onAddAllergyBtnClick: function(){
		var me = this,
			grid = me.getAllergiesGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			created_uid: app.user.id,
			uid: app.user.id,
			pid: app.patient.pid,
			eid: app.patient.eid,
			create_date: new Date(),
			begin_date: new Date()
		});
		grid.editingPlugin.startEdit(0, 0);
	},

    /**
     * TODO: We need to add some logic to very if there are a No Active Allergy without End Date, if
     * there are an No Active Allergy with an expired End Date, we can add another one, or not allow the
     * user to add any other.
     */
    onAddNoActiveAllergyBtnClick: function(){
        var me = this,
            grid = me.getAllergiesGrid(),
            store = grid.getStore();

        grid.editingPlugin.cancelEdit();
        store.insert(0, {
            created_uid: app.user.id,
            uid: app.user.id,
            pid: app.patient.pid,
            eid: app.patient.eid,
            create_date: new Date(),
            begin_date: new Date(),
            allergy: _('no_active_allergy'),
            status: 'Active',
            severity: 'N/A',
            reaction: 'N/A',
            location: 'N/A',
            type: 'N/A'
        });
        store.sync();
    },

	onActiveAllergyBtnToggle: function(btn, pressed){
		var me = this,
			store = me.getAllergiesGrid().getStore();

		if(pressed){
			store.load({
				filters: [
					{
						property: 'pid',
						value: app.patient.pid
					},
					{
						property: 'status',
						value: 'Active'
					}
				]
			})
		}else{
			store.load({
				filters: [
					{
						property: 'pid',
						value: app.patient.pid
					}
				]
			})
		}
	},

	beforeAllergyEdit: function(editor, e){
		this.allergieMedication.setValue(e.record.data.allergy);
	},

	onReviewAllergiesBtnClick: function(){
		var encounter = this.getController('patient.encounter.Encounter').getEncounterRecord();
		encounter.set({review_allergies:true});
		encounter.save({
			success: function(){
				app.msg('Sweet!', _('items_to_review_save_and_review'));
			},
			failure: function(){
				app.msg('Oops!', _('items_to_review_entry_error'));
			}
		});
	}

});

Ext.define('App.controller.patient.AppointmentRequests', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'AppointmentRequestWindow',
			selector: '#AppointmentRequestWindow'
		},
		{
			ref: 'AppointmentRequestGrid',
			selector: '#AppointmentRequestGrid'
		},
		{
			ref: 'AppointmentRequestForm',
			selector: '#AppointmentRequestForm'
		},
		{
			ref: 'AppointmentRequestAddBtn',
			selector: '#AppointmentRequestAddBtn'
		},
		{
			ref: 'AppointmentRequestRequestedField',
			selector: '#AppointmentRequestRequestedField'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'viewport':{
				beforeencounterload: me.onAppEncounterLoad
			},
			'#AppointmentRequestGrid':{
				itemdblclick: me.onAppointmentRequestGridItemDblClick
			},
			'#AppointmentRequestWindow':{
				close: me.onAppointmentRequestWindowClose
			},
			'#AppointmentRequestAddBtn':{
				click: me.onAppointmentRequestAddBtnClick
			},
			'#AppointmentRequestSaveBtn':{
				click: me.onAppointmentRequestSaveBtnClick
			},
			'#AppointmentRequestCancelBtn':{
				click: me.onAppointmentRequestCancelBtnClick
			},
			'#AppointmentRequestDateField > button':{
				click: me.onAppointmentRequestDateFieldButtonsClick
			},
			'#AppointmentRequestProcedureFieldSet > combobox':{
				select: me.onAppointmentRequestProcedureFieldSetCombosSelect
			}
		});
	},

	onAppointmentRequestGridItemDblClick: function(grid, record){
		this.getEditWindow(record);
	},

	onAppEncounterLoad: function(encounter){
		this.getAppointmentRequestGrid().reconfigure(encounter.appointmentrequests());
		encounter.appointmentrequests().load();
	},

	onAppointmentRequestDateFieldButtonsClick: function(btn){
		var now = new Date(),
			date;

		switch (btn.action){
			case '1D':
				date = Ext.Date.add(now, Ext.Date.DAY, 1);
				break;
			case '1W':
				date = Ext.Date.add(now, Ext.Date.DAY, 7);
				break;
			case '2W':
				date = Ext.Date.add(now, Ext.Date.DAY, 14);
				break;
			case '3W':
				date = Ext.Date.add(now, Ext.Date.DAY, 21);
				break;
			case '1M':
				date = Ext.Date.add(now, Ext.Date.MONTH, 1);
				break;
			case '3M':
				date = Ext.Date.add(now, Ext.Date.MONTH, 3);
				break;
			case '6M':
				date = Ext.Date.add(now, Ext.Date.MONTH, 6);
				break;
			case '1Y':
				date = Ext.Date.add(now, Ext.Date.YEAR, 1);
				break;
			case '2Y':
				date = Ext.Date.add(now, Ext.Date.YEAR, 2);
				break;
			case '3Y':
				date = Ext.Date.add(now, Ext.Date.YEAR, 3);
				break;
			default:
				date = now;
		}

		this.getAppointmentRequestRequestedField().setValue(date);
	},

	onAppointmentRequestAddBtnClick: function(){

		var record = Ext.create('App.model.patient.AppointmentRequest',{
			pid: app.patient.pid,
			eid: app.patient.eid,
			requested_uid: app.user.id,
			create_uid: app.user.id,
			create_date: new Date()
		});

		this.getEditWindow(record);
	},

	onAppointmentRequestProcedureFieldSetCombosSelect: function(cmb, records){
		var record = this.getAppointmentRequestForm().getForm().getRecord(),
			values = {};

		values[cmb.name] = records[0].data.FullySpecifiedName;
		values[cmb.name + '_code'] = records[0].data.ConceptId;
		values[cmb.name + '_code_type'] = records[0].data.CodeType;
		record.set(values);
	},

	onAppointmentRequestSaveBtnClick:function(btn){
		var form = this.getAppointmentRequestForm().getForm(),
			record = form.getRecord(),
			values = form.getValues(),
			store = this.getAppointmentRequestGrid().getStore();

		if(form.isValid()){
			record.set(values);
			if(!record.store){
				store.add(record);
			}
			store.sync();
		}

		btn.up('window').close();
	},

	getEditWindow: function(record){
		if(!this.getAppointmentRequestWindow()){
			Ext.create('App.view.patient.encounter.AppointmentRequestWindow');
		}
		this.getAppointmentRequestWindow().show();

		if(record){
			this.getAppointmentRequestForm().getForm().loadRecord(record);
		}

	},

	onAppointmentRequestCancelBtnClick:function(btn){
		btn.up('window').close();
	},

	onAppointmentRequestWindowClose:function(){
		this.getAppointmentRequestForm().getForm().reset(true);
	}
});

Ext.define('App.controller.patient.CarePlanGoals', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'CarePlanGoalsGrid',
			selector: 'careplangoalsgrid'
		},
		{
			ref: 'CarePlanGoalsNewWindow',
			selector: 'careplangoalsnewwindow'
		},
		{
			ref: 'CarePlanGoalsNewForm',
			selector: '#CarePlanGoalsNewForm'
		},
		{
			ref: 'CarePlanGoalPlanDateField',
			selector: '#CarePlanGoalPlanDateField'
		},
		{
			ref: 'NewCarePlanGoalBtn',
			selector: '#NewCarePlanGoalBtn'
		},
		{
			ref: 'SoapPanelForm',
			selector: '#soapPanel form'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'viewport': {
				'beforeencounterload': me.onBeforeOpenEncounter
			},
			'careplangoalsgrid': {
				'itemdblclick': me.onCarePlanGoalsGridItemDblClick
			},
			'#CarePlanGoalSearchField': {
				'select': me.onCarePlanGoalSearchFieldSelect
			},
			'#NewCarePlanGoalBtn': {
				'click': me.onNewCarePlanGoalBtnClick
			},
			'#CarePlanGoalsNewFormCancelBtn': {
				'click': me.onCarePlanGoalsNewFormCancelBtn
			},
			'#CarePlanGoalsNewFormSaveBtn': {
				'click': me.onCarePlanGoalsNewFormSaveBtn
			},
			'#CarePlanGoalPlanDateContainer > button': {
				'click': me.onCarePlanGoalPlanDateContainerButtonsClick
			}
		});
	},

	onCarePlanGoalPlanDateContainerButtonsClick: function(btn){
		var now = new Date(),
			field = this.getCarePlanGoalPlanDateField(),
			date;

		switch (btn.action){
			case '1D':
				date = Ext.Date.add(now, Ext.Date.DAY, 1);
				break;
			case '1W':
				date = Ext.Date.add(now, Ext.Date.DAY, 7);
				break;
			case '2W':
				date = Ext.Date.add(now, Ext.Date.DAY, 14);
				break;
			case '1M':
				date = Ext.Date.add(now, Ext.Date.MONTH, 1);
				break;
			case '3M':
				date = Ext.Date.add(now, Ext.Date.MONTH, 3);
				break;
			case '6M':
				date = Ext.Date.add(now, Ext.Date.MONTH, 6);
				break;
			case '1Y':
				date = Ext.Date.add(now, Ext.Date.YEAR, 1);
				break;
		}

		field.setValue(date || now);

	},

	onCarePlanGoalsGridItemDblClick: function(grid, record){
		var me = this;
		me.getCarePlanGoalsNewWindow().setTitle(record.data.goal + ' [' + record.data.goal_code + ']');
		me.getCarePlanGoalsNewWindow().show(me.getCarePlanGoalsGrid().el);
		me.getCarePlanGoalsNewForm().getForm().loadRecord(record);
	},

	onCarePlanGoalSearchFieldSelect: function(cmb, records){
		var me = this,
			form = me.getCarePlanGoalsNewForm().getForm(),
			record = form.getRecord();

		record.set({
			'goal_code': records[0].data.ConceptId,
			'goal_code_type': records[0].data.CodeType
		});
	},

	onBeforeOpenEncounter: function(encounter){
		if(this.getCarePlanGoalsGrid()){
			this.getCarePlanGoalsGrid().getStore().load({
				filters:[
					{
						property: 'eid',
						value: encounter.data.eid
					}
				]
			});
		}

	},

	onNewCarePlanGoalBtnClick: function(btn){
		var me = this,
			grid = btn.up('grid'),
			store = grid.getStore(),
			records;

		records = store.add({
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			created_date: new Date()
		});

		me.getCarePlanGoalsNewWindow().setTitle(_('new_goal'));
		me.getCarePlanGoalsNewWindow().setSize(me.getSoapPanelForm().getSize());
		me.getCarePlanGoalsNewWindow().show(me.getCarePlanGoalsGrid().el);
		me.getCarePlanGoalsNewForm().getForm().loadRecord(records[0]);

	},

	onCarePlanGoalsNewFormSaveBtn:function(btn){
		var me = this,
			form = me.getCarePlanGoalsNewForm().getForm(),
			record = form.getRecord(),
			values = form.getValues();

		if(form.isValid()){

			record.set(values);
			record.store.sync({
				success:function(){
					app.msg(_('sweet'), _('record_saved'));
				},
				failure:function(){
					app.msg(_('oops'), _('record_error'), true);
				}
			});

			me.getCarePlanGoalsNewForm().getForm().reset();
			me.getCarePlanGoalsNewWindow().close();
		}

	},

	onCarePlanGoalsNewFormCancelBtn:function(btn){
		var me = this;
		me.getCarePlanGoalsGrid().getStore().rejectChanges();
		me.getCarePlanGoalsNewForm().getForm().reset();
		me.getCarePlanGoalsNewWindow().close();

	}


});
Ext.define('App.controller.patient.CCD', {
	extend: 'Ext.app.Controller',
	requires: [],
	refs: [
		{
			ref: 'PatientCcdPanel',
			selector: 'patientccdpanel'
		},
		{
			ref: 'PatientCcdPanelMiFrame',
			selector: 'patientccdpanel > miframe'
		},
		{
			ref: 'PatientCcdPanelEncounterCmb',
			selector: '#PatientCcdPanelEncounterCmb'
		},
		{
			ref: 'PatientCcdPanelExcludeCheckBoxGroup',
			selector: '#PatientCcdPanelExcludeCheckBoxGroup'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientccdpanel': {
				activate: me.onPanelActivate
			},
			'#viewCcdBtn': {
				click: me.onViewCcdBtnClick
			},
			'#archiveCcdBtn': {
				click: me.onArchiveCcdBtnClick
			},
			'#exportCcdBtn': {
				click: me.onExportCcdBtnClick
			},
			'#printCcdBtn': {
				click: me.onPrintCcdBtnClick
			},
			'#PatientCcdPanelEncounterCmb': {
				select: me.onPatientCcdPanelEncounterCmbSelect
			}
		});
	},

	eid: null,

	onPanelActivate: function(panel){
		panel.down('toolbar').down('#PatientCcdPanelEncounterCmb').setVisible(this.eid === null);
		this.onViewCcdBtnClick(panel.down('toolbar').down('button'));
	},

	onViewCcdBtnClick: function(btn){
		btn.up('panel').query('miframe')[0].setSrc(
			'dataProvider/CCDDocument.php?action=view&site=' + window.site +
			'&pid=' + app.patient.pid +
			'&eid=' + this.getEid(btn) +
			'&exclude=' + this.getExclusions(btn) +
			'&token=' + app.user.token
		);
		app.AuditLog('Patient summary CCD viewed');
	},

	onArchiveCcdBtnClick: function(btn){
		btn.up('panel').query('miframe')[0].setSrc(
			'dataProvider/CCDDocument.php?action=archive&site=' + window.site +
			'&pid=' + app.patient.pid +
			'&eid=' + this.getEid(btn) +
			'&exclude=' + this.getExclusions(btn) +
			'&token=' + app.user.token
		);
		app.AuditLog('Patient summary CCD archived');
	},

	onExportCcdBtnClick: function(btn){
		btn.up('panel').query('miframe')[0].setSrc(
			'dataProvider/CCDDocument.php?action=export&site=' + window.site +
			'&pid=' + app.patient.pid +
			'&eid=' + this.getEid(btn) +
			'&exclude=' + this.getExclusions(btn) +
			'&token=' + app.user.token
		);
		app.AuditLog('Patient summary CCD exported');
	},

	onPatientCcdPanelEncounterCmbSelect: function(cmb, records){
		cmb.selectedRecord = records[0];
		cmb.up('panel').query('miframe')[0].setSrc(
			'dataProvider/CCDDocument.php?action=view&site=' + window.site +
			'&pid=' + app.patient.pid +
			'&eid=' + this.getEid(cmb) +
			'&exclude=' + this.getExclusions(cmb) +
			'&token=' + app.user.token
		);
		app.AuditLog('Patient summary CCD exported');
	},

	onPrintCcdBtnClick: function(btn){
		var cont = btn.up('panel').query('miframe')[0].frameElement.dom.contentWindow;
		cont.focus();
		cont.print();
	},

	getEid: function(cmp){
		var cmb = cmp.up('toolbar').query('#PatientCcdPanelEncounterCmb')[0];
		return cmb.selectedRecord ? cmb.selectedRecord.data.eid : this.eid;
	},

	cmbReset: function(cmp){
		var cmb = cmp.up('toolbar').query('#PatientCcdPanelEncounterCmb')[0];
		cmb.reset();
		delete cmb.selectedRecord;
	},

	getExclusions: function(cmp){
		var values = cmp.up('toolbar').query('#PatientCcdPanelExcludeCheckBoxGroup')[0].getValue(),
			excludes = values.exclude || [];
		return excludes.join ? excludes.join(',') : excludes;
	}

});

Ext.define('App.controller.patient.CCDImport', {
	extend: 'Ext.app.Controller',
	requires: [
        'App.view.patient.windows.PossibleDuplicates'
	],
	refs: [
		{
			ref: 'CcdImportWindow',
			selector: 'ccdimportwindow'
		},
		{
			ref: 'CcdImportPreviewWindow',
			selector: 'ccdimportpreviewwindow'
		},

		// import patient...
		{
			ref: 'CcdImportPatientForm',
			selector: '#CcdImportPatientForm'
		},
		{
			ref: 'CcdImportActiveProblemsGrid',
			selector: '#CcdImportActiveProblemsGrid'
		},
		{
			ref: 'CcdImportMedicationsGrid',
			selector: '#CcdImportMedicationsGrid'
		},
		{
			ref: 'CcdImportAllergiesGrid',
			selector: '#CcdImportAllergiesGrid'
		},


		// marge patient...
		{
			ref: 'CcdPatientPatientForm',
			selector: '#CcdPatientPatientForm'
		},
		{
			ref: 'CcdPatientActiveProblemsGrid',
			selector: '#CcdPatientActiveProblemsGrid'
		},
		{
			ref: 'CcdPatientMedicationsGrid',
			selector: '#CcdPatientMedicationsGrid'
		},
		{
			ref: 'CcdPatientAllergiesGrid',
			selector: '#CcdPatientAllergiesGrid'
		},


		// preview patient...
		{
			ref: 'CcdImportPreviewPatientForm',
			selector: '#CcdImportPreviewPatientForm'
		},
		{
			ref: 'CcdImportPreviewActiveProblemsGrid',
			selector: '#CcdImportPreviewActiveProblemsGrid'
		},
		{
			ref: 'CcdImportPreviewMedicationsGrid',
			selector: '#CcdImportPreviewMedicationsGrid'
		},
		{
			ref: 'CcdImportPreviewAllergiesGrid',
			selector: '#CcdImportPreviewAllergiesGrid'
		},


		// buttons...
		{
			ref: 'CcdImportWindowPreviewBtn',
			selector: '#CcdImportWindowPreviewBtn'
		},
		{
			ref: 'CcdImportWindowImportBtn',
			selector: '#CcdImportWindowImportBtn'
		},
		{
			ref: 'CcdImportWindowCloseBtn',
			selector: '#CcdImportWindowCloseBtn'
		},
		{
			ref: 'CcdImportWindowPatientSearchField',
			selector: '#CcdImportWindowPatientSearchField'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'ccdimportwindow': {
				show: me.onCcdImportWindowShow
			},
			'#CcdImportPreviewWindowImportBtn': {
				click: me.onCcdImportPreviewWindowImportBtnClick
			},
			'#CcdImportWindowPreviewBtn': {
				click: me.onCcdImportWindowPreviewBtnClick
			},
			'#CcdImportWindowCloseBtn': {
				click: me.onCcdImportWindowCloseBtnClick
			},
			'#CcdImportWindowPatientSearchField': {
				select: me.onCcdImportWindowPatientSearchFieldSelect
			},
			'#CcdImportWindowSelectAllField': {
				change: me.onCcdImportWindowSelectAllFieldChange
			},
			'#CcdImportWindowViewRawCcdBtn': {
				click: me.onCcdImportWindowViewRawCcdBtnClick
			},
			'#PossiblePatientDuplicatesWindow > grid': {
				itemdblclick: me.onPossiblePatientDuplicatesGridItemDblClick
			},
			'#PossiblePatientDuplicatesContinueBtn': {
				click: me.onPossiblePatientDuplicatesContinueBtnClick
			},
			'#CcdImportPreviewWindowCancelBtn': {
				click: me.onCcdImportPreviewWindowCancelBtnClick
			}
		});
	},

	CcdImport: function(ccdData){
		if(!this.getCcdImportWindow()){
			Ext.create('App.view.patient.windows.CCDImport');
		}
		this.getCcdImportWindow().ccdData = ccdData;
		this.getCcdImportWindow().show();
	},

	onCcdImportWindowShow: function(win){
		this.doLoadCcdData(win.ccdData);
	},

    /*
    Event when the CDA Import and Viewer shows up.
    Also will check for duplicates in the database and if a posible duplicate is found
    show the posible duplicate window
     */
	doLoadCcdData: function(data){
		var me = this,
			ccdPatientForm = me.getCcdImportPatientForm().getForm(),
			patient = Ext.create('App.model.patient.Patient', data.patient),
            phone;
        ccdPatientForm.loadRecord(patient);

        App.app.getController('patient.Patient').lookForPossibleDuplicates(
            {
                fname: patient.data.fname,
                lname: patient.data.lname,
                sex: patient.data.sex,
                DOB: patient.data.DOB
            },
            'ccdImportDuplicateAction',
            function(patient) {
            }
        );

		// list 59 ethnicity
		// list 14 race
        // phone from Patient Contacts
		if(data.patient.race && data.patient.race !== ''){
			CombosData.getDisplayValueByListIdAndOptionValue(14, data.patient.race, function(response){
                ccdPatientForm.findField('race_text').setValue(response);
			});
		}

		if(data.patient.ethnicity && data.patient.ethnicity !== ''){
			CombosData.getDisplayValueByListIdAndOptionCode(59, data.patient.ethnicity, function(response){
                ccdPatientForm.findField('ethnicity_text').setValue(response);
			});
		}

        if(data.patient.pid && data.patient.pid !== '') {
            PatientContacts.getSelfContact(data.patient.pid, function (response) {
                phone = response.phone_use_code + '-' + response.phone_area_code + '-' + response.phone_local_number;
                ccdPatientForm.findField('phones').setValue(phone);
            });
        }

		if(data){
			if(data.allergies && data.allergies.length > 0){
				me.reconfigureGrid('getCcdImportAllergiesGrid', data.allergies);
			}
			if(data.medications && data.medications.length > 0){
				me.reconfigureGrid('getCcdImportMedicationsGrid', data.medications);
			}
			if(data.problems && data.problems.length > 0){
				me.reconfigureGrid('getCcdImportActiveProblemsGrid', data.problems);
			}
		}
	},

    /*
     Event fired when in the duplicate window data grid double click on an item
     this method will copy the patient information selected from the data grid, into
     the system information panel.
     */
    onPossiblePatientDuplicatesGridItemDblClick:function(grid, record){
        var me = this,
            cmb = me.getCcdImportWindowPatientSearchField(),
            systemPatientForm = me.getCcdPatientPatientForm().getForm(),
            store = cmb.getStore(),
            win = grid.up('window');

        if(win.action != 'ccdImportDuplicateAction') return;

        store.removeAll();
        me.doLoadMergePatientData(record.data.pid);
        cmb.select(record);
        win.close();
        me.promptVerifyPatientImport();
    },

	reconfigureGrid: function(getter, data){
		var me = this,
			grid = me[getter]();
		grid.getStore().loadRawData(data);
	},

	onCcdImportWindowPatientSearchFieldSelect: function(cmb, records){
		var me = this,
			importPatient = me.getCcdImportPatientForm().getForm().getRecord();

		if(importPatient.data.sex != records[0].data.sex){
			app.msg(_('warning'), _('records_sex_are_not_equal'), true);
		}

		if(importPatient.data.DOB.getFullYear() != records[0].data.DOB.getFullYear() &&
			importPatient.data.DOB.getMonth() != records[0].data.DOB.getMonth() &&
			importPatient.data.DOB.getDate() != records[0].data.DOB.getDate()){
			app.msg(_('warning'), _('records_date_of_birth_are_not_equal'), true);
		}

		me.doLoadMergePatientData(records[0].data.pid);

	},

	doLoadMergePatientData: function(pid){
		var me = this,
			pForm = me.getCcdPatientPatientForm().getForm(),
            phone;

		App.model.patient.Patient.load(pid, {
			success: function(patient) {
				pForm.loadRecord(patient);

				if(patient.data.race && patient.data.race !== ''){
					CombosData.getDisplayValueByListIdAndOptionValue(14, patient.data.race, function(response){
						pForm.findField('race_text').setValue(response);
					});
				}

				if(patient.data.ethnicity && patient.data.ethnicity !== ''){
					CombosData.getDisplayValueByListIdAndOptionValue(59, patient.data.ethnicity, function(response){
						pForm.findField('ethnicity_text').setValue(response);
					});
				}

                if(patient.data.pid) {
                    PatientContacts.getSelfContact(patient.data.pid, function (response) {
                        phone = response.phone_use_code + '-' + response.phone_area_code + '-' + response.phone_local_number;
                        pForm.findField('phones').setValue(phone);
                    });
                }

				me.getCcdPatientMedicationsGrid().reconfigure(patient.medications());
				patient.medications().load({
					params: { reconciled: true }
				});

				me.getCcdPatientAllergiesGrid().reconfigure(patient.allergies());
				patient.allergies().load();

				me.getCcdPatientActiveProblemsGrid().reconfigure(patient.activeproblems());
				patient.activeproblems().load();
			}
		});
	},

	onCcdImportWindowCloseBtnClick: function(){
		this.getCcdImportWindow().close();
	},

	onCcdImportWindowPreviewBtnClick: function(){
		var me = this,

			reconcile = true,

			pForm,
			importPatient = me.getCcdImportPatientForm().getForm().getRecord(),
			importActiveProblems = me.getCcdImportActiveProblemsGrid().getSelectionModel().getSelection(),
			importMedications = me.getCcdImportMedicationsGrid().getSelectionModel().getSelection(),
			importAllergies = me.getCcdImportAllergiesGrid().getSelectionModel().getSelection(),

			mergePatient = me.getCcdPatientPatientForm().getForm().getRecord(),
			mergeActiveProblems = me.getCcdPatientActiveProblemsGrid().getStore().data.items,
			mergeMedications = me.getCcdPatientMedicationsGrid().getStore().data.items,
			mergeAllergies = me.getCcdPatientAllergiesGrid().getStore().data.items,

			isMerge = mergePatient !== undefined,

			i, store, records,

            phone;

		// check is merge and nothing is selected
		if(
			isMerge &&
			importActiveProblems.length === 0 &&
			importMedications.length === 0 &&
			importAllergies.length === 0
		){
			app.msg(_('oops'), _('nothing_to_merge'), true);
			return;
		}

		if(!me.getCcdImportPreviewWindow()){
			Ext.create('App.view.patient.windows.CCDImportPreview');
		}
		me.getCcdImportPreviewWindow().show();

		pForm = me.getCcdImportPreviewPatientForm().getForm();

		if(isMerge){
			me.getCcdImportPreviewPatientForm().getForm().loadRecord(mergePatient);

			if(mergePatient.data.race && mergePatient.data.race !== ''){
				CombosData.getDisplayValueByListIdAndOptionValue(14, mergePatient.data.race, function(response){
					pForm.findField('race_text').setValue(response);
				});
			}

			if(mergePatient.data.ethnicity && mergePatient.data.ethnicity !== ''){
				CombosData.getDisplayValueByListIdAndOptionValue(59, mergePatient.data.ethnicity, function(response){
					pForm.findField('ethnicity_text').setValue(response);
				});
			}

            if(mergePatient.data.pid && mergePatient.data.pid !== '') {
                PatientContacts.getSelfContact(mergePatient.data.pid, function (response) {
                    phone = response.phone_use_code + '-' + response.phone_area_code + '-' + response.phone_local_number;
                    pForm.findField('phones').setValue(phone);
                });
            }
		}else{
			me.getCcdImportPreviewPatientForm().getForm().loadRecord(importPatient);

			if(importPatient.data.race && importPatient.data.race !== ''){
				CombosData.getDisplayValueByListIdAndOptionValue(14, importPatient.data.race, function(response){
					pForm.findField('race_text').setValue(response);
				});
			}

			if(importPatient.data.ethnicity && importPatient.data.ethnicity !== ''){
				CombosData.getDisplayValueByListIdAndOptionCode(59, importPatient.data.ethnicity, function(response){
					pForm.findField('ethnicity_text').setValue(response);
				});
			}
            if(importPatient.data.pid && importPatient.data.pid !== '') {
                PatientContacts.getSelfContact(importPatient.data.pid, function (response) {
                    phone = response.phone_use_code + '-' + response.phone_area_code + '-' + response.phone_local_number;
                    pForm.findField('phones').setValue(phone);
                });
            }
		}

		if(reconcile){
			// reconcile active problems
			records = Ext.clone(mergeActiveProblems);
			store = me.getCcdPatientActiveProblemsGrid().getStore();
			for(i=0; i < importActiveProblems.length; i++){
				if(store.find('code' , importActiveProblems[i].data.code) !== -1) continue;
				Ext.Array.insert(records, 0, [importActiveProblems[i]]);
			}
			me.getCcdImportPreviewActiveProblemsGrid().getStore().loadRecords(records);

			// reconcile medications
			records = Ext.clone(mergeMedications);
			store = me.getCcdPatientMedicationsGrid().getStore();
			for(i=0; i < importMedications.length; i++){
				if(store.find('RXCUI' , importMedications[i].data.RXCUI) !== -1) continue;
				Ext.Array.insert(records, 0, [importMedications[i]]);
			}
			me.getCcdImportPreviewMedicationsGrid().getStore().loadRecords(records);

			// reconcile allergies
			records = Ext.clone(mergeAllergies);
			store = me.getCcdPatientAllergiesGrid().getStore();
			for(i=0; i < importAllergies.length; i++){
				if(store.find('allergy_code' , importAllergies[i].data.allergy_code) !== -1) continue;
				Ext.Array.insert(records, 0, [importAllergies[i]]);
			}
			me.getCcdImportPreviewAllergiesGrid().getStore().loadRecords(records);

		}else{
			me.getCcdImportPreviewActiveProblemsGrid().getStore().loadRecords(
				Ext.Array.merge(importActiveProblems, mergeActiveProblems)
			);
			me.getCcdImportPreviewMedicationsGrid().getStore().loadRecords(
				Ext.Array.merge(importMedications, mergeMedications)
			);
			me.getCcdImportPreviewAllergiesGrid().getStore().loadRecords(
				Ext.Array.merge(importAllergies, mergeAllergies)
			);
		}
	},

	onCcdImportPreviewWindowImportBtnClick: function(){
		var me = this,
			patient = me.getCcdImportPreviewPatientForm().getRecord();

		if(patient.data.pid){
			me.promptVerifyPatientImport(patient);
		}else{
			App.app.getController('patient.Patient').lookForPossibleDuplicates(
				{
					fname: patient.data.fname,
					lname: patient.data.lname,
					sex: patient.data.sex,
					DOB: patient.data.DOB
				},
				'ccdImportDuplicateAction',
				function(records){
					if(records.length === 0){
						me.promptVerifyPatientImport(patient);
					}
				}
			);
		}
	},

	promptVerifyPatientImport:function(patient){
		var me = this;

		Ext.Msg.show({
			title: _('wait'),
			msg: patient.data.pid ? _('patient_merge_verification') : _('patient_import_verification'),
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){
				if(btn == 'yes'){
					if(patient.data.pid){
						me.doPatientSectionsImport(patient);
					}else{
						me.doPatientImport(patient);
					}
				}
			}
		});
	},

	doPatientImport: function(patient){
		var me = this;

		patient.set({
			create_uid: app.user.id,
			create_date: new Date()
		});

		patient.save({
			callback:function(record, operation, success){
				if(success){
					me.doPatientSectionsImport(record);
				}else{
					app.msg(_('oops'), _('record_error'), true);
				}
			}
		});
	},

	onCcdImportPreviewWindowCancelBtnClick: function(btn){
		btn.up('window').close();
	},

	doPatientSectionsImport: function(patient){
		var me = this,
			now = new Date(),
			pid = patient.data.pid,

		// Get all the stores of the dataGrids
			problems = me.getCcdImportPreviewActiveProblemsGrid().getStore().data.items,
			medications = me.getCcdImportPreviewMedicationsGrid().getStore().data.items,
			allergies = me.getCcdImportPreviewAllergiesGrid().getStore().data.items;

		// Allergies
		for(Index = 0; Index < allergies.length; Index++){

			if(allergies[Index].data.id && allergies[Index].data.id > 0)  continue;

			allergies[Index].set({
                pid: pid,
                created_uid: app.patient.id,
                create_date: now
            });
            allergies[Index].setDirty();
			allergies[Index].save();
		}

		// Medications
		for(Index = 0; Index < medications.length; Index++){

			if(medications[Index].data.id && medications[Index].data.id > 0)  continue;

			medications[Index].set({
				pid: pid,
				created_uid: app.patient.id,
				create_date: now
			});
            medications[Index].setDirty();
			medications[Index].save();
		}

		// Problems
		for(Index = 0; Index < problems.length; Index++){

			if(problems[Index].data.id && problems[Index].data.id > 0)  continue;

			problems[Index].set({
				pid: pid,
				created_uid: app.patient.id,
				create_date: now
			});
            problems[Index].setDirty();
			problems[Index].save({
				callback: function(){

					me.getCcdImportWindow().close();
					me.getCcdImportPreviewWindow().close();

					app.setPatient(pid, null, null, function(){
						app.openPatientSummary();
					});

					app.msg(_('sweet'), _('patient_data_imported'));
				}
			});
		}
	},

	onPossiblePatientDuplicatesContinueBtnClick:function(btn){
		if(btn.up('window').action != 'ccdImportDuplicateAction') return;
        if(this.getCcdImportPreviewPatientForm()){

        }
		this.promptVerifyPatientImport(this.getCcdImportPreviewPatientForm().getRecord());
	},

	onCcdImportWindowSelectAllFieldChange: function(field, selected){
		var me = this,
			grids = me.getCcdImportWindow().query('grid');

		for(var Index = 0; Index < grids.length; Index++){
			var sm = grids[Index].getSelectionModel();
			if(selected){
				sm.selectAll();
			}else{
				sm.deselectAll();
			}
		}
	},

	onCcdImportWindowViewRawCcdBtnClick: function(){
		var me = this,
			record = Ext.create('App.model.patient.PatientDocumentsTemp', {
				create_date: new Date(),
				document_name: 'temp_ccd.xml',
				document: me.getCcdImportWindow().ccd
			});

		record.save({
			callback: function(record){
				app.onDocumentView(record.data.id, 'ccd');
			}
		});
	}
});
Ext.define('App.controller.patient.CognitiveAndFunctionalStatus', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'CognitiveAndFunctionalStatusPanel',
			selector: 'patientcognitiveandfunctionalstatuspanel'
		},
		{
			ref: 'NewFunctionalStatusBtn',
			selector: '#newFunctionalStatusBtn'
		}

	],

	init: function(){
		var me = this;
		me.control({
			'patientcognitiveandfunctionalstatuspanel': {
				activate: me.onCognitiveAndFunctionalStatusPanelActive
			},
			'#newFunctionalStatusBtn': {
				click: me.onNewFunctionalStatusBtnClick
			},
			'#functionalStatusCategoryCombo': {
				select: me.onFunctionalStatusCategoryComboSelect
			},
			'#functionalStatusSatausCombo': {
				select: me.onFunctionalStatusStatusComboSelect
			},
			'#functionalStatusCodeCombo': {
				select: me.onFunctionalStatusCodeComboSelect
			}
		});
	},

	onCognitiveAndFunctionalStatusPanelActive: function(grid){
		var store = grid.getStore();

		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	onNewFunctionalStatusBtnClick: function(btn){
		var grid = btn.up('grid'),
			store = grid.getStore(),
			records;
		grid.editingPlugin.cancelEdit();
		records = store.add({
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			begin_date: new Date(),
			created_date: new Date()
		});
		grid.editingPlugin.startEdit(records[0], 0);
	},

	onFunctionalStatusCategoryComboSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();

		record.set({
			category_code: records[0].data.code,
			category_code_type: records[0].data.code_type
		});
	},

	onFunctionalStatusStatusComboSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();

		record.set({
			status_code: records[0].data.code,
			status_code_type: records[0].data.code_type
		});
	},

	onFunctionalStatusCodeComboSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();

		record.set({
			code: records[0].data.ConceptId,
			code_type: records[0].data.CodeType
		});
	}

});
Ext.define('App.controller.patient.DecisionSupport', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'DecisionSupportWarningPanel',
			selector: '#DecisionSupportWarningPanel'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'viewport':{
				beforeencounterload: me.onBeforeEncounterLoad
			},
			'#DecisionSupportWarningPanelCloseBtn':{
				click: me.DecisionSupportWarningPanelCloseBtnClick
			}
		});

	},

	DecisionSupportWarningPanelCloseBtnClick: function(btn){
		var warning = btn.up('decisionsupportwarningpanel');
		warning.collapse();
		warning.hide();
		warning.removeAll();
	},

	onBeforeEncounterLoad: function(){
		this.getDecisionSupportAlerts();
	},

	getDecisionSupportAlerts:function(){
        var btn,
            warning,
            i;

		if(!this.getDecisionSupportWarningPanel()) return;

		warning = this.getDecisionSupportWarningPanel();
		warning.collapse();
		warning.hide();
		warning.removeAll();

		DecisionSupport.getAlerts({ pid:app.patient.pid, alertType:'P' }, function(results){
			for(i=0; i < results.length; i++){
				btn = {
					xtype: 'button',
					margin: '2 5',
					icon: (results[i].reference != '' ? 'resources/images/icons/blueInfo.png' : null),
					text: results[i].description,
					result: results[i],
					handler: function(btn){
						if(btn.result.reference != ''){
							window.open(btn.result.reference, "_blank", "toolbar=no, scrollbars=yes, resizable=yes, top=10, left=10, width=1000, height=600");
						}else{
							app.msg(_('oops'), _('no_reference_provided'), true);
						}
					}
				};

				warning.add(btn);
			}

			if(results.length > 0){
				warning.show();
				warning.expand();
			}

		});
	}

});

Ext.define('App.controller.patient.DoctorsNotes', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'DoctorsNotesGrid',
			selector: 'patientdoctorsnotepanel'
		},
		{
			ref: 'PrintDoctorsNoteBtn',
			selector: '#printDoctorsNoteBtn'
		},
		{
			ref: 'NewDoctorsNoteBtn',
			selector: '#newDoctorsNoteBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientdoctorsnotepanel': {
				activate: me.onDoctorsNotesGridActive,
				selectionchange: me.onDoctorsNotesGridSelectionChange,
				beforerender: me.onDoctorsNotesGridBeforeRender,
				beforeedit: me.onDoctorsNotesGridBeforeEdit,
				validateedit: me.onDoctorsNotesGridValidateEdit
			},
			'#printDoctorsNoteBtn': {
				click: me.onPrintDoctorsNoteBtn
			},
			'#newDoctorsNoteBtn': {
				click: me.onNewDoctorsNoteBtn
			}
		});

		me.docTemplates = {};

		/** get the document templates data of grid renderer **/
		CombosData.getTemplatesTypes(function(provider, response){
			for(var i = 0; i < response.result.length; i++){
				if(response.result[i].id) me.docTemplates[response.result[i].id] = response.result[i].title;
			}
		});

	},

	onDoctorsNotesGridBeforeRender: function(grid){
		app.on('patientunset', function(){
			grid.editingPlugin.cancelEdit();
			grid.getStore().removeAll();
		});
	},

	onDoctorsNotesGridSelectionChange: function(sm, selected){
		this.getPrintDoctorsNoteBtn().setDisabled(selected.length == 0);
	},

	onNewDoctorsNoteBtn: function(btn){
		var grid = btn.up('grid');

		grid.editingPlugin.cancelEdit();
		grid.getStore().insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			refill: 0,
			order_date: new Date(),
			from_date: new Date()
		});
		grid.editingPlugin.startEdit(0, 0);
	},

	onDoctorsNotesGridValidateEdit: function(plugin, e){
		var multiField = plugin.editor.query('multitextfield')[0],
			values = multiField.getValue();

		e.record.set({restrictions: values});
	},

	onDoctorsNotesGridBeforeEdit: function(plugin, e){
		var multiField = plugin.editor.query('multitextfield')[0],
			data = e.record.data.restrictions;
		multiField.setValue(data);
	},

	onPrintDoctorsNoteBtn: function(note){
		var me = this,
			grid = me.getDoctorsNotesGrid(),
			record = (note.isModel ? note : grid.getSelectionModel().getSelection()[0]),
			params = {};

		params.pid = record.data.pid;
		params.eid = record.data.eid;
		params.docType = 'Doctors Note';
		params.templateId = record.data.template_id;
		params.docNoteid = record.data.id;

		DocumentHandler.createTempDocument(params, function(provider, response){
			if(window.dual){
				dual.onDocumentView(response.result.id, 'Doctors Note');
			}else{
				app.onDocumentView(response.result.id, 'Doctors Note');
			}
		});
	},

	onDoctorsNotesGridActive: function(grid){
		var store = grid.getStore();
		if(!grid.editingPlugin.editing){
			store.clearFilter(true);
			store.filter([
				{
					property: 'pid',
					value: app.patient.pid
				}
			]);
		}
	},

	templatesRenderer: function(v){
		return this.docTemplates[v];
	}

});
Ext.define('App.controller.patient.FamilyHistory', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'FamilyHistoryWindow',
			selector: 'familyhistorywindow'
		},
		{
			ref: 'FamilyHistoryGrid',
			selector: 'patientfamilyhistorypanel'
		},
		{
			ref: 'FamilyHistoryForm',
			selector: '#FamilyHistoryForm'
		},
		{
			ref: 'FamilyHistorySaveBtn',
			selector: '#familyHistorySaveBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientfamilyhistorypanel': {
				activate: me.onFamilyHistoryGridActivate
			},
			'#FamilyHistoryGridAddBtn': {
				click: me.onFamilyHistoryGridAddBtnClick
			},
			'#FamilyHistoryWindowSaveBtn': {
				click: me.onFamilyHistoryWindowSaveBtnClick
			},
			'#FamilyHistoryWindowCancelBtn': {
				click: me.onFamilyHistoryWindowCancelBtnClick
			}
		});
	},

	onFamilyHistoryGridActivate: function(grid){
		var store = grid.getStore();

		store.clearFilter(true);
		store.load({
			filters: [
				{
					property: 'pid',
					value: app.patient.pid
				}
			]
		});
	},

	onFamilyHistoryGridAddBtnClick:function(){
		this.showFamilyHistoryWindow();
		this.getFamilyHistoryForm().getForm().reset();
	},

	showFamilyHistoryWindow: function(){
		if(!this.getFamilyHistoryWindow()){
			Ext.create('App.view.patient.windows.FamilyHistory');
		}
		this.getFamilyHistoryWindow().show();
	},

	onFamilyHistoryWindowSaveBtnClick:function(){
		var grid = this.getFamilyHistoryGrid(),
			form = this.getFamilyHistoryForm().getForm(),
			store = grid.getStore(),
			values = form.getValues(),
			histories = [],
			isValid =  true,
            foo;

		Ext.Object.each(values, function(key, value){

			if(value == '0~0') return;

			foo = value.split('~'),
				condition = foo[0].split(':'),
				relation = foo[1].split(':');

			if(isValid && relation[0] == '0'){
				isValid = false;
			}

			Ext.Array.push(histories, {
				pid: app.patient.pid,
				eid: app.patient.eid,
				relation: relation[2],
				relation_code: relation[1],
				relation_code_type: relation[0],
				condition: condition[2],
				condition_code: condition[1],
				condition_code_type: condition[0],
				create_uid: app.user.id,
				create_date: new Date()
			});
		});

		if(histories.length == 0){
			app.msg(_('oops'), _('no_history_selected'), true);
			return;
		}

		if(!isValid){
			app.msg(_('oops'), _('missing_required_information'), true);
			return;
		}

		store.add(histories);
		store.sync();
		this.getFamilyHistoryWindow().close();

	},

	onFamilyHistoryWindowCancelBtnClick:function(){
		this.getFamilyHistoryWindow().close();
	}

});

Ext.define('App.controller.patient.HL7', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: '#Adt04MessageBtn',
			selector: 'Adt04MessageBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'#soapForm': {
				render: me.onSoapFormRender
			},
			'#Adt04MessageBtn': {
				click: me.onAdt04MessageBtnClick
			}
		});
	},

	onSoapFormRender: function(form){
		if(a('hl7_send_adt04')){
			form.getDockedItems()[0].insert(0, {
				xtype:'button',
				text: _('adt04'),
				itemId: 'Adt04MessageBtn'
			});
		}
	},

	onAdt04MessageBtnClick: function(){

		HL7Messages.broadcastADT({
			pid: app.patient.pid,
			eid: app.patient.eid,
			fid: app.user.facility,
			event: 'A04'
		}, function(response){
		});
	}



});

Ext.define('App.controller.patient.Immunizations', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
        {
            ref: 'SubmitImmunizationWindow',
            selector: '#SubmitImmunizationWindow'
        },
		{
			ref: 'ImmunizationPanel',
			selector: 'patientimmunizationspanel'
		},
		{
			ref: 'ImmunizationsGrid',
			selector: 'patientimmunizationspanel #patientImmunizationsGrid'
		},
		{
			ref: 'CvxGrid',
			selector: 'patientimmunizationspanel #cvxGrid'
		},
		{
			ref: 'CvxMvxCombo',
			selector: 'cvxmanufacturersforcvxcombo'
		},
		{
			ref: 'AddImmunizationBtn',
			selector: 'patientimmunizationspanel #addImmunizationBtn'
		},
		{
			ref: 'ReviewImmunizationsBtn',
			selector: 'patientimmunizationspanel #reviewImmunizationsBtn'
		},
		{
			ref: 'SubmitVxuBtn',
			selector: 'patientimmunizationspanel #submitVxuBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientimmunizationspanel':{
				activate: me.onPatientImmunizationsPanelActive
			},
			'patientimmunizationspanel #patientImmunizationsGrid':{
				selectionchange: me.onPatientImmunizationsGridSelectionChange,
				beforeedit: me.onPatientImmunizationsGridBeforeEdit,
				edit: me.onPatientImmunizationsGridEdit
			},
			'patientimmunizationspanel #cvxGrid':{
				expand: me.onCvxGridExpand
			},
			'patientimmunizationspanel #submitVxuBtn':{
				click: me.onSubmitVxuBtnClick
			},
			'patientimmunizationspanel #reviewImmunizationsBtn':{
				click: me.onReviewImmunizationsBtnClick
			},
			'patientimmunizationspanel #addImmunizationBtn':{
				click: me.onAddImmunizationBtnClick
			},
			'form #immunizationsearch':{
				select: me.onImmunizationSearchSelect
			},
			'#patientImmunizationsEditFormAdministeredByField':{
				select: me.onPatientImmunizationsEditFormAdministeredByFieldSelect
			},
            '#SubmitImmunizationWindow #ActiveFacilitiesCombo':{
                change: me.onActiveFacilitiesChange
            },
            '#SubmitImmunizationWindow #ApplicationCombo':{
                change: me.onApplicationChange
            }
		});
	},

	onPatientImmunizationsEditFormAdministeredByFieldSelect:function(comb, records){
		var record = comb.up('form').getForm().getRecord();

		record.set({
			administered_uid: records[0].data.id,
			administered_title: records[0].data.title,
			administered_fname: records[0].data.fname,
			administered_mname: records[0].data.mname,
			administered_lname: records[0].data.lname
		});
	},

	onImmunizationSearchSelect:function(combo, record){
		var form =  combo.up('form').getForm();

		this.getCvxMvxCombo().getStore().load({
			params:{
				cvx_code: record[0].data.cvx_code
			}
		});
		form.getRecord().set({
			code: record[0].data.cvx_code,
			code_type: 'CVX'
		});
	},

	onCvxGridExpand:function(grid){
		grid.getStore().load();
	},

	onPatientImmunizationsGridSelectionChange:function(sm, selected){
		this.getSubmitVxuBtn().setDisabled(selected.length === 0);
	},

	onPatientImmunizationsGridBeforeEdit:function(plugin, context){
		var field = plugin.editor.getForm().findField('administered_by');

		field.forceSelection = false;
		Ext.Function.defer(function(){
			field.setValue(context.record.data.administered_by);
			field.forceSelection = true;
		}, 200);
	},

	onPatientImmunizationsGridEdit:function(plugin, context){
		app.fireEvent('immunizationedit', this, context.record);
	},

	onPatientImmunizationsPanelActive:function(){
		this.loadPatientImmunizations();
	},

	onSubmitVxuBtnClick:function(){
		var me = this,
			selected = me.getImmunizationsGrid().getSelectionModel().getSelection(),
			immunizations = [];

		me.vxuWindow = me.getVxuWindow();

		for(var i=0; i < selected.length; i++){
			immunizations.push(selected[i].data);
		}

		me.vxuWindow.getComponent('list').update(immunizations);
	},

	onReviewImmunizationsBtnClick:function(){

	},

	onAddImmunizationBtnClick:function(){
		var grid = this.getImmunizationsGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			created_uid: app.user.id,
			uid: app.user.id,
			pid: app.patient.pid,
			eid: app.patient.eid,
			create_date: new Date(),
			begin_date: new Date()

		});
		grid.editingPlugin.startEdit(0, 0);
	},

	loadPatientImmunizations:function(){
		var store = this.getImmunizationsGrid().getStore();
		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	getVxuWindow: function(){
		var me = this;
		return Ext.widget('window',{
			title: _('submit_hl7_vxu'),
			closable: false,
            itemId: 'SubmitImmunizationWindow',
			modal: true,
			bodyStyle:'background-color:white',
			defaults:{
				xtype:'container',
				border:false,
				margin:10
			},
			items:[
				{
					html: _('please_verify_the_information')+':',
					margin: '10 10 0 10'
				},
				{
					width:700,
					minHeight:50,
					maxHeight:200,
					itemId:'list',
					margin:'0 10 20 10',
					styleHtmlContent: true,
					tpl: new Ext.XTemplate(
						'<ul>',
						'<tpl for=".">',     // interrogate the kids property within the data
						'   <li>CVX:{code} - {vaccine_name} {administer_amount} {administer_units} {date_administered}</li>',
							'</tpl>' +
							'</ul>'
					)
				},
                {
                    xtype: 'uxiframe',
                    itemId: 'downloadHL7',
                    hidden: true
                }
			],
			buttons:[
				me.vxuFrom = Ext.create('App.ux.combo.ActiveFacilities',{
					fieldLabel: _('send_from'),
					emptyText: _('select'),
                    itemId: 'ActiveFacilitiesCombo',
					labelWidth: 60,
					store: Ext.create('App.store.administration.HL7Clients',{
						filters:[
							{
								property:'active',
								value:true
							}
						]
					})
				}),
				me.vxuTo = Ext.widget('combobox',{
					xtype:'combobox',
					fieldLabel: _('send_to'),
					emptyText: _('select'),
					allowBlank: false,
                    itemId: 'ApplicationCombo',
					forceSelection: true,
                    editable: false,
					labelWidth: 60,
					displayField: 'application_name',
					valueField: 'id',
					store: Ext.create('App.store.administration.HL7Clients',{
						filters:[
							{
								property:'active',
								value:true
							}
						]
					})
				}),
				{
					text: _('send'),
					scope: me,
                    itemId: 'send',
					handler: me.doSendVxu,
                    action: 'send',
                    disabled: true
				},
                {
                    text: _('download'),
                    scope: me,
                    itemId: 'download',
                    handler: me.doDownloadVxu,
                    action: 'download',
                    disabled: true
                },
				{
					text:_('cancel'),
					handler:function(){
						me.vxuWindow.close();
					}
				}
			]
		}).show();
	},

    /**
     * Only activate the send, & download button when facilities and application has been
     * selected
     * @param me
     * @param newValue
     * @param oldValue
     */
    onActiveFacilitiesChange: function(me, newValue, oldValue){
        if(Ext.ComponentQuery.query('#ApplicationCombo')[0].getValue()){
            Ext.ComponentQuery.query('#SubmitImmunizationWindow #send')[0].setDisabled(false);
            Ext.ComponentQuery.query('#SubmitImmunizationWindow #download')[0].setDisabled(false);
        }
    },

    /**
     * Only activate the send, & download button when facilities and application has been
     * selected
     * @param me
     * @param newValue
     * @param oldValue
     */
    onApplicationChange: function(me, newValue, oldValue){
        if(Ext.ComponentQuery.query('#ActiveFacilitiesCombo')[0].getValue()){
            Ext.ComponentQuery.query('#SubmitImmunizationWindow #send')[0].setDisabled(false);
            Ext.ComponentQuery.query('#SubmitImmunizationWindow #download')[0].setDisabled(false);
        }
    },

    doDownloadVxu:function(btn){
        var me = this,
            sm = me.getImmunizationsGrid().getSelectionModel(),
            ImmunizationSelection = sm.getSelection(),
            params = {},
            immunizations = [],
            form;

        if(me.vxuTo.isValid()){

            for(var i=0; i < ImmunizationSelection.length; i++){
                immunizations.push(ImmunizationSelection[i].data.id);
                params.pid = ImmunizationSelection[i].data.pid;
            }

            me.vxuWindow.el.mask(_('download'));
            Ext.create('Ext.form.Panel', {
                renderTo: Ext.ComponentQuery.query('#SubmitImmunizationWindow #downloadHL7')[0].el,
                standardSubmit: true,
                url: 'dataProvider/Download.php'
            }).submit({
                params: {
                    'pid': params.pid,
                    'from': me.vxuFrom.getValue(),
                    'to': me.vxuTo.getValue(),
                    'immunizations': Ext.encode(immunizations)
                },
                success: function(form, action) {
                    // Audit log here
                }
            });

            me.vxuWindow.el.unmask();
            me.vxuWindow.close();
            sm.deselectAll();

        }
    },

	doSendVxu:function(btn){
		var me = this,
			sm = me.getImmunizationsGrid().getSelectionModel(),
            ImmunizationSelection = sm.getSelection(),
			params = {},
			immunizations = [];

		if(me.vxuTo.isValid()){

			for(var i=0; i < ImmunizationSelection.length; i++){
				immunizations.push(ImmunizationSelection[i].data.id);
                params.pid = ImmunizationSelection[i].data.pid;
			}

			params.from = me.vxuFrom.getValue();
			params.to = me.vxuTo.getValue();
			params.immunizations = immunizations;

			me.vxuWindow.el.mask(_('sending'));

			HL7Messages.sendVXU(params, function(provider, response){
				me.vxuWindow.el.unmask();
				if(response.result.success){
					app.msg(_('sweet'), _('message_sent'));
				}else{
					app.msg(_('oops'), _('message_error'), true);
				}
				me.vxuWindow.close();
				sm.deselectAll();
			});
		}
	}

});
Ext.define('App.controller.patient.Insurance', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'PatientInsuranceFormSubscribeRelationshipCmb',
			selector: 'PatientInsuranceFormSubscribeRelationshipCmb'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'#PatientInsuranceFormSubscribeRelationshipCmb':{
				change: me.onPatientInsuranceFormSubscribeRelationshipCmbChange
			}
		});
	},

	onPatientInsuranceFormSubscribeRelationshipCmbChange: function(cmb, value){

		var me = this,
			subscriberFields = cmb.up('fieldset').query('[isFormField]'),
			disable = value == '01';

		for(var i = 0; i < subscriberFields.length; i++){
			if(subscriberFields[i].name == 'subscriber_relationship') continue;

			if(disable){
				subscriberFields[i].setDisabled(true);
				subscriberFields[i].reset();
				subscriberFields[i].allowBlank = true;
			}else{
				subscriberFields[i].setDisabled(false);

				if(
					subscriberFields[i].name == 'subscriber_given_name' ||
					subscriberFields[i].name == 'subscriber_surname' ||
					subscriberFields[i].name == 'subscriber_dob' ||
					subscriberFields[i].name == 'subscriber_sex' ||
					subscriberFields[i].name == 'subscriber_street' ||
					subscriberFields[i].name == 'subscriber_city' ||
					subscriberFields[i].name == 'subscriber_state' ||
					subscriberFields[i].name == 'subscriber_country' ||
					subscriberFields[i].name == 'subscriber_postal_code' ||
					subscriberFields[i].name == 'subscriber_employer'
				){
					subscriberFields[i].allowBlank = false;
				}

			}
		}

	}

});
Ext.define('App.controller.patient.ItemsToReview', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'ItemsToReviewPanel',
			selector: '#ItemsToReviewPanel'
		},
		{
			ref: 'ItemsToReviewImmuGrid',
			selector: '#ItemsToReviewPanel #ItemsToReviewImmuGrid'
		},
		{
			ref: 'ItemsToReviewAllergiesGrid',
			selector: '#ItemsToReviewPanel #ItemsToReviewAllergiesGrid'
		},
		{
			ref: 'ItemsToReviewActiveProblemsGrid',
			selector: '#ItemsToReviewPanel #ItemsToReviewActiveProblemsGrid'
		},
		{
			ref: 'ItemsToReviewMedicationsGrid',
			selector: '#ItemsToReviewPanel #ItemsToReviewMedicationsGrid'
		},
		{
			ref: 'ReviewSmokingStatusCombo',
			selector: '#ItemsToReviewPanel #reviewsmokingstatuscombo'
		}

	],

	init: function(){
		var me = this;
		me.control({
			'#ItemsToReviewPanel':{
				activate: me.storesLoad
			},
			'#encounterRecordAdd':{
				click: me.onReviewAll
			}
		});

	},

	storesLoad: function(){
		var me = this,
			params = {
				filters: [
					{
						property: 'pid',
						value: app.patient.pid
					}
				]
			};

		me.getReviewSmokingStatusCombo().reset();
		me.getItemsToReviewImmuGrid().getStore().load(params);
		me.getItemsToReviewAllergiesGrid().getStore().load(params);
		me.getItemsToReviewActiveProblemsGrid().getStore().load(params);
		me.getItemsToReviewMedicationsGrid().getStore().load(params);

		me.smokeStatusStore = app.getController('patient.Social').smokeStatusStore;

		/**
		 * add the callback function to handle the Smoking Status
		 */
		params.callback = function(){
			if(this.last()){
				me.getReviewSmokingStatusCombo().setValue(this.last().data.status);
			}
		};
		me.smokeStatusStore.load(params);

	},

	onReviewAll: function(){

		if(this.getReviewSmokingStatusCombo().isValid()){

			var encounter = this.getController('patient.encounter.Encounter').getEncounterRecord();

			encounter.set({
				review_active_problems: true,
				review_allergies: true,
				review_dental: true,
				review_immunizations: true,
				review_medications: true,
				review_smoke: true,
				review_surgery: true
			});

			encounter.save({
				success: function(){
					app.msg('Sweet!', _('items_to_review_save_and_review'));
				},
				failure: function(){
					app.msg('Oops!', _('items_to_review_entry_error'));
				}
			});
		}
	}



});
Ext.define('App.controller.patient.Medical', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'MedicalWindow',
			selector: '#MedicalWindow'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'viewport': {
				'navkey': me.onNavKey
			},
			'#MedicalWindow #immunization': {
				'show': me.onPanelShow
			},
			'#MedicalWindow #allergies': {
				'show': me.onPanelShow
			},
			'#MedicalWindow #activeproblems': {
				'show': me.onPanelShow
			},
			'#MedicalWindow #medications': {
				'show': me.onPanelShow
			},
			'#MedicalWindow #laboratories': {
				'show': me.onPanelShow
			},
			'#MedicalWindow #socialhistory': {
				'show': me.onPanelShow
			},
			'#MedicalWindow #referrals': {
				'show': me.onPanelShow
			}
		});

	},

	onNavKey: function(e, key){
		if(!app.patient.pid) {
			app.msg(_('oops'), _('patient_error'), true);
			return;
		}
		var win = this.getMedicalWindow().show();

		switch(key){
			case e.ONE:
				win.cardSwitch('immunization');
				break;
			case e.TWO:
				win.cardSwitch('allergies');
				break;
			case e.THREE:
				win.cardSwitch('activeproblems');
				break;
			case e.FOUR:
				win.cardSwitch('medications');
				break;
			case e.FIVE:
				win.cardSwitch('laboratories');
				break;
			case e.SIX:
				win.cardSwitch('socialhistory');
				break;
			case e.SEVEN:
				win.cardSwitch('referrals');
				break;
		}
	},

	onPanelShow:function(panel){
		this.setWindowTitle(panel.title);
	},

	setWindowTitle:function(title){
		this.getMedicalWindow().setTitle(
            app.patient.name +
            ' (' + title + ') ' +
            (app.patient.readOnly ? '-  <span style="color:red">[Read Mode]</span>' :'')
        );
	}


});
Ext.define('App.controller.patient.Medications', {
	extend: 'Ext.app.Controller',
	requires: [],
	refs: [
		{
			ref: 'MedicationsPanel',
			selector: 'patientmedicationspanel'
		},
		{
			ref: 'PatientMedicationsGrid',
			selector: '#patientMedicationsGrid'
		},
        {
            ref: 'addNoActiveMedicationBtn',
            selector: '#addNoActiveMedicationBtn'
        },
		{
			ref: 'addPatientMedicationBtn',
			selector: '#addPatientMedicationBtn'
		},
		{
			ref: 'PatientMedicationReconciledBtn',
			selector: '#PatientMedicationReconciledBtn'
		},
		{
			ref: 'PatientMedicationUserLiveSearch',
			selector: '#PatientMedicationUserLiveSearch'
		},

		// administer refs
		{
			ref: 'AdministeredMedicationsGrid',
			selector: '#AdministeredMedicationsGrid'
		},
		{
			ref: 'AdministeredMedicationsLiveSearch',
			selector: '#AdministeredMedicationsLiveSearch'
		},
		{
			ref: 'AdministeredMedicationsUserLiveSearch',
			selector: '#AdministeredMedicationsUserLiveSearch'
		},
		{
			ref: 'AdministeredMedicationsAddBtn',
			selector: '#AdministeredMedicationsAddBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'viewport': {
				encounterload: me.onViewportEncounterLoad
			},
			'patientmedicationspanel': {
				activate: me.onMedicationsPanelActive
			},
			'#patientMedicationsGrid': {
				beforeedit: me.onPatientMedicationsGridBeforeEdit
			},
            '#addNoActiveMedicationBtn':{
                click: me.onAddNoActiveMedicationBtnClick
            },
			'#addPatientMedicationBtn': {
				click: me.onAddPatientMedicationBtnClick
			},
			'#patientMedicationLiveSearch': {
				select: me.onMedicationLiveSearchSelect
			},
			'#PatientMedicationReconciledBtn': {
				click: me.onPatientMedicationReconciledBtnClick
			},
			'#PatientMedicationUserLiveSearch': {
				select: me.onPatientMedicationUserLiveSearchSelect,
                reset: me.onPatientMedicationUserLiveSearchReset
			},

			// administer controls
			'#AdministeredMedicationsGrid': {
				beforeedit: me.onAdministeredMedicationsGridBeforeEdit
			},
			'#AdministeredMedicationsLiveSearch': {
				select: me.onAdministeredMedicationsLiveSearchSelect
			},
			'#AdministeredMedicationsUserLiveSearch': {
				select: me.onAdministeredMedicationsUserLiveSearchSelect
			},
			'#AdministeredMedicationsAddBtn': {
				click: me.onAdministeredMedicationsAddBtnClick
			}
		});
	},

	onViewportEncounterLoad: function(encounter){

	},

	onAdministeredMedicationsGridBeforeEdit: function(plugin, context){
		var me = this,
			field = me.getAdministeredMedicationsUserLiveSearch();

		field.forceSelection = false;
		field.setValue(context.record.data.administered_by);
		Ext.Function.defer(function(){
			field.forceSelection = true;
		}, 200);

	},

	onAdministeredMedicationsLiveSearchSelect: function(cmb, records){
		var form = cmb.up('form').getForm();

		form.getRecord().set({
			RXCUI: records[0].data.RXCUI,
			CODE: records[0].data.CODE,
			NDC: records[0].data.NDC
		});
	},

	onAdministeredMedicationsUserLiveSearchSelect: function(cmb, records){
		var administered_by = records[0],
			record = cmb.up('form').getForm().getRecord();

		record.set({administered_uid: administered_by.data.id});
	},

	onAdministeredMedicationsAddBtnClick: function(){
		var me = this,
			grid = me.getAdministeredMedicationsGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			created_uid: app.user.id,
			created_date: new Date(),
			begin_date: new Date(),
			end_date: new Date(),
			administered_date: new Date(),
			administered_uid: app.user.id,
			title: app.user.title,
			fname: app.user.fname,
			mname: app.user.mname,
			lname: app.user.lname
		});

		grid.editingPlugin.startEdit(0, 0);
	},

	onPatientMedicationsGridBeforeEdit: function(plugin, context){
		var me = this,
			field = me.getPatientMedicationUserLiveSearch();

		field.forceSelection = false;
		field.setValue(context.record.data.administered_by);
		Ext.Function.defer(function(){
			field.forceSelection = true;
		}, 200);
	},

	onPatientMedicationUserLiveSearchSelect: function(cmb, records){
		var user = records[0],
			record = cmb.up('form').getForm().getRecord();
        record.set({fname: user.data.fname});
        record.set({lname: user.data.lname});
        record.set({mname: user.data.mname});
        record.set({title: user.data.title});
		record.set({administered_uid: user.data.id});
	},

    onPatientMedicationUserLiveSearchReset: function(cmb){
        var record = cmb.up('form').getForm().getRecord();
        record.set({fname: ''});
        record.set({lname: ''});
        record.set({mname: ''});
        record.set({title: ''});
        record.set({administered_uid: ''});
    },

    /**
     * TODO: We need to add some logic to very if there are a No Active Medication without End Date, if
     * there are an No Active Medication with an expired End Date, we can add another one, or not allow the
     * user to add any other.
     */
    onAddNoActiveMedicationBtnClick: function(){
        var me = this,
            grid = me.getPatientMedicationsGrid(),
            store = grid.getStore();

        grid.editingPlugin.cancelEdit();
        store.insert(0, {
            pid: app.patient.pid,
            eid: app.patient.eid,
            uid: app.user.id,
            created_uid: app.user.id,
            create_date: new Date(),
            begin_date: new Date(),
            STR: _('no_active_medication')
        });
        store.sync();
    },

	onAddPatientMedicationBtnClick: function(){
		var me = this,
			grid = me.getPatientMedicationsGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			created_uid: app.user.id,
			create_date: new Date(),
			begin_date: new Date()
		});
		grid.editingPlugin.startEdit(0, 0);
	},

	onMedicationLiveSearchSelect: function(cmb, records){
		var form = cmb.up('form').getForm();

		form.getRecord().set({
			RXCUI: records[0].data.RXCUI,
			CODE: records[0].data.CODE,
			NDC: records[0].data.NDC
		});
	},

	onPatientMedicationReconciledBtnClick: function(){
		this.onMedicationsPanelActive();
	},

	onMedicationsPanelActive: function(){
		var store = this.getPatientMedicationsGrid().getStore(),
			reconciled = this.getPatientMedicationReconciledBtn().pressed;

		store.clearFilter(true);
		store.load({
			filters: [
				{
					property: 'pid',
					value: app.patient.pid
				}
			],
			params: {
				reconciled: reconciled
			}
		});
	}
});

Ext.define('App.controller.patient.Patient', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'PossiblePatientDuplicatesWindow',
			selector: '#PossiblePatientDuplicatesWindow'
		},
		{
			ref: 'PatientDemographicForm',
			selector: '#PatientDemographicForm'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'#PossiblePatientDuplicatesWindow': {
				close: me.onPossiblePatientDuplicatesWindowCLose
			},
			'#PossiblePatientDuplicatesWindow > grid': {
				itemdblclick: me.onPossiblePatientDuplicatesGridItemDblClick
			},
			'#PatientPossibleDuplicatesBtn': {
				click: me.onPatientPossibleDuplicatesBtnClick
			},
			'#PossiblePatientDuplicatesContinueBtn': {
				click: me.onPossiblePatientDuplicatesContinueBtnClick
			}
		});
	},

	doCapitalizeEachLetterOnKeyUp: function(){

	},

	onPossiblePatientDuplicatesGridItemDblClick: function(grid, record){

		if(this.getPossiblePatientDuplicatesWindow().action != 'openPatientSummary') return;

		app.setPatient(record.data.pid, null, null, function(){
			app.openPatientSummary();
			grid.up('window').close();
		});
	},

	onPossiblePatientDuplicatesWindowCLose: function(window){
		var store = window.down('grid').getStore();
		store.removeAll();
		store.commitChanges();
	},

	checkForPossibleDuplicates: function(cmp){
		var me = this,
			form = cmp.isPanel ? cmp.getForm() : cmp.up('form').getForm();

		if(!form.isValid()) return;

		var params = {
			fname: form.findField('fname').getValue(),
			lname: form.findField('lname').getValue(),
			sex: form.findField('sex').getValue(),
			DOB: form.findField('DOB').getValue()
		};

		if(form.getRecord()){
			params.pid = form.getRecord().data.pid;
		}

		me.lookForPossibleDuplicates(params, 'openPatientSummary');

	},

	lookForPossibleDuplicates: function(params, action, callback){
		var me = this,
			win = me.getPossiblePatientDuplicatesWindow() || Ext.create('App.view.patient.windows.PossibleDuplicates'),
			store = win.down('grid').getStore();

		win.action = action;
		store.getProxy().extraParams = params;
		store.load({
			callback: function(records){

				if(typeof callback == 'function') callback(records);

				if(records.length > 0){
					win.show();
				}else{
					app.msg(_('sweet'), _('no_possible_duplicates_found'));
				}
			}
		});
	},

	onPatientPossibleDuplicatesBtnClick: function(btn){
		this.checkForPossibleDuplicates(btn.up('panel').down('form'));
	},

	onPossiblePatientDuplicatesContinueBtnClick: function(btn){
		var win = this.getPossiblePatientDuplicatesWindow();
		win.fireEvent('continue', win);
		win.close();
	}

});
Ext.define('App.controller.patient.ProgressNotesHistory', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref:'EncounterProgressNotesHistoryGrid',
			selector: '#EncounterProgressNotesHistoryGrid'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'#EncounterProgressNotesHistoryGrid': {
				afterrender: me.onEncounterProgressNotesHistoryGridAfterRender
			},
			//'#ProgressNotesHistorySearchField': {
			//	render: me.onEncounterProgressNotesHistoryGridRender
			//}
		});
	},

	onEncounterProgressNotesHistoryGridAfterRender: function(grid){
		//grid.getStore().load();
	},

	loadPatientProgressHistory: function(pid, eid){
		var store = this.getEncounterProgressNotesHistoryGrid().getStore();

		store.getProxy().extraParams = { pid:pid, eid:eid };
		if(this.getEncounterProgressNotesHistoryGrid().rendered){
			store.load();
		}
	}

});
Ext.define('App.controller.patient.RadOrders', {
	extend: 'Ext.app.Controller',
	requires: [],
	refs: [
		{
			ref: 'RadOrdersGrid',
			selector: 'patientradorderspanel'
		},
		{
			ref: 'PrintRadOrderBtn',
			selector: 'patientradorderspanel #printRadOrderBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientradorderspanel': {
				activate: me.onRadOrdersGridActive,
				selectionchange: me.onRadOrdersGridSelectionChange,
				beforerender: me.onRadOrdersGridBeforeRender
			},
			'#radOrderliveSearch': {
				select: me.onRadSearchSelect
			},
			'patientradorderspanel #newRadOrderBtn': {
				click: me.onNewRadOrderBtnClick
			},
			'patientradorderspanel #printRadOrderBtn': {
				click: me.onPrintRadOrderBtnClick
			}
		});
	},

	onRadOrdersGridBeforeRender: function(grid){
		app.on('patientunset', function(){
			grid.editingPlugin.cancelEdit();
			grid.getStore().removeAll();
		});
	},

	onRadSearchSelect: function(cmb, records){
		var form = cmb.up('form').getForm();
		form.getRecord().set({
			code: records[0].data.loinc_number,
			code_type: records[0].data.code_type
		});
		if(form.findField('code')) form.findField('code').setValue(records[0].data.code);
		if(form.findField('note')) form.findField('note').focus(false, 200);
	},

	onRadOrdersGridSelectionChange: function(sm, selected){
		this.getPrintRadOrderBtn().setDisabled(selected.length === 0);
	},

	onNewRadOrderBtnClick: function(){
		var me = this,
			grid = me.getRadOrdersGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			date_ordered: new Date(),
			order_type: 'rad',
			status: 'Pending',
			priority: 'Normal'
		});
		grid.editingPlugin.startEdit(0, 0);
	},

	onPrintRadOrderBtnClick: function(orders){
		var me = this,
			grid = me.getRadOrdersGrid(),
			items = (Ext.isArray(orders) ? orders : grid.getSelectionModel().getSelection()),
			params = {},
			data,
			i;

		params.pid = app.patient.pid;
		params.eid = app.patient.eid;
		params.orderItems = [];
		params.docType = 'Rad';

		params.templateId = 6;
		params.orderItems.push(['Description', 'Notes']);
		for(i = 0; i < items.length; i++){
			data = items[i].data;
			params.orderItems.push([
				data.description + ' [' + data.code_type + ':' + data.code + ']',
				data.note
			]);
		}

		DocumentHandler.createTempDocument(params, function(provider, response){
			if(window.dual){
				dual.onDocumentView(response.result.id, 'Rad');
			}else{
				app.onDocumentView(response.result.id, 'Rad');
			}
		});
	},

	onRadOrdersGridActive: function(grid){
		var store = grid.getStore();
		if(!grid.editingPlugin.editing){
			store.clearFilter(true);
			store.filter([
				{
					property: 'pid',
					value: app.patient.pid
				},
				{
					property: 'order_type',
					value: 'rad'
				}
			]);
		}
	},

	radOrdersGridStatusColumnRenderer: function(v){
		var color = 'black';

		if(v == 'Canceled'){
			color = 'red';
		}else if(v == 'Pending'){
			color = 'orange';
		}else if(v == 'Routed'){
			color = 'blue';
		}else if(v == 'Complete'){
			color = 'green';
		}

		return '<div style="color:' + color + '">' + v + '</div>';
	},

	doAddOrderByTemplate: function(data){
		var me = this,
			grid = me.getLabOrdersGrid(),
			store = grid.getStore();

		data.pid = app.patient.pid;
		data.eid = app.patient.eid;
		data.uid = app.user.id;
		data.date_ordered = new Date();
		data.order_type = 'rad';
		data.status = 'Pending';
		data.priority = 'Normal';

		store.add(data);
		store.sync({
			success: function(){
				app.msg(_('sweet'), data.description + ' ' + _('added'));
			}
		});

	}

});

Ext.define('App.controller.patient.Reminders', {
	extend: 'Ext.app.Controller',
	requires: [],
	refs: [
		{
			ref: 'RemindersAddBtn',
			selector: '#RemindersAddBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'viewport': {
				encounterload: me.onEncounterOpen,
				patientset: me.onPatientSet
			},
			'#RemindersAddBtn': {
				click: me.onRemindersAddBtnClick
			},
			'#RemindersAlertOkBtn': {
				click: me.onRemindersAlertOkBtnClick
			},
			'#RemindersAlertCancelBtn': {
				click: me.onRemindersAlertCancelBtnClick
			}
		});
	},

	onRemindersAddBtnClick: function(btn){
		var grid = btn.up('grid'),
			store = grid.store;

		grid.plugins[0].cancelEdit();
		store.insert(0, {
			date: new Date(),
			pid: app.patient.pid,
			uid: app.user.id,
			eid: app.patient.eid
		});
		grid.plugins[0].startEdit(0, 0);
	},

	onRemindersAlertOkBtnClick: function(btn){
		var win = btn.up('window'),
			store = win.down('grid').getStore();

		store.sync();
		win.close();
	},

	onRemindersAlertCancelBtnClick: function(btn){
		var win = btn.up('window'),
			store = win.down('grid').getStore();

		store.rejectChanges();
		win.close();
	},

	onPatientSet: function(patient){
		this.getPatientReminders('Administrative', patient.pid);
	},

	onEncounterOpen: function(encounterRecord){
		this.getPatientReminders('Clinical', encounterRecord.data.pid);
	},

	getPatientReminders: function(type, pid){
		var me = this,
			action = 'RemindersAlertWindow' + type,
			query = Ext.ComponentQuery.query('window[action=' + action + ']'),
			store,
			win;

		if(query.length === 0){
			win = Ext.create('App.view.patient.RemindersAlert',{
				title: _('reminders') + ' (' + _(type.toLowerCase()) + ')',
				action: action
			});
		}else{
			win = query[0];
		}

		store = win.down('grid').getStore();
		win.close();
		store.load({
			filters: [
				{
					property: 'pid',
					value: pid
				},
				{
					property: 'type',
					value: type
				},
				{
					property: 'active',
					value: true
				}
			],
			callback: function(records){
				if(records.length > 0){
					me.playSound();
					win.show();
				}
			}
		});
	},

	playSound: function(){
		if(!this.alertAudio){
			this.alertAudio = Ext.core.DomHelper.append(Ext.getBody(), {
				html: '<audio autoplay id="reminderAlert" ><source src="resources/audio/sweetalertsound4.wav" type="audio/wav"></audio>'
			}, true);
		}else{
			this.alertAudio.dom.firstChild.currentTime=0;
			this.alertAudio.dom.firstChild.play();
		}
	}

});
Ext.define('App.controller.patient.Referrals', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'ReferralPanelGrid',
			selector: 'patientreferralspanel'
		},
		{
			ref: 'AddReferralBtn',
			selector: 'button[action=addReferralBtn]'
		},
		{
			ref: 'PrintReferralBtn',
			selector: '#printReferralBtn'
		},

		{
			ref: 'ReferralProviderCombo',
			selector: '#ReferralProviderCombo'
		},
		{
			ref: 'ReferralLocalProviderCombo',
			selector: '#ReferralLocalProviderCombo'
		},
		{
			ref: 'ReferralExternalProviderCombo',
			selector: '#ReferralExternalProviderCombo'
		},
		{
			ref: 'ReferralExternalReferralCheckbox',
			selector: '#ReferralExternalReferralCheckbox'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'patientreferralspanel': {
				activate: me.onReferralActive,
				selectionchange: me.onGridSelectionChange,
				beforeedit: me.onGridBeforeEdit
			},
			'button[action=addReferralBtn]': {
				click: me.onAddReferralBtnClicked
			},
			'#referralServiceSearch': {
				select: me.onReferralServiceSearchSelect
			},
			'#referralDiagnosisSearch': {
				select: me.onReferralDiagnosisSearchSelect
			},
			'#ReferralExternalReferralCheckbox': {
				change: me.onReferralExternalReferralCheckboxChange
			},
			'#printReferralBtn': {
				click: me.onPrintReferralBtnClick
			},
			'#ReferralProviderCombo':{
				select: me.onReferralProviderComboSelect
			},
			'#ReferralLocalProviderCombo':{
				select: me.onReferralLocalProviderComboSelect
			},
			'#ReferralExternalProviderCombo':{
				select: me.onReferralExternalProviderComboSelect
			}
		});
	},

	onGridBeforeEdit: function(editor, context, eOpts){
		this.getReferralExternalReferralCheckbox().setValue(context.record.data.is_external_referral);
		this.getReferralLocalProviderCombo().setValue(context.record.data.refer_to_text);
		this.getReferralExternalProviderCombo().setValue(context.record.data.refer_to_text);
	},

	onReferralProviderComboSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();
		record.set({refer_by: records[0].data.option_value});
	},

	onReferralLocalProviderComboSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();
		record.set({refer_to: records[0].data.id});
	},

	onReferralExternalProviderComboSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();
		record.set({refer_to: records[0].data.id});
	},

	onPrintReferralBtnClick:function(){
		var me = this,
			grid = me.getReferralPanelGrid(),
			sm = grid.getSelectionModel(),
			selection = sm.getSelection(),
            params,
            i;
		grid.view.el.mask(_('generating_documents'));
		for(i=0; i < selection.length; i++){
			params = {
                pid: app.patient.pid,
                eid: app.patient.eid,
                referralId: selection[i].data.id,
                templateId: 10,
                docType: 'Referral'
            };
			DocumentHandler.createTempDocument(params, function(provider, response){
				if(window.dual){
					dual.onDocumentView(response.result.id, 'Referral');
				}else{
					app.onDocumentView(response.result.id, 'Referral');
				}
				grid.view.el.unmask();
			});
		}


	},

	onGridSelectionChange:function(grid, models){
		this.getPrintReferralBtn().setDisabled(models.length == 0);
	},

	onReferralServiceSearchSelect: function(cmb, records){
		var referral = cmb.up('form').getForm().getRecord();
		referral.set({
			service_code: records[0].data.code,
			service_code_type: records[0].data.code_type
		})
	},

	onReferralDiagnosisSearchSelect: function(cmb, records){
		var referral = cmb.up('form').getForm().getRecord();
		referral.set({
			diagnosis_code: records[0].data.code,
			diagnosis_code_type: records[0].data.code_type
		})
	},

	onReferralExternalReferralCheckboxChange: function(checkbox, isExternal){
		this.getReferralLocalProviderCombo().setVisible(!isExternal);
		this.getReferralLocalProviderCombo().setDisabled(isExternal);
		this.getReferralExternalProviderCombo().setVisible(isExternal);
		this.getReferralExternalProviderCombo().setDisabled(!isExternal);
	},

	onReferralActive: function(grid){
		var store = grid.getStore();
		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	onAddReferralBtnClicked: function(){
		var me = this,
			store = me.getReferralPanelGrid().getStore(),
			plugin = me.getReferralPanelGrid().editingPlugin,
			records;

		plugin.cancelEdit();
		records = store.add({
			pid: app.patient.pid,
			eid: app.patient.eid,
			create_date: new Date(),
			create_uid: app.user.id,
			referral_date: new Date()
		});
		plugin.startEdit(records[0], 0);
	}

});

Ext.define('App.controller.patient.RxOrders', {
	extend: 'Ext.app.Controller',
	requires: [],
	refs: [
		{
			ref: 'RxOrdersGrid',
			selector: 'patientrxorderspanel'
		},
		{
			ref: 'RxNormOrderLiveSearch',
			selector: '#RxNormOrderLiveSearch'
		},
		{
			ref: 'CloneRxOrderBtn',
			selector: '#cloneRxOrderBtn'
		},
		{
			ref: 'PrintRxOrderBtn',
			selector: '#printRxOrderBtn'
		},
		{
			ref: 'RxEncounterDxLiveSearch',
			selector: '#rxEncounterDxLiveSearch'
		},
		{
			ref: 'RxEncounterDxCombo',
			selector: '#RxEncounterDxCombo'
		},
		{
			ref: 'RxOrderMedicationInstructionsCombo',
			selector: '#RxOrderMedicationInstructionsCombo'
		},
		{
			ref: 'RxOrderGridFormNotesField',
			selector: '#RxOrderGridFormNotesField'
		},
		{
			ref: 'RxOrderCompCheckBox',
			selector: '#RxOrderCompCheckBox'
		},
		{
			ref: 'RxOrderSplyCheckBox',
			selector: '#RxOrderSplyCheckBox'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientrxorderspanel': {
				activate: me.onRxOrdersGridActive,
				selectionchange: me.onRxOrdersGridSelectionChange,
				beforerender: me.onRxOrdersGridBeforeRender,
				beforeedit: me.onRxOrdersGridBeforeEdit,
				edit: me.onRxOrdersGridEdit
			},
			'#RxNormOrderLiveSearch': {
				beforeselect: me.onRxNormOrderLiveSearchBeforeSelect
			},
			'#newRxOrderBtn': {
				click: me.onNewRxOrderBtnClick
			},
			'#cloneRxOrderBtn': {
				click: me.onCloneRxOrderBtnClick
			},
			'#printRxOrderBtn': {
				click: me.onPrintRxOrderBtnClick
			},
			'#RxOrderCompCheckBox': {
				change: me.onRxOrderCompCheckBoxChange
			},
			'#RxOrderSplyCheckBox': {
				change: me.onRxOrderSplyCheckBoxChange
			}
		});
	},

	onRxOrderCompCheckBoxChange: function(field, value){
		if(value){
			this.getRxOrderSplyCheckBox().setValue(false);
		}
	},

	onRxOrderSplyCheckBoxChange: function(field, value){
		if(value){
			this.getRxOrderCompCheckBox().setValue(false);
		}
	},

	doSelectOrderByOrderId: function(id){
		var sm = this.getRxOrdersGrid().getSelectionModel(),
			record = this.getRxOrdersGrid().getStore().getById(id);

		if(record){
			sm.select(record);
			return record;
		}

		return false;
	},

	onRxOrdersGridBeforeRender: function(grid){
		app.on('patientunset', function(){
			grid.editingPlugin.cancelEdit();
			grid.getStore().removeAll();
		});
	},

	onRxOrdersGridSelectionChange: function(sm, selected){
		this.getCloneRxOrderBtn().setDisabled(selected.length === 0);
		this.getPrintRxOrderBtn().setDisabled(selected.length === 0);
	},

	onRxNormOrderLiveSearchBeforeSelect: function(combo, record){
		var form = combo.up('form').getForm(),
			insCmb = this.getRxOrderMedicationInstructionsCombo(),
            store;

		form.getRecord().set({
			RXCUI: record.data.RXCUI,
			CODE: record.data.CODE,
			NDC: record.data.NDC
		});

		store = record.instructions();
		insCmb.bindStore(store, true);
		insCmb.store = store;
		insCmb.store.load();
		form.findField('dispense').focus(false, 200);
	},

	onRxOrdersGridBeforeEdit: function(plugin, context){

		this.getRxEncounterDxCombo().getStore().load({
			filters: [
				{
					property: 'eid',
					value: context.record.data.eid
				}
			]
		});

		this.getRxOrderMedicationInstructionsCombo().getStore().load({
			filters: [
				{
					property: 'rxcui',
					value: context.record.data.RXCUI
				}
			]
		});
	},

	onRxOrdersGridEdit: function(plugin, context){
		var insCmb = this.getRxOrderMedicationInstructionsCombo(),
			instructions = context.record.data.directions,
			record = insCmb.findRecordByValue(instructions),
            store;

		// record found
		if(record !== false) return true;

		Ext.Msg.show({
			title: _('new_instruction'),
			msg: '<p>' + instructions + '</p><p>' + _('would_you_like_to_save_it') + '</p>',
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){
				if(btn == 'yes'){
					store = insCmb.getStore();
					store.add({
						rxcui: context.record.data.RXCUI,
						occurrence: '1',
						instruction: instructions
					});
					store.sync();
				}
			}
		});
		return true;
	},

	onNewRxOrderBtnClick: function(btn){
		var grid = btn.up('grid');

		grid.editingPlugin.cancelEdit();

		grid.getStore().insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			refill: 0,
			daw: null,
			date_ordered: new Date(),
			begin_date: new Date(),
			created_date: new Date()
		});

		grid.editingPlugin.startEdit(0, 0);
	},

	onCloneRxOrderBtnClick: function(btn){

		var me = this;

		Ext.Msg.show({
			title: _('wait'),
			msg: _('sure_you_want_clone_prescription'),
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){
				if(btn == 'yes'){
					me.doCloneOrder();
				}
			}
		});
	},

	doCloneOrder: function(additionalReference){

		var me = this,
			grid = me.getRxOrdersGrid(),
			sm = grid.getSelectionModel(),
			store = grid.getStore(),
			selection = sm.getSelection(),
			newDate = new Date(),
			records,
			data;

		grid.editingPlugin.cancelEdit();
		sm.deselectAll();

		for(var i = 0; i < selection.length; i++){
			data = Ext.clone(selection[i].data);

			data.pid = app.patient.pid;
			data.eid = app.patient.eid;
			data.uid = app.user.id;

			data.ref_order = data.id;
			if(typeof additionalReference == 'string'){
				data.ref_order += ('~' + additionalReference);
			}

			data.date_ordered = newDate;
			data.begin_date = newDate;
			data.created_date = newDate;

			// clear the id
			data.id = null;
			records = store.insert(0, data);
		}

		grid.editingPlugin.startEdit(records[0], 0);

		return records;
	},

	onPrintRxOrderBtnClick: function(orders){
		var me = this,
			grid = me.getRxOrdersGrid(),
			items = (Ext.isArray(orders) ? orders : grid.getSelectionModel().getSelection()),
			isSingleColumnTable = true,
			references = '',
			params = {},
			columns,
			data,
            i,
            refs,
            text;

		params.pid = app.patient.pid;
		params.eid = app.patient.eid;
		params.orderItems = [];
		params.docType = 'Rx';
		params.templateId = 5;

		if(isSingleColumnTable){
			columns = [''];
		}else{
			columns = [
                'Description',
                'Instructions',
                'Dispense',
                'Refill',
                'Days Supply',
                'Dx',
                'Notes',
                'References'
            ];
		}

		params.orderItems.push(columns);

		for(i = 0; i < items.length; i++){
			data = items[i].data;

			if(data.ref_order !== ''){
				refs = data.ref_order.split('~');
				if(refs.length >= 3){
					references = 'Rx Reference#: ' + refs[2];
				}
			}

			if(isSingleColumnTable){

				text = '<u>' + _('order_number') + '</u>: ' + g('rx_order_number_prefix') + data.id + '<br>';
				text += '<u>' + _('description') + '</u>: ' + '<b>' + data.STR.toUpperCase() + '</b><br>';
				text += '<u>' + _('dispense_as_written') + '</u>: ' + (data.daw ? _('yes') : _('no')) + '<br>';
				text += '<u>' + _('quantity') + '</u>: ' + data.dispense + '<br>';

				if(data.days_supply){
					text += '<u>' + _('days_supply') + '</u>: ' + data.days_supply + '<br>';
				}

				text += '<u>' + _('refill') + '</u>: ' + data.refill + '<br>';
				text += '<u>' + _('instructions') + '</u>: ' + data.directions + '<br>';

				var dxs = (data.dxs.join ? data.dxs.join(', ') : data.dxs);
				if(dxs && dxs !== ''){
					text += '<u>' + _('dx') + '</u>: ' + (data.dxs.join ? data.dxs.join(', ') : data.dxs) + '<br>';
				}

				if(data.notes !== ''){
					text += '<u>' + _('notes_to_pharmacist') + '</u>: ' + data.notes + '<br>';
				}

				if(references !== ''){
					text += '<u>References</u>: ' + references + '<br>';
				}

				if(data.system_notes !== ''){
					text += '<b>' + data.system_notes + '</b><br>';
				}

				params.orderItems.push([text]);

			}else{

				params.orderItems.push([
					data.STR + ' ' + data.dose + ' ' + data.route + ' ' + data.form,
					data.directions,
					data.dispense,
					data.refill,
					data.days_supply,
					(data.dxs.join ? data.dxs.join(', ') : data.dxs),
					data.notes,
					references
				]);
			}
		}

		DocumentHandler.createTempDocument(params, function(provider, response){
			if(window.dual){
				dual.onDocumentView(response.result.id, 'Rx');
			}else{
				app.onDocumentView(response.result.id, 'Rx');
			}
		});
	},

	onRxOrdersGridActive: function(grid){
		var store = grid.getStore();
		if(!grid.editingPlugin.editing){
			store.clearFilter(true);
			store.filter([
				{
					property: 'pid',
					value: app.patient.pid
				}
			]);
		}
	},

	doAddOrderByTemplate: function(data){
		var me = this,
			grid = me.getRxOrdersGrid(),
			store = grid.getStore(),
			newDate = new Date();

		data.pid = app.patient.pid;
		data.eid = app.patient.eid;
		data.uid = app.user.id;
		data.date_ordered = newDate;
		data.begin_date = newDate;
		data.created_date = newDate;

		store.add(data);
		store.sync({
			success: function(){
				app.msg(_('sweet'), data.STR + ' ' + _('added'));
			}
		});

	}

});

Ext.define('App.controller.patient.Social', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'SocialPanel',
			selector: 'patientsocialpanel'
		},
		{
			ref: 'SocialHistoryGrid',
			selector: 'patientsocialhistorypanel'
		},
		{
			ref: 'SocialHistoryTypeCombo',
			selector: 'combobox[action=socialHistoryTypeCombo]'
		},
		{
			ref: 'SocialHistoryAddBtn',
			selector: 'button[action=socialHistoryAddBtn]'
		},
		{
			ref: 'ObservationColumn',
			selector: '#socialhistorypanelobservationcolumn'
		},
		{
			ref: 'SmokingStatusCombo',
			selector: '#socialsmokingstatuscombo'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientsocialpanel': {
				activate: me.onSocialPanelActive
			},
			'patientsocialhistorypanel': {
				beforeedit: me.onSocialHistoryBeforeEdit
			},
			'button[action=socialHistoryAddBtn]': {
				click: me.onAddBtnClicked
			},
			'combobox[action=socialHistoryTypeCombo]': {
				select: me.onHistoryTypeComboSelectionChanged
			},
			'#socialsistoryobservationcombo': {
				select: me.onHistoryObservationComboSelect
			},
			'#socialsmokingstatuscombo': {
				select: me.onSmokingStatusComboSelect
			},
			'#reviewsmokingstatuscombo': {
				select: me.onSmokingStatusComboSelect
			}
		});

		me.smokeStatusStore = Ext.create('App.store.patient.SmokeStatus',{
			pageSize: 1000,
			listeners:{
				scope: me,
				load: me.onSmokeStatusStoreLoad
			}
		});
	},

	onSmokeStatusStoreLoad: function(store, records){
		if(store.last() && this.getSmokingStatusCombo()){
			this.getSmokingStatusCombo().setValue(store.last().data.status);
		}
	},

	onSmokingStatusComboSelect: function(cmb, records){
		var me = this;

		me.smokeStatusStore.add({
			pid: app.patient.pid,
			eid: app.patient.eid,
			status: records[0].data.option_name,
			status_code: records[0].data.code,
			status_code_type: records[0].data.code_type,
			create_uid: app.user.id,
			create_date: new Date()
		});

		me.smokeStatusStore.sync({
			success:function(){
				if(window.dual){
					dual.msg(_('sweet'), _('record_updated'));
				}else{
					app.msg(_('sweet'), _('record_updated'));
				}

				me.loadSmokeStatusStore(cmb.up('grid').up('panel'));
			},
			failure:function(){
				if(window.dual){
					dual.msg(_('oops'), _('record_error'), true);
				}else{
					app.msg(_('oops'), _('record_error'), true);
				}
			}
		});
	},

	onAddBtnClicked: function(){
		var record = this.getSocialHistoryTypeCombo().lastSelection[0],
			plugin = this.getSocialHistoryGrid().editingPlugin,
			addedRecs;

		if(!this.getSocialHistoryTypeCombo().isValid()) return;

		plugin.cancelEdit();
		addedRecs = this.getSocialHistoryGrid().getStore().add({
			pid: app.patient.pid,
			eid: app.patient.eid,
			create_uid: app.user.id,
			update_uid: app.user.id,
			create_date: new Date(),
			update_date: new Date(),
			category_code: record.data.code,
			category_code_type: record.data.code_type,
			category_code_text: record.data.option_name
		});

		plugin.startEdit(addedRecs[0], 0);
	},

	onSocialHistoryBeforeEdit: function(plugin, e){
		var column = this.getObservationColumn(),
			editor;

		if(e.record.data.category_code == '229819007'){ // tobacco use
			editor = {
				xtype: 'gaiaehr.combo',
				valueField: 'option_name',
				itemId: 'socialsistoryobservationcombo',
				list: 106
			};
		}else if(e.record.data.category_code == '160573003'){ // alcohol intake
			editor = {
				xtype: 'gaiaehr.combo',
				valueField: 'option_name',
				itemId: 'socialsistoryobservationcombo',
				list: 105
			};
		}else if(e.record.data.category_code == '256235009'){ // exercise
			editor = {
				xtype: 'gaiaehr.combo',
				valueField: 'option_name',
				itemId: 'socialsistoryobservationcombo',
				list: 107
			};
		}else if(e.record.data.category_code == '363908000'){ // drug abuse
			editor = {
				xtype: 'gaiaehr.combo',
				valueField: 'option_name',
				itemId: 'socialsistoryobservationcombo',
				list: 108
			};
		}else{
			editor = {
				xtype: 'textfield'
			};
		}

		editor._marginWidth = 2;
		column.setEditor(editor);
		plugin.editor.onColumnResize(column);

	},

	onHistoryObservationComboSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();

		record.set({
			observation_code: records[0].data.code,
			observation_code_type: records[0].data.code_type
		});

	},

	onHistoryTypeComboSelectionChanged: function(){
		this.getSocialHistoryAddBtn().enable();
	},

	loadSmokeStore:function(){
		this.smokeStatusStore.clearFilter(true);
		this.smokeStatusStore.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	loadSmokeStatusStore:function(panel){
		var grids = panel.query('#PatientSmokingStatusGrid');

		if(grids.length > 0){
			var store = grids[0].getStore();
			store.clearFilter(true);
			store.filter([
				{
					property: 'pid',
					value: app.patient.pid
				}
			]);
		}
	},

	loadSocialHistoryStore: function(panel){
		var grids = panel.query('#PatientSocialHistoryGrid');

		if(grids.length > 0){
			var store = grids[0].getStore();
			store.clearFilter(true);
			store.filter([
				{
					property: 'pid',
					value: app.patient.pid
				}
			]);
		}
	},

	onSocialPanelActive: function(panel){
		this.loadSmokeStatusStore(panel);
		this.loadSocialHistoryStore(panel);
		this.loadSmokeStore();
		this.getSmokingStatusCombo().reset();

	}

});
Ext.define('App.controller.patient.Vitals', {
	extend: 'Ext.app.Controller',
	refs: [
		{
			ref: 'VitalsPanel',
			selector: 'vitalspanel'
		},
		{
			ref: 'VitalsBlocksPanel',
			selector: 'vitalspanel #vitalsBlocks'
		},
		{
			ref: 'VitalsBlocksPanel',
			selector: 'vitalspanel #vitalsBlocks'
		},
		{
			ref: 'VitalsHistoryGrid',
			selector: 'vitalspanel #historyGrid'
		},
		{
			ref: 'VitalsAddBtn',
			selector: 'vitalspanel #vitalAddBtn'
		},
		{
			ref: 'VitalSignBtn',
			selector: 'vitalspanel #vitalSignBtn'
		},
		//
		{
			ref: 'VitalTempFField',
			selector: '#vitalTempFField'
		},
		{
			ref: 'VitalTempCField',
			selector: '#vitalTempCField'
		},
		{
			ref: 'VitalHeightInField',
			selector: '#vitalHeightInField'
		},
		{
			ref: 'VitalHeightCmField',
			selector: '#vitalHeightCmField'
		},
		{
			ref: 'VitalWeightKgField',
			selector: '#vitalWeightKgField'
		},
		{
			ref: 'VitalWeightLbsField',
			selector: '#vitalWeightLbsField'
		},

		// blocks
		{
			ref: 'BpBlock',
			selector: 'vitalspanel #bpBlock'
		},
		{
			ref: 'TempBlock',
			selector: 'vitalspanel #tempBlock'
		},
		{
			ref: 'WeighBlock',
			selector: 'vitalspanel #weighBlock'
		},
		{
			ref: 'HeightBlock',
			selector: 'vitalspanel #heightBlock'
		},
		{
			ref: 'BmiBlock',
			selector: 'vitalspanel #bmiBlock'
		},
		{
			ref: 'NotesBlock',
			selector: 'vitalspanel #notesBlock'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'viewport': {
				beforeencounterload: me.onAppBeforeEncounterLoad
			},
			'vitalspanel #historyGrid': {
				selectionchange: me.onHistoryGridSelectionChange,
				beforeselect: me.onHistoryGridBeforeSelect,
				beforeedit: me.onHistoryGridBeforeEdit,
				validateedit: me.onHistoryGridValidEdit,
				edit: me.onHistoryGridEdit
			},
			'vitalspanel #vitalAddBtn': {
				click: me.onVitalAddBtnClick
			},
			'vitalspanel #vitalSignBtn': {
				click: me.onVitalSignBtnClick
			},


			/** conversions **/
			'#vitalTempFField':{
				keyup:me.onVitalTempFFieldKeyUp
			},
			'#vitalTempCField':{
				keyup:me.onVitalTempCFieldKeyUp
			},
			'#vitalHeightInField':{
				keyup:me.onVitalHeightInFieldKeyUp
			},
			'#vitalHeightCmField':{
				keyup:me.onVitalHeightCmFieldKeyUp
			},
			'#vitalWeightLbsField':{
				keyup:me.onVitalWeightLbsFieldKeyUp
			},
			'#vitalWeightKgField':{
				keyup:me.onVitalWeightKgFieldKeyUp
			}
		});
	},

	onAppBeforeEncounterLoad: function(record){
		if(this.getVitalsHistoryGrid()){
			if(record.vitalsStore){
				this.doReconfigureGrid(record.vitalsStore);
			}else{
				this.doReconfigureGrid(Ext.getStore('ext-empty-store'));
			}

		}
	},

	onHistoryGridSelectionChange: function(grid, records){
		var me = this,
			btn = me.getVitalSignBtn();

		this.doUpdateBlocks(records);
		if(records.length === 0 || records[0].data.auth_uid > 0){
			btn.disable();
		}else{
			btn.enable();
		}
	},

	onHistoryGridBeforeSelect: function(sm, record){
		var selected = sm.getSelection().length;

		if(selected > 0 && record.data.auth_uid > 0){
			app.msg(_('oops'),_('multi_select_signed_records_not_authorized'), true);
			return false;
		}

		return true;

	},

	onHistoryGridValidEdit: function(plugin, context){
		var me = this,
			form = plugin.editor.getForm(),
			w = me.isMetric() ? form.findField('weight_kg').getValue() : form.findField('weight_lbs').getValue(),
			h = me.isMetric() ? form.findField('height_cm').getValue() : form.findField('height_in').getValue(),
			bmi = me.bmi(w, h),
			bmiStatus = me.bmiStatus(bmi);

		context.record.set({
			bmi: bmi,
			bmi_status: bmiStatus
		});
	},

	onHistoryGridEdit: function(plugin, context){
		this.doUpdateBlocks([context.record])
	},

	onHistoryGridBeforeEdit: function(plugin, context){
		if(context.record.data.auth_uid !== 0){
			app.msg(_('oops'), _('this_record_can_not_be_modified_because_it_has_been_signed_by') + ' ' + context.record.data.authorized_by, true);
			return false;
		}
		return true;
	},

	onVitalAddBtnClick: function(btn){
		var grid = btn.up('grid'),
			store = grid.getStore(),
			records;

		grid.editingPlugin.cancelEdit();
		records = store.add({
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			date: new Date()
		});
		grid.editingPlugin.startEdit(records[0], 1);
	},

	onVitalSignBtnClick: function(){
		var me = this,
			grid = me.getVitalsHistoryGrid(),
			sm = grid.getSelectionModel(),
			records = sm.getSelection();

		app.fireEvent('beforevitalssigned', records);

		app.passwordVerificationWin(function(btn, password){

			if(btn == 'ok'){

				User.verifyUserPass(password, function(provider, response){
					if(response.result){

						for(var i = 0; i < records.length; i++){
							records[i].set({
								auth_uid: app.user.id
							});
						}

						records[0].store.sync({
							callback: function(){
								app.msg('Sweet!', _('vitals_signed'));
//								me.getProgressNote();
								app.AuditLog('Patient vitals authorized');
								app.fireEvent('vitalssigned', records);
							}
						});
					}else{
						Ext.Msg.show({
							title: 'Oops!',
							msg: _('incorrect_password'),
							buttons: Ext.Msg.OKCANCEL,
							icon: Ext.Msg.ERROR,
							fn: function(btn){
								if(btn == 'ok'){
									me.onVitalSignBtnClick();
								}
							}
						});
					}
				});
			}
		});

	},

	doUpdateBlocks: function(records){
		var me = this;

		if(records.length > 0){
			me.getBpBlock().update(me.getBlockTemplate('bp', records[0]));
			if(me.isMetric()){
				me.getTempBlock().update(me.getBlockTemplate('temp_c', records[0]));
				me.getWeighBlock().update(me.getBlockTemplate('weight_kg', records[0]));
				me.getHeightBlock().update(me.getBlockTemplate('height_cm', records[0]));
			}else{
				me.getTempBlock().update(me.getBlockTemplate('temp_f', records[0]));
				me.getWeighBlock().update(me.getBlockTemplate('weight_lbs', records[0]));
				me.getHeightBlock().update(me.getBlockTemplate('height_in', records[0]));
			}
			me.getBmiBlock().update(me.getBlockTemplate('bmi', records[0]));
			me.getNotesBlock().update(me.getBlockTemplate('other_notes', records[0]));
		}else{
			me.getBpBlock().update(me.getBlockTemplate('bp', false));
			if(me.isMetric()){
				me.getTempBlock().update(me.getBlockTemplate('temp_c', false));
				me.getWeighBlock().update(me.getBlockTemplate('weight_kg', false));
				me.getHeightBlock().update(me.getBlockTemplate('height_cm', false));
			}else{
				me.getTempBlock().update(me.getBlockTemplate('temp_f', false));
				me.getWeighBlock().update(me.getBlockTemplate('weight_lbs', false));
				me.getHeightBlock().update(me.getBlockTemplate('height_in', false));
			}

			me.getBmiBlock().update(me.getBlockTemplate('bmi', false));
			me.getNotesBlock().update(me.getBlockTemplate('other_notes', false));
		}
	},

	getBlockTemplate: function(property, record){
		var title = '',
			value = '',
			extra = '',
			symbol = '',
			align = 'center';

		if(record !== false){
			if(property == 'bp'){
				title = _(property);
				value = (record.data.bp_systolic + '/' + record.data.bp_diastolic);
				value = value == 'null/null' || value == '/' ? '--/--' : value;
				extra = _('systolic') + '/' + _('diastolic');

			}else if(property == 'temp_c' || property == 'temp_f'){
				title = _('temp');
				symbol = property == 'temp_c' ? '&deg;C' : '&deg;F';
				value = record.data[property] === null || record.data[property] === '' ? '--' : record.data[property] + symbol;
				extra = record.data.temp_location === '' ? '--' : record.data.temp_location;

			}else if(property == 'weight_lbs' || property == 'weight_kg'){
				title = _('weight');
				//				symbol = property == 'weight_lbs' ? ' lbs' : ' kg';
				value = record.data[property] === null || record.data[property] === '' ? '--' : record.data[property] + symbol;
				extra = property == 'weight_lbs' ? 'lbs/oz' : 'Kg';

			}else if(property == 'height_in' || property == 'height_cm'){
				title = _('height');
				symbol = property == 'height_in' ? ' in' : ' cm';
				value = record.data[property] === null || record.data[property] === '' ? '--' : record.data[property] + symbol;

			}else if(property == 'bmi'){
				title = _(property);
				value = record.data[property] === null || record.data[property] === '' ? '--' : this.decimalRound10(record.data[property], -1);
				extra = record.data.bmi_status === '' ? '--' : record.data.bmi_status;

			}else if(property == 'other_notes'){
				title = _('notes');
				value = record.data[property] === null || record.data[property] === '' ? '--' : record.data[property];
				align = 'left'
			}
		}else{
			if(property == 'temp_c' || property == 'temp_f'){
				title = _('temp');
			}else if(property == 'weight_lbs' || property == 'weight_kg'){
				title = _('weight');
			}else if(property == 'height_in' || property == 'height_cm'){
				title = _('height');
			}else if(property == 'other_notes'){
				title = _('notes');
				align = 'left'
			}else{
				title = _(property);
			}
			value = property == 'bp' ? '--/--' : '--';
			extra = '--';
		}

		return '<p class="title">' + title + '</p><p class="value" style="text-align: ' + align + '">' + value + '</p><p class="extra">' + extra + '</p>';
	},

	doReconfigureGrid: function(store){
		var me = this;

		store.sort([
			{
				property: 'date',
				direction: 'DESC'
			}
		]);

		store.on('write', me.onVitalStoreWrite, me);
		me.getVitalsHistoryGrid().reconfigure(store);
		me.getVitalsHistoryGrid().getSelectionModel().select(0);
	},

	onVitalStoreWrite:function(store, operation, e){
		app.fireEvent('vitalwrite', store, operation, e);
	},

	onVitalTempFFieldKeyUp:function(field){
		field.up('form').getForm().getRecord().set({temp_c: this.fc(field.getValue())});
	},

	onVitalTempCFieldKeyUp:function(field){
		field.up('form').getForm().getRecord().set({temp_f: this.cf(field.getValue())});
	},

	onVitalHeightInFieldKeyUp:function(field){
		field.up('form').getForm().getRecord().set({height_cm: this.incm(field.getValue())});
	},

	onVitalHeightCmFieldKeyUp:function(field){
		field.up('form').getForm().getRecord().set({height_in: this.cmin(field.getValue())});
	},

	onVitalWeightLbsFieldKeyUp:function(field){
		field.up('form').getForm().getRecord().set({weight_kg: this.lbskg(field.getValue())});
	},

	onVitalWeightKgFieldKeyUp:function(field){
		field.up('form').getForm().getRecord().set({weight_lbs: this.kglbs(field.getValue())});
	},


	/** Conversions **/

	/**
	 * Convert Celsius to Fahrenheit
	 * @param v
	 */
	cf: function(v){
		return Ext.util.Format.round((9 * v / 5 + 32), 1);
	},

	/**
	 * Convert Fahrenheit to Celsius
	 * @param v
	 */
	fc: function(v){
		return Ext.util.Format.round(((v - 32) * 5 / 9), 1);
	},

	/**
	 * Convert Lbs to Kg
	 * @param v
	 */
	lbskg: function(v){
		var lbs = v[0] || 0,
			oz = v[1] || 0,
			kg = 0,
			res;
		if(lbs > 0) kg = kg + (lbs / 2.2046);
		if(oz > 0) kg = kg + (oz / 35.274);
		return Ext.util.Format.round(kg, 1);
	},

	/**
	 * Convert Kg to Lbs
	 * @param v
	 */
	kglbs: function(v){
		return Ext.util.Format.round((v * 2.2046), 1);
	},

	/**
	 * Convert Inches to Centimeter
	 * @param v
	 */
	incm: function(v){
		return Math.floor(v * 2.54);
	},

	/**
	 * Convert Centimeter to Inches
	 * @param v
	 */
	cmin: function(v){
		return  Ext.util.Format.round((v / 2.54), 0);
	},

	/**
	 * Get BMI from weight and height
	 * @param weight
	 * @param height
	 * @returns {*}
	 */
	bmi: function(weight, height){
		var bmi = '',
			foo = weight.split('/');

		if(foo.length > 1){
			weight = eval(foo[0]) + (foo[1] / 16);
		}

		if(weight > 0 && height > 0){
			if(!this.isMetric()){
				bmi = weight / (height * height) * 703;
			}else{
				bmi = weight / ((height / 100) * (height / 100));
			}
		}

		return bmi.toFixed ? bmi.toFixed(1) : bmi;
	},

	bmiStatus:function(bmi){
		var status = '';
		if(bmi == '') return '';
		if(bmi < 15){
			status = _('very_severely_underweight')
		}else if(bmi >= 15 && bmi < 16){
			status = _('severely_underweight')
		}else if(bmi >= 16 && bmi < 18.5){
			status = _('underweight')
		}else if(bmi >= 18.5 && bmi < 25){
			status = _('normal')
		}else if(bmi >= 25 && bmi < 30){
			status = _('overweight')
		}else if(bmi >= 30 && bmi < 35){
			status = _('obese_class_1')
		}else if(bmi >= 35 && bmi < 40){
			status = _('obese_class_2')
		}else if(bmi >= 40){
			status = _('obese_class_3')
		}
		return status;
	},

	/**
	 * return true if units of measurement is metric
	 */
	isMetric:function(){
		return g('units_of_measurement') == 'metric';
	},

    /*
    decimalAdjust:
        Method to correctly round numbers, with decimals.
        Thanks, to the excellentt guys a Mozilla Developer Network
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
     */
    decimalAdjust: function(type, value, exp) {
        // If the exp is undefined or zero...
        if (typeof exp === 'undefined' || +exp === 0) {
            return Math[type](value);
        }
        value = +value;
        exp = +exp;
        // If the value is not a number or the exp is not an integer...
        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
            return NaN;
        }
        // Shift
        value = value.toString().split('e');
        value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
        // Shift back
        value = value.toString().split('e');
        return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
    },

    /*
     decimalRound10:
        Method to correctly round numbers, with decimals.
        Thanks, to the excellentt guys a Mozilla Developer Network
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
     */
    decimalRound10: function(value, exp) {
        return this.decimalAdjust('round', value, exp);
    },
    floorRound10: function(value, exp) {
        return decimalAdjust('floor', value, exp);
    },
    ceilRound10: function(value, exp) {
        return decimalAdjust('ceil', value, exp);
    }

});

Ext.define('App.controller.patient.Summary', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'PatientSummaryPanel',
			selector: 'PatientSummaryPanel'
		},
		{
			ref: 'PatientDocumentPanel',
			selector: 'patientdocumentspanel'
		},
		{
			ref: 'PatientCcdPanel',
			selector: 'patientccdpanel'
		},
		{
			ref: 'ReferralPanelGrid',
			selector: 'patientreferralspanel'
		},
		{
			ref: 'AddReferralBtn',
			selector: 'button[action=addReferralBtn]'
		},
		{
			ref: 'PrintReferralBtn',
			selector: '#printReferralBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'#PatientSummaryPanel': {
				activate: me.onPatientSummaryPanel
			},
			'#PatientSummaryEncountersPanel': {
				itemdblclick: me.onPatientSummaryEncounterDblClick
			},
            '#PatientSummaryContactsPanel': {
                activate: me.reloadGrid
            },
			'#PatientSummaryDisclosuresPanel': {
				activate: me.reloadGrid
			},
			'#PatientSummeryNotesPanel': {
				activate: me.reloadGrid
			},
			'#PatientSummaryRemindersPanel': {
				activate: me.reloadGrid
			},
			'#PatientSummaryVitalsPanel': {
				activate: me.reloadGrid
			},
			'#PatientEncounterHistoryPanel': {
				activate: me.reloadGrid
			},
			'#PatientSummaryDocumentsPanel': {
				activate: me.reloadGrid
			},
			'#PatientSummaryPreventiveCareAlertsPanel': {
				activate: me.reloadGrid
			}
		});

		me.nav = me.getController('Navigation');
	},

	onPatientSummaryPanel: function(panel){
		var params = this.nav.getExtraParams();

		if(params){
			if(params.document){
				panel.down('tabpanel').setActiveTab(this.getPatientDocumentPanel());
			}else if(params.ccd){
				panel.down('tabpanel').setActiveTab(this.getPatientCcdPanel());
			}
		}
	},

	onPatientSummaryEncounterDblClick: function(grid, record){
		app.openEncounter(record.data.eid);
	},

	reloadGrid:function(grid){
		var store;

		if(grid.itemId == 'PatientSummaryVitalsPanel'){
			store = grid.down('vitalsdataview').getStore();
		}else{
			store = grid.getStore();
		}

		//store.clearFilter(true);
		store.load({
			//params: {
			//	pid: app.patient.pid
			//},
			filters:[
				{
					property:'pid',
					value: app.patient.pid
				}
			]
		})
	}

});
Ext.define('App.controller.patient.encounter.EncounterDocuments', {
	extend: 'Ext.app.Controller',
	requires: [],
	refs: [],

	init: function(){
		var me = this;

		this.control({
			'#EncounterDocumentsPrintBtn': {
				click: me.onEncounterDocumentsPrintBtnClick
			}
		});
	},

	onEncounterDocumentsPrintBtnClick: function(btn){
		var grid = btn.up('grid'),
			selections = grid.getSelectionModel().getSelection(),
			groups = {};

		for(var i = 0; i < selections.length; i++){
			var data = selections[i].data;

			if(!groups[data.document_type]){
				groups[data.document_type] = {};
				groups[data.document_type]['controller'] = data.controller;
				groups[data.document_type]['method'] = data.method;
				groups[data.document_type]['items'] = [];
			}

			Ext.Array.push(groups[data.document_type]['items'], data.record_id);
		}

		this.doEncounterDocumentsPrint(groups);
	},

	doEncounterDocumentsPrint: function(groups){
		var me = this, store, filters, i;

		Ext.Object.each(groups, function(group, data){

			filters = [];

			if(group.toUpperCase() == 'NOTE'){
				store = Ext.data.StoreManager.lookup('DoctorsNotesStore');

				for(i = 0; i < data.items.length; i++){
					Ext.Array.push(filters, {
						property: 'id',
						value: data.items[i]
					});

					store.load({
						filters: filters,
						callback: function(records){
							me.getController(data.controller)[data.method](records[0]);
						}
					});
				}
			}else{

				if(group.toUpperCase() == 'RX'){
					store = Ext.data.StoreManager.lookup('RxOrderStore');
				}else if(group.toUpperCase() == 'RAD'){
					store = Ext.data.StoreManager.lookup('LabOrderStore');
				}else if(group.toUpperCase() == 'LAB'){
					store = Ext.data.StoreManager.lookup('RadOrderStore');
				}

				for(i = 0; i < data.items.length; i++){
					Ext.Array.push(filters, {
						property: 'id',
						value: data.items[i]
					});
				}

				store.load({
					filters: filters,
					callback: function(records){
						me.getController(data.controller)[data.method](records);
					}
				});
			}
		});
	},

	onDocumentView: function(grid, rowIndex){
	},

	loadDocumentsByEid: function(grid, eid){
		var me = this,
			store = grid.getStore();

		store.removeAll();

		Encounter.getEncounterPrintDocumentsByEid(eid, function(results){
			var data = [];

			for(var i = 0; i < results.length; i++){
				var document = results[i];

				/**
				 * This define the Controller.Method to call for this document
				 *
				 */
				if(document.document_type == 'rx'){
					document.controller = 'patient.RxOrders';
					document.method = 'onPrintRxOrderBtnClick';
				}else if(document.document_type == 'rad'){
					document.controller = 'patient.RadOrders';
					document.method = 'onPrintRadOrderBtnClick';
				}else if(document.document_type == 'lab'){
					document.controller = 'patient.LabOrders';
					document.method = 'onPrintLabOrderBtnClick';
				}else if(document.document_type == 'note'){
					document.controller = 'patient.DoctorsNotes';
					document.method = 'onPrintDoctorsNoteBtn';
				}

				document.document_type = Ext.String.capitalize(document.document_type);

				Ext.Array.push(data, document);
			}

			if(data.length > 0){
				store.loadRawData(data);
			}
		});

	}

});

Ext.define('App.controller.patient.encounter.EncounterSign', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		{
			ref: 'EncounterSignWindow',
			selector: '#EncounterSignWindow'
		},
		{
			ref: 'EncounterCoSignSupervisorCombo',
			selector: '#EncounterCoSignSupervisorCombo'
		},
		{
			ref: 'EncounterCoSignSupervisorBtn',
			selector: '#EncounterCoSignSupervisorBtn'
		},
		{
			ref: 'EncounterCancelSignBtn',
			selector: '#EncounterCancelSignBtn'
		},
		{
			ref: 'EncounterSignBtn',
			selector: '#EncounterSignBtn'
		},
		{
			ref: 'EncounterSignDocumentGrid',
			selector: '#EncounterSignDocumentGrid'
		},
		{
			ref: 'EncounterSignAlertGrid',
			selector: '#EncounterSignAlertGrid'
		}
	],

	init: function(){
		var me = this;

		this.control({
			'#EncounterSignWindow': {
				show: me.onEncounterSignWindowShow
			},
			'#EncounterCoSignSupervisorCombo': {
				beforerender: me.onEncounterCoSignSupervisorComboBeforeRender
			},
			// Buttons
			'#EncounterCoSignSupervisorBtn': {
				click: me.onEncounterCoSignSupervisorBtnClick
			},
			'#EncounterSignBtn': {
				click: me.onEncounterSignBtnClick
			},
			'#EncounterCancelSignBtn': {
				click: me.onEncounterCancelSignBtnClick
			}
		});
	},

	onEncounterCoSignSupervisorBtnClick: function(){
		this.coSignEncounter();
	},

	onEncounterSignBtnClick: function(){
		this.signEncounter();
	},

	onEncounterCancelSignBtnClick: function(){
		this.cancelCheckout();
	},

	coSignEncounter: function(){
		this.getEncounterSignWindow().enc.doSignEncounter(true);
	},

	signEncounter: function(){
		if(a('require_enc_supervisor')){
			if(this.getEncounterCoSignSupervisorCombo().isValid()){
				this.getEncounterSignWindow().enc.doSignEncounter(false);
			}
		}else{
			this.getEncounterSignWindow().enc.doSignEncounter(false);
		}
	},

	cancelCheckout: function(){
		this.getEncounterSignWindow().close();
		this.getEncounterSignWindow().down('form').getForm().reset();
	},

	onEncounterCoSignSupervisorComboBeforeRender: function(cmb){
		cmb.getStore().load();
	},

	onEncounterSignWindowShow: function(){
		var me = this,
			win = me.getEncounterSignWindow(),
			coSignCombo = me.getEncounterCoSignSupervisorCombo(),
			coSignBtn = me.getEncounterCoSignSupervisorBtn(),
			signBtn = me.getEncounterSignBtn();

		me.encounter = win.enc.encounter;

		me.pid = win.enc.pid;
		me.eid = win.enc.eid;

		if(a('access_encounter_checkout')){

			App.app.getController('patient.encounter.SuperBill').reconfigureSupperBillGrid(me.encounter.services());

			me.getEncounterSignAlertGrid().getStore().load({
				params: {
					eid: me.eid
				}
			});
		}

		me.getEncounterSignDocumentGrid().loadDocs(app.patient.eid);

		var isCoSigned = win.enc.encounter.data.supervisor_uid != null && win.enc.encounter.data.supervisor_uid > 0;

		if(isCoSigned){
			coSignCombo.setValue(win.enc.encounter.data.supervisor_uid);
		}else{
			coSignCombo.reset();
		}

		if(win.enc.isClose() || !a('sign_enc')){
			signBtn.disable();
			coSignBtn.disable();
			coSignCombo.setVisible(isCoSigned);
			coSignCombo.disable();
		}else{
			// not previously signed and required supervisor
			if(!isCoSigned && a('require_enc_supervisor')){
				signBtn.enable();
				coSignBtn.disable();
				coSignCombo.show();
				coSignCombo.enable();

				// previously signed and supervisor
			}else if(isCoSigned && a('sign_enc_supervisor')){
				signBtn.disable();
				coSignBtn.enable();
				coSignCombo.show();
				coSignCombo.enable();
				// not previously and
			}else{
				signBtn.enable();
				coSignBtn.disable();
				coSignCombo.hide();
				coSignCombo.disable();
			}
		}
	},

	alertIconRenderer: function(v){
		if(v == 1){
			return '<img src="resources/images/icons/icoLessImportant.png" />'
		}else if(v == 2){
			return '<img src="resources/images/icons/icoImportant.png" />'
		}
		return v;
	}

});
Ext.define('App.controller.patient.encounter.SuperBill', {
	extend: 'Ext.app.Controller',
	requires: [

	],
	refs: [
		// super bill stuff
		{
			ref: 'SuperBillGrid',
			selector: 'superbillpanel'
		},
		{
			ref: 'SuperBillServiceAddBtn',
			selector: '#SuperBillServiceAddBtn'
		},
		{
			ref: 'SuperBillEncounterDxCombo',
			selector: '#SuperBillEncounterDxCombo'
		}
	],

	init: function(){
		var me = this;

		this.control({
			'viewport': {
				immunizationedit: me.onImmunizationEdit
			},
			'superbillpanel': {
				beforeedit: me.onSuperBillGridBeforeEdit
			},
			'#SuperBillServiceAddBtn': {
				click: me.onSuperBillServiceAddBtnClick
			},
			'#SuperCptSearchCmb': {
				select: me.onSuperCptSearchCmbSelect
			}
		});
	},

	onImmunizationEdit:function(controller, record){
		var serviceRecords = this.getServiceFormEncounterRecord('cvx', record.data.id);

		if(serviceRecords.length == 0){
			this.promptAddService(record, 'cvx');
		}

	},

	promptAddService: function(record, type){
		var me = this;

		Ext.Msg.show({
			title: _('wait'),
			msg: _('super_bill_prompt_add_question'),
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){

				if(btn == 'yes'){
					me.addService(record, type);
				}
			}
		});
	},

	addService: function(record, type){
		var me = this;

		if(type == 'cvx'){
			Immunizations.getCptByCvx(record.data.code, function(services){
				if(services.length == 0){
					app.msg(_('oops'), _('no_service_code_found'), true);
				} else if(services.length == 1){
					me.doAddService(record, type, services[0]);
				}else{

				}
			});
		}

	},

	doAddService: function(record, type, service, callback){
		var store = this.getController('patient.encounter.Encounter').getEncounterRecord().services(),
			serviceData = {
				pid: record.data.pid,
				eid: record.data.eid,
				units: 1,
				reference_type: type,
				reference_id: record.data.id,
				code: service ? service.data.code : record.data.code,
				code_type: service ? service.data.code_type : record.data.code_type,
				code_text: service ? service.data.code_text : record.data.code_text,
				create_uid: app.user.id,
				date_create: new Date()
			};

		if(record.data.tooth){
			serviceData.tooth = record.data.tooth;
		}

		if(record.data.surfaceString){
			serviceData.surface = record.data.surfaceString;
		}

		if(record.data.cavity_quadrant){
			serviceData.cavity_quadrant = record.data.cavity_quadrant;
		}

		var records = store.add(serviceData);

		store.sync({
			callback:function(){
				app.msg(_('sweet'), _('service_added'));
				if(typeof callback == 'function') callback(records[0]);
			}
		});
	},

	getServiceRecord: function(reference_id){
		var store = this.getController('patient.encounter.Encounter').getEncounterRecord().services();

		return store.getById(reference_id);
	},

	onSuperBillGridBeforeEdit: function(plugin, context){

		this.getSuperBillEncounterDxCombo().getStore().load({
			filters: [
				{
					property: 'eid',
					value: context.record.data.eid
				}
			]
		});
	},

	// super bill stuff
	onSuperBillServiceAddBtnClick: function(){
		var me = this,
			grid = me.getSuperBillGrid(),
			store = grid.getStore(),
			encounter = me.getController('patient.encounter.EncounterSign').encounter;

		grid.editingPlugin.cancelEdit();
		var records = store.add({
			pid: encounter.data.pid,
			eid: encounter.data.eid,
			units: 1,
			create_uid: app.user.id,
			date_create: new Date()
		});
		grid.editingPlugin.startEdit(records[0], 0);
	},

	onSuperCptSearchCmbSelect: function(cmb, records){
		var record = cmb.up('form').getForm().getRecord();

		record.set({
			code: records[0].data.code,
			code_type: records[0].data.code_type
		});
	},

	onRemoveService: function(record){
		var me = this;

		//TODO: handle the remove logic
		record.destroy();

	},

	reconfigureSupperBillGrid: function(store){
		this.getSuperBillGrid().reconfigure(store);
	},

	getServiceFormEncounterRecord: function(referenceType, referenceId){
		var encounter = this.getController('patient.encounter.Encounter').getEncounterRecord(),
			services = [];

		if(encounter == null) return services;

		var store = encounter.services(),
			records = store.data.items,
			len = store.data.items.length;

		for(var i = 0; i < len; i++){
			var record = records[i];

			if(record.data.reference_type == referenceType && record.data.reference_id == referenceId){
				Ext.Array.push(services, record);
			}
		}

		return services;
	}



});
Ext.define('App.controller.patient.encounter.SOAP', {
	extend: 'Ext.app.Controller',

	// defaults
	recognition: null,
	speechAction: null,
	recognizing: false,
	isError: false,

	final_transcript: '',
	interim_transcript: '',

	field: {
		name: 'subjective'
	},

	refs: [
		{
			ref: 'Viewport',
			selector: 'viewport'
		},
		{
			ref: 'SoapPanel',
			selector: '#soapPanel'
		},
		{
			ref: 'SoapForm',
			selector: '#soapPanel #soapForm'
		},
		{
			ref: 'SoapProcedureWindow',
			selector: '#soapProcedureWindow'
		},
		{
			ref: 'SoapProcedureForm',
			selector: '#soapProcedureWindow > form'
		},
		{
			ref: 'SnippetsTreePanel',
			selector: '#soapPanel #SnippetsTreePanel'
		},
		{
			ref: 'SpeechBtn',
			selector: '#soapPanel button[action=speechBtn]'
		},
		{
			ref: 'EncounterProgressNotesPanel',
			selector: '#EncounterProgressNotesPanel'
		},
		{
			ref: 'SoapDxCodesField',
			selector: '#SoapDxCodesField'
		},

		// templates specialties combo
		{
			ref: 'SoapTemplateSpecialtiesCombo',
			selector: '#SoapTemplateSpecialtiesCombo'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'viewport': {
				'beforeencounterload': me.onOpenEncounter,
				'encounterbeforesync': me.onEncounterBeforeSync
			},
			'#soapPanel': {
				beforerender: me.onPanelBeforeRender
				//activate: me.onPanelActive,
				//deactivate: me.onPanelDeActive
			},
			'#soapPanel #soapForm': {
				render: me.onPanelFormRender
			},
			'#soapPanel button[action=speechBtn]': {
				toggle: me.onSpeechBtnToggle
			},
			'#soapForm > fieldset > textarea': {
				focus: me.onSoapTextFieldFocus
			},
			'#soapProcedureWindow > form > textarea': {
				focus: me.onProcedureTextFieldFocus
			},
			'#SoapTemplateSpecialtiesCombo': {
				select: me.onSoapTemplateSpecialtiesComboChange,
				change: me.onSoapTemplateSpecialtiesComboChange
			}
		});
	},

	onSoapTemplateSpecialtiesComboChange: function(cmb){
		this.loadSnippets();
	},

	onOpenEncounter: function(encounter){
		this.getSoapTemplateSpecialtiesCombo().setValue(encounter.data.specialty_id);
	},

	onEncounterBeforeSync: function(panel, store, form){
		if(form.owner.itemId == 'soapForm'){
			this.getSoapDxCodesField().sync();
		}
	},

	//onPanelActive: function(){
	//	var me = this;
	//	Ext.Function.defer(function(){
	//		me.getEncounterProgressNotesPanel().expand();
	//	}, 200);
	//},
	//
	//onPanelDeActive: function(){
	//	var me = this;
	//	Ext.Function.defer(function(){
	//		me.getEncounterProgressNotesPanel().collapse();
	//	}, 200);
	//},

	onSoapTextFieldFocus: function(field){
		this.field = field;
		this.loadSnippets();

		if(!Ext.isWebKit) return;
		this.final_transcript = field.getValue();
		this.interim_transcript = '';
	},

	onProcedureTextFieldFocus: function(field){
		this.field = field;
		this.loadSnippets();

		if(!Ext.isWebKit) return;
		this.final_transcript = field.getValue();
		this.interim_transcript = '';
	},

	loadSnippets: function(){
		var me = this;

		if(me.getSnippetsTreePanel().collapsed === false){
			var templates = me.getSnippetsTreePanel(),
				specialty_id = me.getSoapTemplateSpecialtiesCombo().getValue(),
				action = me.field.name + '-' + specialty_id;

			if(templates.action != action){

				templates.setTitle(_(me.field.name) + ' ' + _('templates'));
				templates.action = me.field.name + '-' + specialty_id;

				templates.getSelectionModel().deselectAll();
				templates.getStore().load({
					filters: [
						{
							property: 'category',
							value: me.field.name
						},
						{
							property: 'specialty_id',
							value: me.getSoapTemplateSpecialtiesCombo().getValue()
						},
						{
							property: 'parentId',
							value: 'root'
						}
					]
				});

			}

		}
	},

	onPanelBeforeRender: function(panel){
		if(!Ext.isWebKit) return;

		var btn = [
			{
				xtype: 'button',
				action: 'speechBtn',
				iconCls: 'speech-icon-inactive',
				enableToggle: true,
				minWidth: null
			},
			{ xtype: 'tbfill' }
		];

		panel.down('form').getDockedItems('toolbar[dock="bottom"]')[0].insert(0, btn);
	},

	onPanelFormRender: function(panel){
		Ext.widget('careplangoalsnewwindow', {
			constrainTo: panel.el.dom
		});
	},

	onSpeechBtnToggle: function(btn, pressed){
		if(pressed){
			this.initSpeech();
		}else{
			this.stopSpeech();
		}
	},

	stopSpeech: function(){
		this.recognition.stop();
		this.final_transcript = '';
		this.interim_transcript = '';
		delete this.recognition;
	},

	initSpeech: function(){
		var me = this;
		if(me.recognition) me.stopSpeech();
		me.final_transcript = me.field.getValue();
		me.recognition = new webkitSpeechRecognition();
		me.recognition.continuous = true;
		me.recognition.interimResults = true;
		me.recognition.lang = app.user.localization;

		me.recognition.onstart = function(){
			me.recognizing = true;
			me.setRecordButton(true);
		};

		me.recognition.onerror = function(event){
			me.isError = true;
			me.setRecordButton(false);
		};

		me.recognition.onend = function(){
			me.setRecordButton(false);
		};

		me.recognition.onresult = function(event){
			me.interim_transcript = '';
			for(var i = event.resultIndex; i < event.results.length; ++i){
				if(event.results[i].isFinal){
					me.final_transcript += event.results[i][0].transcript;
				}else{
					me.interim_transcript += event.results[i][0].transcript;
				}
			}

			me.field.setValue(me.final_transcript);
		};

		me.recognition.start();
	},

	setRecordButton: function(recording){
		this.getSpeechBtn().setIconCls(recording ? 'speech-icon-active' : 'speech-icon-inactive');
	}

});

Ext.define('App.model.patient.EncounterDx', {
	extend: 'Ext.data.Model',
	table: {
		name: 'encounter_dx',
		comment: 'Encounter Diagnosis'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int',
			index: true
		},
		{
			name: 'dx_group',
			type: 'int',
			index: true
		},
		{
			name: 'dx_order',
			type: 'int',
			index: true
		},
		{
			name: 'code',
			type: 'string',
			len: 25
		},
		{
			name: 'code_type',
			type: 'string',
			len: 25
		},
		{
			name: 'code_text',
			type: 'string',
			store: false,
			convert: function(v, record){
				return v == '' ? record.data.long_desc : v;
			}
		},
		{
			name: 'long_desc',
			type: 'string',
			store: false
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Encounter.getEncounterDxs',
			create: 'Encounter.createEncounterDx',
			update: 'Encounter.updateEncounterDx',
			destroy: 'Encounter.destroyEncounterDx'
		}
	},
	belongsTo: {
		model: 'App.model.patient.SOAP',
		foreignKey: 'eid'
	}
});
Ext.define('App.view.patient.Immunizations', {
	extend: 'Ext.panel.Panel',
	requires: [
		'App.ux.combo.CVXManufacturersForCvx',
		'App.ux.LiveImmunizationSearch',
		'App.ux.grid.RowFormEditing',
		'App.store.patient.CVXCodes',
		'App.ux.form.fields.DateTime',
		'App.ux.LiveUserSearch'
	],
	xtype: 'patientimmunizationspanel',
	title: _('immunizations'),
	layout: 'border',
	border: false,
	items: [
		{
			xtype: 'grid',
			region: 'center',
			itemId: 'patientImmunizationsGrid',
			selModel: Ext.create('Ext.selection.CheckboxModel'),
			columnLines: true,
			store: this.store = Ext.create('App.store.patient.PatientImmunization', {
				groupField: 'vaccine_name',
				sorters: [
					'vaccine_name',
					'administered_date'
				],
				remoteFilter: true,
				autoSync: false
			}),
			features: Ext.create('Ext.grid.feature.Grouping', {
				groupHeaderTpl: _('immunization') + ': {name} ({rows.length} Item{[values.rows.length > 1 ? "s" : ""]})'
			}),
			columns: [
				{
					text: _('code'),
					dataIndex: 'code',
					width: 50,
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				},
				{
					text: _('immunization_name'),
					dataIndex: 'vaccine_name',
					flex: 1,
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				},
				{
					text: _('lot_number'),
					dataIndex: 'lot_number',
					width: 100,
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				},
				{
					text: _('amount'),
					dataIndex: 'administer_amount',
					width: 100,
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				},
				{
					text: _('units'),
					dataIndex: 'administer_units',
					width: 100,
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				},
				{
					text: _('notes'),
					dataIndex: 'note',
					flex: 1,
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				},
				{
					text: _('administered_by'),
					dataIndex: 'administered_by',
					width: 150,
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				},
				{
					xtype: 'datecolumn',
					text: _('date'),
					format: 'Y-m-d',
					width: 100,
					dataIndex: 'administered_date',
					renderer: function(v, meta, record){
						if(!record.data.is_error) return v;
						return '<span class="is_error_data">' + v + '</span>'
					}
				}
			],
			plugins: Ext.create('App.ux.grid.RowFormEditing', {
				autoCancel: false,
				errorSummary: false,
				clicksToEdit: 2,
				items: [
					{
						xtype: 'container',
						layout: 'hbox',
						items: [
							{
								xtype: 'container',
								layout: 'vbox',
								items: [
									{
										/**
										 * Line one
										 */
										xtype: 'fieldcontainer',
										layout: 'hbox',
										itemId: 'line1',
										defaults: {
											margin: '0 10 0 0',
											xtype: 'textfield'
										},
										items: [
											{
												xtype: 'immunizationlivesearch',
												itemId: 'immunizationsearch',
												fieldLabel: _('name'),
												name: 'vaccine_name',
												valueField: 'name',
												hideLabel: false,
												allowBlank: false,
												enableKeyEvents: true,
												width: 625
											}
										]

									},
									{
										/**
										 * Line two
										 */
										xtype: 'fieldcontainer',
										layout: 'hbox',
										defaults: {
											margin: '0 10 0 0',
											xtype: 'textfield'
										},
										items: [

											{
												xtype: 'numberfield',
												fieldLabel: _('amount'),
												name: 'administer_amount',
												width: 160
											},
											{
                                                xtype: 'gaiaehr.listcombo',
												fieldLabel: _('units'),
												name: 'administer_units',
												labelWidth: 30,
												width: 150,
                                                loadStore: true,
                                                queryMode: 'local',
                                                list: 131
											},
											{
                                                xtype: 'gaiaehr.combo',
												fieldLabel: _('administration_site'),
												width: 295,
												labelWidth: 110,
												list: 119,
												queryMode: 'local',
												loadStore: true,
												name: 'administration_site'
											}
										]

									},
									{
										/**
										 * Line three
										 */
										xtype: 'fieldcontainer',
										layout: 'hbox',
										defaults: {
											margin: '0 10 0 0',
											xtype: 'textfield'
										},
										items: [
											{
												fieldLabel: _('route'),
												xtype: 'gaiaehr.combo',
												list: 6,
												queryMode: 'local',
												loadStore: true,
												width: 295,
												name: 'route'
											},
											{
                                                xtype: 'mitos.datetime',
												fieldLabel: _('date_administered'),
												width: 320,
												labelWidth: 115,
												dateTimeFormat: 'Y-m-d H:i:s',
												name: 'administered_date',
                                                vtype: 'date',
                                                allowBlank: false
                                            }
										]

									},
									{
										fieldLabel: _('administered_by'),
										xtype: 'userlivetsearch',
										itemId: 'patientImmunizationsEditFormAdministeredByField',
										name: 'administered_by',
										margin: '0 10 5 0',
										width: 625,
										hideLabel: false,
										forceSelection: false,
										acl: 'administer_patient_immunizations'
									},
									{
										fieldLabel: _('notes'),
										xtype: 'textfield',
										name: 'note',
										width: 625
									}
								]
							},
							{
								xtype: 'container',
								items: [
									{
										xtype: 'fieldset',
										title: _('substance_data'),
										defaults: {
											margin: '0 0 5 0',
											width: 250
										},
										margin: '0 15 5 0',
										items: [
											{
												fieldLabel: _('lot_number'),
												xtype: 'textfield',
												name: 'lot_number'
											},
											{
												fieldLabel: _('exp_date'),
												xtype: 'datefield',
												format: 'Y-m-d',
												name: 'exp_date'
											},
											{
												xtype: 'cvxmanufacturersforcvxcombo',
												fieldLabel: _('manufacturer'),
												margin: '0 0 8 0',
												name: 'manufacturer'
											}
										]
									},
									{
										xtype: 'datefield',
										width: 250,
										margin: '0 0 0 5',
										fieldLabel: _('education'),
										name: 'education_date'
									},
                                    {
                                        xtype: 'datefield',
                                        width: 250,
                                        margin: '0 0 0 5',
                                        fieldLabel: _('doc_published'),
                                        name: 'education_doc_published'
                                    }
								]
							},
							{
								xtype: 'checkboxfield',
								boxLabel: _('entered_in_error'),
								name: 'is_error'
							}
						]
					}
				]
			}),
			tbar: [
				'->',
				{
					text: _('add_new'),
					action: 'encounterRecordAdd',
					itemId: 'addImmunizationBtn',
					iconCls: 'icoAdd'
				}
			],
			bbar: [
				'-',
				{
					xtype: 'button',
					text: _('submit_hl7_vxu'),
					disabled: true,
					itemId: 'submitVxuBtn'
				},
				'-',
				'->',
				{
					text: _('review'),
					itemId: 'reviewImmunizationsBtn',
					action: 'encounterRecordAdd'
				}
			]
		},
		{
			xtype: 'grid',
			title: _('immunization_list'),
			itemId: 'cvxGrid',
			collapseMode: 'mini',
			region: 'east',
			collapsible: true,
			collapsed: true,
			width: 300,
			split: true,
			store: Ext.create('App.store.patient.CVXCodes'),
			columns: [
				{
					text: _('code'),
					dataIndex: 'cvx_code',
					width: 50
				},
				{
					text: _('immunization_name'),
					dataIndex: 'name',
					flex: 1
				}
			]
		}
	]
});
Ext.define('App.view.patient.Medications', {
	extend: 'Ext.panel.Panel',
	requires: [
		'App.store.patient.Medications',
		'App.store.administration.Medications',
		'Ext.form.field.Trigger',
		//'Ext.grid.plugin.RowEditing',
		'App.ux.LiveRXNORMSearch',
		'App.ux.combo.PrescriptionHowTo',
		'App.ux.combo.PrescriptionTypes',
		'App.ux.LiveSigsSearch',
		'App.ux.LiveUserSearch',
		'App.ux.form.fields.DateTime'
	],
	xtype: 'patientmedicationspanel',
	title: _('medications'),
	layout: 'border',
	border: false,
	items: [
		{
			xtype: 'grid',
			region: 'center',
			action: 'patientMedicationsListGrid',
			itemId: 'patientMedicationsGrid',
			columnLines: true,
            features: [{ftype:'grouping'}],
			store: Ext.create('App.store.patient.Medications', {
				autoSync: false,
                startCollapsed: true
			}),
			columns: [
				{
					xtype: 'actioncolumn',
					width: 25,
                    groupable: false,
					items: [
						{
							icon: 'resources/images/icons/blueInfo.png',  // Use a URL in the icon config
							tooltip: 'Get Info',
							handler: function(grid, rowIndex, colIndex, item, e, record){
								App.app.getController('InfoButton').doGetInfo(
                                    record.data.RXCUI,
                                    'RXCUI',
                                    record.data.STR
                                );
							}
						}
					]
				},
				{
					header: _('medication'),
					flex: 1,
                    groupable: true,
                    hidden: false,
					minWidth: 200,
					dataIndex: 'STR',
					editor: {
						xtype: 'rxnormlivetsearch',
						itemId: 'patientMedicationLiveSearch',
						displayField: 'STR',
						valueField: 'STR',
						action: 'medication',
						allowBlank: false
					},
					renderer: function(v, mets, record){
						var codes = '';
						if(record.data.RXCUI != ''){
							codes += ' <b>RxNorm:</b> ' + record.data.RXCUI;
						}
						if(record.data.NDC != ''){
							codes += ' <b>NDC:</b> ' + record.data.NDC;
						}
						codes = codes != '' ? (' (' + codes + ' )') : '';
						return v + codes;
					}
				},
				{
					text: _('directions'),
					dataIndex: 'directions',
                    groupable: false,
					flex: 1,
					editor: {
						xtype: 'textfield'
					}
				},
				{
					text: _('dispense'),
					dataIndex: 'dispense',
                    groupable: false,
					with: 200,
					editor: {
						xtype: 'textfield',
						maxLength: 40
					}
				},
				{
					text: _('administered'),
                    groupable: false,
					columns:[
						{
							text: _('user'),
							dataIndex: 'administered_by',
							width: 200,
							editor: {
								xtype: 'userlivetsearch',
								acl: 'administer_medications',
								valueField: 'fullname',
								itemId: 'PatientMedicationUserLiveSearch'
							}
						},
						{
							xtype: 'datecolumn',
							text: _('date'),
							dataIndex: 'administered_date',
							width: 200,
							format: g('date_time_display_format'),
							editor: {
								xtype: 'mitos.datetime'
							}
						}
					]
				},
				{
					xtype: 'datecolumn',
                    groupable: false,
					format: 'Y-m-d',
					header: _('begin_date'),
					width: 90,
					dataIndex: 'begin_date',
					sortable: false,
					hideable: false
				},
				{
					xtype: 'datecolumn',
                    groupable: false,
					format: 'Y-m-d',
					header: _('end_date'),
					width: 90,
					dataIndex: 'end_date',
					sortable: false,
					hideable: false,
					editor: {
						xtype: 'datefield',
						format: 'Y-m-d'
					}
				},
				{
					header: _('active?'),
                    groupable: false,
					width: 60,
					dataIndex: 'active',
					renderer: function(v){
						return app.boolRenderer(v);
					}
				}
			],
			plugins: Ext.create('Ext.grid.plugin.RowEditing', {
				autoCancel: false,
				errorSummary: false,
				clicksToEdit: 2
			}),
			bbar: [
				'-',
				{
					text: _('reconciled'),
					itemId: 'PatientMedicationReconciledBtn',
					enableToggle: true,
					pressed: true
				},
				'-',
				'->',
				{
					text: _('review'),
					itemId: 'reviewMedications'
				}
			]
		}
	],
	tbar: [
		'->',
        {
            text: _('no_active_medication'),
            itemId: 'addNoActiveMedicationBtn',
            iconCls: 'icoAdd'
        },
		{
			text: _('add_new'),
			itemId: 'addPatientMedicationBtn',
			iconCls: 'icoAdd'
		}
	]


});

Ext.define('App.view.patient.AdvanceDirectives', {
	extend: 'Ext.grid.Panel',
	requires: [

	],
	xtype: 'patientadvancedirectivepanel',
	title: _('advance_directives'),
	columnLines: true,
	store: Ext.create('App.store.patient.AdvanceDirectives', {
		remoteFilter: true,
		autoSync: false
	}),
	columns: [
		{
			text: _('directive'),
			flex: 1,
			dataIndex: 'code_text',
			editor:{
				xtype:'gaiaehr.combo',
				list: 129,
				loadStore: true
			}
		},
		{
			text: _('status'),
			dataIndex: 'status_code_text',
			flex: 1,
			editor:{
				xtype:'gaiaehr.combo',
				list: 128,
				loadStore: true
			}
		},
		{
			text: _('notes'),
			flex: 2,
			dataIndex: 'notes',
			editor:{
				xtype:'textfield'
			}
		},
		{
			xtype: 'datecolumn',
			text: _('start_date'),
			dataIndex: 'start_date',
			editor:{
				xtype:'datefield'
			}
		},
		{
			xtype: 'datecolumn',
			text: _('end_date'),
			dataIndex: 'end_date',
			editor:{
				xtype:'datefield'
			}
		},
		{
			xtype: 'datecolumn',
			text: _('verified_date'),
			dataIndex: 'verified_date',
			editor:{
				xtype:'datefield'
			}
		}
	],
	plugins: [
		{
			ptype:'rowediting',
			errorSummary: false
		}
	],
	tbar:[
		'->',
		{
			text: _('add_new'),
			itemId: 'AdvanceDirectiveAddBtn',
			action: 'encounterRecordAdd',
			iconCls: 'icoAdd'
		}
	],
	bbar: [
		'->',
		{
			text: _('review'),
			itemId: 'AdvanceDirectiveReviewBtn',
			action: 'encounterRecordAdd'
		}
	]


});
Ext.define('App.view.patient.LabOrders', {
	extend: 'Ext.grid.Panel',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'Ext.grid.feature.Grouping',
		'Ext.selection.CheckboxModel',
		'App.ux.LiveLabsSearch',
		'App.ux.combo.Combo'
	],
	xtype: 'patientlaborderspanel',
	title: _('lab_orders'),
	itemId: 'LabOrders',
	columnLines: true,
	tabConfig: {
		cls: 'order-tab'
	},
	store: Ext.create('App.store.patient.PatientsOrders', {
		storeId: 'LabOrderStore',
		groupField: 'date_ordered',
		remoteFilter: true,
		pageSize: 200,
		sorters: [
			{
				property: 'date_ordered',
				direction: 'DESC'
			}
		],
        proxy: {
            type: 'direct',
            api: {
                read: 'Orders.getPatientLabOrders',
                create: 'Orders.addPatientOrder',
                update: 'Orders.updatePatientOrder',
                destroy: 'Orders.deletePatientOrder'
            },
            remoteGroup: false
        }
	}),
	selModel: Ext.create('Ext.selection.CheckboxModel', {
		showHeaderCheckbox: false
	}),
	features: [
		{
			ftype: 'grouping'
		}
	],
	plugins: [
		{
			ptype: 'rowediting',
			clicksToEdit: 2
		}
	],
	columns: [
		{
            header: _('void'),
            groupable: false,
            width: 60,
            align: 'center',
            dataIndex: 'void',
            tooltip: _('void'),
            editor:
            {
                xtype: 'checkbox'
            },
            renderer: function(v, meta, record)
            {
                return app.voidRenderer(v);
            }
		},
		{
			header: _('order#'),
			width: 60,
			dataIndex: 'id',
            renderer: function(v, meta, record)
            {
                if(record.data.void) return '<span style="text-decoration: line-through;">'+ v + '</span>';
                return '<span>'+ v + '</span>';
            }
		},
		{
			header: _('status'),
			width: 75,
			dataIndex: 'status',
			editor: {
				xtype: 'gaiaehr.combo',
				list: 40
			},
			renderer: function(v, meta, record){
                var look = app.getController('patient.LabOrders').labOrdersGridStatusColumnRenderer(v);
                if(record.data.void) return '<span style="text-decoration: line-through;">'+look+'</span>';
                return look;
			}
		},
		{
			xtype: 'datecolumn',
			header: _('date_ordered'),
			width: 100,
			dataIndex: 'date_ordered',
			format: 'Y-m-d',
			editor: {
				xtype: 'datefield'
			},
            renderer: function(v, meta, record)
            {
                if(record.data.void) return '<span style="text-decoration: line-through;">'+ v + '</span>';
                return '<span>'+ v + '</span>';
            }
		},
		{
			header: _('code'),
			width: 100,
			dataIndex: 'code',
            renderer: function(v, meta, record)
            {
                if(record.data.void) return '<span style="text-decoration: line-through;">'+ v + '</span>';
                return '<span>'+ v + '</span>';
            }
		},
		{
			header: _('description'),
			flex: 1,
			dataIndex: 'description',
			editor: {
				xtype: 'labslivetsearch',
				itemId: 'rxLabOrderLabsLiveSearch'
			},
            renderer: function(v, meta, record)
            {
                if(record.data.void) return '<span style="text-decoration: line-through;">'+ v + '</span>';
                return '<span>'+ v + '</span>';
            }
		},
		{
			header: _('notes'),
			flex: 1,
			dataIndex: 'note',
			editor: {
				xtype: 'textfield'
			},
            renderer: function(v, meta, record)
            {
                if(record.data.void) return '<span style="text-decoration: line-through;">'+ v + '</span>';
                return '<span>'+ v + '</span>';
            }
		},
		{
			header: _('priority'),
			width: 100,
			dataIndex: 'priority',
			editor: {
				xtype: 'gaiaehr.combo',
				list: 98
			},
            renderer: function(v, meta, record)
            {
                if(record.data.void) return '<span style="text-decoration: line-through;">'+ v + '</span>';
                return '<span>'+ v + '</span>';
            }
		},
		{
			xtype: 'datecolumn',
			header: _('date_collected'),
			width: 100,
			dataIndex: 'date_collected',
			format: 'Y-m-d',
			editor: {
				xtype: 'datefield'
			},
            renderer: function(v, meta, record)
            {
                if(record.data.void) return '<span style="text-decoration: line-through;">'+ v + '</span>';
                return '<span>'+ v + '</span>';
            }
		}
	],
	tbar: [
//		me.eLabBtn =
		{
			text: _('eLab'),
			iconCls: 'icoSend',
			itemId:'electronicLabOrderBtn'
//			scope: me,
//			handler: function(){
//				alert('TODO...');
//			}
		},
		'-',
		'->',
		'-',
		{
			text: _('new_order'),
			iconCls: 'icoAdd',
			action: 'encounterRecordAdd',
			itemId:'newLabOrderBtn'
//			scope: me,
//			handler: me.onAddOrder
		},
		'-',
//		me.labPrintBtn =
		{
			text: _('print'),
			iconCls: 'icoPrint',
			disabled: true,
			margin: '0 5 0 0',
			itemId:'printLabOrderBtn'
//			scope: me,
//			handler: me.onPrintOrder
		}
	]
//	listeners: {
//		scope: me,
//		selectionchange: me.onSelectionChange
//	}
});

Ext.define('App.view.patient.SupperBill', {
	extend: 'Ext.grid.Panel',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'App.ux.LiveCPTSearch',
		'App.ux.combo.EncounterICDS'
	],
	xtype: 'superbillpanel',
	store: Ext.create('App.store.patient.EncounterServices'),
	columnLines: true,
	plugins: [
		{
			ptype: 'rowediting',
			errorSummary: false
		}
	],
	columns: [
		{
			xtype: 'actioncolumn',
			width: 20,
			menuDisabled: true,
			items: [
				{
					icon: 'resources/images/icons/delete.png',
					tooltip: _('remove'),
					handler: function(view, rowIndex, colIndex, item, e, record){
						return App.app.getController('patient.encounter.SuperBill').onRemoveService(record);
					}
				}
			]
		},
		{
			header: _('units'),
			dataIndex: 'units',
			width: 40,
			menuDisabled: true,
			editor: {
				xtype: 'numberfield',
				minValue: 1,
				allowBlank: false
			}
		},
		{
			header: _('code'),
			dataIndex: 'code',
			menuDisabled: true,
			width: 75
		},
		{
			text: _('service'),
			dataIndex: 'code_text',
			flex: 1,
			menuDisabled: true,
			editor: {
				xtype: 'livecptsearch',
				itemId: 'SuperCptSearchCmb',
				valueField: 'code_text_medium',
				allowBlank: false
			}
		},
        {
            text: _('financial'),
            dataIndex: 'financial_class',
            flex: 1,
            menuDisabled: true,
            editor: {
                xtype: 'gaiaehr.listcombo',
                displayField: 'option_name',
                valueField: 'option_value',
                loadStore: true,
                queryMode: 'local',
                list: 135
            }
        },
		{
			header: _('modifiers'),
			dataIndex: 'modifiers',
			width: 100,
			menuDisabled: true,
			editor: {
				xtype: 'textfield'
			}
		},
		//{
		//	header: _('tooth'),
		//	dataIndex: 'tooth',
		//	width: 50,
		//	menuDisabled: true
		//},
		//{
		//	header: _('surface'),
		//	dataIndex: 'surface',
		//	width: 60,
		//	menuDisabled: true,
		//	renderer: function(value, meta, record){
		//		var len = value.length,
		//			str = '',
		//			isMolar = App.app.getController('Modules.dental.controller.Plan').isMolar(record.data.tooth);
        //
		//		for(var i = 0; i < len; i++){
		//			if(value[i] == '0') continue;
        //
		//			if(value[i] == 'OI'){
		//				str += isMolar ? 'O' : 'I';
		//			}else if(value[i] == 'BF'){
		//				str += isMolar ? 'B' : 'F';
		//			}else{
		//				str += value[i];
		//			}
		//		}
		//		return str;
		//	}
		//},
		{
			header: _('diagnosis'),
			dataIndex: 'dx_pointers',
			menuDisabled: true,
			width: 250,
			editor: {
				xtype: 'encountericdscombo',
				itemId: 'SuperBillEncounterDxCombo',
				allowBlank: false
			}
		}
	],
	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'top',
			items: [
				'->',
				{
					text: _('service'),
					iconCls: 'icoAdd',
					itemId: 'SuperBillServiceAddBtn'
				}
			]
		}
	]
});
Ext.define('App.ux.combo.EncounterSupervisors', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.encountersupervisorscombo',
	initComponent: function(){
		var me = this;

		Ext.define('EncounterSupervisorsComboModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'option_name',
					type: 'string'
				},
				{
					name: 'option_value',
					type: 'int'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'CombosData.getEncounterSupervisors'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'EncounterSupervisorsComboModel',
			autoLoad: false
		});

		Ext.apply(this, {
			editable: false,
			queryMode: 'local',
			displayField: 'option_name',
			valueField: 'option_value',
			emptyText: _('select'),
			store: me.store
		});

		me.callParent(arguments);
	}
});
Ext.define('App.view.dashboard.panel.Portlet', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.portlet',
    layout: 'fit',
    anchor: '100%',
    frame: true,
    closable: true,
    collapsible: true,
    animCollapse: true,
    draggable: {
        moveOnDrag: false
    },
    cls: 'x-portlet',

    // Override Panel's default doClose to provide a custom fade out effect
    // when a portlet is removed from the portal
    doClose: function() {
        if (!this.closing) {
            this.closing = true;
            this.el.animate({
                opacity: 0,
                callback: function(){
                    this.fireEvent('close', this);
                    this[this.closeAction]();
                },
                scope: this
            });
        }
    }
});
Ext.define('App.ux.grid.AreasViewDropZone', {
	extend: 'Ext.grid.ViewDropZone',

	handleNodeDrop: function(data, record, position){
		var view = this.view,
			store = view.getStore(),
			index, records, i, len;
		/**
		 * fixed to handle the patient button data
		 */
		if(!data.patient){

			if(data.copy){
				records = data.records;
				data.records = [];
				for(i = 0, len = records.length; i < len; i++){
					data.records.push(records[i].copy());
				}
			}else{
				data.view.store.remove(data.records, data.view === view);
			}
		}

		if (record && position) {
			index = store.indexOf(record);

			// 'after', or undefined (meaning a drop at index -1 on an empty View)...
			if (position !== 'before') {
				index++;
			}
			store.insert(index, data.records);
		}
		// No position specified - append.
		else {
			store.add(data.records);
		}

//		view.getSelectionModel().select(data.records);
	},

	notifyEnter : function(dd, e, data){
		Ext.get(data.ddel.id).update(_('drop_patient_to_new_area'));
		this.callParent(arguments);
	},

	// While over a target node, return the default drop allowed class which
	// places a "tick" icon into the drag proxy.
	notifyOut : function(dd, e, data){
		Ext.get(data.ddel.id).update(_('drag_patient_to_new_area'));
		this.callParent(arguments);
	}

});


Ext.define('App.ux.grid.AreasDragDrop', {
	extend: 'Ext.grid.plugin.DragDrop',
	alias: 'plugin.areasgridviewdragdrop',

	onViewRender : function(view) {
		var me = this,
			scrollEl;

		if (me.enableDrag) {
			if (me.containerScroll) {
				scrollEl = view.getEl();
			}

			me.dragZone = new Ext.view.DragZone({
				view: view,
				ddGroup: me.dragGroup || me.ddGroup,
				dragText: me.dragText,
				containerScroll: me.containerScroll,
				scrollEl: scrollEl
			});
		}

		if (me.enableDrop) {
			me.dropZone = new App.ux.grid.AreasViewDropZone({
				view: view,
				ddGroup: me.dropGroup || me.ddGroup
			});
		}
	}
});
Ext.define('App.view.patient.encounter.CarePlanGoals', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.store.patient.CarePlanGoals'
	],
	xtype: 'careplangoalsgrid',
	store: Ext.create('App.store.patient.CarePlanGoals'),

	frame: true,
	columns: [
		{
			text: _('goal'),
			dataIndex: 'goal',
			width: 200
		},
		{
			text: _('instructions'),
			dataIndex: 'instructions',
			flex: 1
		}
	],
	tbar: [
		_('care_plan_goals'),
		'->',
		{
			text: _('new_goal'),
			iconCls: 'icoAdd',
			itemId: 'NewCarePlanGoalBtn'
		}
	]
});
Ext.define('App.ux.LiveSnomedProcedureSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.snomedliveproceduresearch',
	hideLabel: true,
	displayField: 'FullySpecifiedName',
	valueField: 'ConceptId',
	emptyText: _('procedure_search') + '...',
	typeAhead: false,
	hideTrigger: true,
	minChars: 3,
	initComponent: function(){
		var me = this;

		Ext.define('liveSnomedProcedureSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'ConceptId',
					type: 'string'
				},
				{
					name: 'FullySpecifiedName',
					type: 'string'
				},
				{
					name: 'CodeType',
					type: 'string',
					defaultValue: 'SNOMED-CT'
				},
				{
					name: 'Occurrence',
					type: 'int'
				}
			],
			idProperty: 'ConceptId',
			proxy: {
				type: 'direct',
				api: {
					read: 'SnomedCodes.liveProcedureCodeSearch',
					update: 'SnomedCodes.updateLiveProcedureCodeSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'data'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveSnomedProcedureSearchModel',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{FullySpecifiedName}<span style="font-weight: normal"> ({ConceptId}) </span></h3></div>';
				}
			},
			pageSize: 25
		});

		me.callParent();

		me.on('select', function(cmb, records){
			records[0].set({
				Occurrence: records[0].data.Occurrence + 1
			});
			records[0].save();
		});
	}
});

Ext.define('App.view.patient.encounter.AdministeredMedications', {
	extend: 'Ext.grid.Panel',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'App.ux.LiveRXNORMSearch',
		'App.ux.LiveSigsSearch',
		'App.ux.LiveUserSearch',
		'App.ux.form.fields.DateTime'
	],
	xtype: 'administeredmedications',
	itemId: 'AdministeredMedicationsGrid',
	frame: true,
	store: Ext.create('App.store.patient.Medications', {
		autoSync: false
	}),
	columns: [
		//{
		//	xtype: 'actioncolumn',
		//	width: 25,
		//	items: [
		//		{
		//			icon: 'resources/images/icons/blueInfo.png',  // Use a URL in the icon config
		//			tooltip: 'Get Info',
		//			handler: function(grid, rowIndex, colIndex, item, e, record){
		//				App.app.getController('InfoButton').doGetInfo(record.data.RXCUI, 'RXCUI', record.data.STR);
		//			}
		//		}
		//	]
		//},
		{
			header: _('medication'),
			flex: 1,
			minWidth: 150,
			dataIndex: 'STR',
			editor: {
				xtype: 'rxnormlivetsearch',
				itemId: 'AdministeredMedicationsLiveSearch',
				displayField: 'STR',
				valueField: 'STR',
				action: 'medication',
				allowBlank: false
			},
			renderer: function(v, mets, record){
				var codes = '';
				if(record.data.RXCUI != ''){
					codes += ' <b>RxNorm:</b> ' + record.data.RXCUI;
				}
				if(record.data.NDC != ''){
					codes += ' <b>NDC:</b> ' + record.data.NDC;
				}
				codes = codes != '' ? (' (' + codes + ' )') : '';
				return v + codes;
			}
		},
		{
			text: _('directions'),
			dataIndex: 'directions',
			flex: 1,
			editor: {
				xtype: 'textfield'
			}
		},
		{
			text: _('administered_by'),
			dataIndex: 'administered_by',
			width: 150,
			editor: {
				xtype: 'userlivetsearch',
				acl: 'administer_medications',
				valueField: 'fullname',
				forceSelection: false,
				itemId: 'AdministeredMedicationsUserLiveSearch'
			}
		},
		{
			xtype: 'datecolumn',
			text: _('date'),
			dataIndex: 'administered_date',
			width: 120,
			format: g('date_time_display_format'),
			editor: {
				xtype: 'mitos.datetime'
			}
		}
	],
	plugins: Ext.create('Ext.grid.plugin.RowEditing', {
		autoCancel: false,
		errorSummary: false,
		clicksToEdit: 2
	}),
	tbar: [
		_('administered_medications'),
		'->',
		{
			text: _('medication'),
			itemId: 'AdministeredMedicationsAddBtn',
			action: 'encounterRecordAdd',
			iconCls: 'icoAdd'
		}
	]


});
Ext.define('App.view.patient.DecisionSupportWarningPanel', {
	extend: 'Ext.panel.Panel',
	xtype: 'decisionsupportwarningpanel',
	cls: 'decisionSupportWarning',
	header: false,
	collapsible: true,
	collapsed: true,
	hidden: true,
	margin: 0,
	dockedItems:[
		{
			xtype: 'toolbar',
			dock: 'right',
			ui: 'plain',
			items: [
				{
					xtype: 'button',
					icon: 'resources/images/icons/close_exit.png',
					itemId: 'DecisionSupportWarningPanelCloseBtn'
				}
			]
		}
	]
});
Ext.define('App.view.patient.Documents', {
	extend: 'Ext.panel.Panel',
	requires: [
		'App.ux.grid.LiveSearchGridPanel',
		'App.ux.combo.Templates',
		'Ext.grid.plugin.RowEditing',
		'App.store.patient.PatientDocuments',
		'App.ux.ManagedIframe',
		'Ext.grid.feature.Grouping',
		'Ext.form.ComboBox'
	],
	xtype: 'patientdocumentspanel',
	title: _('documents'),
	layout: 'border',
	initComponent: function(){
		var me = this,
			store = Ext.create('App.store.patient.PatientDocuments', {
				autoLoad: false,
				remoteFilter: true,
				remoteSort: false,
				autoSync: false,
				pageSize: 500,
				groupField: 'docTypeCode'
			}),
			docCtrl = App.app.getController('patient.Documents');

		me.items = [
			{
				xtype: 'gridlivesearch',
				region: 'west',
				split: true,
				flex: 1,
				columnLines: true,
				selType: 'checkboxmodel',
				features: [
					{
						ftype: 'grouping',
						hideGroupedHeader: true,
						startCollapsed: me.startCollapsed || false,
						groupHeaderTpl: Ext.create('Ext.XTemplate',
							'{children:this.getGroupName}',
							{
								getGroupName: function(children){
									return docCtrl.getGroupName(children[0].store, children[0]);
								}
							}
						)
					}
				],
				itemId: 'patientDocumentGrid',
				store: store,
				columns: [
					{
						xtype: 'actioncolumn',
						width: 23,
						icon: 'resources/images/icons/icoLessImportant.png',
						tooltip: _('validate_file_integrity_hash'),
						handler: function(grid, rowIndex){
							docCtrl.onDocumentHashCheckBtnClick(grid, rowIndex);
						},
						getClass: function(){
							return 'x-grid-icon-padding';
						}
					},
					//{
					//	xtype: 'actioncolumn',
					//	width: 23,
					//	icon: 'resources/images/icons/delete.png',
					//	tooltip: _('delete'),
					//	hidden: !eval(a('delete_patient_documents')),
					//	handler: function(grid, rowIndex, colIndex, item, e, recprd){
					//
					//
					//		alert('hello');
					//
					//	},
					//	getClass: function(){
					//		return 'x-grid-icon-padding';
					//	}
					//},
					{
						header: _('category'),
						dataIndex: 'docType',
						itemId: 'docType',
						renderer: function(v, meta, record){
							if(record.get('entered_in_error')){
								meta.tdCls += ' entered-in-error ';
								meta.tdAttr = 'data-qtip="' + _('error_note') + ': ' + record.get('error_note') + '"';
							}
							return v;
						}
					},
					{
						xtype: 'datecolumn',
						header: _('date'),
						dataIndex: 'groupDate',
						format: g('date_display_format'),
						itemId: 'groupDate',
						renderer: function(v, meta, record){
							var val = v != null ? Ext.Date.format(v, g('date_display_format')) : '-';

							if(record.get('entered_in_error')){
								meta.tdCls += ' entered-in-error ';
								meta.tdAttr = 'data-qtip="' + _('error_note') + ': ' + record.get('error_note') + '"';
							}
							return val;
						}
					},
					{
						header: _('title'),
						dataIndex: 'title',
						flex: 1,
						editor: {
							xtype: 'textfield',
							action: 'title'
						},
						renderer: function(v, meta, record){
							if(record.get('entered_in_error')){
								meta.tdCls += ' entered-in-error ';
								meta.tdAttr = 'data-qtip="' + _('error_note') + ': ' + record.get('error_note') + '"';
							}
							return v;
						}
					},
					{
						header: _('encrypted'),
						dataIndex: 'encrypted',
						width: 70,
						renderer: function(v, meta, record){
							if(record.get('entered_in_error')){
								meta.tdCls += ' entered-in-error ';
								meta.tdAttr = 'data-qtip="' + _('error_note') + ': ' + record.get('error_note') + '"';
							}
							return app.boolRenderer(v);
						}
					}
				],
				plugins: Ext.create('Ext.grid.plugin.RowEditing', {
					autoCancel: true,
					errorSummary: false,
					clicksToEdit: 2
				}),
				tbar: [
					_('group_by') + ':',
					{
						xtype: 'button',
						text: _('category'),
						enableToggle: true,
						action: 'docTypeCode',
						pressed: true,
						disabled: true,
						toggleGroup: 'documentgridgroup'
					},
					{
						xtype: 'button',
						text: _('date'),
						enableToggle: true,
						action: 'groupDate',
						toggleGroup: 'documentgridgroup'
					},
					'->',
					'-',
					{
						text: _('add_document'),
						itemId: 'documentUploadBtn'
					}
				],
				bbar: Ext.create('Ext.PagingToolbar', {
					pageSize: 10,
					store: store,
					displayInfo: true,
					plugins: Ext.create('Ext.ux.SlidingPager', {})
				})
			},
			{
				xtype: 'panel',
				region: 'center',
				flex: 2,
				layout: {
					type: 'vbox',
					align: 'stretch'
				},
				frame: true,
				itemId: 'patientDocumentViewerPanel',
				style: 'background-color:#e7e7e7',
				items: [
					{
						xtype: 'miframe',
						style: 'background-color:#e7e7e7',
						autoMask: false,
						flex: 1,
						itemId: 'patientDocumentViewerFrame'
					}
				]
			}
		];

		me.callParent(arguments);
	}
});
Ext.define('App.view.patient.CCD', {
	extend: 'Ext.panel.Panel',
	requires: [
		'Ext.ux.IFrame',
		'App.ux.ManagedIframe'
	],
	xtype: 'patientccdpanel',
	title: _('ccd'),
	columnLines: true,
	itemId: 'CcdPanel',
	layout: 'fit',
	items: [
		{
			xtype: 'miframe',
			style: 'background-color:white',
			autoMask: true,
			itemId: 'patientDocumentViewerFrame'
		}
	],
	tbar: [
		{
			xtype: 'patientEncounterCombo',
			itemId: 'PatientCcdPanelEncounterCmb',
			margin: '0 5 5 5',
			width: 300,
			fieldLabel: _('filter_encounter'),
			hideLabel: false,
			labelAlign: 'top'
		},
		'-',
		{
			xtype: 'checkboxgroup',
			fieldLabel: _('exclude'),
			// Arrange checkboxes into two columns, distributed vertically
			columns: 5,
			vertical: true,
			labelWidth: 60,
			itemId: 'PatientCcdPanelExcludeCheckBoxGroup',
			flex: 1,
			items: [
				{boxLabel: _('procedures'), name: 'exclude', inputValue: 'procedures'},
				{boxLabel: _('vitals'), name: 'exclude', inputValue: 'vitals'},
				{boxLabel: _('immunizations'), name: 'exclude', inputValue: 'immunizations'},
				{boxLabel: _('medications'), name: 'exclude', inputValue: 'medications'},
				{boxLabel: _('meds_administered'), name: 'exclude', inputValue: 'administered'},
				{boxLabel: _('plan_of_care'), name: 'exclude', inputValue: 'planofcare'},
				{boxLabel: _('problems'), name: 'exclude', inputValue: 'problems'},
				{boxLabel: _('allergies'), name: 'exclude', inputValue: 'allergies'},
				{boxLabel: _('social'), name: 'exclude', inputValue: 'social'},
				{boxLabel: _('results'), name: 'exclude', inputValue: 'results'}
			]
		},
		'-',
		{
			xtype: 'button',
			text: _('refresh'),
			margin: '0 0 5 0',
			itemId: 'viewCcdBtn',
			icon: 'resources/images/icons/refresh.png'
		},
		'-',
		{
			text: _('download'),
			margin: '0 0 5 0',
			itemId: 'exportCcdBtn',
			icon: 'resources/images/icons/download.png'
		},
		'-',
		{
			text: _('archive'),
			margin: '0 0 5 0',
			itemId: 'archiveCcdBtn',
			icon: 'resources/images/icons/archive_16.png'
		},
		'-',
		{
			text: 'Print',
			iconCls: 'icon-print',
			itemId: 'printCcdBtn'
		}
	]

});
Ext.define('App.view.administration.CPT', {
	extend: 'Ext.grid.Panel',
	requires:[
		'Ext.grid.plugin.RowEditing',
		'App.store.administration.CPT'
	],
	xtype: 'cptadmingrid',
	title: _('cpt4'),
	columns: [
		{
			width: 60,
			header: _('code'),
			dataIndex: 'code'
		},
		{
			header: _('short_name'),
			dataIndex: 'code_text_short',
			width: 100,
			flex: 1,
			editor:{
				xtype:'textfield'
			}
		},
		{
			header: _('long_name'),
			dataIndex: 'code_text',
			flex: 2,
			editor:{
				xtype:'textfield'
			}
		},
		{
			header: _('radiology'),
			dataIndex: 'isRadiology',
			editor:{
				xtype:'checkbox'
			},
			renderer: function(v){
				return this.boolRenderer(v);
			}
		},
		{
			width: 60,
			header: _('active'),
			dataIndex: 'active',
			editor:{
				xtype:'checkbox'
			},
			renderer: function(v){
				return this.boolRenderer(v);
			}
		}
	],
	plugins: [
		{
			ptype:'rowediting',
			errorSummary: false,
			clicksToEdit: 1
		}
	],
	initComponent: function(){
		var me = this;
		me.store = Ext.create('App.store.administration.CPT',{
			remoteSort: true
		});
		me.tbar = Ext.create('Ext.PagingToolbar', {
			store: me.store,
			displayInfo: true,
			emptyMsg: _('no_office_notes_to_display'),
			plugins: Ext.create('Ext.ux.SlidingPager'),
			items: [
				'-',
				{
					xtype: 'textfield',
					emptyText: _('search'),
					width: 200,
					enableKeyEvents: true,
					itemId: 'adminCpt4CodeSearchField'
				},
				'-',
				{
					xtype: 'button',
					text: _('only_active'),
					enableToggle: true,
					itemId: 'adminCpt4CodeOnlyActiveBtn'
				},
				'-'
			]
		});

		me.callParent();
	}
});

Ext.define('App.ux.grid.Button', {
	extend: 'Ext.grid.column.Column',
	alias: ['widget.gridbutton'],
	header: '&#160;',
	sortable: false,
	context: {},
	applicationProperties: {
		/*
		 * this is where the icons will be picked up.
		 */
		iconStore: ''
	},
	constructor: function(config){
		var me = this, cfg, items,
			i, item;
		cfg = Ext.apply({}, config);
		items = cfg.items || [me];
		me.callParent(arguments);
		me.items = items;
		me.context = cfg.scope;
		/*
		 * create a render for this special button.
		 */
		me.renderer = function(v, meta, rec, rowIndex, colIndex, store, view){
			/*
			 * iterate each item creating a div holder for each button
			 */
			Ext.Array.each(items, function(anItem){
				var anId;
				item = anItem;
				anId = Ext.id(); //generate an ID for multiple buttons
				/*
				 * simply defer instead of callback ensuring the basic div for the button is executed & previous call has completed.
				 */
				Ext.Function.defer(me.addButton, 100, me, [anId, rec, item, me.context]);
				/*
				 * create a place holder for the button.
				 */
				v ? v += '<div id="' + anId + '">&#160;</div>' : v = '<div id="' + anId + '">&#160;</div>';
			});
			return v;
		};
	},
	/*
	 * simple function when no hanlder click events are passed in.
	 */
	noHandler: function(){
		Ext.Msg.alert("Oops", "No Handler set up");
	},

	addButton: function(id, record, theItem, context){
		var me = this, target = Ext.get(id), btn, handler,
			menuItems, functionHandler, buttonConfig, menuIcon;

		if(target){
			if(theItem.menu){ //handle the split button
				menuItems = [];
				Ext.Array.each(theItem.menu, function(aMenuItem){
					aMenuItem.handler ? functionHandler = Ext.bind(aMenuItem.handler, me, [record, context]) : functionHandler = me.noHandler;
					aMenuItem.icon ? menuIcon = me.applicationProperties.iconStore + aMenuItem.icon : menuIcon = undefined;
					var newMenu = { text: aMenuItem.text, handler: functionHandler, icon: menuIcon};
					menuItems.push(newMenu);
				});
				buttonConfig = {
					text: theItem.text,
					icon: theItem.icon ? me.applicationProperties.iconStore + theItem.icon : "",
					menu: menuItems,
					renderTo: target.parent()
				};
			} //handle a standard button
			else{
				theItem.handler ? functionHandler = Ext.bind(theItem.handler, me, [record, context]) : functionHandler = me.noHandler;
				buttonConfig = {
					text: theItem.text,
					tooltip: theItem.tooltip,
					icon: theItem.icon ? me.applicationProperties.iconStore + theItem.icon : "",
					handler: functionHandler,
					cls: theItem.cls || null,
					listeners: theItem.listeners || null,
					record: record,
					width: theItem.width || 50,
					margin: theItem.margin || 0,
					renderTo: target.parent()
				};
			}
			btn = Ext.create("Ext.button.Button", buttonConfig);
			/*
			 * clean up the DIV
			 */
			Ext.get(id).remove();
		}
	},

	destroy: function(){
		delete this.items;
		delete this.renderer;
		this.callParent(arguments);
	},

	cascade: function(fn, scope){
		fn.call(scope || this, this);
	},

	getRefItems: function(){
		return [];
	}
});
Ext.define('App.ux.combo.XCombo', {
	extend: 'Ext.form.field.ComboBox',
	xtype: 'xcombo',

	trigger1Class: 'x-form-select-trigger',
	trigger2Class: 'x-form-add-trigger',
	trigger3Class: 'x-form-update-trigger',

	editable: false,

	addTooltip: 'Add Item',
	saveText: 'Save',
	cancelText: 'Cancel',
	maskText: 'Saving Data',

	windowConfig: {
		title: 'New Record',
		modal: true
	},

	formConfig: {
		width: 400,
		height: 240,
		border: false,
		html: 'Form placeholder, please add a formConfig property<br>' +
			'Exmaple:<br>' +
			'<pre>' +
			'{<br>' +
			'   ptype: "comboadd",<br>' +
			'   windowConfig: {<br>' +
			'       title: "New Record"<br>' +
			'       modal: true<br>' +
			'   }<br>' +
			'   formConfig: {<br>' +
			'       width: 600,<br>' +
			'       height: 400,<br>' +
			'       border: false,<br>' +
			'       items:[ {...},{...} ]<br>' +
			'   }<br>' +
			'}<br>' +
			'</pre>'
	},

	initComponent: function (config) {
		var me = this;

		me.addEvents(
			'cancel',
			'beforesync',
			'sync',
			'failure'
		);

		me.on('select', me.setUpdateTrigger, me);

		me.callParent(arguments);
	},

	onRender: function (ct, position) {

		var me = this,
			id = me.getId();

		me.callParent(arguments);

		me.triggerWidth = 51;

		me.triggerConfig = {
			tag: 'td',
			valign: 'top',
			cls: 'x-trigger-cell',
			style: 'width:34px',
			cn: [
				{
					tag: "img",
					src: Ext.BLANK_IMAGE_URL,
					id: "trigger1" + id,
					name: "trigger1" + id,
					style: "float:left",
					cls: "x-form-trigger " + this.trigger1Class,
					role: 'button'
				},
				{
					tag: "img",
					src: Ext.BLANK_IMAGE_URL,
					id: "trigger2" + id,
					name: "trigger2" + id,
					style: "float:left",
					cls: "x-form-trigger " + this.trigger2Class,
					role: 'button'
				},
				{
					tag: "img",
					src: Ext.BLANK_IMAGE_URL,
					id: "trigger3" + id,
					name: "trigger3" + id,
					style: "float:left;display:none",
					cls: "x-form-trigger " + this.trigger3Class,
					role: 'button'
				}
			]
		};

		me.triggerCell.replaceWith(me.triggerConfig);

		me.trigger1 = Ext.get("trigger1" + id);
		me.trigger2 = Ext.get("trigger2" + id);
		me.trigger3 = Ext.get("trigger3" + id);

		me.trigger1.on('mouseup', me.triggerClick, me);
		me.trigger2.on('mouseup', me.triggerClick, me);
		me.trigger3.on('mouseup', me.triggerClick, me);

		me.trigger1.addClsOnOver('x-form-trigger-over');
		me.trigger2.addClsOnOver('x-form-trigger-over');
		me.trigger3.addClsOnOver('x-form-trigger-over');
	},

	setUpdateTrigger: function () {
		if (!this.trigger3.isVisible()) {
			this.setWidth(this.getWidth() + 17);
			this.triggerCell.setWidth(51);
			this.trigger3.show();
		}
	},

	triggerClick: function (e) {
		var id = this.getId();
		if (e.target.name == "trigger1" + id) {
			this.onTriggerClick();
		} else if (e.target.name == "trigger2" + id) {
			this.onTriggerAddClick();
		} else if (e.target.name == "trigger3" + id) {
			this.onTriggerUpdateClick();
		}
	},

	/**
	 * Start the window
	 */
	onTriggerAddClick: function () {
		var me = this;
		me.reset();
		me.getWindow().show();
		me.uWindow.down('form').getForm().loadRecord(me.getNewRecord());
	},

	/**
	 * Start the window
	 */
	onTriggerUpdateClick: function () {
		var me = this;
		me.getWindow().show();
		me.uWindow.down('form').getForm().loadRecord(me.getSelectedRecord());
	},

	getSelectedRecord: function () {
		return this.findRecordByValue(this.getValue());
	},

	getNewRecord: function () {
		return Ext.create(this.getStore().model);
	},

	/**
	 * Creates a new window
	 */
	getWindow: function () {
		var me = this;

		me.uWindow = Ext.widget('window', {
			items: [Ext.widget('form', me.formConfig)],
			buttons: [
				{
					text: me.cancelText,
					scope: me,
					handler: me.doCancelRecord
				},
				{
					text: me.saveText,
					scope: me,
					handler: me.doSaveRecord
				}
			]
		});

		return Ext.apply(me.uWindow, me.windowConfig);
	},

	/**
	 * Saves the record and to combobox sotore everything
	 */
	doSaveRecord: function () {
		var me = this,
			panel = me.uWindow.down('form'),
			form = panel.getForm(),
			record = form.getRecord(),
			values = form.getValues(),
			index = me.store.indexOf(record);

		record.set(values);
		if (index == -1) me.store.add(record);

		if (me.store.getNewRecords().length || me.store.getUpdatedRecords().length) {
			panel.el.mask(me.maskText);
			// fires the beforesync event and add the values to the store
			me.fireEvent('beforesync', me.store, record);

			me.store.sync({
				// hanlde sync success
				success: function(batch, options) {
					me.select(record);
					me.fireEvent('sync', me.store, record, batch, options);
				},
				// handle sync failure
				failure: function() {
					me.fireEvent('failure', me.store, record, batch, options);
				},
				// handle all request
				callback: function() {
					panel.el.unmask();
					form.reset();
					me.uWindow.close();
				}
			});
		} else {
			form.reset();
			me.uWindow.close();
		}
	},

	/**
	 * Cancels everything
	 */
	doCancelRecord: function () {
		var me = this,
			form = me.uWindow.down('form').getForm();

		me.fireEvent('cancel', me, me.form, me.store);
		form.reset();
		me.uWindow.close();
	}
});

Ext.define("App.ux.form.fields.plugin.PasswordStrength", {
	extend : "Ext.AbstractPlugin",
	alias  : "plugin.passwordstrength",
	colors : [
		"ffcccc",
		"ffcc99",
		"ffff99",
		"99ccff",
		"99ff99"
	],

	init: function(cmp) {
		var me = this;

		cmp.on("change", me.onFieldChange, me);
	},

	onFieldChange: function(field, newVal, oldVal) {
		if (newVal === "") {
			field.inputEl.setStyle({
				"background-color" : null,
				"background-image" : null
			});
			field.score = 0;
			return ;
		}
		var me    = this,
			score = me.scorePassword(newVal);

		field.score = score;

		me.processValue(field, score);
	},

	processValue: function(field, score) {
		var me     = this,
			colors = me.colors,
			color;

		if (score < 16) {
			color = colors[0]; //very weak
		} else if (score > 15 && score < 25) {
			color = colors[1]; //weak
		} else if (score > 24 && score < 35) {
			color = colors[2]; //mediocre
		} else if (score > 34 && score < 45) {
			color = colors[3]; //strong
		} else {
			color = colors[4]; //very strong
		}

		field.inputEl.setStyle({
			"background-color" : "#" + color,
			"background-image" : "none"
		});
	},

	scorePassword: function(passwd) {
		var score = 0;

		if (passwd.length < 5) {
			score += 3;
		} else if (passwd.length > 4 && passwd.length < 8) {
			score += 6;
		} else if (passwd.length > 7 && passwd.length < 13) {
			score += 12;
		} else if (passwd.length > 12) {
			score += 18;
		}

		if (passwd.match(/[a-z]/)) {
			score += 1;
		}

		if (passwd.match(/[A-Z]/)) {
			score += 5;
		}

		if (passwd.match(/\d+/)) {
			score += 5;
		}

		if (passwd.match(/(.*[0-9].*[0-9].*[0-9])/)) {
			score += 5;
		}

		if (passwd.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) {
			score += 7;
		}

		if (passwd.match(/(.*[!,@,#,$,%,^,&,*,?,_,~].*[!,@,#,$,%,^,&,*,?,_,~])/)) {
			score += 7;
		}

		if (passwd.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {
			score += 3;
		}

		if (passwd.match(/([a-zA-Z])/) && passwd.match(/([0-9])/)) {
			score += 3;
		}

		if (passwd.match(/([a-zA-Z0-9].*[!,@,#,$,%,^,&,*,?,_,~])|([!,@,#,$,%,^,&,*,?,_,~].*[a-zA-Z0-9])/)) {
			score += 3;
		}

		return score;
	}
});
Ext.define('App.ux.combo.ActiveSpecialties', {
	extend: 'Ext.form.ComboBox',
	xtype: 'activespecialtiescombo',
	displayField: 'text_details',
	valueField: 'id',
	editable: false,
	emptyText: _('select'),
	queryMode: 'local',
	store: Ext.create('App.store.administration.Specialties',{
		filters: [
			{
				property:'active',
				value: true
			}
		],
		pageSize: 500,
		autoLoad: true
	})
});
Ext.define('App.ux.AddTabButton', {
	alias: 'plugin.AddTabButton',
	extend: 'Ext.AbstractPlugin',

	// start defaults
	toolTip: 'Add Tab',     // add btn ToolTip
	iconCls: null,          // add btn icon class
	btnText: '+',           // add btn text, button text is not use if iconCls is set
	forceText: false,       // use the btnText even if an icon is used
	panelConfig: {              // default config for new added panel
		xtype: 'panel',
		title: 'New Tab',
		closable: true,
		hidden: false
	},
	// end defaults

	constructor: function(config){
		this.panelConfig = Ext.apply(this.panelConfig, config.tabConfig || {});
		this.callParent(arguments);
	},

	/**
	 * @param tabPanel
	 */
	init: function(tabPanel){
		var me = this;

		// set tabPanel global
		me.tabPanel = tabPanel;

		if(tabPanel instanceof Ext.TabPanel){
			// add add btn tab to the TabBar
			me.btn = me.tabPanel.getTabBar().add({
				xtype: 'tab',
				minWidth: 25,
				text: me.iconCls && !me.forceText ? '' : me.btnText, // if icon is used remove text
				iconCls: me.iconCls,
				tooltip: me.toolTip,
				handler: me.onAddTabClick,
				closable: false,
				acl: me.acl,
				scope: me
			});

			// fix the tab margin and padding
			me.btn.on('render', function(){
				if(me.iconCls && !me.forceText){
					var style;
					if(me.tabPanel.tabPosition == 'top'){
						style = 'margin: 0 0 3px 0; padding: 0';
					} else if(me.tabPanel.tabPosition == 'bottom'){
						style = 'margin: 3px 0 0 0; padding: 0';
					}
					me.btn.btnWrap.applyStyles(style);
				}
			});
		}
	},

	/**
	 *  Adds new Tab to TabPanel
	 */
	onAddTabClick: function(){
		var tab = this.tabPanel.add(this.panelConfig);
		this.tabPanel.fireEvent('newtabclick', tab, this.tabPanel);
		this.tabPanel.setActiveTab(tab);
	},

	/**
	 * disable or enable the Add button
	 * @param value
	 */
	setDisabled: function(value){
		this.btn.setDisabled(value);
	},

	/**
	 * hide or show the Add button
	 * @param value
	 */
	setVisible: function(value){
		this.btn.setVisible(value);
	}
});
Ext.define('App.model.administration.AclGroupPerm', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'title',
			type: 'string'
		},
		{
			name: 'group_id',
			type: 'int'
		},
		{
			name: 'category',
			type: 'string'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'ACL.getGroupPerms',
			create: 'ACL.updateGroupPerms',
			update: 'ACL.updateGroupPerms'
		},
		reader: {
			type: 'json',
			root: 'data'
		}
	}
});
Ext.define('App.view.patient.windows.ArchiveDocument', {
	extend: 'Ext.window.Window',
	xtype: 'patientarchivedocumentwindow',
	draggable: false,
	modal: true,
	autoShow: true,
	title: _('archive_document'),
	items: [
		{
			xtype: 'form',
			bodyPadding: 10,
			width: 400,
			defaults:{
				xtype: 'textfield',
				anchor: '100%',
				labelWidth: 70
			},
			items: [
				{
					name: 'id',
					hidden: true
				},
				{
					fieldLabel: _('title'),
					name: 'title'
				},
				{
					xtype: 'gaiaehr.combo',
					fieldLabel: _('type'),
					list: 102,
					name: 'docType',
					allowBlank: false
				},
				{
					xtype: 'checkbox',
					name: 'encrypted',
					fieldLabel: _('encrypted')
				},
				{
					xtype: 'textareafield',
					name: 'note',
					fieldLabel: _('notes')
				}
			]
		}
	],
	buttons: [
		{
			text: _('cancel'),
			handler: function(btn){
				btn.up('window').close();
			}
		},
		{
			text: _('archive'),
			itemId: 'archiveBtn'
		}
	]
});
Ext.define('App.view.scanner.Window', {
	extend: 'Ext.window.Window',
	xtype: 'scannerwindow',
	itemId: 'ScannerWindow',
	autoScroll: true,
	width: 1000,
	minHeight: 500,
	maxHeight: 700,
	closeAction: 'hide'
	,	title: _('scanner'),
	layout: {
		type: 'hbox'
	},
	items: [
		{
			xtype: 'image',
			flex: 1,
			id: 'ScannerImage',
			style: 'background-color:white',
			itemId: 'ScannerImage'
		}
	],
	buttons: [
		{
			text: _('edit'),
			enableToggle: true,
			itemId: 'ScannerImageEditBtn'
		},
		'-',
		{
			xtype: 'combobox',
			itemId: 'ScannerCombo',
			editable: false,
			queryMode: 'local',
			displayField: 'Name',
			valueField: 'Name',
			flex: 1,
			store: Ext.create('Ext.data.Store', {
				fields: [
					{
						name: 'Name',
						type: 'string'
					},
					{
						name: 'Version',
						type: 'string'
					},
					{
						name: 'Checked',
						type: 'string'
					}
				]
			})
		},
		{
			text: _('scan'),
			itemId: 'ScannerScanBtn'
		},
		'-',
		{
			text: _('ok'),
			itemId: 'ScannerOkBtn'
		}
	]
});
Ext.define('App.view.notifications.Grid', {
	extend: 'Ext.grid.Panel',
	xtype: 'notificationsgrid',
	width: 400,
	header: false,
	hideHeaders: true,
	columns: [
		{
			text: _('description'),
			dataIndex: 'description',
			flex: 1
		}
	]

});
Ext.define('App.view.patient.windows.UploadDocument', {
	extend: 'Ext.window.Window',
	xtype: 'patientuploaddocumentwindow',
	draggable: false,
	modal: true,
	autoShow: true,
	title: _('new_document'),
	items: [
		{
			xtype: 'form',
			bodyPadding: 10,
			width: 400,
			defaults: {
				xtype: 'textfield',
				anchor: '100%',
				labelWidth: 70
			},
			items: [
				{
					fieldLabel: _('title'),
					name: 'title'
				},
				{
					xtype: 'gaiaehr.combo',
					fieldLabel: _('type'),
					list: 102,
					name: 'docType',
					allowBlank: false
				},
				{
					xtype: 'container',
					layout: 'hbox',
					items: [
						{
							xtype: 'fileuploadfield',
							labelWidth: 70,
							name: 'document',
							buttonText: _('select'),
							fieldLabel: _('file'),
							allowBlank: false,
							flex: 1,
							itemId: 'fileUploadField',
							margin: '0 5 0 0'
						},
						{
							xtype:'button',
							text: _('scan'),
							itemId: 'scanBtn',
							hidden: true
						}
					]
				},
				{
					xtype: 'checkbox',
					name: 'encrypted',
					fieldLabel: _('encrypted')
				},
				{
					xtype: 'textareafield',
					name: 'note',
					fieldLabel: _('notes')
				}
			]
		}
	],
	buttons: [
		{
			text: _('cancel'),
			handler: function(btn){
				btn.up('window').close();
			}
		},
		{
			text: _('upload'),
			itemId: 'uploadBtn'
		}
	]
});
Ext.define('App.view.administration.HL7MessageViewer', {
	xtype: 'hl7messageviewer',
	extend: 'Ext.window.Window',
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	title: _('hl7_viewer'),
	width: 800,
	height: 450,
	bodyPadding: 10,
	maximizable: true,
	bodyStyle: 'background-color:white',
	defaults: {
		xtype: 'textareafield',
		labelAlign: 'top'
	},
	items: [
		{
			fieldLabel: _('message'),
			action: 'message',
			flex: 1
		},
		{
			fieldLabel: _('acknowledge'),
			action: 'acknowledge',
			flex: 1
		}
	]
});
Ext.define('App.view.patient.encounter.Snippets', {
	extend: 'Ext.window.Window',
	xtype: 'snippetswindow',
	requires: [

	],
	itemId: 'SnippetWindow',
	title: _('snippet'),
	closable: false,
	items: [
		{
			xtype: 'form',
			itemId: 'SnippetForm',
			fieldDefaults: {
				labelAlign: 'top',
				width: 600,
				margin: 5
			},
			items: [
				{
					xtype: 'textfield',
					fieldLabel: _('title'),
					name: 'title'
				},
				{
					xtype: 'textareafield',
					fieldLabel: _('snippet'),
					allowBlank: false,
					itemId: 'SnippetFormTextField',
					name: 'text'
				}
			]
		}
	],
	buttons:[
		{
			text: _('delete'),
			itemId: 'SnippetDeleteBtn'
		},
		'->',
		{
			text: _('cancel'),
			itemId: 'SnippetCancelBtn'
		},
		{
			text: _('save'),
			itemId: 'SnippetSaveBtn'
		}
	]
});
Ext.define('App.ux.combo.ReferringProviders', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.referringproviderscombo',
	displayField: 'fullname',
	valueField: 'id',
	initComponent: function(){
		var me = this;

		Ext.define('ReferringProvidersModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'id',
					type: 'int'
				},
				{
					name: 'title',
					type: 'string'
				},
				{
					name: 'fname',
					type: 'string'
				},
				{
					name: 'mname',
					type: 'string'
				},
				{
					name: 'lname',
					type: 'string'
				},
				{
					name: 'fullname',
					type: 'string',
					convert: function(v, record){
						return record.data.title + ' ' + record.data.lname + ', ' + record.data.fname + ' ' + record.data.mname;
					}
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'ReferringProviders.getReferringProviders'
				},
				reader: {
					root: 'data'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'ReferringProvidersModel',
			autoLoad: false
		});

		Ext.apply(this, {
			emptyText: _('select'),
			store: me.store
		});

		me.callParent(arguments);
	}
});
Ext.define('App.ux.LiveSnomedProblemSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.snomedliveproblemsearch',
	hideLabel: true,
	displayField: 'FullySpecifiedName',
	valueField: 'ConceptId',
	emptyText: _('problem_search') + '...',
	typeAhead: false,
	hideTrigger: true,
	minChars: 3,
	initComponent: function(){
		var me = this;

		Ext.define('liveSnomedProblemSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'ConceptId',
					type: 'string'
				},
				{
					name: 'FullySpecifiedName',
					type: 'string'
				},
				{
					name: 'CodeType',
					type: 'string',
					defaultValue: 'SNOMEDCT'
				},
				{
					name: 'OCCURRENCE',
					type: 'int'
				}
			],
			idProperty: 'ConceptId',
			proxy: {
				type: 'direct',
				api: {
					read: 'SnomedCodes.liveProblemCodeSearch',
					update: 'SnomedCodes.updateLiveProblemCodeSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'data'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveSnomedProblemSearchModel',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{FullySpecifiedName}<span style="font-weight: normal"> ({ConceptId}) </span></h3></div>';
				}
			},
			pageSize: 25
		});

		me.callParent();

		me.on('select', function(cmb, records){
			records[0].set({
				OCCURRENCE: records[0].data.OCCURRENCE + 1
			});
			records[0].save();
		});
	}
});

Ext.define('App.view.patient.SmokingStatus', {
	extend: 'Ext.grid.Panel',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'App.store.patient.SmokeStatus',
		'App.ux.combo.SmokingStatus'
	],
	xtype: 'patientsmokingstatusgrid',
	itemId: 'PatientSmokingStatusGrid',
	columnLines: true,
	store: Ext.create('App.store.patient.SmokeStatus', {
		remoteFilter: true
	}),
	plugins: [
		{
			ptype: 'rowediting'
		}
	],
	columns: [
		{
			xtype: 'datecolumn',
			text: _('date'),
			dataIndex: 'create_date',
			format: 'Y-m-d',
			width: 120
		},
		{
			text: _('status'),
			dataIndex: 'status',
			width: 250,
			renderer: function(v, meta, record){
				return v + ' (' + record.data.status_code +')';
			}
		},
		{
			text: _('counseling_given'),
			dataIndex: 'counseling',
			width: 120,
			editor: {
				xtype: 'checkbox'
			},
			renderer: function(v){
				return app.boolRenderer(v);
			}
		},
		{
			text: _('note'),
			dataIndex: 'note',
			flex: 1,
			editor: {
				xtype: 'textfield'
			}
		},
		{
			xtype: 'datecolumn',
			format: 'Y-m-d',
			text: _('start_date'),
			dataIndex: 'start_date',
			width: 120,
			editor: {
				xtype: 'datefield',
				format: g('date_display_format'),
				submitFormat: 'Y-m-d'
			}
		}
	],
	tbar: [
		{
			xtype: 'tbtext',
			text: _('smoking_status'),
			width: 100
		},
		{
			xtype: 'mitos.smokingstatuscombo',
			itemId: 'socialsmokingstatuscombo',
			width: 250
		}
	]
});
Ext.define('App.ux.LiveSnomedSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.snomedlivesearch',
	hideLabel: true,
	displayField: 'FullySpecifiedName',
	valueField: 'ConceptId',
	initComponent: function(){
		var me = this;

		Ext.define('liveSnomedSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{
					name: 'ConceptId',
					type: 'string'
				},
				{
					name: 'FullySpecifiedName',
					type: 'string'
				},
				{
					name: 'CodeType',
					type: 'string',
					defaultValue: 'SNOMED'
				}
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'SnomedCodes.liveCodeSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'data'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveSnomedSearchModel',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			emptyText: _('search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 3,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{FullySpecifiedName}<span style="font-weight: normal"> ({ConceptId}) </span></h3></div>';
				}
			},
			pageSize: 25
		});

		me.callParent();
	}
});

Ext.define('App.ux.LiveRadsSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.radslivetsearch',
	hideLabel: true,

	initComponent: function(){
		var me = this;

		Ext.define('liveRadLoincSearchModel', {
			extend: 'Ext.data.Model',
			fields: [
				{ name: 'id' },
				{ name: 'loinc_name' },
				{ name: 'loinc_number' },
				{ name: 'code_type', defaultValue: 'LOINC' }
			],
			proxy: {
				type: 'direct',
				api: {
					read: 'Laboratories.getRadLoincLiveSearch'
				},
				reader: {
					totalProperty: 'totals',
					root: 'rows'
				}
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			model: 'liveRadLoincSearchModel',
			pageSize: 10,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			displayField: 'loinc_name',
			valueField: 'loinc_name',
			emptyText: _('radiology_search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 1,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{loinc_name} ({loinc_number})</h3></div>';
				}
			},
			pageSize: 10
		});

		me.callParent();
	}
});

Ext.define('App.store.administration.MedicationInstructions', {
	extend: 'Ext.data.Store',
	model: 'App.model.administration.MedicationInstruction'
});
Ext.define('App.model.patient.SOAP', {
	extend: 'Ext.data.Model',
	requires: [
		'App.model.patient.Encounter',
		'App.model.patient.EncounterDx',
		'App.model.patient.encounter.Procedures'
	],
	table: {
		name: 'encounter_soap',
		comment: 'SOAP Data'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'pid',
			type: 'int',
			index: true
		},
		{
			name: 'eid',
			type: 'int',
			index: true
		},
		{
			name: 'uid',
			type: 'int'
		},
		{
			name: 'date',
			type: 'date',
			dateFormat: 'Y-m-d H:i:s'
		},
		{
			name: 'subjective',
			type: 'string',
			dataType: 'mediumtext'
		},
		{
			name: 'objective',
			type: 'string',
			dataType: 'mediumtext'
		},
		{
			name: 'assessment',
			type: 'string',
			dataType: 'mediumtext'
		},
		{
			name: 'plan',
			type: 'string',
			dataType: 'mediumtext'
		},
		{
			name: 'instructions',
			type: 'string',
			dataType: 'mediumtext'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			update: 'Encounter.updateSoap'
		}
	},
	hasMany: [
		{
			model: 'App.model.patient.EncounterDx',
			name: 'dxCodes',
			primaryKey: 'eid',
			foreignKey: 'eid'
		},
		{
			model: 'App.model.patient.encounter.Procedures',
			name: 'procedures',
			primaryKey: 'eid',
			foreignKey: 'eid'
		}
	],
	belongsTo: {
		model: 'App.model.patient.Encounter',
		foreignKey: 'eid'
	}

});
Ext.define('App.view.patient.windows.Charts', {
    extend       : 'Ext.window.Window',
    requires     : [
        'App.store.patient.Vitals'
    ],
    title        : _('vector_charts'),
    layout       : 'card',
    closeAction  : 'hide',
    modal        : true,
    width        : window.innerWidth - 200,
    height       : window.innerHeight - 200,
    maximizable  : true,
    //maximized  : true,
    initComponent: function() {
        var me = this;

        me.vitalsStore = Ext.create('App.store.patient.Vitals');
        me.graphStore = Ext.create('App.store.patient.VectorGraph');

        me.WeightForAgeInfStore = Ext.create('App.store.patient.charts.WeightForAgeInf');
        me.LengthForAgeInfStore = Ext.create('App.store.patient.charts.LengthForAgeInf');
        me.WeightForRecumbentInfStore = Ext.create('App.store.patient.charts.WeightForRecumbentInf');
        me.HeadCircumferenceInfStore = Ext.create('App.store.patient.charts.HeadCircumferenceInf');
        me.WeightForStatureStore = Ext.create('App.store.patient.charts.WeightForStature');
        me.WeightForAgeStore = Ext.create('App.store.patient.charts.WeightForAge');
        me.StatureForAgeStore = Ext.create('App.store.patient.charts.StatureForAge');
        me.BMIForAgeStore = Ext.create('App.store.patient.charts.BMIForAge');

        me.tbar = ['->', {
            text        : _('bp_pulse_temp'),
            action      : 'bpPulseTemp',
            pressed     : true,
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('weight_for_age'),
            action      : 'WeightForAgeInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('length_for_age'),
            action      : 'LengthForAgeInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('weight_for_recumbent'),
            action      : 'WeightForRecumbentInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('head_circumference'),
            action      : 'HeadCircumferenceInf',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('weight_for_stature'),
            action      : 'WeightForStature',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('weight_for_age'),
            action      : 'WeightForAge',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('stature_for_age'),
            action      : 'StatureForAge',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-',{
            text        : _('bmi_for_age'),
            action      : 'BMIForAge',
            enableToggle: true,
            toggleGroup : 'charts',
            scope       : me,
            handler     : me.onChartSwitch
        },'-'];

        me.tools = [
            {
                type   : 'print',
                tooltip: _('print_chart'),
                handler: function() {
                    console.log(this.up('window').down('chart'));
                }
            }
        ];

        me.items = [
            Ext.create('App.view.patient.charts.BPPulseTemp', {
                store: me.vitalsStore
            }),

            me.WeightForAgeInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : _('weight_for_age_0_3_mos'),
                xTitle  : _('weight_kg'),
                yTitle  : _('age_months'),
                xMinimum: 1,
                xMaximum: 19,
                yMinimum: 0,
                yMaximum: 36,
                store   : me.WeightForAgeInfStore
            }),

            me.LengthForAgeInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : _('length_for_age_0_3_mos'),
                xTitle  : _('length_cm'),
                yTitle  : _('age_months'),
                xMinimum: 40,
                xMaximum: 110,
                yMinimum: 0,
                yMaximum: 36,
                store   : me.LengthForAgeInfStore
            }),

            me.WeightForRecumbentInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : _('weight_for_recumbent_0_3_mos'),
                xTitle  : _('weight_kg'),
                yTitle  : _('length_cm'),
                xMinimum: 1,
                xMaximum: 20,
                yMinimum: 45,
                yMaximum: 103.5,
                store   : me.WeightForRecumbentInfStore
            }),

            me.HeadCircumferenceInf = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : _('head_circumference_0_3_mos'),
                xTitle  : _('circumference_cm'),
                yTitle  : _('age_months'),
                xMinimum: 30,
                xMaximum: 55,
                yMinimum: 0,
                yMaximum: 36,
                store   : me.HeadCircumferenceInfStore
            }),

            me.WeightForStature = Ext.create('App.view.patient.charts.HeightForStature', {
////	            title   : _('weight_for_age_2_20_years'),
////	            xTitle  : _('weight_kg'),
////	            yTitle  : _('age_years'),
//	            xMinimum: 7,
//	            xMaximum: 30,
//	            yMinimum: 76,
//	            yMaximum: 122,
                store: me.WeightForStatureStore
            }),

            me.WeightForAge = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : _('weight_for_age_2_20_years'),
                xTitle  : _('weight_kg'),
                yTitle  : _('age_years'),
                xMinimum: 10,
                xMaximum: 110,
                yMinimum: 2,
                yMaximum: 20,
                store   : me.WeightForAgeStore
            }),

            me.StatureForAge = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : _('stature_for_age_2_20_years'),
                xTitle  : _('stature_cm'),
                yTitle  : _('age_years'),
                xMinimum: 60,
                xMaximum: 200,
                yMinimum: 2,
                yMaximum: 20,
                store   : me.StatureForAgeStore
            }),

            me.BMIForAge = Ext.create('App.view.patient.charts.HeadCircumference', {
                title   : _('bmi_for_age_2_20_years'),
                xTitle  : _('bmi'),
                yTitle  : _('age_years'),
                xMinimum: 10,
                xMaximum: 35,
                yMinimum: 2,
                yMaximum: 20,
                store   : me.BMIForAgeStore
            })
        ];

        me.listeners = {
            scope: me,
            show : me.onWinShow
        };

        me.callParent(arguments);
    },

    onWinShow: function() {
        var me = this,
	        layout = me.getLayout(),
	        btns = me.down('toolbar').items.items,
	        btn;
        layout.setActiveItem(0);

	    me.vitalsStore.load({params: {pid: app.patient.pid}});

        for(var i = 0; i < btns.length; i++) {
            btn = btns[i];
            if(btn.type == 'button' && (
                btn.action == 'WeightForAgeInf' || btn.action == 'LengthForAgeInf' || btn.action == 'WeightForRecumbentInf' || btn.action == 'HeadCircumferenceInf')) {
                btn.setVisible(app.patient.age.DMY.years < 2);
	            btns[i + 1].setVisible(app.patient.age.DMY.years < 2);
            } else if(btn.type == 'button') {
                btn.setVisible(app.patient.age.DMY.years >= 2);
	            btns[i + 1].setVisible(app.patient.age.DMY.years >= 2);
            }
        }
    },

    onChartSwitch: function(btn) {
        var me = this, layout = me.getLayout(), card, chart, x, y;
        if(btn.action == 'bpPulseTemp') {
            layout.setActiveItem(0);
        } else if(btn.action == 'WeightForAgeInf') {
            layout.setActiveItem(1);
            me.WeightForAgeInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'LengthForAgeInf') {
            layout.setActiveItem(2);
            me.LengthForAgeInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'WeightForRecumbentInf') {
            layout.setActiveItem(3);
            me.WeightForRecumbentInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'HeadCircumferenceInf') {
            layout.setActiveItem(4);
            me.HeadCircumferenceInfStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'WeightForStature') {
            layout.setActiveItem(5);
            me.WeightForStatureStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'WeightForAge') {
            layout.setActiveItem(6);
            me.WeightForAgeStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'StatureForAge') {
            layout.setActiveItem(7);
            me.StatureForAgeStore.load({params: {pid: app.patient.pid}});
        } else if(btn.action == 'BMIForAge') {
            layout.setActiveItem(8);
            me.BMIForAgeStore.load({params: {pid: app.patient.pid}});
        }
    }
});

Ext.define('App.view.patient.windows.EncounterCheckOut', {
	extend: 'App.ux.window.Window',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'App.view.patient.SupperBill',
		'App.ux.combo.EncounterSupervisors',
		'App.ux.LiveCPTSearch'
	],
	title: _('checkout_and_signing'),
	itemId: 'EncounterSignWindow',
	closeAction: 'hide',
	modal: true,
	layout: 'border',
	width: 1200,
	height: 660,
	bodyPadding: 5,

	pid: null,
	eid: null,

	items: [
		{
			xtype: 'superbillpanel',
			title: _('super_bill'),
			region: 'center',
			flex: 2
		},
		{
			xtype: 'encounterdocumentsgrid',
			title: _('documents'),
			region: 'east',
			itemId: 'EncounterSignDocumentGrid',
			width: 200
		},
		{
			xtype: 'form',
			title: _('additional_info'),
			region: 'south',
			split: true,
			height: 245,
			layout: 'column',
			defaults: {
				xtype: 'fieldset',
				padding: 8
			},
			items: [
				{
					xtype: 'container',
					columnWidth: .5,
					defaults: {
						xtype: 'fieldset',
						padding: 8,
						margin: '5 1 5 5'
					},
					padding: 0,
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					items: [
						{
							title: _('messages_notes_and_reminders'),
							defaults: {
								anchor: '100%'
							},
							items: [
								{
									xtype: 'textfield',
									name: 'message',
									fieldLabel: _('message')
								},
								{
									xtype: 'textfield',
									name: 'reminder',
									fieldLabel: _('reminder')
								},
								{
									xtype: 'textfield',
									grow: true,
									name: 'note',
									fieldLabel: _('note'),
									margin: 0
								}
							]
						},
						{
							title: 'Follow Up',
							flex: 1,
							defaults: {
								anchor: '100%'
							},
							items: [
								{
									xtype: 'mitos.followupcombo',
									fieldLabel: _('time_interval'),
									name: 'followup_time'
								},
								{
									fieldLabel: _('facility'),
									xtype: 'activefacilitiescombo',
									name: 'followup_facility',
									margin: 0
								}
							]
						}
					]
				},
				{
					xtype: 'fieldset',
					margin: 5,
					padding: 8,
					columnWidth: .5,
					layout: 'fit',
					height: 208,
					title: _('warnings_alerts'),
					items: [
						{
							xtype: 'grid',
							hideHeaders: true,
							store: Ext.create('App.store.patient.CheckoutAlertArea'),
							itemId: 'EncounterSignAlertGrid',
							border: false,
							rowLines: false,
							header: false,
							viewConfig: {
								stripeRows: false,
								disableSelection: true
							},
							columns: [
								{
									dataIndex: 'alertType',
									width: 30,
									renderer: function(v){
										return App.app.getController('patient.encounter.EncounterSign').alertIconRenderer(v);
									}
								},
								{
									dataIndex: 'alert',
									flex: 1
								}
							]
						}
					]
				}
			]
		}
	],
	buttons: [
		{
			xtype: 'encountersupervisorscombo',
			itemId: 'EncounterCoSignSupervisorCombo',
			allowBlank: false
		},
		{
			text: _('co_sign') + ' (' + _('supervisor') + ')',
			itemId: 'EncounterCoSignSupervisorBtn'
		},
		{
			text: _('sign'),
			itemId: 'EncounterSignBtn'
		},
		{
			text: _('cancel'),
			itemId: 'EncounterCancelSignBtn'
		}
	]
});
Ext.define('App.view.dashboard.panel.PortalColumn', {
	extend     : 'Ext.container.Container',
	alias      : 'widget.portalcolumn',

    requires: [
        'Ext.layout.container.Anchor',
        'App.view.dashboard.panel.Portlet'
    ],

    layout: 'anchor',
    defaultType: 'portlet',
    cls: 'x-portal-column'
	//
	// This is a class so that it could be easily extended
	// if necessary to provide additional behavior.
	//
});
Ext.define('App.view.dashboard.panel.PortalPanel', {
	extend: 'Ext.panel.Panel',
	alias: 'widget.portalpanel',
	requires: [
		'Ext.layout.container.Column',

		'App.view.dashboard.panel.PortalDropZone',
		'App.view.dashboard.panel.PortalColumn'
	],

	cls: 'x-portal',
	bodyCls: 'x-portal-body',
	defaultType: 'portalcolumn',
	//componentLayout: 'body',
	autoScroll: true,

	manageHeight: false,

	initComponent: function(){
		var me = this;

		// Implement a Container beforeLayout call from the layout to this Container
		this.layout = {
			type: 'column'
		};
		this.callParent();

		this.addEvents({
			validatedrop: true,
			beforedragover: true,
			dragover: true,
			beforedrop: true,
			drop: true
		});
	},

	// Set columnWidth, and set first and last column classes to allow exact CSS targeting.
	beforeLayout: function(){
		var items = this.layout.getLayoutItems(),
			len = items.length,
			firstAndLast = ['x-portal-column-first', 'x-portal-column-last'],
			i, item, last;

		for(i = 0; i < len; i++){
			item = items[i];
			item.columnWidth = 1 / len;
			last = (i == len - 1);

			if(!i){ // if (first)
				if(last){
					item.addCls(firstAndLast);
				}else{
					item.addCls('x-portal-column-first');
					item.removeCls('x-portal-column-last');
				}
			}else if(last){
				item.addCls('x-portal-column-last');
				item.removeCls('x-portal-column-first');
			}else{
				item.removeCls(firstAndLast);
			}
		}

		return this.callParent(arguments);
	},

	// private
	initEvents: function(){
		this.callParent();
		this.dd = Ext.create('App.view.dashboard.panel.PortalDropZone', this, this.dropConfig);
	},

	// private
	beforeDestroy: function(){
		if(this.dd){
			this.dd.unreg();
		}
		this.callParent();
	}
});

Ext.define('App.view.areas.PatientPoolAreas', {
	extend: 'App.ux.RenderPanel',

	requires:[
		'App.ux.grid.AreasDragDrop'
	],

	pageTitle: _('patient_pool_areas'),

	initComponent: function(){
		var me = this;

		me.pageBody = Ext.create('Ext.container.Container', {
			defaults: {
				flex: 1,
				margin: 5,
				frame: false
			},
			layout: {
				type: 'hbox',
				align: 'stretch'
			}
		});

		me.listeners = {
			beforerender: me.getPoolAreas
		};

		me.callParent(arguments);
	},

	onPatientDrop: function(node, data, overModel, dropPosition, eOpts){

		var me = this,
			name = (data.records[0].data) ? data.records[0].data.name : data.records[0].name,
			pid = (data.records[0].data) ? data.records[0].data.pid : data.records[0].pid,
			params;

		app.msg('Sweet!', name + ' ' + _('sent_to') + ' ' + this.panel.title);

		params = {
			pid: pid,
			sendTo: this.panel.action
		};

		PoolArea.sendPatientToPoolArea(params, function(result){

			if(result.floor_plan_id == null){
				app.unsetPatient(null, true);
				app.nav['App_view_areas_PatientPoolAreas'].reloadStores();
				app.getPatientsInPoolArea();
				return;
			}

			app.getController('areas.FloorPlan').promptPatientZoneAssignment(result.record.pid, result.floor_plan_id);

		});
	},

	reRenderPoolAreas:function(){
		var me = this,
			panel = me.getPageBody().down('container');

		panel.removeAll();
		me.getPoolAreas();
	},

	getPoolAreas: function(){
		var me = this,
			panel = me.getPageBody().down('container'),
			areas;

		me.stores = [];

		PoolArea.getFacilityActivePoolAreas(function(provider, response){

			areas = response.result;

			for(var i = 0; i < areas.length; i++){

				var store = Ext.create('App.store.areas.PoolDropAreas', {
					proxy: {
						type: 'direct',
						api: {
							read: 'PoolArea.getPoolAreaPatients'
						},
						extraParams: {
							area_id: areas[i].id
						}
					}
				});

				me.stores.push(store);

				panel.add({
					xtype: 'grid',
					title: areas[i].title,
					action: areas[i].id,
					store: store,
					floorPlanId: areas[i].floor_plan_id,
					columns: [
						Ext.create('Ext.grid.RowNumberer'),
						{
							header: _('record') + ' #',
							width: 100,
							dataIndex: 'pid'
						},
						{
							header: _('patient_name'),
							flex: 1,
							dataIndex: 'name'
						},
						{
							xtype: 'datecolumn',
							header: _('time_in'),
							width: 100,
							dataIndex: 'time_in',
							format: g('time_display_format')
						}
					],
					viewConfig: {
						loadMask: false,
						plugins: {
							ptype: 'areasgridviewdragdrop',
							dragGroup: 'patientPoolAreas',
							dropGroup: 'patientPoolAreas'
						},
						listeners: {
							//scope:me,
							drop: me.onPatientDrop
						}
					},
					listeners: {
						scope: me,
						itemdblclick: me.onPatientDblClick
					}
				})
			}

			me.reloadStores();
		});
	},

	onPatientDblClick: function(store, record){
		var data = record.data;
		// TODO: set priority
		app.setPatient(data.pid, data.name, null, function(){
			app.openPatientSummary();
		});
	},

	reloadStores: function(){
		if(this.stores){
			for(var i = 0; i < this.stores.length; i++){
				this.stores[i].load();
			}
		}
	},

	onActive: function(callback){
//		this.reloadStores();
		if(typeof callback == 'function') callback(true);
	}
});
Ext.define('App.view.administration.DataManager', {
	extend: 'App.ux.RenderPanel',
	pageTitle: 'Data Manager',
	requires: [
		'App.view.administration.CPT',
		'App.ux.combo.CodesTypes',
		'App.ux.combo.Titles'
	],

	initComponent: function(){
		var me = this;

		me.active = 1;
		me.dataQuery = '';
		me.code_type = 'LOINC';


		me.store = Ext.create('App.store.administration.Services');
		me.activeProblemsStore = Ext.create('App.store.administration.ActiveProblems');
		me.medicationsStore = Ext.create('App.store.administration.Medications');
		me.ImmuRelationStore = Ext.create('App.store.administration.ImmunizationRelations');
		me.labObservationsStore = Ext.create('App.store.administration.LabObservations');


		function code_type(val){
			if(val == '1'){
				return 'CPT4';
			}
			else if(val == '3'){
				return 'HCPCS';
			}
			else if(val == '100'){
				return 'CVX';
			}
			return val;
		}

		/**
		 * CPT Container
		 */
		me.cptContainer = Ext.create('Ext.container.Container', {
			layout: 'column',
			action: 'CPT4',
			//hidden: true,
			items: [
				{
					xtype: 'fieldcontainer',
					msgTarget: 'under',
					defaults: {
						action: 'field'
					},
					items: [
						{
							fieldLabel: 'Type',
							xtype: 'mitos.codestypescombo',
							name: 'code_type'
						},
						{
							fieldLabel: 'Code',
							xtype: 'textfield',
							name: 'code'
						}
					]
				},
				{
					xtype: 'fieldcontainer',
					margin: '0 0 0 10',
					defaults: {
						action: 'field'
					},
					items: [
						{
							fieldLabel: _('description'),
							xtype: 'textfield',
							name: 'code_text',
							width: 500
						}
					]
				},
				{
					xtype: 'fieldcontainer',
					margin: '0 0 0 20',
					defaults: {
						action: 'field'
					},
					items: [
						{
							boxLabel: _('radiology'),
							xtype: 'checkboxfield',
							name: 'isRadiology'
						},
						{
							boxLabel: _('active'),
							labelWidth: 75,
							xtype: 'checkboxfield',
							name: 'active'
						}
					]
				}
			]
		});
		/**
		 * HCPSC Container
		 */
		me.hpccsContainer = Ext.create('Ext.container.Container', {
			layout: 'column',
			action: 'HCPCS',
			//hidden: true,
			items: [
				{
					xtype: 'fieldcontainer',
					msgTarget: 'under',
					defaults: {
						action: 'field'
					},
					items: [
						{
							fieldLabel: _('type'),
							xtype: 'mitos.codestypescombo',
							name: 'code_type'
						},
						{
							fieldLabel: _('code'),
							xtype: 'textfield',
							name: 'code'
						},
						{
							fieldLabel: _('modifier'),
							xtype: 'textfield',
							name: 'mod'
						}
					]
				},
				{
					xtype: 'fieldcontainer',
					margin: '0 0 0 10',
					defaults: {
						action: 'field'
					},
					items: [
						{
							fieldLabel: _('description'),
							xtype: 'textfield',
							name: 'code_text'
						},
						{
							fieldLabel: _('category'),
							xtype: 'mitos.titlescombo',
							name: 'title'
						}
					]
				},
				{
					xtype: 'fieldcontainer',
					margin: '0 0 0 20',
					defaults: {
						action: 'field'
					},
					items: [
						{
							boxLabel: _('reportable'),
							xtype: 'checkboxfield',
							name: 'reportable'
						},
						{
							boxLabel: _('active'),
							labelWidth: 75,
							xtype: 'checkboxfield',
							name: 'active'
						}
					]
				}
			]
		});
		/**
		 * CVX Container
		 */
		me.cvxCintainer = Ext.create('Ext.container.Container', {
			action: _('immunizations'),
			layout: 'fit',
			items: [
				{

				}
			]

		});
		/**
		 * Labs Container
		 */
		me.labContainer = Ext.create('Ext.container.Container', {
			action: _('laboratories'),
			layout: {
				type: 'vbox',
				align: 'stretch'
			},
			items: [
				{
					/**
					 * line One
					 */
					xtype: 'fieldcontainer',
					layout: 'hbox',
					defaults: {
						margin: '0 10 5 0',
						action: 'field'
					},
					items: [
						{
							xtype: 'textfield',
							fieldLabel: _('short_name_alias'),
							name: 'code_text_short',
							labelWidth: 130,
							width: 500
						},
						{
							xtype: 'checkbox',
							fieldLabel: _('active'),
							name: 'active',
							anchor: '100%',
							labelWidth: 50

						}
					]
				},
				{
					xtype: 'grid',
					frame: true,
					title: _('children'),
					store: me.labObservationsStore,
					plugins: Ext.create('Ext.grid.plugin.CellEditing', {
						clicksToEdit: 2
					}),
					columns: [
						{
							header: _('label_alias'),
							dataIndex: 'code_text_short',
							width: 150,
							editor: {
								xtype: 'textfield'
							}
						},
						{
							header: _('loinc_name'),
							dataIndex: 'loinc_name',
							flex: 1
						},
						{
							header: _('loinc_number'),
							dataIndex: 'loinc_number',
							width: 100
						},
						{
							header: _('default_unit'),
							dataIndex: 'default_unit',
							width: 100,
							editor: {
								xtype: 'mitos.unitscombo'
							}
						},
						{
							header: _('req_opt'),
							dataIndex: 'required_in_panel',
							width: 75
						},
						{
							header: _('range_start'),
							dataIndex: 'range_start',
							width: 100,
							editor: {
								xtype: 'numberfield'
							}
						},
						{
							header: _('range_end'),
							dataIndex: 'range_end',
							width: 100,
							editor: {
								xtype: 'numberfield'
							}
						},
						{
							header: _('description'),
							dataIndex: 'description',
							flex: 1,
							editor: {
								xtype: 'textfield'
							}
						},
						{
							width: 60,
							header: _('active'),
							dataIndex: 'active',
							renderer: me.boolRenderer,
							editor: {
								xtype: 'checkbox'
							}
						}
					]
					//                    tbar:[
					//                        {
					//                            xtype:'labobservationscombo',
					//                            fieldLabel:'Add Observation',
					//                            width:300,
					//                            listeners: {
					//                                scope : me,
					//                                select: me.onObservationSelect
					//                            }
					//                        },
					//                        {
					//                            text:'Add Observation',
					//                            iconCls:'icoAddRecord',
					//                            scope:me,
					//                            handler:me.addLabObservation
					//                        }
					//                    ]
				}
			]
		});

		me.dataManagerGrid = Ext.create('Ext.grid.Panel', {
			title: 'Codes',
			region: 'center',
			store: me.store,
			viewConfig: {
				loadMask: true
			},
			columns: [
				{
					width: 50,
//					header: _('code_type'),
					sortable: false,
					dataIndex: 'code_type',
					renderer: code_type
				},
				{
					width: 60,
					header: _('code'),
					sortable: true,
					dataIndex: 'code'
				},
				{
					header: _('short_name'),
					dataIndex: 'code_text_short',
					width: 100,
					flex: 1
				},
				{
					header: _('long_name'),
					sortable: true,
					dataIndex: 'code_text',
					flex: 2
				},
				{
					width: 60,
					header: _('active'),
					sortable: true,
					dataIndex: 'active',
					renderer: me.boolRenderer
				}
			],
			plugins: Ext.create('App.ux.grid.RowFormEditing', {
				autoCancel: false,
				errorSummary: false,
				clicksToEdit: 1,
				listeners: {
					scope: me,
					beforeedit: me.beforeServiceEdit
				}
			}),
			tbar: this.bar = Ext.create('Ext.PagingToolbar', {
				store: me.store,
				displayInfo: true,
				emptyMsg: _('no_office_notes_to_display'),
				plugins: Ext.create('Ext.ux.SlidingPager'),
				items: [
					'-',
					{
						xtype: 'mitos.codestypescombo',
						width: 150,
						listeners: {
							scope: me,
							select: me.onCodeTypeSelect
						}
					}, '-',
					{
						text: _('add'),
						iconCls: 'icoAddRecord',
						scope: me,
						handler: me.onAddData
					}, '-',
					{
						xtype: 'textfield',
						emptyText: _('search'),
						width: 200,
						enableKeyEvents: true,
						listeners: {
							scope: me,
							keyup: me.onSearch,
							buffer: 500
						}
					}, '-',
					{
						xtype: 'button',
						text: _('show_inactive_codes_only'),
						enableToggle: true,
						listeners: {
							scope: me,
							toggle: me.onActivePressed
						}
					}
				]
			})
		});
		// END GRID

		me.tabPanel = Ext.widget('tabpanel',{
			items:[
				{
					xtype: 'cptadmingrid'
				},
				me.dataManagerGrid
			]
		});

		me.pageBody = [ me.tabPanel ];




		me.callParent();
	},


	onAddData: function(){
		var me = this;
		if(me.code_type == 'Laboratories'){
			Ext.Msg.alert('Opps!', _('ops_laboratories'));
		} else{
			me.dataManagerGrid.plugins[0].cancelEdit();
			me.store.add({
				code_type: me.code_type
			});
			me.dataManagerGrid.plugins[0].startEdit(0, 0);
		}
	},


	beforeServiceEdit: function(context, e){

		var me = this,
			editor = context.editor,
			code_type = e.record.data.code_type,
			grids,
			thisForm;

		if(code_type == 'CPT4'){
			thisForm = me.cptContainer;
		}else if(code_type == 'HCPCS'){
			thisForm = me.hpccsContainer;
		}else if(code_type == 'CVX'){
			thisForm = me.cvxCintainer;
		}else if(code_type == 'LOINC'){

			me.labContainer.down('grid').setTitle(
				e.record.data.has_children ? _('observations'):_('observation')
			);

			me.labContainer.down('grid').setVisible(e.record.data.class != 'RAD');
			thisForm = me.labContainer;
		}

		if(!editor.items.length){
			editor.add(thisForm);
			editor.setFields();
		}else if(this.currForm != thisForm){
			editor.remove(0, false);
			editor.add(thisForm);
			editor.setFields();
		}

		/**
		 * find grids inside the form and load the its store with the row ID
		 * @type {*}
		 */
		if(thisForm){
			grids = thisForm.query('grid');
			for(var i = 0; i < grids.length; i++){
				grids[i].getStore().load({
					params: {
						selectedId: me.getSelectId()
					}
				});
			}
			this.currForm = thisForm;
		}
	},

	onSearch: function(field){
		var me = this,
			store = me.store;

		me.dataQuery = field.getValue();
		store.proxy.extraParams = {
			active: me.active,
			code_type: me.code_type,
			query: me.dataQuery
		};
		me.store.loadPage(1);
	},

	onCodeTypeSelect: function(combo, record){
		var me = this,
			store = me.store;

		me.code_type = record[0].data.option_value;
		store.proxy.extraParams = {
			active: me.active,
			code_type: me.code_type,
			query: me.dataQuery
		};
		me.store.loadPage(1);
	},
	//        onObservationSelect:function(combo, record){
	//            say(record[0].data);
	//            this.labObservationsStore.add({
	//                    lab_id:this.getSelectId(),
	//                    observation_element_id:record[0].data.id
	//                });
	//            combo.reset();
	//        },

	onActivePressed: function(btn, pressed){
		var me = this,
			store = me.store;

		me.active = !pressed;
		store.proxy.extraParams = {
			active: me.active,
			code_type: me.code_type,
			query: me.dataQuery
		};
		me.store.load();
	},

	getSelectId: function(){
		var row = this.dataManagerGrid.getSelectionModel().getLastSelected();
		return row.data.id;
	},


	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		this.bar.query('combobox')[0].setValue("CPT4");
		this.store.proxy.extraParams = {
			active: this.active,
			code_type: this.code_type,
			query: this.dataQuery
		};
		this.store.load();
		callback(true);
	}
});
//ens servicesPage class
Ext.define('App.view.administration.Documents', {
	extend: 'App.ux.RenderPanel',
	id: 'panelDocuments',
	pageTitle: _('document_template_editor'),
	pageLayout: 'border',
	requires: [
		'App.ux.grid.Button',
		'Ext.grid.Panel'
	],
	initComponent: function(){

		var me = this;

		// *************************************************************************************
		// Documents Stores
		// *************************************************************************************
		me.templatesDocumentsStore = Ext.create('App.store.administration.DocumentsTemplates');
		me.defaultsDocumentsStore = Ext.create('App.store.administration.DefaultDocuments');
		me.tokenStore = Ext.create('App.store.administration.DocumentToken');

		//		me.HeaderFootergrid = Ext.create('Ext.grid.Panel', {
		//			title      : _('header_footer_templates'),
		//			region     : 'south',
		//			height     : 250,
		//			split      : true,
		//			hideHeaders: true,
		//			store      : me.headersAndFooterStore,
		//			columns    : [
		//				{
		//					flex     : 1,
		//					sortable : true,
		//					dataIndex: 'title',
		//                    editor:{
		//                        xtype:'textfield',
		//                        allowBlank:false
		//                    }
		//				},
		//				{
		//					icon: 'resources/images/icons/delete.png',
		//					tooltip: _('remove'),
		//					scope:me,
		//					handler: me.onRemoveDocument
		//				}
		//			],
		//			listeners  : {
		//				scope    : me,
		//				itemclick: me.onDocumentsGridItemClick
		//			},
		//			tbar       :[
		//                '->',
		//                {
		//                    text : _('new'),
		//                    scope: me,
		//                    handler: me.newHeaderOrFooterTemplate
		//                }
		//            ],
		//            plugins:[
		//                me.rowEditor2 = Ext.create('Ext.grid.plugin.RowEditing', {
		//                    clicksToEdit: 2
		//                })
		//
		//            ]
		//		});

		me.DocumentsDefaultsGrid = Ext.create('Ext.grid.Panel', {
			title: _('documents_defaults'),
			region: 'north',
			width: 250,
			border: true,
			store: me.defaultsDocumentsStore,
			hideHeaders: true,
			columns: [
				{
					flex: 1,
					sortable: true,
					dataIndex: 'title',
					editor: {
						xtype: 'textfield',
						allowBlank: false
					}
				},
				{
					icon: 'resources/images/icons/delete.png',
					tooltip: _('remove'),
					scope: me,
					handler: me.onRemoveDocument
				}
			],
			listeners: {
				scope: me,
				itemclick: me.onDocumentsGridItemClick
			},
			tbar: ['->',
				{
					text: _('new'),
					scope: me,
					handler: me.newDefaultTemplates
				}],
			plugins: [me.rowEditor3 = Ext.create('Ext.grid.plugin.RowEditing',
				{
					clicksToEdit: 2
				})]
		});

		me.DocumentsGrid = Ext.create('Ext.grid.Panel', {
			title: _('document_templates'),
			region: 'center',
			width: 250,
			border: true,
			split: true,
			store: me.templatesDocumentsStore,
			hideHeaders: true,
			columns: [
				{
					flex: 1,
					sortable: true,
					dataIndex: 'title',
					editor: {
						xtype: 'textfield',
						allowBlank: false
					}
				},
				{
					icon: 'resources/images/icons/delete.png',
					tooltip: _('remove'),
					scope: me,
					handler: me.onRemoveDocument
				}
			],
			listeners: {
				scope: me,
				itemclick: me.onDocumentsGridItemClick
			},
			tbar: ['->',
				{
					text: _('new'),
					scope: me,
					handler: me.newDocumentTemplate
				}],
			plugins: [me.rowEditor = Ext.create('Ext.grid.plugin.RowEditing',
				{
					clicksToEdit: 2
				})]
		});

		me.LeftCol = Ext.create('Ext.container.Container', {
			region: 'west',
			layout: 'border',
			width: 250,
			border: false,
			split: true,
			items: [me.DocumentsDefaultsGrid, me.DocumentsGrid]
		});

		me.TeamplateEditor = Ext.create('Ext.form.Panel', {
			title: _('document_editor'),
			region: 'center',
			layout: 'fit',
			autoScroll: false,
			border: true,
			split: true,
			hideHeaders: true,
			items: {
				xtype: 'htmleditor',
				enableFontSize: false,
				name: 'body',
				margin: 5
			},
			buttons: [
				{
					text: _('save'),
					scope: me,
					handler: me.onSaveEditor
				},
				{
					text: _('cancel'),
					scope: me,
					handler: me.onCancelEditor
				}
			]
		});

		me.TokensGrid = Ext.create('Ext.grid.Panel', {
			title: _('available_tokens'),
			region: 'east',
			width: 250,
			border: true,
			split: true,
			hideHeaders: true,
			store: me.tokenStore,
			disableSelection: true,
			viewConfig: {
				stripeRows: false
			},
			columns: [
				{
					flex: 1,
					sortable: false,
					dataIndex: 'token'
				},
				{
					xtype: 'actioncolumn',
					width: 50,
					items: [
						{
							icon: 'resources/images/icons/copy.png',
							tooltip: _('copy'),
							margin: '0 5 0 0',
							handler: function(grid, rowIndex, colIndex, item, e, record){


//								btn.btnEl.set({
//									'data-clipboard-text': btn.record.data.token
//								});
//								AppClipboard.clip(btn.btnEl.dom);
							}
						}
					]
				}
//				{
//					xtype:'gridbutton',
//					width: 35,
//					items:[
//						{
//							xtype:'button',
//							icon:'resources/images/icons/copy.png',
//							listeners:{
//								render:function(btn){
//									btn.btnEl.set({
//										'data-clipboard-text': btn.record.data.token
//									});
//									AppClipboard.clip(btn.btnEl.dom);
//								}
//							}
//						}
//					]
//
//				}
//				{
//					dataIndex: 'token',
//					width: 30,
//					xtype: "templatecolumn",
//					tpl: new Ext.XTemplate("" +
//						"<object id='clipboard{token}' codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0' width='16' height='16' align='middle'>",
//						"<param name='allowScriptAccess' value='always' />",
//						"<param name='allowFullScreen' value='false' />",
//						"<param name='movie' value='lib/ClipBoard/clipboard.swf' />",
//						"<param name='quality' value='high' />", "<param name='bgcolor' value='#ffffff' />",
//						"<param name='flashvars' value='callback=copyToClipBoard&callbackArg={token}' />",
//						"<embed src='lib/ClipBoard/clipboard.swf' flashvars='callback=copyToClipBoard&callbackArg={token}' quality='high' bgcolor='#ffffff' width='16' height='16' name='clipboard{token}' align='middle' allowscriptaccess='always' allowfullscreen='false' type='application/x-shockwave-flash' pluginspage='http://www.adobe.com/go/getflashplayer' />",
//						"</object>", null)
//				}
			]
		});

		me.pageBody = [me.LeftCol, me.TeamplateEditor, me.TokensGrid];
		me.callParent();
	},
	/**
	 * Delete logic
	 */
	onDelete: function(){

	},

	onTokensGridItemClick: function(){

	},

	onSaveEditor: function(){
		var me = this,
			form = me.down('form').getForm(),
			record = form.getRecord(),
			values = form.getValues();
		record.set(values);
		app.msg(_('sweet'), _('record_saved'));
	},

	onCancelEditor: function(){
		var me = this, form = me.down('form').getForm(), grid = me.DocumentsGrid;
		form.reset();
		grid.getSelectionModel().deselectAll();
	},

	onDocumentsGridItemClick: function(grid, record){
		var me = this;
		var form = me.down('form').getForm();
		form.loadRecord(record);

	},
	newDocumentTemplate: function(){
		var me = this, store = me.templatesDocumentsStore;
		me.rowEditor.cancelEdit();
		store.insert(0,
			{
				title: _('new_document'),
				template_type: 'documenttemplate',
				date: new Date(),
				type: 1
			});
		me.rowEditor.startEdit(0, 0);

	},

	newDefaultTemplates: function(){
		var me = this, store = me.defaultsDocumentsStore;
		me.rowEditor3.cancelEdit();
		store.insert(0,
			{
				title: _('new_defaults'),
				template_type: 'defaulttemplate',
				date: new Date(),
				type: 1
			});
		me.rowEditor3.startEdit(0, 0);

	},

	//	newHeaderOrFooterTemplate:function(){
	//        var me = this,
	//            store = me.headersAndFooterStore;
	//        me.rowEditor2.cancelEdit();
	//        store.insert(0,{
	//            title: _('new_header_or_footer'),
	//	        template_type:'headerorfootertemplate',
	//            date: new Date(),
	//	        type: 2
	//        });
	//        me.rowEditor2.startEdit(0, 0);
	//
	//    },

	copyToClipBoard: function(grid, rowIndex, colIndex){
		var rec = grid.getStore().getAt(rowIndex), text = rec.get('token');
	},

	onRemoveDocument: function(){

	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		var me = this;
		me.templatesDocumentsStore.load();
		//        me.headersAndFooterStore.load();
		me.defaultsDocumentsStore.load();
		callback(true);
	}
});

Ext.define('App.view.administration.Roles', {
	extend: 'App.ux.RenderPanel',
	requires: [
		'App.ux.combo.XCombo',
		'Ext.grid.plugin.CellEditing',
		'Ext.ux.DataTip'
	],
	itemId: 'AdministrationRolePanel',
	pageTitle: _('roles_and_permissions'),
	pageBody: [
		{
			xtype:'grid',
			bodyStyle: 'background-color:white',
			itemId: 'AdministrationRoleGrid',
			frame: true,
			columnLines: true,
			tbar: [
				{
					xtype: 'xcombo',
					emptyText: _('select'),
					labelWidth: 50,
					width: 250,
					valueField: 'id',
					displayField: 'title',
					queryMode: 'local',
					store: Ext.create('App.store.administration.AclGroups'),
					itemId: 'AdministrationRoleGroupCombo',
					windowConfig: {
						title: _('add_group')
					},
					formConfig: {
						border: false,
						bodyPadding: 10,
						items: [
							{
								xtype: 'textfield',
								fieldLabel: _('group_name'),
								name: 'title'
							},
							{
								xtype: 'checkbox',
								fieldLabel: _('active'),
								name: 'active'
							}
						]
					}
				},
				'-',
				'->',
				'-',
				{
					xtype: 'button',
					text: _('add_role'),
					iconCls: 'icoAdd',
					action: 'adminAclAddRole'
				},
				'-'
			],
			features: [
				{
					ftype: 'grouping'
				}
			],
			plugins: [
				{
					ptype: 'cellediting',
					clicksToEdit: 1
				},
				{
					ptype: 'datatip',
					tpl: _('click_to_edit')
				}
			],
			columns: [
				{
					text: 'Permission',
					width: 250,
					locked: true
				}
			]
		}
	],
	pageButtons: [
		{
			text: _('cancel'),
			cls: 'cancelBtn',
			action: 'adminAclCancel'
		},
		'-',
		{
			text: _('save'),
			cls: 'saveBtn',
			action: 'adminAclSave'
		}
	]
});

Ext.define('App.view.administration.Users', {
	extend: 'App.ux.RenderPanel',
	requires: [
		'App.ux.form.fields.plugin.PasswordStrength',
		'App.ux.combo.ActiveSpecialties'
	],
	pageTitle: _('users'),
	itemId: 'AdminUsersPanel',
	initComponent: function(){
		var me = this;

		me.userStore = Ext.create('App.store.administration.User', {
			remoteSort: true,
			autoSync: false
		});

		me.userGrid = Ext.create('Ext.grid.Panel', {
			itemId: 'AdminUserGridPanel',
			store: me.userStore,
			columns: [
				{
					text: 'id',
					sortable: false,
					dataIndex: 'id',
					width: 50
				},
				{
					width: 100,
					text: _('username'),
					sortable: true,
					dataIndex: 'username'
				},
				{
					width: 200,
					text: _('name'),
					sortable: true,
					dataIndex: 'fullname'
				},
				{
					flex: 1,
					text: _('aditional_info'),
					sortable: true,
					dataIndex: 'notes'
				},
				{
					text: _('active'),
					sortable: true,
					dataIndex: 'active',
					renderer: me.boolRenderer
				},
				{
					text: _('authorized'),
					sortable: true,
					dataIndex: 'authorized',
					renderer: me.boolRenderer
				},
				{
					text: _('is_attending'),
					sortable: true,
					dataIndex: 'is_attending',
					renderer: me.boolRenderer
				}
			],
			plugins: [
				me.formEditing = Ext.create('App.ux.grid.RowFormEditing', {
					clicksToEdit: 1,
					items: [
						{
							xtype: 'tabpanel',
							items: [
								{
									title: _('general'),
									itemId: 'UserGridEditFormContainer',
									layout: 'hbox',
									items: [
										{
											xtype: 'container',
											itemId: 'UserGridEditFormContainerLeft',
											items: [
												{
													xtype: 'fieldcontainer',
													layout: {
														type: 'hbox'
													},
													fieldDefaults: {
														labelAlign: 'right'
													},
													items: [
														{
															width: 280,
															xtype: 'textfield',
															fieldLabel: _('username'),
															name: 'username',
															allowBlank: false,
															validateOnBlur: true,
															vtype: 'usernameField'
														},
														{
															width: 275,
															xtype: 'textfield',
															fieldLabel: _('password'),
															name: 'password',
															inputType: 'password',
															vtype: 'strength',
															strength: 24,
															plugins: {
																ptype: 'passwordstrength'
															}
														}
													]
												},
												{
													xtype: 'fieldcontainer',
													layout: {
														type: 'hbox'
													},
													fieldDefaults: {
														labelAlign: 'right'
													},
													fieldLabel: _('name'),
													items: [
														{
															width: 50,
															xtype: 'mitos.titlescombo',
															name: 'title'
														},
														{
															width: 145,
															xtype: 'textfield',
															name: 'fname',
															allowBlank: false
														},
														{
															width: 100,
															xtype: 'textfield',
															name: 'mname'
														},
														{
															width: 150,
															xtype: 'textfield',
															name: 'lname'
														}
													]
												},
												{
													xtype: 'fieldcontainer',
													layout: {
														type: 'hbox'
													},
													fieldDefaults: {
														labelAlign: 'right'
													},
													items: [
														{
															width: 125,
															xtype: 'checkbox',
															fieldLabel: _('active'),
															name: 'active'
														},
														{
															width: 100,
															labelWidth: 85,
															xtype: 'checkbox',
															fieldLabel: _('authorized'),
															name: 'authorized'
														},
														{
															width: 100,
															labelWidth: 85,
															xtype: 'checkbox',
															fieldLabel: _('calendar_q'),
															name: 'calendar'
														},
														{
															width: 225,
															labelWidth: 50,
															xtype: 'gaiaehr.combo',
															fieldLabel: _('type'),
															name: 'doctor_type',
															list: 121,
															loadStore: true
														}
													]
												},
												{
													xtype: 'fieldcontainer',
													layout: {
														type: 'hbox'
													},
													fieldDefaults: {
														labelAlign: 'right'
													},
													items: [
														{
															width: 280,
															xtype: 'mitos.facilitiescombo',
															fieldLabel: _('default_facility'),
															name: 'facility_id'
														},
														{
															width: 275,
															xtype: 'mitos.authorizationscombo',
															fieldLabel: _('authorizations'),
															name: 'see_auth'
														}
													]
												},
												{
													xtype: 'fieldcontainer',
													layout: {
														type: 'hbox'
													},
													fieldDefaults: {
														labelAlign: 'right'
													},
													items: [
														{
															width: 555,
															xtype: 'mitos.rolescombo',
															fieldLabel: _('access_control'),
															name: 'role_id',
															allowBlank: false
														}
													]
												}
											]
										},
										{
											xtype: 'container',
											itemId: 'UserGridEditFormContainerRight',
											items: []
										}
									]
								},
								{
									xtype: 'panel',
									title: _('provider'),
									itemId: 'UserGridEditFormProviderPanel',
									layout: 'hbox',
									items: [
										{
											xtype: 'fieldcontainer',
											itemId: 'UserGridEditFormProviderPanelLeft',
											fieldDefaults: {
												labelAlign: 'right',
												width: 500,
												margin: '0 0 5 0'
											},
											margin: '20 10 0 0',
											items: [
												{
													xtype: 'checkbox',
													fieldLabel: _('is_attending'),
													name: 'is_attending'
												},
												{
													xtype: 'textfield',
													fieldLabel: _('federal_tax_id'),
													name: 'fedtaxid'
												},
												{
													xtype: 'textfield',
													fieldLabel: _('fed_drug_id'),
													name: 'feddrugid'

												},
												{
													xtype: 'textfield',
													fieldLabel: _('upin'),
													name: 'pin'
												},
												{
													xtype: 'textfield',
													fieldLabel: _('npi'),
													name: 'npi',
													maxLength: 10,
													vtype: 'npi'
												},
												{
													xtype: 'activespecialtiescombo',
													fieldLabel: _('specialties'),
													name: 'specialty',
													margin: '5 0',
													labelAlign: 'right',
													multiSelect: true
												},
												{
													xtype: 'textfield',
													fieldLabel: _('additional_info'),
													name: 'notes',
													labelAlign: 'right'
												}
											]
										},
										{
											xtype: 'grid',
											title: _('provider_credentialization'),
											itemId: 'UserGridEditFormProviderCredentializationGrid',
											flex: 1,
											maxHeight: 200,
											frame: true,
											store: Ext.create('App.store.administration.ProviderCredentializations', {
												pageSize: 1000
											}),
											plugins:[
												{
													ptype:'cellediting'
												}
											],
											tools: [
												{
													xtype: 'button',
													text: _('active_all'),
													icon: 'resources/images/icons/yes.gif',
													margin: '0 5 0 0',
													itemId: 'UserGridEditFormProviderCredentializationActiveBtn'
												},
												{
													xtype:'button',
													text: _('inactive_all'),
													icon: 'resources/images/icons/no.gif',
													itemId: 'UserGridEditFormProviderCredentializationInactiveBtn'
												}
											],
											columns: [
												{
													text: _('insurance'),
													width: 150,
													dataIndex: 'insurance_company_id',
													renderer: function(v, meta, record){
														return record.data.insurance_company_id +
															': ' +
															record.data.insurance_company_name;
													}
												},
												{
													xtype:'datecolumn',
													format: g('date_display_format'),
													text: _('start'),
													dataIndex: 'start_date',
													editor: {
														xtype: 'datefield'
													}
												},
												{
													xtype:'datecolumn',
													format: g('date_display_format'),
													text: _('end'),
													dataIndex: 'end_date',
													editor: {
														xtype: 'datefield'
													}
												},
												{
													text: _('note'),
													dataIndex: 'credentialization_notes',
													flex: 1,
													editor: {
														xtype: 'textfield'
													}
												},
												{
													text: _('active'),
													dataIndex: 'active',
													renderer: app.boolRenderer
												}
											]
										}
									]
								}
							]
						}

					]
				})
			],
			tbar: [
				{
					xtype: 'button',
					text: _('user'),
					iconCls: 'icoAdd',
					scope: me,
					handler: me.onNewUser
				}
			],
			bbar: {
				xtype: 'pagingtoolbar',
				pageSize: 10,
				store: me.userStore,
				displayInfo: true,
				plugins: new Ext.ux.SlidingPager()
			}

		});

		me.pageBody = [me.userGrid];
		me.callParent(arguments);

	},

	onNewUser: function(){
		var me = this;

		me.formEditing.cancelEdit();
		me.userStore.insert(0, {
			create_date: new Date(),
			update_date: new Date(),
			create_uid: app.user.id,
			update_uid: app.user.id,
			active: 1,
			authorized: 0,
			calendar: 0
		});
		me.formEditing.startEdit(0, 0);
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		this.userStore.load();
		callback(true);
	}
});

Ext.define('App.view.miscellaneous.AddressBook', {
	extend: 'App.ux.RenderPanel',
	requires: [
		'App.store.miscellaneous.AddressBook',
		'Ext.toolbar.Paging',
		'Ext.ux.SlidingPager'
	],
	pageTitle: _('address_book'),

	initComponent: function(){
		var me = this;

		me.grid = Ext.create('Ext.grid.Panel', {
			store: me.store = Ext.create('App.store.miscellaneous.AddressBook'),
			columns: [
				{
					header: _('name'),
					width: 200,
					dataIndex: 'fullname'
				},
				{
					header: _('primary_phone'),
					dataIndex: 'phone',
					width: 120
				},
				{
					header: _('cell_phone'),
					dataIndex: 'mobile',
					width: 120
				},
				{
					header: _('fax'),
					dataIndex: 'fax',
					width: 120
				},
				{
					header: _('email'),
					dataIndex: 'email',
					width: 120
				},
				{
					header: _('direct_address'),
					dataIndex: 'direct_address',
					width: 120
				},
				{
					header: _('notes'),
					dataIndex: 'notes',
					flex: 1
				}
			],
			plugins: [
				{
					ptype: 'rowformediting',
					items: [
						{
							xtype: 'container',
							layout: 'column',
							defaults: {
								xtype: 'container',
								layout: 'anchor',
								margin: 5
							},
							items: [
								{
									width: 500,
									defaults: {
										labelWidth: 80,
										anchor: '100%'
									},
									items: [
										{
											xtype: 'fieldcontainer',
											fieldLabel: _('name'),
											layout: 'hbox',
											defaults: {
												margin: '0 5 0 0'
											},
											items: [
												{
													xtype: 'textfield',
													emptyText: _('first_name'),
													name: 'fname',
													width: 130
												},
												{
													xtype: 'textfield',
													emptyText: _('middle_name'),
													name: 'mname',
													width: 50
												},
												{
													xtype: 'textfield',
													emptyText: _('last_name'),
													name: 'lname',
													flex: 1,
													margin: 0
												}
											]
										},
										{
											xtype: 'fieldcontainer',
											fieldLabel: _('address'),
											layout: 'anchor',
											defaults: {
												anchor: '100%',
												margin: '0 0 5 0'
											},
											items: [
												{
													xtype: 'textfield',
													emptyText: _('street'),
													name: 'street'
												},
												{
													xtype: 'textfield',
													name: 'street_cont'
												},
												{
													xtype: 'container',
													layout: 'hbox',
													defaults: {
														margin: '0 5 0 0'
													},
													items: [
														{
															xtype: 'textfield',
															emptyText: _('city'),
															name: 'city',
															flex: 1
														},
														{
															xtype: 'textfield',
															emptyText: _('state'),
															name: 'state',
															width: 120
														},
														{
															xtype: 'textfield',
															emptyText: _('zip'),
															name: 'zip',
															width: 100,
															margin: 0
														}
													]
												},
												{
													xtype: 'textfield',
													emptyText: _('country'),
													name: 'country',
													margin: '5 0 0 0'
												}
											]
										},
										{
											xtype: 'textfield',
											fieldLabel: _('notes'),
											name: 'notes',
											margin: '5 0 5 0'
										}
									]
								},
								{
									width: 300,
									layout: 'anchor',
									defaults: {
										anchor: '100%',
										labelWidth: 80,
										margin: '0 0 5 0'
									},
									items: [
										{
											xtype: 'textfield',
											fieldLabel: _('phone') + ' (1)',
											name: 'phone'
										},
										{
											xtype: 'textfield',
											fieldLabel: _('phone') + ' (2)',
											name: 'phone2'
										},
										{
											xtype: 'textfield',
											fieldLabel: _('cell_phone'),
											name: 'mobile'
										},
										{
											xtype: 'textfield',
											fieldLabel: _('fax'),
											name: 'fax'
										},
										{
											xtype: 'textfield',
											fieldLabel: _('email'),
											name: 'email',
											margin: '5 0 5 0',
											vtype: 'email'
										},
										{
											xtype: 'textfield',
											fieldLabel: _('url'),
											name: 'url'
										}
									]
								},
								{
									width: 300,
									layout: 'anchor',
									defaults: {
										anchor: '100%',
										labelWidth: 100,
										margin: '0 0 5 0'
									},
									items: [
										{
											xtype: 'textfield',
											fieldLabel: _('direct_address'),
											name: 'direct_address'
										}
									]
								}
							]
						}
					]
				}
			],
			tbar: [
				{
					text: _('add_contact'),
					iconCls: 'icoAdd',
					scope: me,
					handler: me.onAddContact
				}
			],
			bbar: Ext.create('Ext.PagingToolbar', {
				store: me.store,
				displayInfo: true,
				plugins: Ext.create('Ext.ux.SlidingPager', {})
			})
		});

		me.pageBody = [ me.grid ];

		me.callParent(arguments);
	},

	onAddContact: function(){
		var me = this,
			grid = me.grid,
			store = grid.getStore(),
			plugin = grid.editingPlugin,
			record;
		plugin.cancelEdit();
		record = store.add({})[0];
		plugin.startEdit(record, 0);

	},

	onActive: function(callback){
		this.grid.getStore().load();
		callback(true);
	}
});

Ext.define('App.view.miscellaneous.MyAccount', {
	extend: 'App.ux.RenderPanel',
	pageTitle: _('my_account'),

	requires: [
		'App.ux.combo.Titles',
		'App.ux.window.Window',
		'App.ux.combo.Facilities',
		'App.ux.combo.ActiveSpecialties',
		'App.ux.form.fields.plugin.PasswordStrength'
	],

	initComponent: function(){
		var me = this;

		// *************************************************************************************
		// My Account Data Store
		// *************************************************************************************
		me.store = Ext.create('App.store.miscellaneous.Users');

		// *************************************************************************************
		// User Settings Form
		// Add or Edit purpose
		// *************************************************************************************
		me.myAccountForm = Ext.create('App.ux.form.Panel', {
			cls: 'form-white-bg',
			frame: true,
			hideLabels: true,
			defaults: {
				labelWidth: 89,
				layout: {
					type: 'hbox',
					defaultMargins: {
						top: 0,
						right: 5,
						bottom: 0,
						left: 0
					}
				}
			},
			items: [
				{
					xtype: 'textfield',
					hidden: true,
					name: 'id'
				},
				{
					xtype: 'fieldset',
					title: _('personal_info'),
					defaultType: 'textfield',
					layout: 'anchor',
					defaults: {
						labelWidth: 89,
						anchor: '100%',
						layout: {
							type: 'hbox',
							defaultMargins: {
								top: 0,
								right: 5,
								bottom: 0,
								left: 0
							}
						}
					},
					items: [
						{
							xtype: 'fieldcontainer',
							defaults: {
								hideLabel: true
							},
							msgTarget: 'under',
							items: [
								{
									width: 110,
									xtype: 'displayfield',
									value: 'First, Middle, Last: '
								},
								{
									width: 55,
									xtype: 'mitos.titlescombo',
									name: 'title'
								},
								{
									width: 105,
									xtype: 'textfield',
									name: 'fname'
								},
								{
									width: 100,
									xtype: 'textfield',
									name: 'mname'
								},
								{
									width: 175,
									xtype: 'textfield',
									name: 'lname'
								}
							]
						}
					]
				},
				{
					xtype: 'fieldset',
					title: _('login_info'),
					defaultType: 'textfield',
					layout: 'anchor',
					defaults: {
						labelWidth: 89,
						anchor: '100%',
						layout: {
							type: 'hbox',
							defaultMargins: {
								top: 0,
								right: 5,
								bottom: 0,
								left: 0
							}
						}
					},
					items: [
						{
							xtype: 'fieldcontainer',
							defaults: {
								hideLabel: true
							},
							msgTarget: 'under',
							items: [
								{
									width: 110,
									xtype: 'displayfield',
									value: 'Username: '
								},
								{
									width: 170,
									xtype: 'textfield',
									name: 'username'
								},
								{
									width: 100,
									xtype: 'displayfield',
									value: 'Password: '
								},
								{
									width: 175,
									xtype: 'textfield',
									name: 'password',
									inputType: 'password',
									disabled: true
								}
							]
						}
					]
				},
				//{
				//	xtype: 'fieldset',
				//	title: _('other_info'),
				//	defaultType: 'textfield',
				//	layout: 'anchor',
				//	defaults: {
				//		labelWidth: 89,
				//		anchor: '100%',
				//		layout: {
				//			type: 'hbox',
				//			defaultMargins: {
				//				top: 0,
				//				right: 5,
				//				bottom: 0,
				//				left: 0
				//			}
				//		}
				//	},
				//	items: [
				//		{
				//			xtype: 'fieldcontainer',
				//			defaults: {
				//				hideLabel: true
				//			},
				//			msgTarget: 'under',
				//			items: [
				//				{
				//					width: 110,
				//					xtype: 'displayfield',
				//					value: 'Default Facility: '
				//				},
				//				{
				//					xtype:'mitos.facilitiescombo',
				//					width: 170,
				//					name:'facility_id'
				//				},
				//				{
				//					width: 100,
				//					xtype: 'displayfield',
				//					value: 'Taxonomy: '
				//				},
				//				{
				//					width: 175,
				//					xtype: 'textfield',
				//					name: 'taxonomy'
				//				}
				//			]
				//		},
				//		{
				//			xtype: 'fieldcontainer',
				//			defaults: {
				//				hideLabel: true
				//			},
				//			items: [
				//				{
				//					width: 110,
				//					xtype: 'displayfield',
				//					value: 'Federal Tax ID: '
				//				},
				//				{
				//					width: 170,
				//					xtype: 'textfield',
				//					name: 'fedtaxid'
				//				},
				//				{
				//					width: 100,
				//					xtype: 'displayfield',
				//					value: 'Fed Drug ID: '
				//				},
				//				{
				//					width: 175,
				//					xtype: 'textfield',
				//					name: 'feddrugid'
				//				}
				//			]
				//		},
				//		{
				//			xtype: 'fieldcontainer',
				//			defaults: {
				//				hideLabel: true
				//			},
				//			items: [
				//				{
				//					width: 110,
				//					xtype: 'displayfield',
				//					value: 'User PIN#: '
				//				},
				//				{
				//					width: 170,
				//					xtype: 'textfield',
				//					name: 'pin'
				//				},
				//				{
				//					width: 100,
				//					xtype: 'displayfield',
				//					value: 'NPI: '
				//				},
				//				{
				//					width: 175,
				//					xtype: 'textfield',
				//					name: 'npi'
				//				}
				//			]
				//		},
				//		{
				//			xtype: 'fieldcontainer',
				//			defaults: {
				//				hideLabel: true
				//			},
				//			items: [
				//				{
				//					width: 110,
				//					xtype: 'displayfield',
				//					value: 'Specialty: '
				//				},
				//				{
				//					width: 455,
				//					xtype: 'activespecialtiescombo',
				//					name: 'specialty'
				//				}
				//			]
				//		}
				//	]
				//}
			],
			tbar:[
				{
					text: _('change_password'),
					iconCls: 'save',
					scope: me,
					handler: me.onPasswordChange
				}
			],
			buttons: [
				{
					text: _('save'),
					iconCls: 'save',
					scope: me,
					handler: me.onSaveClick
				}
			]
		});

		me.win = Ext.create('App.ux.window.Window', {
			width: 420,
			title: _('change_you_password'),
			items: [
				{
					xtype: 'form',
					bodyPadding: 15,
					defaultType: 'textfield',
					defaults: {
						labelWidth: 130,
						width: 380,
						inputType: 'password'
					},
					items: [
						{
							name: 'id',
							hidden: true
						},
						{
							fieldLabel: _('old_password'),
							name: 'oPassword',
							allowBlank: false
						},
						{
							fieldLabel: _('new_password'),
							name: 'nPassword',
							allowBlank: false,
							id: 'myAccountPage_nPassword',
							vtype      : 'strength',
							strength   : 24,
							plugins    : {
								ptype : 'passwordstrength'
							}
						},
						{
							fieldLabel: _('re_type_password'),
							name: 'vPassword',
							allowBlank: false,
							vtype: 'password',
							initialPassField: 'myAccountPage_nPassword',
							validateOnChange: true
						}
					]
				}
			],
			buttons: [
				{
					text: _('save'),
					scope: me,
					handler: me.onPasswordSave
				},
				{
					text: _('cancel'),
					scope: me,
					handler: me.onCancel
				}
			],
			listeners: {
				scope: me,
				close: me.onClose
			}

		});
		me.pageBody = [me.myAccountForm];

		me.callParent(arguments);
	},

	onPasswordSave: function(btn){
		var me = this,
			form = me.win.down('form').getForm(),
			values = form.getValues(),
			id = me.myAccountForm.getForm().getRecord().data.id,
			params;

		if(values.nPassword != values.vPassword){
			app.msg(_('oops'), _('password_does_not_match'), true);
			return;
		}

		if(form.isValid()){
			params = {
				id:id,
				old_password:values.oPassword,
				new_password:values.nPassword
			};

			User.updatePassword(params, function(provider, response){

				if(response.result.success){
					app.msg(_('sweet'), _('record_updated'));
					me.win.close();
				}else{
					app.msg(_('oops'), _(response.result.message), true);
				}
			});

		}


	},

	onPasswordChange: function(){
		this.win.show();
	},

	onCancel: function(){
		this.win.close();
	},

	onClose: function(){
		this.win.down('form').getForm().reset();
	},

	onSaveClick:function(btn){
		var me = this,
			form = me.myAccountForm.getForm(),
			record = form.getRecord(),
			values = form.getValues();

		record.set(values);
		record.save({
			callback:function(){
				app.msg(_('sweet'), _('record_update'))
			}
		});
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		var me = this,
			form = me.myAccountForm.getForm();

		this.store.load({
			callback: function(record){
				form.loadRecord(record[0]);
			}
		});

		callback(true);

	}
});

Ext.define('App.view.patient.Patient', {
	extend: 'Ext.panel.Panel',
	requires: [
		'App.ux.AddTabButton',
		'App.view.patient.InsuranceForm'
	],
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	xtype: 'patientdeomgraphics',
	itemId: 'PatientDemographicsPanel',
	newPatient: true,
	pid: null,
	defaultPatientImage: 'resources/images/patientPhotoPlaceholder.jpg',
	defaultQRCodeImage: 'resources/images/QRCodeImage.png',

	initComponent: function(){
		var me = this;

		me.store = Ext.create('App.store.patient.Patient');
		me.patientAlertsStore = Ext.create('App.store.patient.MeaningfulUseAlert');
		me.patientContacsStore = Ext.create('App.store.patient.PatientContacts', {
			autoLoad: false
		});

		me.compactDemographics = eval(g('compact_demographics'));

		me.insTabPanel = Ext.widget('tabpanel', {
			itemId: 'PatientInsurancesPanel',
			flex: 1,
			defaults: {
				autoScroll: true,
				padding: 10
			},
			plugins: [
				{
					ptype: 'AddTabButton',
					iconCls: 'icoAdd',
					toolTip: _('new_insurance'),
					btnText: _('add_insurance'),
					forceText: true,
					panelConfig: {
						xtype: 'patientinsuranceform'
					}
				}
			],
			listeners: {
				scope: me,
				beforeadd: me.insurancePanelAdd
			}
		});

		var configs = {
			items: [
				me.demoForm = Ext.widget('form', {
					action: 'demoFormPanel',
					itemId: 'PatientDemographicForm',
					type: 'anchor',
					border: false,
					autoScroll: true,
					padding: (me.compactDemographics ? 0 : 10),
					fieldDefaults: {
						labelAlign: 'right',
						msgTarget: 'side'
					}
				})
			]
		};

		if(me.compactDemographics){
			configs.items.push(me.insTabPanel);
		}

		configs.bbar = [
			{
				xtype: 'button',
				action: 'readOnly',
				text: _('possible_duplicates'),
				minWidth: 75,
				itemId: 'PatientPossibleDuplicatesBtn'
			},
			'-',
			'->',
			'-',
			{
				xtype: 'button',
				action: 'readOnly',
				text: _('save'),
				itemId: 'PatientDemographicSaveBtn',
				minWidth: 75,
				scope: me,
				handler: me.formSave
			},
			'-',
			{
				xtype: 'button',
				text: _('cancel'),
				action: 'readOnly',
				itemId: 'PatientDemographicCancelBtn',
				minWidth: 75,
				scope: me,
				handler: me.formCancel
			}
		];

		configs.listeners = {
			scope: me,
			beforerender: me.beforePanelRender
		};

		Ext.apply(me, configs);

		me.callParent(arguments);

		if(!me.compactDemographics){

			Ext.Function.defer(function(){
				me.insTabPanel.title = _('insurance');
				me.insTabPanel.addDocked({
					xtype: 'toolbar',
					dock: 'bottom',
					items: [
						'->',
						'-',
						{
							xtype: 'button',
							action: 'readOnly',
							text: _('save'),
							minWidth: 75,
							scope: me,
							handler: me.formSave
						},
						'-',
						{
							xtype: 'button',
							text: _('cancel'),
							action: 'readOnly',
							minWidth: 75,
							scope: me,
							handler: me.formCancel
						}
					]
				});

				me.up('tabpanel').insert(1, me.insTabPanel);
			}, 300);
		}
	},

	beforePanelRender: function(){
		var me = this,
			whoPanel,
			PatientContactsTab;

		me.getFormItems(me.demoForm, 1, function(formPanel){

			var form = me.demoForm.getForm(),
				fname = form.findField('fname'),
				mname = form.findField('mname'),
				lname = form.findField('lname'),
				sex = form.findField('sex'),
				dob = form.findField('DOB');

			if(fname) fname.vtype = 'nonspecialcharacters';
			if(mname) mname.vtype = 'nonspecialcharacters';
			if(lname) lname.vtype = 'nonspecialcharacters';

			if(dob) dob.setMaxValue(new Date());

			if(me.newPatient){
				var crtl = App.app.getController('patient.Patient');

				fname.on('blur', crtl.checkForPossibleDuplicates, crtl);
				lname.on('blur', crtl.checkForPossibleDuplicates, crtl);
				sex.on('blur', crtl.checkForPossibleDuplicates, crtl);
				dob.dateField.on('blur', crtl.checkForPossibleDuplicates, crtl);
			}else{
				whoPanel = formPanel.query('[action=DemographicWhoFieldSet]')[0];
				whoPanel.insert(0,
					me.patientImages = Ext.create('Ext.panel.Panel', {
						action: 'patientImage',
						layout: 'hbox',
						style: 'float:right',
						bodyPadding: 5,
						height: 160,
						width: 255,
						items: [
							{
								xtype: 'image',
								width: 119,
								height: 119,
								itemId: 'image',
								margin: '0 5 0 0',
								src: me.defaultPatientImage
							},
							{
								xtype: 'textareafield',
								name: 'image',
								hidden: true
							},
							{
								xtype: 'image',
								itemId: 'qrcode',
								width: 119,
								height: 119,
								margin: 0,
								src: me.defaultQRCodeImage
							}
						],
						bbar: [
							'-',
							{
								text: _('take_picture'),
								action: 'onWebCam'
								//handler: me.getPhotoIdWindow
							},
							'-',
							'->',
							'-',
							{
								text: _('print_qrcode'),
								scope: me,
								handler: function(){
									window.printQRCode(app.patient.pid);
								}
							},
							'-'
						]
					})
				);

				//Patient Contacts
				PatientContactsTab = Ext.ComponentQuery.query('#Demographics')[0];
				PatientContactsTab.add(
					me.patientContacts = Ext.create('Ext.grid.Panel', {
						itemId: 'PatientSummaryContactsPanel',
						bodyPadding: 0,
						title: _('contacts'),
						store: me.patientContacsStore,
						columns: [
							{
								text: _('name'),
								dataIndex: 'fullname',
								flex: 1
							},
							{
								header: _('relationship'),
								dataIndex: 'relationship_name'
							},
							{
								header: _('active'),
								dataIndex: 'active',
								renderer: me.boolRenderer
							}
						],
						plugins: Ext.create('App.ux.grid.RowFormEditing', {
							autoCancel: false,
							errorSummary: false,
							clicksToEdit: 2,
							items: [
								{
									xtype: 'container',
									layout: 'hbox',
									defaults: {
										margin: '5 10 0 0'
									},
									items: [
										{
											xtype: 'container',
											layout: 'vbox',
											defaults: {
												layout: '50%',
												margin: '5 10 0 0'
											},
											items: [
												{
													xtype: 'fieldcontainer',
													layout: 'hbox',
													fieldLabel: _('name'),
													defaults: {
														layout: '100%',
														xtype: 'textfield'
													},
													items: [
														{
															name: 'first_name',
															emptyText: _('first_name'),
															width: 150,
															maxLength: 100,
															allowBlank: false
														},
														{
															name: 'middle_name',
															emptyText: _('middle_name'),
															width: 120,
															maxLength: 100
														},
														{
															name: 'last_name',
															emptyText: _('last_name'),
															width: 150,
															maxLength: 100
														}
													]
												},
												{
													xtype: 'gaiaehr.listcombo',
													fieldLabel: _('relationship'),
													name: 'relationship',
													displayField: 'option_name',
													valueField: 'option_value',
													width: 350,
													loadStore: true,
													queryMode: 'local',
													list: 134
												},
												{
													xtype: 'fieldcontainer',
													layout: 'hbox',
													fieldLabel: _('phone'),
													defaults: {
														xtype: 'textfield',
														vtype: 'numeric'
													},
													items: [
														{
															name: 'phone_use_code',
															emptyText: _('code'),
															width: 50,
															maxLength: 4
														},
														{
															name: 'phone_area_code',
															emptyText: _('area_code'),
															width: 50,
															maxLength: 4
														},
														{
															name: 'phone_local_number',
															emptyText: _('local_number'),
															width: 120,
															maxLength: 7
														}
													]
												},
												{
													fieldLabel: _('address'),
													xtype: 'textfield',
													name: 'street_mailing_address',
													emptyText: _('street'),
													width: 610,
													maxLength: 200
												},
												{
													xtype: 'fieldcontainer',
													layout: 'hbox',
													fieldLabel: _('address_cont'),
													defaults: {
														xtype: 'textfield'
													},
													items: [
														{
															name: 'city',
															emptyText: _('city'),
															width: 125,
															maxLength: 70
														},
														{
															xtype: 'gaiaehr.listcombo',
															name: 'state',
															emptyText: _('state'),
															displayField: 'option_name',
															valueField: 'option_value',
															width: 125,
															loadStore: true,
															queryMode: 'local',
															list: 20
														},
														{
															xtype: 'gaiaehr.listcombo',
															name: 'country',
															emptyText: _('country'),
															displayField: 'option_name',
															valueField: 'option_value',
															width: 125,
															loadStore: true,
															queryMode: 'local',
															list: 3
														},
														{
															emptyText: _('zip'),
															name: 'zip',
															width: 125,
															maxLength: 20
														}
													]
												}
											]
										},
										{
											xtype: 'fieldcontainer',
											layout: 'vbox',
											defaults: {
												layout: '50%',
												margin: '5 10 0 0'
											},
											items: [
												{
													xtype: 'gaiaehr.listcombo',
													name: 'publicity',
													fieldLabel: _('publicity'),
													emptyText: _('select'),
													displayField: 'option_name',
													valueField: 'option_value',
													width: 400,
													loadStore: true,
													queryMode: 'local',
													list: 132
												},
												{
													xtype: 'checkboxfield',
													name: 'active',
													fieldLabel: _('active')
												}
											]
										}
									]
								}
							]
						}),
						tbar: [
							{
								text: _('add_contact'),
								iconCls: 'icoAdd',
								action: 'patientContact',
								handler: me.onAddNewContact
							}
						]
					})
				);
			}
		});
	},

	onAddNewContact: function(btn){
		var grid = btn.up('grid'),
			store = grid.store,
			record;

		record = {
			created_date: new Date(),
			pid: app.patient.pid,
			uid: app.user.id
		};

		grid.plugins[0].cancelEdit();
		store.insert(0, record);
		grid.plugins[0].startEdit(0, 0);
	},

	insurancePanelAdd: function(tapPanel, panel){
		var me = this,
			record = panel.insurance || Ext.create('App.model.patient.Insurance', {pid: me.pid});

		panel.title = _('insurance') + ' (' + (record.data.insurance_type ? record.data.insurance_type : _('new')) + ')';

		me.insuranceFormLoadRecord(panel, record);
		if(record.data.image !== '') panel.down('image').setSrc(record.data.image);
	},

	insuranceFormLoadRecord: function(form, record){
		form.getForm().loadRecord(record);
		app.fireEvent('insurancerecordload', form, record);
	},

	getValidInsurances: function(){
		var me = this,
			forms = me.insTabPanel.items.items,
			records = [],
			form,
			rec;

		for(var i = 0; i < forms.length; i++){
			form = forms[i].getForm();
			if(!form.isValid()){
				me.insTabPanel.setActiveTab(forms[i]);
				return false;
			}
			rec = form.getRecord();
			app.fireEvent('beforepatientinsuranceset', form, rec);
			rec.set(form.getValues());
			app.fireEvent('afterpatientinsuranceset', form, rec);
			records.push(rec);
		}
		return records;
	},

	getPatientImages: function(record){
		var me = this;
		if(me.patientImages){
			me.patientImages.getComponent('image').setSrc(
				(record.data.image !== '' ? record.data.image : me.defaultPatientImage)
			);
		}
		if(me.patientImages){
			me.patientImages.getComponent('qrcode').setSrc(
				(record.data.qrcode !== '' ? record.data.qrcode : me.defaultQRCodeImage)
			);
		}
	},

	getPatientContacts: function(pid){
		var me = this;

		me.patientContacsStore.clearFilter(true);
		me.patientContacsStore.load({
			params: {
				pid: pid
			},
			filters: [
				{
					property: 'pid',
					value: pid
				}
			]
		});
	},

	/**
	 * verify the patient required info and add a yellow background if empty
	 */
	verifyPatientRequiredInfo: function(){
		var me = this,
			field;
		me.patientAlertsStore.load({
			scope: me,
			params: {pid: me.pid},
			callback: function(records, operation, success){
				for(var i = 0; i < records.length; i++){
					field = me.demoForm.getForm().findField(records[i].data.name);
					if(records[i].data.val){
						if(field) field.removeCls('x-field-yellow');
					}else{
						if(field) field.addCls('x-field-yellow');
					}
				}
			}
		});
	},

	/**
	 * allow to edit the field if the filed has no data
	 * @param fields
	 */
	readOnlyFields: function(fields){
		//        for(var i = 0; i < fields.items.length; i++){
		//            var f = fields.items[i], v = f.getValue(), n = f.name;
		//            if(n == 'SS' || n == 'DOB' || n == 'sex'){
		//                if(v == null || v == ''){
		//                    f.setReadOnly(false);
		//                }else{
		//                    f.setReadOnly(true);
		//                }
		//            }
		//        }
	},

	formSave: function(){
		var me = this,
			form = me.demoForm.getForm(),
			record = form.getRecord(),
			values = form.getValues(),
			insRecs = me.getValidInsurances();

		if(form.isValid() && insRecs !== false){
			record.set(values);

			// fire global event
			app.fireEvent('beforedemographicssave', record, me);

			record.save({
				scope: me,
				callback: function(record){

					app.setPatient(record.data.pid, null, null, function(){

						var insStore = record.insurance();

						for(var i = 0; i < insRecs.length; i++){
							if(insRecs[i].data.id === 0){
								insStore.add(insRecs[i]);
							}
						}

						insStore.sync();

						if(me.newPatient){
							app.openPatientSummary();
						}else{
							me.getPatientImages(record);
							me.verifyPatientRequiredInfo();
							me.readOnlyFields(form.getFields());
						}
					});

					// fire global event
					app.fireEvent('afterdemographicssave', record, me);

					me.msg(_('sweet'), _('record_saved'));
					app.AuditLog('Patient new record ' + (me.newPatient ? 'created' : 'updated'));
				}
			});
		}else{
			me.msg(_('oops'), _('missing_required_data'), true);
		}
	},

	formCancel: function(btn){
		var form = btn.up('form').getForm(), record = form.getRecord();
		form.loadRecord(record);
	},

	loadNew: function(){
		var patient = Ext.create('App.model.patient.Patient', {
			'create_uid': app.user.id,
			'update_uid': app.user.id,
			'create_date': new Date(),
			'update_date': new Date(),
			'DOB': '0000-00-00 00:00:00'
		});

		// GAIAEH-177 GAIAEH-173 170.302.r Audit Log (core)
		app.AuditLog('Patient new record created');
		this.demoForm.getForm().loadRecord(patient);
	},

	loadPatient: function(pid){
		var me = this,
			form = me.demoForm.getForm();

		me.pid = pid;

		form.reset();

		// GAIAEH-177 GAIAEH-173 170.302.r Audit Log (core)
		app.AuditLog('Patient record viewed');

		me.getPatientContacts(pid);

		app.patient.record.insurance().load({
			filters: [
				{
					property: 'pid',
					value: app.patient.record.data.pid
				}
			],
			callback: function(records){

				form.loadRecord(app.patient.record);
				me.setReadOnly(app.patient.readOnly);
				me.setButtonsDisabled(me.query('button[action="readOnly"]'));
				me.verifyPatientRequiredInfo();

				// set the insurance panel
				me.insTabPanel.removeAll(true);
				for(var i = 0; i < records.length; i++){
					me.insTabPanel.add(
						Ext.widget('patientinsuranceform', {
							closable: false,
							insurance: records[i]
						})
					);
				}

				if(me.insTabPanel.items.length !== 0) me.insTabPanel.setActiveTab(0);
			}
		});
	}
});
Ext.define('App.view.patient.Summary', {
	extend: 'App.ux.RenderPanel',
	pageTitle: _('patient_summary'),
	pageLayout: 'border',
	requires: [
		'Ext.XTemplate',
		'Ext.ux.IFrame',
		'App.view.patient.Documents',
		'App.view.patient.CCD',
		'App.ux.ManagedIframe',

		'App.view.patient.Patient',
		'App.view.patient.Reminders'
	],
	itemId: 'PatientSummaryPanel',
	showRating: true,
	pid: null,
	demographicsData: null,
	initComponent: function(){
		var me = this;

		me.stores = [];

		app.on('patientset', function(patient){
			if(!me.hidden){
				me.updateTitle(
					patient.name +
					' - ' +
					patient.sexSymbol +
					' - ' +
					patient.age.str +
					' - (' +
					_('patient_summary') +
					')',
					app.patient.readOnly, null
				);
			}

		}, me);

		me.pageBody = [
			me.tabPanel = Ext.widget('tabpanel', {
				flex: 1,
				margin: '3 0 0 0',
				bodyPadding: 0,
				frame: false,
				border: false,
				plain: true,
				region: 'center',
				layout: 'fit',
				itemId: 'PatientSummaryTabPanel'
			})
		];

		me.sidePanelItems = [];

		if(a('access_patient_visits')){

			me.stores.push(me.patientEncountersStore = Ext.create('App.store.patient.Encounters', {
				autoLoad: false
			}));

			Ext.Array.push(me.sidePanelItems, {
				xtype: 'grid',
				title: _('encounters'),
				itemId: 'PatientSummaryEncountersPanel',
				hideHeaders: true,
				store: me.patientEncountersStore,
				columns: [
					{
						xtype: 'datecolumn',
						width: 80,
						dataIndex: 'service_date',
						format: g('date_display_format')
					},
					{
						dataIndex: 'brief_description',
						flex: 1
					}
				]
			});
		}

		if(a('access_patient_medications')){
			me.stores.push(me.patientMedicationsStore = Ext.create('App.store.patient.Medications', {
				autoLoad: false
			}));

			Ext.Array.push(me.sidePanelItems, {
				xtype: 'grid',
				title: _('active_medications'),
				itemId: 'PatientSummaryMedicationsPanel',
				hideHeaders: true,
				store: me.patientMedicationsStore,
				tools: [
					{
						xtype: 'button',
						text: _('details'),
						action: 'medications',
						scope: me,
						handler: me.medicalWin
					}
				],
				columns: [
					{
						header: _('name'),
						dataIndex: 'STR',
						flex: 1
					},
					{
						text: _('alert'),
						width: 55,
						dataIndex: 'alert',
						renderer: me.boolRenderer
					}
				]
			});
		}

		if(a('access_patient_immunizations')){

			me.stores.push(me.immuCheckListStore = Ext.create('App.store.patient.ImmunizationCheck', {
				autoLoad: false
			}));

			Ext.Array.push(me.sidePanelItems, {
				xtype: 'grid',
				title: _('immunizations'),
				itemId: 'PatientSummaryImmunizationPanel',
				hideHeaders: true,
				store: me.immuCheckListStore,
				region: 'center',
				tools: [
					{
						xtype: 'button',
						text: _('details'),
						action: 'immunization',
						scope: me,
						handler: me.medicalWin
					}
				],
				columns: [
					{
						header: _('name'),
						dataIndex: 'vaccine_name',
						flex: 1
					},
					{
						text: _('alert'),
						width: 55,
						dataIndex: 'alert',
						renderer: me.alertRenderer
					}
				]
			});
		}

		if(a('access_patient_allergies')){

			me.stores.push(me.patientAllergiesListStore = Ext.create('App.store.patient.Allergies', {
				autoLoad: false
			}));

			Ext.Array.push(me.sidePanelItems, {
				xtype: 'grid',
				title: _('allergies'),
				itemId: 'PatientSummaryAllergiesPanel',
				hideHeaders: true,
				store: me.patientAllergiesListStore,
				region: 'center',
				tools: [
					{
						xtype: 'button',
						text: _('details'),
						action: 'allergies',
						scope: me,
						handler: me.medicalWin
					}
				],
				columns: [
					{
						header: _('name'),
						dataIndex: 'allergy',
						flex: 1
					},
					{
						text: _('alert'),
						width: 55,
						dataIndex: 'alert',
						renderer: me.boolRenderer
					}
				]
			});
		}

		if(a('access_active_problems')){

			me.stores.push(me.patientActiveProblemsStore = Ext.create('App.store.patient.PatientActiveProblems', {
				autoLoad: false
			}));

			Ext.Array.push(me.sidePanelItems, {
				xtype: 'grid',
				title: _('active_problems'),
				itemId: 'PatientSummaryActiveProblemsPanel',
				hideHeaders: true,
				store: me.patientActiveProblemsStore,
				tools: [
					{
						xtype: 'button',
						text: _('details'),
						action: 'issues',
						scope: me,
						handler: me.medicalWin
					}
				],
				columns: [
					{
						header: _('name'),
						dataIndex: 'code_text',
						flex: 1
					},
					{
						text: _('alert'),
						width: 55,
						dataIndex: 'alert',
						renderer: me.boolRenderer
					}
				]

			});
		}

		if(a('access_patient_calendar_events')){

			//me.stores.push(me.patientCalendarEventsStore = Ext.create('App.store.patient.PatientCalendarEvents', {
			//	autoLoad: false
			//}));
			//
			//Ext.Array.push(me.sidePanelItems, {
			//	xtype: 'grid',
			//	title: _('appointments'),
			//	itemId: 'AppointmentsPanel',
			//	hideHeaders: true,
			//	disableSelection: true,
			//	store: me.patientCalendarEventsStore,
			//	columns: [
			//		{
			//			xtype: 'datecolumn',
			//			format: 'F j, Y, g:i a',
			//			dataIndex: 'start',
			//			flex: 1
			//		}
			//	]
			//});
		}

		if(me.sidePanelItems.length > 0){
			me.sidePanel = Ext.widget('panel', {
				width: 250,
				bodyPadding: 0,
				frame: false,
				border: false,
				bodyBorder: true,
				region: 'east',
				split: true,
				layout: {
					type: 'vbox',
					align: 'stretch'
				},
				defaults: {
					margin: '5 5 0 5'
				},
				items: me.sidePanelItems
			});

			Ext.Array.push(me.pageBody, me.sidePanel);
		}

		if(a('access_demographics')){
            // Dynamically Generated by Form Builder Engine
            me.demographics = me.tabPanel.add({
				xtype: 'patientdeomgraphics',
				newPatient: false,
				autoScroll: true,
				title: _('demographics')
            });
		}

		if(a('access_patient_disclosures')){
			me.tabPanel.add({
				xtype: 'grid',
				title: _('disclosures'),
				itemId: 'PatientSummaryDisclosuresPanel',
				bodyPadding: 0,
				store: Ext.create('App.store.patient.Disclosures', {
					autoSync: false,
					autoLoad: false
				}),
				plugins: Ext.create('Ext.grid.plugin.RowEditing', {
					autoCancel: false,
					errorSummary: false,
					clicksToEdit: 2
				}),
				columns: [
					{
						xtype: 'datecolumn',
						format: 'Y-m-d h:i:s',
						text: _('date'),
                        with: 220,
						dataIndex: 'date'
					},
					{
						header: _('type'),
						dataIndex: 'type',
						editor: {
							xtype: 'textfield'
						}
					},
					{
						text: _('description'),
						dataIndex: 'description',
						flex: 1,
						editor: {
							xtype: 'textfield'
						}
					}
				],
				tbar: [
					{
						text: _('disclosure'),
						iconCls: 'icoAdd',
						action: 'disclosure',
						handler: me.onAddNew
					}
				]
			});
		}

		if(a('access_patient_notes')){
			me.tabPanel.add({
				title: _('notes'),
				itemId: 'PatientSummeryNotesPanel',
				xtype: 'grid',
				bodyPadding: 0,
				store: Ext.create('App.store.patient.Notes', {
					autoSync: false,
					autoLoad: false
				}),
				plugins: Ext.create('Ext.grid.plugin.RowEditing', {
					autoCancel: false,
					errorSummary: false,
					clicksToEdit: 2
				}),
				columns: [
					{
						xtype: 'datecolumn',
						text: _('date'),
						format: 'Y-m-d',
						dataIndex: 'date'
					},
					{
						header: _('type'),
						dataIndex: 'type',
						editor: {
							xtype: 'textfield'
						}
					},
					{
						text: _('note'),
						dataIndex: 'body',
						flex: 1,
						editor: {
							xtype: 'textfield'
						}
					},
					{
						text: _('user'),
						width: 225,
						dataIndex: 'user_name'
					}
				],
				tbar: [
					{
						text: _('add_note'),
						iconCls: 'icoAdd',
						action: 'note',
						handler: me.onAddNew
					}
				]
			});
		}

		if(a('access_patient_reminders')){
			me.tabPanel.add({
				itemId: 'PatientSummaryRemindersPanel',
				xtype: 'patientreminderspanel',
				bodyPadding: 0
			});
		}

		if(a('access_patient_documents')){
			me.tabPanel.add({
				xtype: 'patientdocumentspanel',
				border: false
			})
		}

		if(a('access_patient_preventive_care_alerts')){
			//me.tabPanel.add({
			//	title: _('dismissed_preventive_care_alerts'),
			//	xtype: 'grid',
			//	itemId: 'PatientSummaryPreventiveCareAlertsPanel',
			//	store: Ext.create('App.store.patient.DismissedAlerts', {
			//		//listeners
			//	}),
			//	columns: [
			//		{
			//			header: _('description'),
			//			dataIndex: 'description'
			//		},
			//		{
			//			xtype: 'datecolumn',
			//			header: _('date'),
			//			dataIndex: 'date',
			//			format: 'Y-m-d'
			//
			//		},
			//		{
			//			header: _('reason'),
			//			dataIndex: 'reason',
			//			flex: true
			//
			//		},
			//		{
			//			header: _('observation'),
			//			dataIndex: 'observation',
			//			flex: true
			//		},
			//		{
			//			header: _('dismissed'),
			//			dataIndex: 'dismiss',
			//			width: 60,
			//			renderer: me.boolRenderer
			//		}
			//	],
			//	plugins: Ext.create('App.ux.grid.RowFormEditing', {
			//		autoCancel: false,
			//		errorSummary: false,
			//		clicksToEdit: 1,
			//		items: [
			//			{
			//				title: 'general',
			//				xtype: 'container',
			//				padding: 10,
			//				layout: 'vbox',
			//				items: [
			//					{
			//						/**
			//						 * Line one
			//						 */
			//						xtype: 'fieldcontainer',
			//						layout: 'hbox',
			//						defaults: {
			//							margin: '0 10 5 0'
			//						},
			//						items: [
			//							{
			//								xtype: 'textfield',
			//								name: 'reason',
			//								fieldLabel: _('reason'),
			//								width: 585,
			//								labelWidth: 70,
			//								action: 'reason'
			//							}
			//						]
			//
			//					},
			//					{
			//						/**
			//						 * Line two
			//						 */
			//						xtype: 'fieldcontainer',
			//						layout: 'hbox',
			//						defaults: {
			//							margin: '0 10 5 0'
			//						},
			//						items: [
			//							{
			//								xtype: 'textfield',
			//								fieldLabel: _('observation'),
			//								name: 'observation',
			//								width: 250,
			//								labelWidth: 70,
			//								action: 'observation'
			//							},
			//							{
			//								fieldLabel: _('date'),
			//								xtype: 'datefield',
			//								action: 'date',
			//								width: 200,
			//								labelWidth: 40,
			//								format: g('date_display_format'),
			//								name: 'date'
			//
			//							},
			//							{
			//								xtype: 'checkboxfield',
			//								name: 'dismiss',
			//								fieldLabel: _('dismiss_alert')
			//
			//							}
			//						]
			//
			//					}
			//				]
			//			}
			//		]
			//
			//	})
			//});
		}

		if(a('access_patient_ccd')){
			me.reportPanel = me.tabPanel.add({
				xtype: 'patientccdpanel'
			});
		}

		me.callParent();
	},

	onAddNew: function(btn){
		var grid = btn.up('grid'),
			store = grid.store,
			record;

		if(btn.action == 'disclosure'){
			record = {
				date: new Date(),
				pid: app.patient.pid,
				active: 1
			};
		}else if(btn.action == 'note'){
			record = {
				date: new Date(),
				pid: app.patient.pid,
				uid: app.user.id,
				eid: app.patient.eid
			};
		}

		grid.plugins[0].cancelEdit();
		store.insert(0, record);
		grid.plugins[0].startEdit(0, 0);
	},

	medicalWin: function(btn){
		app.onMedicalWin(btn.action);
	},

	/**
	 * verify the patient required info and add a yellow background if empty
	 */
	verifyPatientRequiredInfo: function(){
		var me = this, formPanel = me.query('[action="demoFormPanel"]')[0], field;
		me.patientAlertsStore.load({
			scope: me,
			params: {
				pid: me.pid
			},
			callback: function(records, operation, success){
				for(var i = 0; i < records.length; i++){
					field = formPanel.getForm().findField(records[i].data.name);
					if(records[i].data.val){
						if(field) field.removeCls('x-field-yellow');
					}else{
						if(field) field.addCls('x-field-yellow');
					}
				}
			}
		});
	},

	/**
	 * load all the stores in the summaryStores array
	 */
	loadStores: function(){
		var me = this;

		for(var i = 0; i < me.stores.length; i++){
			me.stores[i].clearFilter(true);
			me.stores[i].load({
				params: {
					pid: me.pid
				},
				filters: [
					{
						property: 'pid',
						value: me.pid
					}
				]
			});
		}
	},

	loadPatient: function(){
		var me = this,
			billingPanel;

		me.el.mask(_('loading...'));
		/**
		 * convenient way to refer to current pid within this panel
		 * @type {*}
		 */
		me.pid = app.patient.pid;
		/**
		 * get current set patient info
		 * @type {*}
		 */
		var patient = app.patient;

		/**
		 * update panel main title to reflect the patient name and if the patient is read only
		 */
		me.updateTitle(
            patient.name +
            ' - ' +
            patient.sexSymbol +
            ' - ' +
            patient.age.str +
            ' - (' +
            _('patient_summary') +
            ')',
            app.patient.readOnly, null
        );
		/**
		 * verify if the patient is on read only mode
		 */
		me.setReadOnly(app.patient.readOnly);
		me.setButtonsDisabled(me.query('button[action="readOnly"]'));

		if(a('access_demographics')) me.demographics.loadPatient(me.pid);

//		/**
//		 * get billing info if user has access
//		 */
//		if(a('access_patient_billing')){
//			billingPanel = me.tabPanel.getComponent('balancePanel');
//			Fees.getPatientBalance({pid: me.pid},
//				function(balance){
//					billingPanel.update(_('account_balance') + ': $' + balance);
//				}
//			);
//		}
		/**
		 * reset tab panel to the first tap
		 */
		me.tabPanel.setActiveTab(0);
		/**
		 * load all the stores
		 */
		me.loadStores();
		me.el.unmask();
	},
	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		var me = this;
		if(me.checkIfCurrPatient()){
			me.loadPatient();
			if(typeof callback == 'function') callback(true);
		}else{
			callback(false);
			me.pid = null;
			me.currPatientError();
		}
	}
});

Ext.define('App.controller.administration.Roles', {
	extend: 'Ext.app.Controller',

	requires: [
		'App.model.administration.AclGroupPerm'
	],

	refs: [
		{
			ref: 'AdministrationRoleGroupCombo',
			selector: '#AdministrationRoleGroupCombo'
		},
		{
			ref: 'AdministrationRoleGrid',
			selector: '#AdministrationRoleGrid'
		}
	],

	init: function(){
		this.control({
			'#AdministrationRolePanel': {
				render: this.onAdministrationRolePanelRender
			},
			'#AdministrationRoleGrid': {
				beforeedit: this.beforeCellEdit
			},
			'#AdministrationRoleGroupCombo': {
				select: this.doAdministrationRoleGridReconfigure
			},
			'button[action=adminAclAddRole]': {
				click: this.doAddRole
			},
			'button[action=adminAclSave]': {
				click: this.doSaveAcl
			},
			'button[action=adminAclCancel]': {
				click: this.doCancelAcl
			}
		});
	},

	onAdministrationRolePanelRender: function(){
		var me = this,
			cmb = me.getAdministrationRoleGroupCombo(),
			store = cmb.getStore();

		store.load({
			callback: function(records){
				cmb.select(records[0]);
				me.doAdministrationRoleGridReconfigure();
			}
		});

	},

	doSaveAcl: function(){
		var me = this,
			store = this.getAdministrationRoleGrid().getStore();

		if(store.getUpdatedRecords().length > 0){
			me.getAdministrationRoleGrid().el.mask(_('saving'));
		}

		store.sync({
			callback: function(response){
				app.msg(_('sweet'), _('record_saved'));
				me.getAdministrationRoleGrid().el.unmask();
			}
		});
	},

	doCancelAcl: function(){
		this.getAdministrationRoleGrid().getStore().rejectChanges();
	},

	beforeCellEdit: function(editor, e){
		return e.field != 'title';
	},

	doAdministrationRoleGridReconfigure: function(){
		var me = this,
			cmb = me.getAdministrationRoleGroupCombo(),
			group_id = cmb.getValue(),
			grid = me.getAdministrationRoleGrid(),
			fields = [
				{
					name: 'id',
					type: 'int'
				},
				{
					name: 'title',
					type: 'string'
				},
				{
					name: 'group_id',
					type: 'int'
				},
				{
					name: 'category',
					type: 'string'
				}
			], columns, store, model;

		// add mask to view while we get the data and grid configurations
		grid.view.el.mask('Loading');
		// Ext.direct method to get grid configuration and data

		ACL.getGroupPerms({group_id: group_id}, function(response){
			// new columns
			columns = response.columns;

			// set model fields merging default fields and role fields
			fields = fields.concat(response.fields);
			me.getModel('administration.AclGroupPerm').setFields(fields);

			var store = Ext.create('Ext.data.Store', {
				model: 'App.model.administration.AclGroupPerm',
				groupField: 'category'
			});

			// add raw data to the store
			store.loadRawData(response.data);

			// add the checkbox editor and renderer to role fields
			for(var i = 0; i < columns.length; i++){
				columns[i].editor = {xtype: "checkbox"};
				columns[i].renderer = app.boolRenderer;
			}

			columns.push({
				flex: 1
			});

			// reconfigure grid
			grid.reconfigure(store, columns);
			// remove grid view mask
			grid.view.el.unmask();

		});
	},

	doAddRole: function(){
		var me = this,
			record = Ext.create('App.model.administration.AclRoles', {
				group_id: me.getAdministrationRoleGroupCombo().getValue()
			});

		me.getRoleWindow().show();
		me.roleWindow.down('form').getForm().loadRecord(record);
	},

	doSaveRole: function(){
		var me = this,
			panel = me.roleWindow.down('form'),
			form = panel.getForm(),
			record = form.getRecord(),
			values = form.getValues();

		if(form.isValid()){
			panel.el.mask(_('be_right_back'));
			record.set(values);
			record.save({
				callback: function(rec){
					me.doAdministrationRoleGridReconfigure();
					panel.el.unmask();
					me.roleWindow.close();
				}
			});
		}
	},

	doCancelRole: function(){
		this.roleWindow.close();
	},

	getRoleWindow: function(){
		var me = this;

		me.roleWindow = Ext.widget('window', {
			title: _('new_role'),
			items: [
				{
					xtype: 'form',
					border: false,
					bodyPadding: 10,
					items: [
						{
							xtype: 'textfield',
							fieldLabel: _('role_name'),
							name: 'role_name',
							allowBlank: false
						},
						{
							xtype: 'checkbox',
							fieldLabel: _('active'),
							name: 'active'
						}
					]
				}
			],
			buttons: [
				{
					text: _('cancel'),
					cls: 'cancelBtn',
					scope: me,
					handler: me.doCancelRole,
					action: 'adminAclRoleCancel'
				},
				{
					text: _('save'),
					cls: 'saveBtn',
					scope: me,
					handler: me.doSaveRole,
					action: 'adminAclRoleSave'
				}
			]
		});

		return me.roleWindow;
	}

});
Ext.define('App.controller.DocumentViewer', {
    extend: 'Ext.app.Controller',
	requires:[
		'App.view.patient.windows.ArchiveDocument'
	],
	refs: [
        {
            ref:'DocumentViewerWindow',
            selector:'documentviewerwindow'
        },
        {
            ref:'DocumentViewerWindow',
            selector:'documentviewerwindow > form'
        },
		{
			ref:'ArchiveDocumentBtn',
			selector:'documentviewerwindow #archiveDocumentBtn'
		},
        {
            ref:'ArchiveWindow',
            selector:'patientarchivedocumentwindow'
        },
        {
            ref:'ArchiveForm',
            selector:'patientarchivedocumentwindow > form'
        }
	],

	init: function() {
		var me = this;

		me.control({
			'documentviewerwindow':{
				close: me.onViewerDocumentsWinClose
			},
			'documentviewerwindow #archiveDocumentBtn': {
				click: me.onArchiveDocumentBtnClick
			},
			'patientarchivedocumentwindow #archiveBtn': {
				click: me.onArchiveBtnClick
			}
		});
	},

	onArchiveBtnClick: function(btn){
		var win = btn.up('window'),
			form = win.down('form').getForm(),
			values = form.getValues();

		if(form.isValid()){
			values.pid = app.patient.pid;
			values.eid = app.patient.eid;
			values.uid = app.user.id;
			DocumentHandler.transferTempDocument(values, function(provider, response){

				if(response.result.success){
					if(window.dual){
						dual.msg(_('sweet'), 'document_transferred');
					}else{
						app.msg(_('sweet'), 'document_transferred');
					}
					win.documentWindow.close();
					win.close();
				}else{
					if(dual){
						dual.msg(_('oops'), 'document_transfer_failed', true);
					}else{
						app.msg(_('oops'), 'document_transfer_failed', true);
					}
				}
			});
		}
	},

	onArchiveDocumentBtnClick: function(btn){
		var win = btn.up('window'),
			values = {
				id: win.documentId,
				docType: win.documentType,
				title: win.documentType +  ' ' + _('order')
			};
		var archive = Ext.widget('patientarchivedocumentwindow',{
			documentWindow: win
		});
		archive.down('form').getForm().setValues(values);
	},

	onViewerDocumentsWinClose: function(win){
		DocumentHandler.destroyTempDocument({id: win.documentId});
	},

	doDocumentView: function(id, type, site){

		var windows = Ext.ComponentQuery.query('documentviewerwindow'),
			src = 'dataProvider/DocumentViewer.php?site=' + (site || app.user.site) + '&id=' + id + '&token=' + app.user.token,
			win;

		if(typeof type != 'undefined') src += '&temp=' + type;

		win = Ext.create('App.view.patient.windows.DocumentViewer',{
			documentType: type,
			documentId: id,
			items:[
				{
					xtype:'miframe',
					autoMask:false,
					src: src
				}
			]
		});

		if(windows.length > 0){
			var last = windows[(windows.length - 1)];
			for(var i=0; i < windows.length; i++){
				windows[i].toFront();
			}
			win.showAt((last.x + 25), (last.y + 5));

		}else{
			win.show();
		}
	}


});
Ext.define('App.controller.Scanner', {
	extend: 'Ext.app.Controller',
	requires: [
		'App.view.scanner.Window'
	],
	refs: [
		{
			ref: 'ScannerWindow',
			selector: '#ScannerWindow'
		},
		{
			ref: 'ScannerImage',
			selector: '#ScannerImage'
		},
		{
			ref: 'ScannerCombo',
			selector: '#ScannerCombo'
		},
		{
			ref: 'ScannerScanBtn',
			selector: '#ScannerScanBtn'
		},
		{
			ref: 'ScannerOkBtn',
			selector: '#ScannerOkBtn'
		}
	],

	/**
	 *
	 */
	ws: null,

	connected: false,

	init: function(){
		var me = this;

		me.control({
			'viewport': {
				afterrender: me.doWebSocketConnect
			},
			'#ScannerWindow': {
				show: me.onScannerWindowShow,
				close: me.onScannerWindowClose
			},
			'#ScannerScanBtn': {
				click: me.onScannerScanBtnClick
			},
			'#ScannerImageEditBtn': {
				toggle: me.onScannerImageEditBtnClick
			},
			'#ScannerOkBtn': {
				click: me.onScannerOkBtnClick
			}
		});
	},

	onScannerScanBtnClick: function(){
		this.doScan();
	},

	doLoadScannersCombo: function(data){
		var combo = this.getScannerCombo(),
			store = combo.getStore(),
            checked;

		store.loadData(data);
		checked = store.findRecord('Checked', 'true');
		if(checked){
			combo.select(checked);
		}
	},

	doLoadScannedDocument: function(data){
		var me = this,
			image = me.getScannerImage();

		image.setSrc('data:image/png;base64,' + data);
		me.getScannerWindow().body.el.unmask();
		me.getScannerWindow().doComponentLayout();
		me.getScannerWindow().down('toolbar').enable();
	},

	getSources: function(){
		var me = this;
		me.ws.send('getSources');
	},

	onScannerWindowShow: function(){
		//this.doWebSocketConnect();
	},

	onScannerWindowClose: function(){
		//this.ws.close();
	},

	doWebSocketConnect: function(){
		var me = this;

		if(me.connected) return;
		me.ws = new WebSocket('wss://localhost:8443/TwainService');

		me.ws.onopen = function(evt){
			me.conencted = true;
			me.getScanWindow();
			me.getSources();
			app.fireEvent('scanconnected', this);
		};

		me.ws.onerror = function(){
			say(_('no_scanner_service_found'));
		};

		me.ws.onmessage = function(evt){
			var response = eval('(' + evt.data + ')');

			if(response.action == 'getSources'){
				me.doLoadScannersCombo(response.data);
			}else if(response.action == 'getDocument'){
				me.doLoadScannedDocument(response.data);
			}
		};

		me.ws.onclose = function(e){
			me.conencted = false;
			app.fireEvent('scandisconnected', this);
		};
	},

	onScannerImageEditBtnClick: function(btn, pressed){
		if(pressed){
			this.dkrm = new Darkroom('#ScannerImage', {
				save: false,
				replaceDom: false
			});
			btn.setText(_('editing'));
		}else{
			this.dkrm.selfDestroy();
			delete this.dkrm;
			btn.setText(_('edit'));
		}

		this.getScannerScanBtn().setDisabled(pressed);
		this.getScannerOkBtn().setDisabled(pressed);
	},

	getDocument: function(){
		return this.getScannerImage().imgEl.dom.src;
	},

	doScan: function(){
		var me = this,
			combo = this.getScannerCombo();

		me.getScannerWindow().down('toolbar').disable();
		me.getScannerWindow().body.el.mask(_('scanning_document'));
		me.ws.send('getDocument:' + combo.getValue());
	},

	onScannerOkBtnClick: function(){
		app.fireEvent('scancompleted', this, this.getDocument());
		this.getScannerWindow().close();
	},

	getScanWindow: function(){
		if(!this.getScannerWindow()){
			Ext.create('App.view.scanner.Window');
		}
		return this.getScannerWindow();
	},

	initScan: function(){
		this.getScanWindow();
		this.getScannerWindow().show();
		//if(this.getScannerCombo().getValue() !== ''){
		//	this.doScan();
		//}
	}
});

Ext.define('App.controller.Notification', {
	extend: 'Ext.app.Controller',
	requires: [
		'App.view.notifications.Grid'
	],
	refs: [
		{
			ref: 'UserSplitButton',
			selector: '#userSplitButton'
		},
		{
			ref: 'NotificationsGrid',
			selector: 'notificationsgrid'
		}
	],

	init: function(){
		var me = this;

		me.control({
			'viewport': {
				beforerender: me.onViewportBeforeRender
			},
			'#userSplitButton': {
				badgeclick: me.onUserSplitButtonBadgeClick
			},
			'notificationsgrid': {
				itemclick: me.onNotificationsGridItemClick
			},
			'notificationsgrid > header': {
				click: me.onNotificationsGridHeaderClick
			}
		});

		me.store = Ext.create('Ext.data.Store', {
			fields: [
				{
					name: 'id',
					type: 'string'
				},
				{
					name: 'description',
					type: 'string'
				},
				{
					name: 'data',
					type: 'auto'
				},
				{
					name: 'controller',
					type: 'string'
				},
				{
					name: 'method',
					type: 'string'
				}
			]

		});

		me.store.on('add', me.onNotificationAdd, me);
		me.store.on('remove', me.onNotificationRemove, me);

	},

	onNotificationAdd:function(store, records){
		this.setBadgeText(store.count());
	},

	onNotificationRemove:function(store, record){
		this.setBadgeText(store.count());
	},

	onNotificationsGridItemClick: function(grid, record){
		var me = this,
			controller = App.app.getController(record.data.controller),
			method = record.data.method,
			data = record.data.data;

		if(typeof controller == 'object' && typeof controller[method] == 'function'){

			if(data){
				controller[method](data, function(success){
					if(success){
						me.store.remove(record);
					}
					me.doHideNotifications();
				});
			}else{
				controller[method](function(success){
					if(success){
						me.store.remove(record);
					}
					me.doHideNotifications();
				});
			}

		}else{
			me.store.remove(record);
			me.doHideNotifications();
			app.msg(_('oops'), _('notification_handler_error'), true);
		}

	},

	onNotificationsGridHeaderClick: function(){
		this.doHideNotifications();
	},

	onUserSplitButtonBadgeClick: function(btn, text){
		this.doShowNotifications();
	},

	onViewportBeforeRender: function(viewport){
		var me = this;

		me.grid = viewport.add(Ext.widget('notificationsgrid',{
			floatable: true,
			floating: true,
			store: me.store
		}));
	},



	setBadgeText: function(text){
		this.getUserSplitButton().setBadgeText(text);
	},

	getBadgeText: function(){
		this.getUserSplitButton().getBadgeText();
	},

	doHideNotifications: function(){
		this.getNotificationsGrid().collapse(Ext.Component.DIRECTION_TOP, true);
		this.getNotificationsGrid().hide();
		Ext.getBody().un('click', this.doHideNotifications, this);
	},

	doShowNotifications: function(){
		this.grid.showBy(this.getUserSplitButton(), 'tr-br', [-1, 4]);
		this.grid.expand(true);
		this.grid.toFront();
		Ext.getBody().on('click', this.doHideNotifications, this);
	},

	add: function(id, description, data, controller, method){
		var record;
		if(this.store.getById(id)){
			record = this.store.getById(id);
			record.set({
				description: description,
				data: data,
				controller: controller,
				method: method
			});
			record.commit();
			return record;
		}

		record = this.store.add({
			id: id,
			description: description,
			data: data,
			controller: controller,
			method: method
		})[0];

		app.msg(_('new_notification'), description, 'yellow');

		return record;
	},

	remove: function(id){
		if(!this.store.getById(id)) return;
		this.store.remove(this.store.getById(id));
	},

	testNotification:function(data, callback){
		if(typeof callback == 'function'){
			callback(true);
		}
	}

});

Ext.define('App.controller.patient.Documents', {
	extend: 'Ext.app.Controller',
	requires: [
		'App.view.patient.windows.UploadDocument'
	],
	refs: [
		{
			ref: 'PatientDocumentPanel',
			selector: 'patientdocumentspanel'
		},
		{
			ref: 'PatientDocumentGrid',
			selector: 'patientdocumentspanel #patientDocumentGrid'
		},
		{
			ref: 'PatientDocumentViewerFrame',
			selector: 'patientdocumentspanel #patientDocumentViewerFrame'
		},
		{
			ref: 'PatientDocumentUploadWindow',
			selector: '#patientDocumentUploadWindow'
		},
		{
			ref: 'PatientDocumentUploadScanBtn',
			selector: '#patientDocumentUploadWindow #scanBtn'
		},
		{
			ref: 'PatientDocumentUploadFileUploadField',
			selector: '#patientDocumentUploadWindow #fileUploadField'
		},
		{
			ref: 'DocumentHashCheckBtn',
			selector: '#documentHashCheckBtn'
		},
		{
			ref: 'DocumentHashCheckBtn',
			selector: '#documentHashCheckBtn'
		},
		{
			ref: 'AddDocumentBtn',
			selector: 'patientdocumentspanel #addDocumentBtn'
		},
		{
			ref: 'DocumentUploadBtn',
			selector: 'patientdocumentspanel #documentUploadBtn'
		},
		{
			ref: 'PatientDocumentErrorNoteWindow',
			selector: 'patientdocumenterrornotewindow'
		}
	],

	scannedDocument: null,

	init: function(){
		var me = this;

		me.control({
			'viewport': {
				scanconnected: me.onScanConnected,
				scandisconnected: me.onScanDisconnected,
				documentedit: me.onDocumentEdit
			},
			'patientdocumentspanel': {
				activate: me.onPatientDocumentPanelActive,
				beforerender: me.onPatientDocumentBeforeRender
			},
			'patientdocumentspanel #patientDocumentGrid': {
				selectionchange: me.onPatientDocumentGridSelectionChange
			},
			'patientdocumentspanel [toggleGroup=documentgridgroup]': {
				toggle: me.onDocumentGroupBtnToggle
			},
			'patientdocumentspanel #documentGroupBtn': {
				toggle: me.onDocumentGroupBtnToggle
			},
			'patientdocumentspanel #documentUploadBtn': {
				click: me.onDocumentUploadBtnClick
			},
			'#patientDocumentUploadWindow': {
				show: me.onPatientDocumentUploadWindowShow
			},
			'#patientDocumentUploadWindow #uploadBtn': {
				click: me.onDocumentUploadSaveBtnClick
			},
			'#patientDocumentUploadWindow #scanBtn': {
				click: me.onDocumentUploadScanBtnClick
			},


			'#DocumentErrorNoteSaveBtn': {
				click: me.onDocumentErrorNoteSaveBtnClick
			}
		});

		me.nav = this.getController('Navigation');
		//this.initDocumentDnD();
	},

	setDocumentInError: function(document_record){
		var me = this;

		Ext.Msg.show({
			title: _('wait'),
			msg: _('document_entered_in_error_message'),
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){
				if(btn == 'yes'){
					var win = me.showPatientDocumentErrorNoteWindow();
					win.down('form').getForm().loadRecord(document_record);
				}
			}
		});
	},

	onDocumentErrorNoteSaveBtnClick: function(){
		var me = this,
			win = me.getPatientDocumentErrorNoteWindow(),
			form = win.down('form').getForm(),
			values = form.getValues(),
			document_record = form.getRecord(),
			site = document_record.site ? document_record.site : null;

		if(form.isValid()){
			values.entered_in_error = true;
			values.site = site;
			document_record.set(values);
			document_record.save({
				success: function(){
					win.close();
					document_record.set({groupDate:''});
					document_record.commit();
				}
			});
		}
	},

	showPatientDocumentErrorNoteWindow: function(){
		if(!this.getPatientDocumentErrorNoteWindow()){
			Ext.create('App.view.patient.windows.DocumentErrorNote');
		}
		return this.getPatientDocumentErrorNoteWindow().show();
	},

	onPatientDocumentBeforeRender: function(){
		this.setViewerSite(app.user.site);
	},

	onDocumentEdit: function(data){

		var store = this.getPatientDocumentGrid().getStore(),
			record = store.getById(data.save.id);

		if(record){
			var src = data.save.document.split(',');

			record.set({document: (src[1] || src[0])});
			record.save({
				success: function(){
					if(window.dual){
						dual.msg('sweet', _('record_saved'));
					}else{
						app.msg('sweet', _('record_saved'));
					}
				},
				failure: function(){
					if(window.dual){
						dual.msg('oops', _('record_error'), true);
					}else{
						app.msg('oops', _('record_error'), true);
					}
				}
			})
		}
	},

	onScanConnected: function(){
		if(this.getPatientDocumentUploadScanBtn()){
			this.getPatientDocumentUploadScanBtn().show();
		}
	},

	onScanDisconnected: function(){
		if(this.getPatientDocumentUploadScanBtn()){
			this.getPatientDocumentUploadScanBtn().hide();
		}
	},

	onPatientDocumentUploadWindowShow: function(){
		this.scannedDocument = null;
		this.getPatientDocumentUploadFileUploadField().enable();
		this.getPatientDocumentUploadScanBtn().setVisible(this.getController('Scanner').conencted);
	},

	onPatientDocumentGridSelectionChange: function(sm, records){
		var frame = sm.view.panel.up('panel').query('#patientDocumentViewerFrame')[0];

		if(records.length > 0){
			frame.setSrc('dataProvider/DocumentViewer.php?site=' + this.site + '&token=' + app.user.token + '&id=' + records[0].data.id);
		}else{
			frame.setSrc('dataProvider/DocumentViewer.php?site=' + this.site + '&token=' + app.user.token);
		}
	},

	onPatientDocumentPanelActive: function(panel){
		var me = this,
			grid = panel.down('grid'),
			store = grid.getStore(),
			params = me.nav.getExtraParams();

		me.activePAnel = panel;

		if(params && params.document){
			store.on('load', me.doSelectDocument, me);
		}

		store.clearFilter(true);
		store.filter([
			{
				property: 'pid',
				value: app.patient.pid
			}
		]);
	},

	doSelectDocument: function(store){
		var me = this,
			grid = me.activePAnel.down('grid'),
			params = me.nav.getExtraParams();

		var doc = store.getById(params.document);
		if(doc){
			grid.getSelectionModel().select(doc);

		}else{
			app.msg(_('oops'), _('unable_to_find_document'), true);
		}
		store.un('load', me.doSelectDocument, me);

	},

	onDocumentGroupBtnToggle: function(btn, pressed){
		var grid = btn.up('grid');

		if(pressed){
			grid.getStore().group(btn.action);
			grid.query('#' + btn.action)[0].hide();
			btn.disable();
		}else{
			grid.query('#' + btn.action)[0].show();
			btn.enable();
		}
	},

	onDocumentUploadBtnClick: function(){
		this.setDocumentUploadWindow('click');
	},

	setDocumentUploadWindow: function(action){
		var record = this.getNewPatientDocumentRecord(),
			win = this.getUploadWindow(action);
		win.down('form').getForm().loadRecord(record);
		return win;
	},

	getNewPatientDocumentRecord: function(){
		return Ext.create('App.model.patient.PatientDocuments', {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			date: new Date()
		})
	},

	getGroupName: function(store, record){
		var group = store.groupers.items[0].property;

		if(group == 'docTypeCode'){
			return Ext.String.capitalize(record.get('docTypeCode') + ' - ' + record.get('docType'));
		}else if(group == 'groupDate'){
			return Ext.Date.format(record.get(group), g('date_display_format'));
		}else{
			return Ext.String.capitalize(record.get(group));
		}
	},

	onDocumentHashCheckBtnClick: function(grid, rowIndex){
		var rec = grid.getStore().getAt(rowIndex),
			success,
			message;
		DocumentHandler.checkDocHash(rec.data, function(provider, response){
			success = response.result.success;
			message = '<b>' + _(success ? 'hash_validation_passed' : 'hash_validation_failed') + '</b><br>' + Ext.String.htmlDecode(response.result.msg);

			if(window.dual){
				dual.msg(_(success ? 'sweet' : 'oops'), message, !success)
			}else{
				app.msg(_(success ? 'sweet' : 'oops'), message, !success)
			}
		});
	},

	getUploadWindow: function(action){
		return Ext.widget('patientuploaddocumentwindow', {
			action: action,
			itemId: 'patientDocumentUploadWindow'
		})
	},

	onDocumentUploadSaveBtnClick: function(){
		var me = this,
			win = me.getPatientDocumentUploadWindow(),
			form = win.down('form').getForm(),
			record = form.getRecord(),
			values = form.getValues(),
			reader = new FileReader(),
			uploadField = form.findField('document');

		if(!form.isValid()) return;

		record.set(values);

		if(win.action == 'click'){
			var uploadValue = uploadField.getValue();
			record.set({name: uploadValue});

			if(me.scannedDocument){
				record.set({document: me.scannedDocument});
				me.doNewDocumentRecordSave(record);
			}else{
				reader.onload = function(e){
					record.set({document: e.target.result});
					me.doNewDocumentRecordSave(record);
				};
				reader.readAsDataURL(uploadField.extractFileInput().files[0]);
			}
		}else{
			me.doNewDocumentRecordSave(record);
		}
	},

	onDocumentUploadScanBtnClick: function(){
		var me = this,
			scanCtrl = this.getController('Scanner');

		scanCtrl.initScan();
		app.on('scancompleted', this.onScanCompleted, me);
	},

	onScanCompleted: function(controller, document){
		var me = this,
			win = me.getPatientDocumentUploadWindow(),
			form = win.down('form').getForm(),
			uploadField = form.findField('document');

		uploadField.disable();

		me.scannedDocument = document;
		app.un('scancompleted', this.onScanCompleted, me);
	},

	doNewDocumentRecordSave: function(record){
		var me = this,
			store = me.getPatientDocumentGrid().getStore(),
			index = store.indexOf(record);

		if(index == -1){
			store.add(record);
		}

		store.sync({
			success: function(){
				app.msg(_('sweet'), _('document_added'));
				me.getPatientDocumentUploadWindow().close();
				me.getPatientDocumentGrid().getSelectionModel().select(record);

			},
			failure: function(){
				store.rejectChanges();
				if(window.dual){
					dual.msg(_('oops'), _('document_error'), true);
				}else{
					app.msg(_('oops'), _('document_error'), true);
				}
			}
		})
	},

	initDocumentDnD: function(){
		var me = this;

		me.dnding = false;

		document.ondragenter = function(e){
			e.preventDefault();
			if(!me.dnding) me.setDropMask();
			return false;
		};

		document.ondragover = function(e){
			e.preventDefault();
			return false;
		};

		document.ondrop = function(e){
			e.preventDefault();
			me.unSetDropMask();
			if(me.dropMask && (e.target == me.dropMask.maskEl.dom || e.target == me.dropMask.msgEl.dom)){
				me.dropHandler(e.dataTransfer.files);
			}
			return false;
		};

		document.ondragleave = function(e){
			if(e.target.localName == 'body') me.unSetDropMask();
			e.preventDefault();
			return false;
		};
	},

	setDropMask: function(){
		var me = this,
			dropPanel = me.getPatientDocumentViewerFrame();

		me.dnding = true;

		if(dropPanel && dropPanel.rendered){
			if(!me.dropMask){
				me.dropMask = new Ext.LoadMask(me.getPatientDocumentViewerFrame(), {
					msg: _('drop_here'),
					cls: 'uploadmask',
					maskCls: 'x-mask uploadmask',
					shadow: false
				});
				me.dropMask.show();

				me.dropMask.maskEl.dom.addEventListener('dragenter', function(e){
					e.preventDefault();
					e.target.classList.add('validdrop');
					return false;
				});

				me.dropMask.maskEl.dom.addEventListener('dragleave', function(e){
					e.preventDefault();
					e.target.classList.remove('validdrop');
					return false;
				});
			}else{
				me.dropMask.show();
			}

		}
	},

	unSetDropMask: function(){
		this.dnding = false;
		if(this.dropMask){
			this.dropMask.hide();
		}
	},

	dropHandler: function(files){
		//		say(files);
		var me = this,
			win = me.setDocumentUploadWindow('drop'),
			form = win.down('form').getForm(),
			record = form.getRecord(),
			reader = new FileReader(),
			uploadField = form.findField('document');

		uploadField.hide();
		uploadField.disable();

		reader.onload = function(e){
			record.set({
				document: e.target.result,
				name: files[0].name
			});
		};

		reader.readAsDataURL(files[0]);
	},

	setViewerSite: function(site){
		this.site = site;
	}
});
Ext.define('App.controller.patient.LabOrders', {
	extend: 'Ext.app.Controller',
	requires: [
		'App.view.patient.windows.UploadDocument'
	],
	refs: [
		{
			ref: 'LabOrdersGrid',
			selector: 'patientlaborderspanel'
		},
		{
			ref: 'ElectronicLabOrderBtn',
			selector: 'patientlaborderspanel #electronicLabOrderBtn'
		},
		{
			ref: 'NewLabOrderBtn',
			selector: 'patientlaborderspanel #newLabOrderBtn'
		},
		{
			ref: 'PrintLabOrderBtn',
			selector: 'patientlaborderspanel #printLabOrderBtn'
		}
	],

	init: function(){
		var me = this;
		me.control({
			'patientlaborderspanel': {
				activate: me.onLabOrdersGridActive,
				selectionchange: me.onLabOrdersGridSelectionChange,
				beforerender: me.onLabOrdersGridBeforeRender
			},
			'#rxLabOrderLabsLiveSearch': {
				select: me.onLoincSearchSelect
			},
			'patientlaborderspanel #electronicLabOrderBtn': {
				click: me.onElectronicLabOrderBtnClick
			},
			'patientlaborderspanel #newLabOrderBtn': {
				click: me.onNewLabOrderBtnClick
			},
			'patientlaborderspanel #printLabOrderBtn': {
				click: me.onPrintLabOrderBtnClick
			}
		});
	},

	onLabOrdersGridBeforeRender: function(grid){
		app.on('patientunset', function(){
			grid.editingPlugin.cancelEdit();
			grid.getStore().removeAll();
		});
	},

	onLabOrdersGridSelectionChange: function(sm, selected){
		this.getPrintLabOrderBtn().setDisabled(selected.length === 0);
	},

	onLoincSearchSelect: function(cmb, records){
		var form = cmb.up('form').getForm();

		form.getRecord().set({code: records[0].data.loinc_number});
		if(form.findField('code')) form.findField('code').setValue(records[0].data.loinc_number);
		if(form.findField('note')) form.findField('note').focus(false, 200);
	},

	onElectronicLabOrderBtnClick: function(){
		// say('TODO!');
	},

	onNewLabOrderBtnClick: function(){
		var me = this,
			grid = me.getLabOrdersGrid(),
			store = grid.getStore();

		grid.editingPlugin.cancelEdit();
		store.insert(0, {
			pid: app.patient.pid,
			eid: app.patient.eid,
			uid: app.user.id,
			date_ordered: new Date(),
			order_type: 'lab',
			status: 'Pending',
			priority: 'Normal'
		});
		grid.editingPlugin.startEdit(0, 0);
	},

	onPrintLabOrderBtnClick: function(orders){
		var me = this,
			grid = me.getLabOrdersGrid(),
			items = (Ext.isArray(orders) ? orders : grid.getSelectionModel().getSelection()),
			params = {},
			data,
			i;

		params.pid = app.patient.pid;
		params.eid = app.patient.eid;
		params.orderItems = [ ];
		params.docType = 'Lab';

		params.templateId = 4;
		params.orderItems.push(['Description', 'Notes']);
		for(i = 0; i < items.length; i++){
			data = items[i].data;

			params.orderItems.push([
					data.description + ' [' + data.code_type + ':' + data.code + ']',
				data.note
			]);
		}

		DocumentHandler.createTempDocument(params, function(provider, response){
			if(window.dual){
				dual.onDocumentView(response.result.id, 'Lab');
			}else{
				app.onDocumentView(response.result.id, 'Lab');
			}
		});
	},

	onLabOrdersGridActive:function(grid){
		var store = grid.getStore();

		if(!grid.editingPlugin.editing){
			store.clearFilter(true);
			store.filter([
				{
					property: 'pid',
					value: app.patient.pid
				},
				{
					property: 'order_type',
					value: 'lab'
				}
			]);
		}
	},

	labOrdersGridStatusColumnRenderer:function(v){
		var color = 'black';

		switch(v){
			case 'Canceled':
				color = 'red';
				break;
			case 'Pending':
				color = 'orange';
				break;
			case 'Routed':
				color = 'blue';
				break;
			case 'Complete':
				color = 'green';
				break;
			default:
				color = '';
		}

		return '<div style="color:' + color + '">' + v + '</div>';
	},

	doAddOrderByTemplate: function(data){
		var me = this,
			grid = me.getLabOrdersGrid(),
			store = grid.getStore();

		data.pid = app.patient.pid;
		data.eid = app.patient.eid;
		data.uid = app.user.id;
		data.date_ordered = new Date();
		data.order_type = 'lab';
		data.status = 'Pending';
		data.priority = 'Normal';

		store.add(data);
		store.sync({
			success: function(){
				app.msg(_('sweet'), data.description + ' ' + _('added'));
			}
		});
	}
});

Ext.define('App.controller.patient.Results',
{
	extend: 'Ext.app.Controller',
	requires: [
		'App.view.administration.HL7MessageViewer'
	],
	refs: [
		{
			ref: 'resultsPanel',
			selector: 'patientresultspanel'
		},
		{
			ref: 'resultForm',
			selector: 'patientresultspanel #OrderResultForm'
		},
		{
			ref: 'observationsGrid',
			selector: 'patientresultspanel #observationsGrid'
		},
		{
			ref: 'ordersGrid',
			selector: 'patientresultspanel > grid[action=orders]'
		},
		{
			ref: 'uploadField',
			selector: 'filefield[action=orderresultuploadfield]'
		},
		{
			ref: 'messageField',
			selector: 'hl7messageviewer > textareafield[action=message]'
		},
		{
			ref: 'acknowledgeField',
			selector: 'hl7messageviewer > textareafield[action=acknowledge]'
		},
		{
			ref: 'OrderResultSignBtn',
			selector: '#OrderResultSignBtn'
		},
        {
            ref: 'DocumentTypeCard',
            selector: 'patientresultspanel > #documentTypeCard'
        },
        {
            ref: 'LaboratoryResultPanel',
            selector: '#laboratoryResultPanel'
        },
        {
            ref: 'LaboratoryResultForm',
            selector: '#laboratoryResultForm'
        },
        {
            ref: 'NewOrderResultBtn',
            selector: '#NewOrderResultBtn'
        }
	],

	init: function()
    {
		var me = this;
		me.control({
			'patientresultspanel': {
				activate: me.onResultPanelActive
			},
			'patientresultspanel > grid[action=orders]': {
				selectionchange: me.onOrderSelectionChange,
				edit: me.onOrderSelectionEdit
			},
			'filefield[action=orderresultuploadfield]': {
				change: me.onOrderDocumentChange
			},
			'button[action=orderResultResetBtn]': {
				click: me.onResetOrderResultClicked
			},
			'button[action=orderResultSaveBtn]': {
				click: me.onSaveOrderResultClicked
			},
			'button[action=orderDocumentViewBtn]': {
				click: me.onOrderDocumentViewBtnClicked
			},
			'#NewOrderResultBtn': {
				click: me.onNewOrderResultBtnClick
			},
			'#OrderResultSignBtn': {
				click: me.onOrderResultSignBtnClick
			},
            '#orderTypeCombo':{
                change: me.onOrderTypeSelect
            },
            '#resultRowEditor':{
                beforeedit: me.onOrderResultGridRowEdit
            }
		});
	},

	onOrderResultSignBtnClick: function()
    {
		var me = this,
            record;

		app.passwordVerificationWin(function(btn, password)
        {
			if(btn == 'ok')
            {
				User.verifyUserPass(password, function(success){
					if(success)
                    {
                        record = me.getLaboratoryResultForm().getRecord();
						record.set({signed_uid: app.user.id});
						record.save({
							success: function()
                            {
								app.msg(_('sweet'), _('result_signed'));
							},
							failure: function()
                            {
								app.msg(_('sweet'), _('record_error'), true);
							}
						});
					}
                    else
                    {
						me.onOrderResultSignBtnClick();
					}
				});
			}
		});
	},

	onOrderSelectionEdit: function(editor, e)
    {
		this.getOrderResult(e.record);
	},

    onNewOrderResultBtnClick: function(btn){
		var grid = btn.up('grid'),
			store = grid.getStore(),
			records,
            fields;
		grid.editingPlugin.cancelEdit();
		records = store.add({
			pid: app.patient.pid,
			uid: app.user.id,
            order_type: 'lab',
			status: 'Pending'
		});
		grid.getPlugin('resultRowEditor').startEdit(records[0], 0);

        // Focus the second column when editing.
        fields = grid.getPlugin('resultRowEditor').getEditor();
        fields.items.items[2].focus();
        fields.items.items[1].setValue('lab');

        // By Default when adding a new record, it will be a Laboratory
        grid.columns[3].setEditor({
            xtype: 'labslivetsearch',
            itemId: 'labOrderLiveSearch',
            allowBlank: false,
            flex: 1
        });
    },

    onOrderResultGridRowEdit: function(editor, context, eOpts)
    {
        //say(context);
    },

    onOrderTypeSelect: function(combo, newValue, oldValue, eOpts)
    {
        var grid = combo.up('grid');

        if(newValue === 'lab')
        {
            // Change the Card panel, to show the Laboratory results form
            this.getDocumentTypeCard().getLayout().setActiveItem('laboratoryResultPanel');
            // Change the field to look for laboratories
            grid.columns[3].setEditor({
                xtype: 'labslivetsearch',
                itemId: 'labOrderLiveSearch',
                allowBlank: false,
                flex: 1,
                value: ''
            });
            // Enabled the New Order Result Properties
            this.getNewOrderResultBtn().disable(false);
        }

        if(newValue === 'rad')
        {
            // Change the Card panel, to show the Radiology results form
            this.getDocumentTypeCard().getLayout().setActiveItem('radiologyResultPanel');
            // Change the field to look for radiologies
            grid.columns[3].setEditor({
                xtype: 'radslivetsearch',
                itemId: 'radsOrderLiveSearch',
                allowBlank: false,
                flex: 1,
                value: ''
            });
            // Enabled the New Order Result Properties
            this.getNewOrderResultBtn().disable(false);
        }
    },

	onResultPanelActive: function()
    {
		this.setResultPanel();
	},

	setResultPanel: function(){
		var me = this,
			ordersStore = me.getOrdersGrid().getStore();

		if(app.patient)
        {
			ordersStore.clearFilter(true);
			ordersStore.filter([
				{
					property: 'pid',
					value: app.patient.pid
				}
			]);
		}
        else
        {
			ordersStore.clearFilter(true);
			ordersStore.load();
		}
	},

	onOrderSelectionChange: function(model, records)
    {
        if(!this.getDocumentTypeCard().isVisible())
            this.getDocumentTypeCard().setVisible(true);

        if(records[0])
        {
            if (records[0].data.order_type === 'lab')
                this.getDocumentTypeCard().getLayout().setActiveItem('laboratoryResultPanel');

            if (records[0].data.order_type === 'rad')
                this.getDocumentTypeCard().getLayout().setActiveItem('radiologyResultPanel');

            if (records.length > 0)
            {
                this.getOrderResult(records[0]);
            }
            else
            {
                this.resetOrderResultForm();
            }
        }
	},

	getOrderResult: function(orderRecord)
    {
		var me = this,
			form = me.getLaboratoryResultForm(),
			resultsStore = orderRecord.results(),
			observationGrid = me.getObservationsGrid(),
			observationStore,
            newResult,
            i;

		observationGrid.editingPlugin.cancelEdit();
		resultsStore.load({
			callback: function(records){
				if(records.length > 0)
                {
					form.loadRecord(records[0]);
					me.getOrderResultSignBtn().setDisabled(records[0].data.signed_uid > 0);
					observationStore = records[0].observations();
					observationGrid.reconfigure(observationStore);
					observationStore.load();
				}
                else
                {
					newResult = resultsStore.add({
						pid: orderRecord.data.pid,
						code: orderRecord.data.code,
						code_text: orderRecord.data.description,
						code_type: orderRecord.data.code_type,
						ordered_uid: orderRecord.data.uid,
						create_date: new Date()
					});
					form.loadRecord(newResult[0]);
					me.getOrderResultSignBtn().setDisabled(true);
					observationStore = newResult[0].observations();
					observationGrid.reconfigure(observationStore);
					observationStore.load({
						params:
                        {
							loinc: orderRecord.data.code
						},
						callback: function(ObsRecords)
                        {
							for(i = 0; i < ObsRecords.length; i++)
                            {
								ObsRecords[i].phantom = true;
							}
						}
					});
				}
			}
		});
	},

	onResetOrderResultClicked: function()
    {
		this.resetOrderResultForm();
	},

	resetOrderResultForm: function()
    {
		var me = this,
			form = me.getLaboratoryResultForm(),
			observationGrid = me.getObservationsGrid(),
			store = Ext.create('App.store.patient.PatientsOrderObservations');

		form.reset();
		observationGrid.editingPlugin.cancelEdit();
		observationGrid.reconfigure(store);
	},

	onSaveOrderResultClicked: function()
    {
		var me = this,
			form = me.getLaboratoryResultForm(),
			values = form.getValues(),
			files = me.getUploadField().getEl().down('input[type=file]').dom.files,
			reader = new FileReader();

        // The form is not valid, go ahead and warn the user.
		if(!form.isValid())
        {
			app.msg(_('oops'), _('required_fields_missing'), true);
			return;
		}

		if(files.length > 0)
        {
			reader.onload = (function(){
				return function(e)
                {
					var sm = me.getOrdersGrid().getSelectionModel(),
						order = sm.getSelection(),
						params = {
							pid: order[0].data.pid,
							eid: order[0].data.eid,
							uid: app.user.id,
							docType: 'lab',
							title: 'Lab #' + values.lab_order_id + ' Result',
							document: e.target.result
						};
					File.savePatientBase64Document(params, function(provider, response){
						if(response.result.success){
							values.documentId = 'doc|' + response.result.id;
							me.saveOrderResult(form, values);
						}else{
							app.msg(_('oops'), response.result.error)
						}
					});
				};
			})(files[0]);
			reader.readAsDataURL(files[0]);
		}
        else
        {
			me.saveOrderResult(form, values);
		}
	},

	saveOrderResult: function(form, values)
    {
		var me = this,
			record = form.getRecord(),
			sm = me.getOrdersGrid().getSelectionModel(),
			order = sm.getSelection(),
			observationData = [];

		var observationStore = record.observations(),
			observations = observationStore.data.items;

		record.set(values);
        record.save({
			success: function(rec){

				for(var i = 0; i < observations.length; i++)
                {
					observations[i].set({result_id: rec.data.id});
				}

				observationStore.sync({
					callback:function(batch, options)
                    {

					}
				});
				order[0].set({status: 'Received'});
				order[0].save();
				app.msg(_('sweet'), _('record_saved'));
			}
		});
	},

	onOrderDocumentViewBtnClicked: function()
    {
		var me = this,
			form = me.getLaboratoryResultForm(),
			record = form.getRecord(),
			recordData = record.data.documentId.split('|'),
			type = null,
			id = null,
			win;

		if(recordData[0]) type = recordData[0];
		if(recordData[1]) id = recordData[1];

		if(type && id)
        {
			if(type == 'hl7')
            {
				win = Ext.widget('hl7messageviewer').show();
				win.body.mask(_('loading...'));
				HL7Messages.getMessageById(id, function(provider, response)
                {
					me.getMessageField().setValue(response.result.message);
					me.getAcknowledgeField().setValue(response.result.response);
					win.body.unmask();
				});
			}
            else if(type == 'doc')
            {
				app.onDocumentView(id);
			}
		}
        else
        {
			app.msg(_('oops'), _('no_document_found'), true)
		}
	},

	onOrderDocumentChange: function(field)
    {
		//		say(field);
		//		say(document.getElementById(field.inputEl.id).files[0]);
		//		say(field.inputEl);
		//
		//		var fr = new FileReader();
		//
		//
		//		fr.onload = function(e) {
		//			say(e.target.result);
		//		};
		//
		//		fr.readAsDataURL( field.value );
	}

});

Ext.define('App.controller.patient.encounter.Encounter', {
	extend: 'Ext.app.Controller',
	requires: [
		'App.ux.combo.ActiveSpecialties'
	],
	refs: [
		{
			ref: 'EncounterPanel',
			selector: '#encounterPanel'
		},
		{
			ref: 'EncounterDetailWindow',
			selector: '#EncounterDetailWindow'
		},
		{
			ref: 'EncounterProviderCmb',
			selector: '#EncounterProviderCmb'
		},
		{
			ref: 'EncounterSpecialtyCmb',
			selector: '#EncounterSpecialtyCmb'
		},
		{
			ref: 'EncounterDetailForm',
			selector: '#EncounterDetailForm'
		}
	],

	init: function(){
		var me = this;

		this.control({
			'viewport':{
				patientunset: me.onPatientUnset
			},
			'#EncounterDetailWindow': {
				show: me.onEncounterDetailWindowShow
			},
			'#EncounterProviderCmb': {
				beforerender: me.onEncounterProviderCmbBeforeRender,
				select: me.onEncounterProviderCmbSelect
			}
		});
	},

	/**
	 * set the encounter record to null when the patient is closed
	 */
	onPatientUnset:function(){
		if(this.getEncounterPanel()) this.getEncounterPanel().encounter = null;
	},

	/**
	 * get the encounter record form the encounter panel or return null
	 * @returns {*}
	 */
	getEncounterRecord: function(){
		return this.getEncounterPanel() ? this.getEncounterPanel().encounter : null;
	},

	onEncounterProviderCmbBeforeRender: function(cmb){
		var container = cmb.up('container');

		container.setFieldLabel(''); // label showing bug

		container.insert((container.items.indexOf(cmb) + 1), {
			xtype: 'activespecialtiescombo',
			itemId: 'EncounterSpecialtyCmb',
			fieldLabel: _('specialty'),
			labelWidth: cmb.labelWidth,
			width: cmb.width,
			name: 'specialty_id',
			allowBlank: false
		});
	},

	onEncounterProviderCmbSelect: function(cmb, slected){
		var me = this;

		User.getUser(slected[0].data.option_value, function(provider){
			me.setSpecialtyCombo(provider);
		});
	},

	onEncounterDetailWindowShow: function(){
		var me = this,
			record = me.getEncounterDetailForm().getForm().getRecord();

		if(record.data.provider_uid === 0){
			if(me.getEncounterSpecialtyCmb()) me.getEncounterSpecialtyCmb().setVisible(false);

		}else{
			User.getUser(record.data.provider_uid, function(provider){
				me.setSpecialtyCombo(provider, record.data.specialty_id);
			});
		}

	},

	setSpecialtyCombo: function(provider, specialty){
		var show = this.reloadSpecialityCmbBySpecialty(provider.specialty, specialty);
		this.getEncounterSpecialtyCmb().setVisible(show);
		this.getEncounterSpecialtyCmb().setDisabled(!show);
	},

	reloadSpecialityCmbBySpecialty: function(specialties, specialty){
		var me = this,
			show = false;

		//say('reloadSpecialityCmbBySpecialty');
		//say(specialties);
		//say(specialty);

		if(Ext.isNumeric(specialty) && specialty > 0){
			me.getEncounterSpecialtyCmb().setValue(eval(specialty));

		}else if(Ext.isArray(specialties) && specialties.length == 1){
			me.getEncounterSpecialtyCmb().setValue(eval(specialties[0]));

		}else{
			me.getEncounterSpecialtyCmb().setValue(null);
		}


		if(Ext.isArray(specialties)){

			var store = this.getEncounterSpecialtyCmb().getStore(),
				filters = [],
				show = true;

			for(var i = 0; i < specialties.length; i++){
				Ext.Array.push(filters, specialties[i]);
			}

			store.clearFilter(true);
			store.filter([
				{
					property: 'active',
					value: true
				},
				{
					property: 'id',
					value: new RegExp(filters.join('|'))
				}
			]);
		}

		return show;
	}

});

Ext.define('App.controller.patient.encounter.Snippets', {
	extend: 'Ext.app.Controller',
	requires: [
		'App.view.patient.encounter.Snippets'
	],
	refs: [
		{
			ref: 'SnippetsTreePanel',
			selector: '#SnippetsTreePanel'
		},
		{
			ref: 'SnippetWindow',
			selector: '#SnippetWindow'
		},
		{
			ref: 'SnippetForm',
			selector: '#SnippetForm'
		},
		{
			ref: 'SnippetFormTextField',
			selector: '#SnippetFormTextField'
		},
		{
			ref: 'SnippetDeleteBtn',
			selector: '#SnippetDeleteBtn'
		},
		{
			ref: 'SnippetCancelBtn',
			selector: '#SnippetCancelBtn'
		},
		{
			ref: 'SnippetSaveBtn',
			selector: '#SnippetSaveBtn'
		},

		// templates specialties combo
		{
			ref: 'SoapTemplateSpecialtiesCombo',
			selector: '#SoapTemplateSpecialtiesCombo'
		}
	],

	init: function(){
		var me = this;

		this.control({
			'#SnippetDeleteBtn': {
				click: me.onSnippetDeleteBtnClick
			},
			'#SnippetSaveBtn': {
				click: me.onSnippetSaveBtnClick
			},
			'#SnippetCancelBtn': {
				click: me.onSnippetCancelBtnClick
			},
			'#SnippetCategoryAddBtn': {
				click: me.onSnippetCategoryAddBtnClick
			}
		});
	},

	onSnippetDeleteBtnClick: function(){
		var me = this,
			form = me.getSnippetForm().getForm(),
			record = form.getRecord();

		if(record.childNodes.length > 0){
			app.msg(_('oops'),_('snippet_delete_child_error'), true);
			return;
		}

		record.remove(true);
		form.reset();
		me.getSnippetWindow().close()
	},

	onSnippetAddBtnClick: function(grid, rowIndex, colIndex, actionItem, event, record){
		var me = this,
			win = me.getSnippetEditWindow(),
			form = me.getSnippetForm(),
			newRecord = Ext.create('App.model.patient.encounter.snippetTree', {
				parentId: record.data.id,
				specialty_id: me.getSoapTemplateSpecialtiesCombo().getValue(),
				leaf: true
			});

		win.parentRecord = record;
		form.getForm().loadRecord(newRecord);
	},

	onSnippetSaveBtnClick: function(){
		var me = this,
			win = me.getSnippetWindow(),
			form = me.getSnippetForm().getForm(),
			values = form.getValues(),
			record = form.getRecord(),
			isNew = record.data.id === '' || record.data.id === 0;

		if(form.isValid()){

			record.set(values);

			if(isNew) win.parentRecord.appendChild(record);

			record.save({
				success: function(record, reuqest){
					record.set({ id: reuqest.response.result.id });
					record.commit();
					app.msg(_('sweet'), _('record_saved'));
				},
				failure: function(){
					app.msg(_('oops'), _('record_error'), true);
				}
			});


			me.getSnippetWindow().close();
		}
	},

	onSnippetCancelBtnClick: function(){
		var record = this.getSnippetForm().getForm().getRecord();

		if(record.data.id === '' || record.data.id === 0) record.destroy();
		this.getSnippetWindow().close();
	},

	getSnippetEditWindow: function(){
		var me = this;

		if(me.getSnippetWindow()){
			return me.getSnippetWindow().show();
		}else{
			return Ext.widget('snippetswindow').show();
		}
	},

	onSnippetCategoryAddBtnClick: function(){
		var me = this,
			win = me.getSnippetEditWindow(),
			tree = me.getSnippetsTreePanel(),
			store =  tree.getStore(),
			selection = tree.getSelectionModel().getSelection(),
			category = tree.action.split('-'),
			newRecord,
			parentRecord;

		me.getSnippetFormTextField().hide();
		me.getSnippetFormTextField().disable();

		if(selection.length === 0){
			parentRecord = store.getRootNode();
		}else if(selection[0].data.leaf){
			parentRecord = selection[0].parentNode;
		}else{
			parentRecord = selection[0];
		}

		newRecord = Ext.create('App.model.patient.encounter.snippetTree', {
			parentId: parentRecord.data.id,
			category: (category.length > 1 ? category[0] : category[1]),
			specialty_id: me.getSoapTemplateSpecialtiesCombo().getValue(),
			leaf: false
		});

		win.parentRecord = parentRecord;

		me.getSnippetForm().getForm().loadRecord(newRecord);
	},

	onSnippetBtnEdit: function(grid, rowIndex, colIndex, actionItem, event, record){

		this.getSnippetEditWindow();

		var me = this,
			field = me.getSnippetFormTextField(),
			win = me.getSnippetWindow(),
			form = me.getSnippetForm().getForm();

		if(record.get('leaf')){
			win.setTitle(_('title') + ' (' + _('required') + ')');
			field.show();
			field.enable();
		}else{
			win.setTitle(_('title') + ' (' + _('optional') + ')');
			field.hide();
			field.disable();
		}

		form.loadRecord(record);
	}

});
Ext.define('App.view.patient.Referrals', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.LiveCPTSearch',
		'App.ux.LiveICDXSearch',
		'App.ux.combo.ActiveProviders',
		'Ext.selection.CheckboxModel',
		'App.ux.grid.RowFormEditing',
		'App.ux.combo.ReferringProviders'
	],
	xtype: 'patientreferralspanel',
	title: _('referrals'),
	action: 'referralsGrid',
	itemId: 'patientReferralsGrid',
	columnLines: true,
	allowDeselect: true,
	store: Ext.create('App.store.patient.Referrals', {
		remoteFilter: true
	}),
	plugins: [
		{
			ptype: 'rowformediting',
			clicksToEdit: 2,
			items: [
				{
					xtype: 'container',
					defaults: {
						layout: 'anchor'
					},
					layout: {
						type: 'hbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'container',
							flex: 1,
							defaults: {
								labelAlign: 'right',
								margin: '0 0 5 0'
							},
							items: [
								{
									xtype: 'datefield',
									fieldLabel: _('referral_date'),
									name: 'referral_date',
									format: 'Y-m-d',
									validateBlank: true
								},
								{
									xtype: 'livecptsearch',
									fieldLabel: _('requested_service'),
									name: 'service_text',
									displayField: 'code_text',
									valueField: 'code_text',
									hideLabel: false,
									itemId: 'referralServiceSearch',
									anchor: '100%'
								},
								{
									xtype: 'textareafield',
									fieldLabel: _('reason'),
									name: 'referal_reason',
									anchor: '100%',
									height: 60
								},
								{
									xtype: 'liveicdxsearch',
									margin: '0 0 10',
									fieldLabel: _('diagnosis'),
									name: 'diagnosis_text',
									hideLabel: false,
									displayField: 'code_text',
									valueField: 'code_text',
									itemId: 'referralDiagnosisSearch',
									anchor: '100%'
								}
							]
						},
						{
							xtype: 'container',
							flex: 1,
							defaults: {
								labelAlign: 'right',
								margin: '0 0 5 0'
							},
							items: [
								{
									xtype: 'activeproviderscombo',
									fieldLabel: _('refer_by'),
									name: 'refer_by_text',
									width: 300,
									displayField: 'option_name',
									valueField: 'option_name',
									itemId: 'ReferralProviderCombo'
								},
								{
									xtype: 'container',
									layout: 'hbox',
									items: [
										{
											xtype: 'activeproviderscombo',
											fieldLabel: _('refer_to'),
											name: 'refer_to_text',
											labelAlign: 'right',
											margin: '0 5 5 0',
											width: 300,
//											disabled: true,
//											hidden: true,
											displayField: 'fullname',
											valueField: 'fullname',
											itemId: 'ReferralLocalProviderCombo'
										},
										{
											xtype: 'referringproviderscombo',
											fieldLabel: _('refer_to'),
											name: 'refer_to_text',
											labelAlign: 'right',
											margin: '0 5 5 0',
											width: 300,
											disabled: true,
											hidden: true,
											displayField: 'fullname',
											valueField: 'fullname',
											itemId: 'ReferralExternalProviderCombo'
										},
										{
											xtype: 'checkboxfield',
											boxLabel: _('external_referral'),
											itemId: 'ReferralExternalReferralCheckbox',
											name: 'is_external_referral'
										}
									]
								},

								{
									xtype: 'gaiaehr.combo',
									fieldLabel: _('risk_level'),
									name: 'risk_level',
									list: 17,
									width: 300
								},
//								{
//									xtype: 'checkboxfield',
//									fieldLabel: _('send_vitals'),
//									name: 'send_vitals',
//									width: 300
//								},
								{
									xtype: 'checkboxfield',
									fieldLabel: _('send_record'),
									name: 'send_record',
									width: 300
								}
							]
						}
					]
				}
			]
		}
	],
	selModel: Ext.create('Ext.selection.CheckboxModel'),
	columns: [
		{
			xtype: 'datecolumn',
			text: _('date'),
			dataIndex: 'referral_date',
			format: 'Y-m-d',
			menuDisabled: true,
			resizable: false
		},
		{
			text: _('refer_by'),
			dataIndex: 'refer_by_text',
			menuDisabled: true,
			resizable: false,
			width: 200
		},
		{
			text: _('refer_to'),
			dataIndex: 'refer_to_text',
			menuDisabled: true,
			resizable: false,
			width: 200
		},
		{
			text: _('request'),
			dataIndex: 'referal_reason',
			menuDisabled: true,
			resizable: false,
			flex: 1
		}
	],
	tbar: [
		'->',
		{
			text: _('referral'),
			iconCls: 'icoAdd',
			itemId: 'encounterRecordAdd',
			action: 'addReferralBtn'
		},
		'-',
		{
			text: _('print'),
			iconCls: 'icoPrint',
			disabled: true,
			itemId: 'printReferralBtn'
		}
	]
});
Ext.define('App.view.patient.ActiveProblems', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.grid.RowFormEditing',
		'App.ux.LiveSnomedProblemSearch',
		'App.ux.combo.CodesTypes',
		'App.ux.combo.Occurrence',
		'App.ux.combo.Outcome2'
	],
	xtype: 'patientactiveproblemspanel',
	title: _('active_problems'),
	columnLines: true,
	store: Ext.create('App.store.patient.PatientActiveProblems', {
		remoteFilter: true,
		autoSync: false
	}),
	columns: [
		{
			xtype: 'actioncolumn',
			width: 25,
			items: [
				{
					icon: 'resources/images/icons/blueInfo.png',  // Use a URL in the icon config
					tooltip: 'Get Info',
					handler: function(grid, rowIndex, colIndex, item, e, record){
						App.app.getController('InfoButton').doGetInfo(record.data.code, record.data.code_type, record.data.code_text);
					}
				}
			]
		},
		{
			header: _('problem'),
			flex: 1,
			dataIndex: 'code_text',
			renderer: function(v, meta, record){
				return v + ' (' + record.data.code + ')';
			}
		},
		{
			header: _('occurrence'),
			width: 200,
			dataIndex: 'occurrence'
		},
		{
			xtype: 'datecolumn',
			header: _('begin_date'),
			width: 100,
			format: 'Y-m-d',
			dataIndex: 'begin_date'
		},
		{
			xtype: 'datecolumn',
			header: _('end_date'),
			width: 100,
			format: 'Y-m-d',
			dataIndex: 'end_date'
		},
		{
			header: _('status'),
			width: 80,
			dataIndex: 'status'
		}
	],
	plugins: Ext.create('App.ux.grid.RowFormEditing', {
		autoCancel: false,
		errorSummary: false,
		clicksToEdit: 2,
		items: [
			{
				xtype:'container',
				layout:{
					type:'hbox',
					align:'stretch'
				},
				items:[
					{
						xtype: 'container',
						padding: 10,
						layout: 'vbox',
						items: [
							{
								xtype: 'snomedliveproblemsearch',
								fieldLabel: _('problem'),
								name: 'code_text',
								hideLabel: false,
								itemId: 'activeProblemLiveSearch',
								enableKeyEvents: true,
								displayField: 'FullySpecifiedName',
								valueField: 'FullySpecifiedName',
								width: 720,
								labelWidth: 70,
								margin: '0 10 5 0',
								allowBlank: false
							},
							{
								xtype: 'fieldcontainer',
								layout: 'hbox',
								defaults: {
									margin: '0 10 0 0'
								},
								items: [
									{
										fieldLabel: _('occurrence'),
										width: 250,
										labelWidth: 70,
										xtype: 'mitos.occurrencecombo',
										name: 'occurrence',
										allowBlank: false
									},
									{
										xtype: 'textfield',
										width: 460,
										labelWidth: 70,
										fieldLabel: _('referred_by'),
										name: 'referred_by'
									}
								]
							},
							{
								fieldLabel: _('note'),
								xtype: 'textfield',
								width: 720,
								labelWidth: 70,
								name: 'note'
							}
						]
					},
					{
						xtype: 'container',
						padding: 10,
						layout: 'vbox',
						defaults: {
							labelWidth: 70,
							margin: '0 0 5 0',
							width: 200
						},
						items: [
							{
								fieldLabel: _('status'),
								xtype: 'gaiaehr.combo',
								list: 112,
								itemId: 'ActiveProblemStatusCombo',
								name: 'status',
								allowBlank: false
							},
							{
								fieldLabel: _('begin_date'),
								xtype: 'datefield',
								format: 'Y-m-d',
								name: 'begin_date'
							},
							{
								fieldLabel: _('end_date'),
								xtype: 'datefield',
								format: 'Y-m-d',
								name: 'end_date'
							}
						]
					}

				]
			}
		]
	}),
	tbar: [
		'->',
        {
            text: _('no_active_problem'),
            itemId: 'addNoActiveProblemBtn',
            iconCls: 'icoAdd'
        },
		{
			text: _('add_new'),
			action: 'encounterRecordAdd',
			itemId: 'addActiveProblemBtn',
			iconCls: 'icoAdd'
		}
	],
	bbar: ['->', {
		text: _('review'),
		itemId: 'review_active_problems',
		action: 'encounterRecordAdd'
	}]
});

Ext.define('App.view.patient.SocialPanel', {
	extend: 'Ext.panel.Panel',
	requires: [
		'App.view.patient.SmokingStatus',
		'App.view.patient.SocialHistory'
	],
	xtype: 'patientsocialpanel',
	title: _('social'),
	border: false,
	bodyBorder: false,
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'patientsmokingstatusgrid',
			margin: '0 0 5 0',
			flex: 1
		},
		{
			xtype: 'patientsocialhistorypanel',
			flex: 2
		}
	]
});
Ext.define('App.view.patient.CognitiveAndFunctionalStatus', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.grid.RowFormEditing',
		'App.ux.LiveSnomedSearch',
		'App.store.patient.CognitiveAndFunctionalStatus'
	],
	xtype: 'patientcognitiveandfunctionalstatuspanel',
	title: _('cog_and_func_status'),
	columnLines: true,
	store: Ext.create('App.store.patient.CognitiveAndFunctionalStatus', {
		remoteFilter: true
	}),
	plugins: [
		{
			ptype: 'rowediting',
			errorSummary: false
		}
	],
	columns: [
		{
			xtype: 'actioncolumn',
			width: 20,
			items: [
				{
					icon: 'resources/images/icons/cross.png',
					tooltip: _('remove')
				}
			]
		},
		{
			header: _('category'),
			width: 150,
			dataIndex: 'category',
			editor: {
				xtype: 'gaiaehr.combo',
				list: 117,
				itemId: 'functionalStatusCategoryCombo',
				allowBlank: false
			}
		},
		{
			header: _('description'),
			flex: 1,
			dataIndex: 'code_text',
			editor: {
				xtype: 'snomedlivesearch',
				itemId: 'functionalStatusCodeCombo',
				displayField: 'FullySpecifiedName',
				valueField: 'FullySpecifiedName',
				allowBlank: false
			}
		},
		{
			header: _('note'),
			flex: 2,
			dataIndex: 'note',
			editor: {
				xtype: 'textfield'
			}
		},
		{
			xtype: 'datecolumn',
			header: _('begin_date'),
			dataIndex: 'begin_date',
			format: 'Y-m-d',
			editor: {
				xtype: 'datefield',
				format: 'Y-m-d'
			}
		},
		{
			xtype: 'datecolumn',
			header: _('end_date'),
			dataIndex: 'end_date',
			format: 'Y-m-d',
			editor: {
				xtype: 'datefield',
				format: 'Y-m-d'
			}
		},
		{
			header: _('status'),
			dataIndex: 'status',
			editor: {
				xtype: 'gaiaehr.combo',
				list: 118,
				itemId: 'functionalStatusSatausCombo',
				allowBlank: false
			}
		}
	],
	tbar: [
		'->',
		'-',
		{
			text: _('add_new'),
			iconCls: 'icoAdd',
			action: 'encounterRecordAdd',
			itemId: 'newFunctionalStatusBtn'
		}
	]
});
Ext.define('App.view.patient.RadOrders', {
	extend: 'Ext.grid.Panel',
	requires: [
		'Ext.grid.plugin.RowEditing',
		'Ext.grid.feature.Grouping',
		'Ext.selection.CheckboxModel',
		'App.ux.combo.Combo',
		'App.ux.LiveRadsSearch'
	],
	xtype: 'patientradorderspanel',
	title: _('xray_ct_orders'),
	columnLines: true,
	tabConfig: {
		cls: 'order-tab'
	},
	itemId: 'RadOrders',
	store: Ext.create('App.store.patient.PatientsOrders', {
		storeId: 'RadOrderStore',
		groupField: 'date_ordered',
		remoteFilter: true,
		pageSize: 200,
		sorters: [
			{
				property: 'date_ordered',
				direction: 'DESC'
			}
		]
	}),
	selModel: Ext.create('Ext.selection.CheckboxModel', {
		showHeaderCheckbox: false
	}),
	features: [
		{
			ftype: 'grouping'
		}
	],
	plugins: [
		{
			ptype: 'rowediting',
			clicksToEdit: 2
		}
	],
	columns: [
		{
			xtype: 'actioncolumn',
			width: 20,
			items: [
				{
					icon: 'resources/images/icons/cross.png',
					tooltip: _('remove')
//					scope: me,
//					handler: me.onRemoveClick
				}
			]
		},
		{
			header: _('order#'),
			width: 60,
			dataIndex: 'id'
		},
		{
			header: _('status'),
			width: 75,
			dataIndex: 'status',
			editor: {
				xtype: 'gaiaehr.combo',
				list: 40
			},
			renderer: function(v){
				return app.getController('patient.RadOrders').radOrdersGridStatusColumnRenderer(v)
			}
		},
		{
			xtype: 'datecolumn',
			header: _('date_ordered'),
			width: 100,
			dataIndex: 'date_ordered',
			format: 'Y-m-d',
			editor: {
				xtype: 'datefield'
			}
		},
		{
			header: _('code'),
			width: 100,
			dataIndex: 'code'
		},
		{
			header: _('description'),
			flex: 1,
			dataIndex: 'description',
			editor: {
				xtype: 'radslivetsearch',
				itemId: 'radOrderliveSearch'
			}
		},
		{
			header: _('notes'),
			flex: 1,
			dataIndex: 'note',
			editor: {
				xtype: 'textfield'
			}
		},
		{
			header: _('priority'),
			width: 100,
			dataIndex: 'priority',
			editor: {
				xtype: 'gaiaehr.combo',
				list: 98
			}
		},
		{
			xtype: 'datecolumn',
			header: _('date_collected'),
			width: 100,
			dataIndex: 'date_collected',
			format: 'Y-m-d',
			editor: {
				xtype: 'datefield'
			}
		}
	],
	tbar: [
		{
			text: _('eRad'),
			iconCls: 'icoSend',
			itemId: 'electronicRadOrderBtn'
		},
		'-',
		'->',
		'-',
		{
			xtype: 'button',
			text: _('new_order'),
			iconCls: 'icoAdd',
			action: 'encounterRecordAdd',
			itemId: 'newRadOrderBtn'
		},
		'-',
		{
			text: _('print'),
			iconCls: 'icoPrint',
			disabled: true,
			margin: '0 5 0 0',
			itemId: 'printRadOrderBtn'
		}
	]
});
Ext.define('App.view.patient.encounter.CarePlanGoalsNewWindow', {
	extend: 'Ext.window.Window',
	requires: [
		'App.ux.LiveSnomedProcedureSearch'
	],
	xtype: 'careplangoalsnewwindow',
	title: _('new_goal'),
	closable: false,
	constrain: true,
	closeAction: 'hide',
	layout: 'fit',
	items: [
		{
			xtype: 'form',
			itemId: 'CarePlanGoalsNewForm',
			layout: {
				type: 'vbox',
				align: 'stretch'
			},
			bodyPadding: 10,
			items: [
				{
					xtype: 'fieldcontainer',
					layout: 'hbox',
					itemId: 'CarePlanGoalPlanDateContainer',
					fieldLabel: _('plan_date'),
					labelAlign: 'top',
					defaults: {
						margin: '0 5 0 0'
					},
					items: [
						{
							xtype: 'datefield',
							itemId: 'CarePlanGoalPlanDateField',
							allowBlank: false,
							format: 'Y-m-d',
							name: 'plan_date'
						},
						{
							xtype: 'button',
							text: '+1 Day',
							action: '1D'
						},
						{
							xtype: 'button',
							text: '+1 Week',
							action: '1W'
						},
						{
							xtype: 'button',
							text: '+2 Week',
							action: '2W'
						},
						{
							xtype: 'button',
							text: '+1 Month',
							action: '1M'
						},
						{
							xtype: 'button',
							text: '+3 Month',
							action: '3M'
						},
						{
							xtype: 'button',
							text: '+6 Month',
							action: '6M'
						},
						{
							xtype: 'button',
							text: '+1 Year',
							action: '1Y'
						}
					]
				},
				{
					xtype: 'snomedliveproceduresearch',
					itemId: 'CarePlanGoalSearchField',
					fieldLabel: _('goal'),
					displayField: 'FullySpecifiedName',
					valueField: 'FullySpecifiedName',
					labelAlign: 'top',
					allowBlank: false,
					hideLabel: false,
					name: 'goal'
				},
				{
					xtype: 'textareafield',
					fieldLabel: _('instructions'),
					labelAlign: 'top',
					name: 'instructions',
					flex: 1
				}
			]
		}
	],
	buttons: [
		{
			text: _('cancel'),
			itemId: 'CarePlanGoalsNewFormCancelBtn'
		},
		{
			text: _('save'),
			itemId: 'CarePlanGoalsNewFormSaveBtn'
		}
	]
});
Ext.define('App.ux.combo.MedicationInstructions', {
	extend: 'Ext.form.ComboBox',
	xtype: 'medicationinstructionscombo',
	queryMode: 'local',
	displayField: 'instruction',
	valueField: 'instruction',
	store: Ext.create('App.store.administration.MedicationInstructions')
});
Ext.define('App.ux.form.fields.plugin.HelpIcon', {
	extend: 'Ext.AbstractPlugin',
	alias: 'plugin.helpicon',
	iconSrc: 'resources/images/icons/icohelp.png',
	iconHeight: 16,
	iconWidth: 16,
	iconMargin: '0 5',
	init: function(field){
		field.on('render', this.addHelpIcon, this);
	},
	addHelpIcon: function(field){
		var me = this,
			tpl = '<td><img src="' + me.iconSrc + '" height="' + me.iconHeight + '" width="' + me.iconWidth + '" style="margin:' + me.iconMargin + '"></td>',
			tplDom;

		tplDom = Ext.DomHelper.append(field.inputRow, tpl, true);

		Ext.create('Ext.tip.ToolTip', {
			target: tplDom,
			dismissDelay: 0,
			html: me.helpMsg || field.helpMsg || 'Help Message...'
		});
	}
});
Ext.define('App.ux.combo.ComboResettable', {
	extend: 'Ext.form.ComboBox',
	triggerTip: _('click_to_clear_selection'),
	spObj: '',
	spForm: '',
	spExtraParam: '',
	qtip: _('clearable_combo_box'),

	trigger1Class: 'x-form-select-trigger',
	trigger2Class: 'x-form-clear-trigger',

	onRender: function(ct, position){
		this.callParent(arguments);
		var id = this.getId();
		this.triggerConfig = {
			tag: 'div',
			cls: 'x-form-twin-triggers',
			style: 'display:block;',
			cn: [
				{
					tag: "img",
					style: Ext.isIE ? 'margin-left:0;height:21px' : '',
					src: Ext.BLANK_IMAGE_URL,
					id: "trigger2" + id,
					name: "trigger2" + id,
					cls: "x-form-trigger " + this.trigger2Class
				}
			]
		};
		this.triggerEl.replaceWith(this.triggerConfig);

		this.triggerEl.on('mouseup', function(e){
			if(e.target.name == "trigger2" + id){
				this.reset();
				this.oldValue = null;
				if(this.spObj !== '' && this.spExtraParam !== ''){
					Ext.getCmp(this.spObj).store.setExtraParam(this.spExtraParam, '');
					Ext.getCmp(this.spObj).store.load()
				}
				if(this.spForm !== ''){
					Ext.getCmp(this.spForm).getForm().reset();
				}
				this.fireEvent('fieldreset', this);
			}

		}, this);

		var trigger2 = Ext.get("trigger2" + id);
		trigger2.addClsOnOver('x-form-trigger-over');
	}
});
Ext.define('App.ux.form.SearchField', {
	extend: 'Ext.form.field.Trigger',

	alias: 'widget.gaiasearchfield',

	trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',

	trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',

	hasSearch : false,
	paramName : 'query',

	filterFn: null,

	initComponent: function() {
		var me = this;

		me.callParent(arguments);

		me.on('specialkey', function(f, e){
			if (e.getKey() == e.ENTER) {
				me.onTrigger2Click();
			}
		});

		// We're going to use filtering
		me.store.remoteFilter = me.filterFn === null;

		if(!me.store.remoteFilter) return;

		// Set up the proxy to encode the filter in the simplest way as a name/value pair

		// If the Store has not been *configured* with a filterParam property, then use our filter parameter name
		if (!me.store.proxy.hasOwnProperty('filterParam')) {
			me.store.proxy.filterParam = me.paramName;
		}
		me.store.proxy.encodeFilters = function(filters) {
			return filters[0].value;
		}
	},

	afterRender: function(){
		this.callParent();
		this.triggerCell.item(0).setDisplayed(false);
	},

	onTrigger1Click : function(){
		var me = this;

		if (me.hasSearch) {
			me.setValue('');
			me.store.clearFilter();
			me.hasSearch = false;
			me.triggerCell.item(0).setDisplayed(false);
			me.updateLayout();
		}
	},

	onTrigger2Click : function(){
		var me = this,
			value = me.getValue();

		if (value.length > 0) {
			// Param name is ignored here since we use custom encoding in the proxy.
			// id is used by the Store to replace any previous filter

			if(me.store.remoteFilter){
				me.store.filter({
					id: me.paramName,
					property: me.paramName,
					value: value
				});
			}else{
				me.store.filter({
					id: me.paramName,
					filterFn: function(record){
						return me.filterFn(record, value);
					}
				});
			}

			me.hasSearch = true;
			me.triggerCell.item(0).setDisplayed(true);
			me.updateLayout();
		}else{
			me.onTrigger1Click();
		}
	}
});
Ext.define('App.model.administration.Allergies', {
	extend: 'Ext.data.Model',
	table: {
		name: 'allergies',
		comment: 'Allergies'
	},
	fields: [
		{
			name: 'id',
			type: 'int'
		},
		{
			name: 'allergy',
			type: 'string',
			len: 500,
			comment: 'Allergy Name'
		},
		{
			name: 'allergy_term',
			type: 'string'
		},
		{
			name: 'allergy_code',
			type: 'string',
			len: 20
		},
		{
			name: 'allergy_code_type',
			type: 'string',
			len: 15
		},
		{
			name: 'allergy_type',
			type: 'string',
			len: 5,
			comment: 'PT = Preferred Term, SN = Systematic Name, SY = Synonym, CD = Code, TR = Trade'
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Allergies.searchAllergiesData'
		},
		reader: {
			root: 'data'
		}
	}
});
Ext.define('App.ux.form.fields.CheckBoxWithText', {
	extend: 'Ext.form.FieldContainer',
	mixins: {
		field: 'Ext.form.field.Field'
	},
	xtype: 'checkboxwithtext',
	layout: 'hbox',
	boxLabel: 'boxLabel',
	emptyText: '',
	readOnly: false,
//	combineErrors: true,
	msgTarget: 'under',
	width: 400,

	inputValue: '1',
	uncheckedValue: '0',

	initComponent: function(){
		var me = this;

		me.items = me.items || [];

		me.items = [
			{
				xtype:'checkbox',
				boxLabel: me.boxLabel,
				submitValue: false,
				inputValue: me.inputValue,
				width: 130,
				margin: '0 10 0 0'
			}
		];

		me.textField = me.textField || {
			xtype:'textfield'
		};

		Ext.apply(me.textField , {
			submitValue: false,
			flex: 1,
			hidden: true,
			emptyText: me.emptyText
		});

		me.items.push(me.textField);

		if(me.layout == 'vbox') me.height = 44;

		me.callParent();

		me.chekboxField = me.items.items[0];
		me.textField = me.items.items[1];

		me.chekboxField.on('change', me.setTextField, me);

		// this dummy is necessary because Ext.Editor will not check whether an inputEl is present or not
//		this.inputEl = {
//			dom: {},
//			swallowEvent: function(){
//			}
//		};
//
		me.initField();
	},

	setTextField: function(checkbox, value){
		if(value == 0 || value == 'off' || value == false){
			this.textField.reset();
			this.textField.hide();
		}else{
			this.textField.show();
		}
	},

	getValue: function(){
		var value = '',
			ckValue = this.chekboxField.getSubmitValue(),
			txtValue = this.textField.getSubmitValue() || '';

		if(ckValue)    value = ckValue + '~' + txtValue;
		return value;
	},

	getSubmitValue: function(){
		return this.getValue();
	},

	setValue: function(value){
		if(value && value.split){
			var val = value.split('~');
			this.chekboxField.setValue(val[0] || 0);
			this.textField.setValue(val[1] || '');
			return;
		}
		this.chekboxField.setValue(0);
		this.textField.setValue('');
	},

	// Bug? A field-mixin submits the data from getValue, not getSubmitValue
	getSubmitData: function(){
		var me = this,
			data = null;
		if(!me.disabled && me.submitValue && !me.isFileUpload()){
			data = {};
			data[me.getName()] = '' + me.getSubmitValue();
		}
		return data;
	},

	setReadOnly: function(value){
		this.chekboxField.setReadOnly(value);
		this.textField.setReadOnly(value);
	},

	isValid: function(){
		return this.chekboxField.isValid() && this.textField.isValid();
	}
});
Ext.define('App.view.patient.RxOrders', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.grid.RowFormEditing',
		'Ext.grid.feature.Grouping',
		'Ext.selection.CheckboxModel',
		'App.ux.combo.PrescriptionHowTo',
		'App.ux.combo.PrescriptionTypes',
		'App.ux.combo.EncounterICDS',
		'App.ux.combo.MedicationInstructions',
		'App.ux.LiveRXNORMSearch',
		'App.ux.form.fields.plugin.HelpIcon'
	],
	xtype: 'patientrxorderspanel',
	title: _('rx_orders'),
	columnLines: true,
	tabConfig: {
		cls: 'order-tab'
	},
	itemId: 'RxOrderGrid',
	store: Ext.create('App.store.patient.RxOrders', {
		storeId: 'RxOrderStore',
		remoteFilter: true,
		pageSize: 200,
		sorters: [
			{
				property: 'date_ordered',
				direction: 'DESC'
			}
		]
	}),
	selModel: Ext.create('Ext.selection.CheckboxModel', {
		showHeaderCheckbox: false
	}),
	plugins: [
		{
			ptype: 'rowformediting',
			clicksToEdit: 2,
			items: [
				{
					xtype: 'container',
					layout: {
						type: 'hbox',
						align: 'stretch'
					},
					itemId: 'RxOrderGridFormContainer',
					items: [
						{
							xtype: 'container',
							layout: 'anchor',
							itemId: 'RxOrderGridFormContainerOne',
							items: [
								{
									xtype: 'datefield',
									fieldLabel: _('order_date'),
									format: 'Y-m-d',
									name: 'date_ordered',
									allowBlank: false,
									margin: '0 0 5 0'
								},
								{
									xtype: 'rxnormlivetsearch',
									itemId: 'RxNormOrderLiveSearch',
									hideLabel: false,
									fieldLabel: _('medication'),
									width: 700,
									name: 'STR',
									maxLength: 255,
									displayField: 'STR',
									valueField: 'STR',
									vtype: 'nonspecialcharactersrequired',
									allowBlank: false
								},
								{
									xtype: 'container',
									margin: '5 0',
									layout: {
										type: 'hbox'
									},
									items: [
										{
											xtype: 'numberfield',
											width: 170,
											fieldLabel: _('dispense'),
											minValue: 0.001,
											maxValue: 99999,
											name: 'dispense',
											decimalPrecision: 3,
											maxLength: 10,
											allowBlank: false,
											fixPrecision: function(value){
												var me = this,
													nan = isNaN(value),
													precision = me.decimalPrecision,
                                                    num,
                                                    numArr;

												if(nan || !value){
													return nan ? '' : value;
												}else if(!me.allowDecimals || precision <= 0){
													precision = 0;
												}
												num = String(value);
												if(num.indexOf('.') !== -1){
													numArr = num.split(".");
													if(numArr.length == 1){
														return Number(num);
													}else{
														return Number(numArr[0] + "." + numArr[1].charAt(0) + numArr[1].charAt(1) + numArr[1].charAt(2));
													}
												}else{
													return Number(num);
												}
											}
										},
										{
											xtype: 'numberfield',
											width: 130,
											fieldLabel: _('days_supply'),
											labelAlign: 'right',
											labelWidth: 75,
											minValue: 1,
											maxValue: 630,
											allowDecimals: false,
											name: 'days_supply'
										},
										{
											xtype: 'numberfield',
											width: 100,
											fieldLabel: _('refill'),
											labelAlign: 'right',
											labelWidth: 40,
											maxValue: 99,
											minValue: 0,
											name: 'refill',
											vtype: 'numeric',
											allowBlank: false
										},
										{
											xtype: 'encountericdscombo',
											itemId: 'RxEncounterDxCombo',
											fieldLabel: _('dx'),
											labelAlign: 'right',
											labelWidth: 30,
											width: 295,
											name: 'dxs'
										}
									]
								},
								{
									xtype: 'medicationinstructionscombo',
									itemId: 'RxOrderMedicationInstructionsCombo',
									width: 700,
									fieldLabel: _('instructions'),
									name: 'directions',
									maxLength: 140,
									validateOnBlur: true,
									vtype: 'nonspecialcharactersrequired',
									allowBlank: false
								},
								{
									xtype: 'textfield',
									width: 680,
									fieldLabel: '*' + _('notes_to_pharmacist'),
									itemId: 'RxOrderGridFormNotesField',
									name: 'notes',
									plugins:[
										{
											ptype: 'helpicon',
											helpMsg: _('rx_notes_to_pharmacist_warning')
										}
									],
									maxLength: 210
								},
								{
									xtype: 'container',
									html: ' *' + _('rx_notes_to_pharmacist_warning'),
									margin: '0 0 0 100'
								}
							]
						},
						{
							xtype: 'container',
							layout: 'anchor',
							itemId: 'RxOrderGridFormContainerTwo',
							padding: '25 0 0 0',
							items: [
								{
									xtype: 'container',
									layout: 'hbox',
									items:[
										{
											xtype: 'checkboxfield',
											fieldLabel: _('daw'),
											tooltip: _('dispensed_as_written'),
											width: 90,
											labelWidth: 70,
											labelAlign: 'right',
											name: 'daw',
											margin: '0 0 5 0'
										},
										{
											xtype: 'checkboxfield',
											fieldLabel: _('is_comp'),
											tooltip: _('is_compound'),
											width: 85,
											labelWidth: 65,
											labelAlign: 'right',
											name: 'is_compound',
											itemId: 'RxOrderCompCheckBox',
											margin: '0 0 5 0'
										},
										{
											xtype: 'checkboxfield',
											fieldLabel: _('is_sply'),
											tooltip: _('is_supply'),
											width: 85,
											labelWidth: 65,
											labelAlign: 'right',
											name: 'is_supply',
											itemId: 'RxOrderSplyCheckBox',
											margin: '0 0 5 0'
										}
									]
								},
								{
									xtype: 'datefield',
									fieldLabel: _('begin_date'),
									labelWidth: 70,
									labelAlign: 'right',
									width: 258,
									format: 'Y-m-d',
									name: 'begin_date',
									margin: '0 0 5 0',
									allowBlank: false
								},
								{
									xtype: 'datefield',
									fieldLabel: _('end_date'),
									labelWidth: 70,
									labelAlign: 'right',
									format: 'Y-m-d',
									width: 258,
									name: 'end_date'
								}
							]
						},
						{
							xtype: 'fieldset',
							title: _('active_drug_allergies'),
							html: _('none'),
							margin: '25 0 5 10',
							flex: 1
						}
					]
				}
			]
		}
	],
	columns: [
		{
			xtype: 'actioncolumn',
			width: 20,
			items: [
				{
					icon: 'resources/images/icons/cross.png',
					tooltip: _('remove')
				}
			]
		},
		{
			xtype: 'datecolumn',
			header: _('date_ordered'),
			dataIndex: 'date_ordered',
			format: 'Y-m-d'
		},
		{
			header: _('medication'),
			flex: 1,
			dataIndex: 'STR'
		},
		{
			header: _('daw'),
			width: 40,
			dataIndex: 'daw',
			tooltip: _('dispensed_as_written'),
			renderer: function(v){
				return app.boolRenderer(v);
			}
		},
		{
			header: _('dispense'),
			width: 60,
			dataIndex: 'dispense'
		},
		{
			header: _('refill'),
			width: 50,
			dataIndex: 'refill'
		},
		{
			header: _('instructions'),
			flex: 1,
			dataIndex: 'directions'
		},
		{
			header: _('related_dx'),
			width: 200,
			dataIndex: 'dxs',
			renderer: function(v){
				return v == false || v == 'false' || v[0] == false ? '' : v;
			}
		},
		{
			xtype: 'datecolumn',
			format: 'Y-m-d',
			header: _('begin_date'),
			width: 75,
			dataIndex: 'begin_date'
		},
		{
			xtype: 'datecolumn',
			header: _('end_date'),
			width: 75,
			format: 'Y-m-d',
			dataIndex: 'end_date'
		}
	],
	tbar: [
		'->',
		'-',
		{
			text: _('new_order'),
			iconCls: 'icoAdd',
			action: 'encounterRecordAdd',
			itemId: 'newRxOrderBtn'
		},
		'-',
		{
			text: _('clone_order'),
			iconCls: 'icoAdd',
			disabled: true,
			margin: '0 5 0 0',
			action: 'encounterRecordAdd',
			itemId: 'cloneRxOrderBtn'
		},
		'-',
		{
			text: _('print'),
			iconCls: 'icoPrint',
			disabled: true,
			margin: '0 5 0 0',
			itemId: 'printRxOrderBtn'
		}
	]
});

Ext.define('App.ux.combo.Specialties', {
	extend: 'App.ux.combo.ComboResettable',
	xtype: 'specialtiescombo',
	displayField: 'text_details',
	valueField: 'id',
	editable: false,
	emptyText: _('select'),
	queryMode: 'local',
	store: Ext.create('App.store.administration.Specialties',{
		pageSize: 500,
		autoLoad: true
	})
});
Ext.define('App.view.patient.encounter.SOAP', {
	extend: 'Ext.panel.Panel',
	requires: [
		'App.ux.combo.Specialties',
		'App.ux.grid.RowFormEditing',

		'App.view.patient.encounter.CarePlanGoals',
		'App.view.patient.encounter.CarePlanGoalsNewWindow',
		'App.ux.LiveSnomedProcedureSearch',
		'App.view.patient.encounter.AdministeredMedications',
		'App.view.patient.encounter.AppointmentRequestGrid'
	],
	action: 'patient.encounter.soap',
	itemId: 'soapPanel',
	title: _('soap'),
	layout: 'border',
	frame: true,

	pid: null,
	eid: null,

	initComponent: function(){
		var me = this;

		me.snippetStore = Ext.create('App.store.patient.encounter.snippetTree', {
			autoLoad: false
		});

		me.procedureStore = Ext.create('App.store.patient.encounter.Procedures');

		var snippetCtrl = App.app.getController('patient.encounter.Snippets');

		me.snippets = Ext.create('Ext.tree.Panel', {
			title: _('snippets'),
			itemId: 'SnippetsTreePanel',
			region: 'west',
			width: 300,
			split: true,
			animate: false,
			hideHeaders: true,
			useArrows: true,
			rootVisible: false,
			singleExpand: true,
			collapsed: !eval(g('enable_encounter_soap_templates')),
			collapsible: true,
			collapseMode: 'mini',
			hideCollapseTool: true,
			store: me.snippetStore,
			tools: [
				{
					xtype: 'button',
					text: _('category'),
					iconCls: 'icoAdd',
					itemId: 'SnippetCategoryAddBtn'
				}
			],
			columns: [
				{
					xtype: 'treecolumn', //this is so we know which column will show the tree
					text: 'Template',
					flex: 1,
					dataIndex: 'title',
					renderer: function(v, meta, record){
						var toolTip = record.data.text ? ' data-qtip="' + record.data.text + '" ' : '';

						return '<span ' + toolTip + '>' + (v !== '' ? v : record.data.text) + '</span>'
					}
				},
				{
					text: _('add'),
					width: 25,
					menuDisabled: true,
					xtype: 'actioncolumn',
					tooltip: _('add_snippet'),
					align: 'center',
					icon: 'resources/images/icons/add.gif',
					scope: me,
					handler: function(grid, rowIndex, colIndex, actionItem, event, record){
						snippetCtrl.onSnippetAddBtnClick(grid, rowIndex, colIndex, actionItem, event, record);
					},
					getClass: function(value, metadata, record){
						if(!record.data.leaf){
							return 'x-grid-center-icon';
						}else{
							return 'x-hide-display';
						}
					}
				},
				{
					text: _('edit'),
					width: 25,
					menuDisabled: true,
					xtype: 'actioncolumn',
					tooltip: 'Edit task',
					align: 'center',
					icon: 'resources/images/icons/edit.png',
					handler: function(grid, rowIndex, colIndex, actionItem, event, record){
						snippetCtrl.onSnippetBtnEdit(grid, rowIndex, colIndex, actionItem, event, record);
					}
				}
			],
			bbar:[
				{
					xtype: 'specialtiescombo',
					itemId: 'SoapTemplateSpecialtiesCombo',
					flex: 1
				}
			],
			viewConfig: {
				plugins: {
					ptype: 'treeviewdragdrop',
					expandDelay: 500,
					dragText: _('drag_and_drop_reorganize')
				},
				listeners: {
					scope: me,
					drop: me.onSnippetDrop
				}
			},
			listeners: {
				scope: me,
				itemclick: me.onSnippetClick,
				itemdblclick: me.onSnippetDblClick
			}
		});

		me.form = Ext.create('Ext.form.Panel', {
			autoScroll: true,
			action: 'encounter',
			bodyStyle: 'background-color:white',
			region: 'center',
			itemId: 'soapForm',
			fieldDefaults: {
				msgTarget: 'side'
			},
			plugins: {
				ptype: 'advanceform',
				autoSync: g('autosave'),
				syncAcl: a('edit_encounters')
			},
			items: [
				me.pWin = Ext.widget('window', {
					title: _('procedure'),
					maximized: true,
					closable: false,
					constrain: true,
					closeAction: 'hide',
					itemId: 'soapProcedureWindow',
					layout: 'fit',
					items: [
						me.pForm = Ext.widget('form', {
							bodyPadding: 10,
							layout: {
								type: 'vbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'snomedliveproceduresearch',
									name: 'code_text',
									displayField: 'FullySpecifiedName',
									valueField: 'FullySpecifiedName',
									listeners: {
										scope: me,
										select: me.onProcedureSelect
									}
								},
								{
									xtype: 'textareafield',
									name: 'observation',
									flex: 1
								}
							]
						})
					],
					buttons: [
						{
							text: _('cancel'),
							scope: me,
							handler: me.onProcedureCancel
						},
						{
							text: _('save'),
							scope: me,
							itemId: 'encounterRecordAdd',
							handler: me.onProcedureSave
						}
					]
				}),
				{
					xtype: 'fieldset',
					title: _('subjective'),
					margin: 5,
					items: [
						me.sField = Ext.widget('textarea', {
							name: 'subjective',
							anchor: '100%',
							enableKeyEvents: true,
							margin: '5 0 10 0'
						})
					]
				},
				{
					xtype: 'fieldset',
					title: _('objective'),
					margin: 5,
					items: [
						me.oField = Ext.widget('textarea', {
							name: 'objective',
							anchor: '100%'
						}),
						me.pGrid = Ext.widget('grid', {
							frame: true,
							name: 'procedures',
							emptyText: _('no_procedures'),
							margin: '5 0 10 0',
							store: me.procedureStore,
							columns: [
								{
									text: _('code'),
									dataIndex: 'code'
								},
								{
									text: _('description'),
									dataIndex: 'code_text',
									flex: 1
								}
							],
							listeners: {
								scope: me,
								itemdblclick: me.procedureEdit
							},
							dockedItems: [
								{
									xtype: 'toolbar',
									items: [
										{
											xtype: 'tbtext',
											text: _('procedures')
										},
										'->',
										{
											text: _('new_procedure'),
											scope: me,
											handler: me.onProcedureAdd,
											iconCls: 'icoAdd'
										}
									]
								}

							]
						})
					]
				},
				{
					xtype: 'fieldset',
					title: _('assessment'),
					margin: 5,
					items: [
						me.aField = Ext.widget('textarea', {
							name: 'assessment',
							anchor: '100%'
						}),
						me.dxField = Ext.widget('icdsfieldset', {
							name: 'dxCodes',
							margin: '5 0 10 0',
							itemId: 'SoapDxCodesField'
						})
					]
				},
				{
					xtype: 'fieldset',
					title: _('plan'),
					margin: 5,
					items: [
						me.pField = Ext.widget('textarea', {
							fieldLabel: _('instructions'),
							labelAlign: 'top',
							name: 'instructions',
							margin: '0 0 10 0',
							anchor: '100%'
						}),
						//me.pField = Ext.widget('textarea', {
						//	name: 'plan',
						//	anchor: '100%'
						//}),
						/**
						 * this is the grid to administer medication
						 * during visit...  for now we are going to
						 * document this via de medication tab
						 */
						//{
						//	xtype: 'administeredmedications',
						//	margin: '0 0 10 0'
						//},
						{
							xtype: 'appointmentrequestgrid',
							margin: '0 0 10 0'
						},
						{
							xtype: 'careplangoalsgrid',
							margin: '0 0 10 0'
						}
					]
				}
			],
			buttons: [
				{
					text: _('save'),
					iconCls: 'save',
					action: 'soapSave',
					scope: me,
					itemId: 'encounterRecordAdd',
					handler: me.onSoapSave
				}
			],
			listeners: {
				scope: me,
				recordloaded: me.formRecordLoaded
			}
		});

		me.phWindow = Ext.widget('window', {
			title: _('complete_snippet'),
			closeAction: 'hide',
			bodyPadding: 0,
			bodyBorder: false,
			border: false,
			items: [
				{
					xtype: 'textarea',
					border: false,
					width: 500,
					height: 150,
					margin: 0,
					grow: true,
					enableKeyEvents: true,
					listeners: {
						scope: me,
						specialkey: me.onPhTextAreaKey
					}
				}
			],
			buttons: [
				{
					xtype: 'tbtext',
					text: _('shift_enter_submit')
				},
				'->',
				{
					text: _('cancel'),
					handler: me.onPhWindowCancel
				},
				{
					text: _('submit'),
					scope: me,
					handler: me.onPhWindowSubmit
				}
			]
		});

		Ext.apply(me, {
			items: [ me.snippets, me.form ]
		});

		me.callParent(arguments);

	},

	/**
	 *
	 * @param cmb
	 * @param record
	 */
	onProcedureSelect: function(cmb, record){
		var me = this,
			form = me.pForm.getForm(),
			procedure = form.getRecord();
		procedure.set({
			code: record[0].data.ConceptId,
			code_type: record[0].data.CodeType,
			code_text: record[0].data.FullySpecifiedName
		});

		//form.findField('code_text').setValue(record[0].data.CodeType);
	},

	/**
	 *
	 */
	onProcedureAdd: function(){
		var me = this,
			rec;
		rec = Ext.create('App.model.patient.encounter.Procedures', {
			pid: me.pid,
			eid: me.eid,
			create_uid: app.user.id,
			update_uid: app.user.id,
			create_date: new Date(),
			update_date: new Date()
		});

		me.procedureStore.add(rec);
		me.procedureEdit(null, rec);
	},

	/**
	 *
	 */
	onProcedureCancel: function(){
		this.procedureStore.rejectChanges();
		this.pWin.close();
		this.query('button[action=soapSave]')[0].enable();
		this.pWin.setTitle(_('procedure'));
	},

	/**
	 *
	 */
	onProcedureSave: function(){
		var me = this,
			form = me.pForm.getForm(),
			record = form.getRecord(),
			values = form.getValues();

		record.set(values);

		this.procedureStore.sync();
		this.pWin.close();
		this.query('button[action=soapSave]')[0].enable();
		this.pWin.setTitle(_('procedure'));
	},

	/**
	 *
	 */
	onShow: function(){
		var me = this;
		me.callParent();

		me.sField.focus();

		if(me.eid != app.patient.eid){
			me.pid = app.patient.pid;
			me.eid = app.patient.eid;
			me.procedureStore.load({
				filters: [
					{
						property: 'eid',
						value: me.eid
					}
				]
			});
		}
	},

	/**
	 *
	 * @param view
	 * @param record
	 */
	procedureEdit: function(view, record){
		if(record.data.code_text !== '' || record.data.code !== ''){
			this.pWin.setTitle(record.data.code_text + ' [' + record.data.code + ']');
		}else{
			this.pWin.setTitle(_('new_procedure'));
		}

		this.pForm.getForm().loadRecord(record);
		this.pWin.show(this.pGrid.el);
		this.query('button[action=soapSave]')[0].disable();
	},

	/**
	 *
	 * @param btn
	 */
	onSoapSave: function(btn){
		this.enc.onEncounterUpdate(btn)
	},

	/**
	 *
	 * @param form
	 * @param record
	 */
	formRecordLoaded: function(form, record){
		var store = record.dxCodes();
		store.on('write', function(){
			record.store.fireEvent('write');
		});
		this.dxField.loadIcds(record.dxCodes());
	},

	/**
	 *
	 * @param view
	 * @param record
	 */
	onSnippetClick: function(view, record){
		if(!record.data.leaf) record.expand();
	},

	/**
	 *
	 * @param view
	 * @param record
	 */
	onSnippetDblClick: function(view, record){

		if(record.data.leaf){
			var me = this,
				form = me.form.getForm(),
				action = view.panel.action.split('-'),
				field = form.findField(action[0]),
				text = record.data.text,
				value = field.getValue(),
				PhIndex = text.indexOf('??'),
				textArea = me.phWindow.down('textarea'),
				glue = value.substr(value.length - 1) == ' ' ? '' : ' ';

			if(PhIndex == -1){
				field.setValue(value + glue + text);
			}else{
				me.phWindow.show();
				textArea.setValue(text);
				Ext.Function.defer(function(){
					textArea.selectText(PhIndex, PhIndex + 2)
				}, 300);
			}
		}else{
			record.expand();
		}
	},

	/**
	 *
	 */
	onPhWindowSubmit: function(){
		var me = this,
			textArea = me.phWindow.down('textarea'),
			form = me.form.getForm(),
			action = me.snippets.action.split('-'),
			field = form.findField(action[0]),
			value = field.getValue(),
			text = textArea.getValue(),
			glue = value.substr(value.length - 1) == ' ' ? '' : ' ';

		field.setValue(value + glue + text);
		me.phWindow.close();
		textArea.reset();
	},

	/**
	 *
	 * @param btn
	 */
	onPhWindowCancel: function(btn){
		btn.up('window').close();
	},

	/**
	 *
	 * @param field
	 * @param e
	 */
	onPhTextAreaKey: function(field, e){
		if(e.getKey() == e.ENTER) this.onPhWindowSubmit();
	},

	///**
	// * This will add a period to the end of the sentence if last character is not a . ? or
	// * @param sentence
	// * @return {*|String|String|String|String|String|String|String|String|String|String}
	// */
	//closeSentence: function(sentence){
	//	var v = Ext.String.trim(sentence),
	//		c = v.charAt(v.length - 1);
	//	if(v == '') return v;
	//	return ((c == '.' || c == '!' || c == '?') ? v : v + '. ');
	//},

	/**
	 *
	 * @param node
	 * @param data
	 * @param overModel
	 */
	onSnippetDrop: function(node, data, overModel){
		var me = this, pos = 10;
		for(var i = 0; i < overModel.parentNode.childNodes.length; i++){
			overModel.parentNode.childNodes[i].set({pos: pos});
			pos = pos + 10;
		}
		me.snippetStore.sync();
	}
});

Ext.define('App.view.patient.encounter.ProgressNotesHistory', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.ux.form.SearchField'
	],
	xtype: 'progressnoteshistory',
	title: _('history'),
	hideHeaders: true,
	initComponent: function(){

		var me = this;

		me.store = Ext.create('App.store.patient.ProgressNotesHistory');

		me.columns = [
			{
				dataIndex: 'progress',
				flex: 1
			}
		];

		me.tbar = [
			{
				xtype: 'gaiasearchfield',
				emptyText: _('search'),
				flex: 1,
				itemId: 'ProgressNotesHistorySearchField',
				store: me.store,
				filterFn: function(record, value){
					return record.data.progress.search(new RegExp(value, 'ig')) !== -1;

				}
			}
		];

		me.callParent();
	}

});
Ext.define('App.ux.LiveAllergiesSearch', {
	extend: 'Ext.form.ComboBox',
	alias: 'widget.allergieslivesearch',
	requires: [
		'App.model.administration.Allergies'
	],
	hideLabel: true,
	displayField: 'allergy',
	valueField: 'allergy',
	initComponent: function(){
		var me = this;

		me.store = Ext.create('Ext.data.Store', {
			model: 'App.model.administration.Allergies',
			pageSize: 25,
			autoLoad: false
		});

		Ext.apply(this, {
			store: me.store,
			emptyText: _('allergy_search') + '...',
			typeAhead: false,
			hideTrigger: true,
			minChars: 3,
			listConfig: {
				loadingText: _('searching') + '...',
				getInnerTpl: function(){
					return '<div class="search-item"><h3>{allergy}<span style="font-weight: normal"> ({allergy_code}) </span></h3></div>';
				}
			},
			pageSize: 25
		});

		me.callParent();
	}
});

Ext.define('App.view.patient.Allergies', {
	extend: 'Ext.grid.Panel',
	requires: [
		'App.store.patient.Allergies',
		'App.ux.grid.RowFormEditing',
		'App.ux.LiveRXNORMAllergySearch',
		'App.ux.LiveAllergiesSearch',
		'App.ux.combo.Allergies',
		'App.ux.combo.AllergiesReaction',
		'App.ux.combo.AllergiesTypes',
		'App.ux.combo.AllergiesLocation',
		'App.ux.combo.AllergiesSeverity'
	],
	xtype: 'patientallergiespanel',
	title: _('allergies'),
	columnLines: true,
	store: Ext.create('App.store.patient.Allergies', {
		remoteFilter: true,
		autoSync: false
	}),
	columns: [
		{
			text: _('type'),
			width: 100,
			dataIndex: 'allergy_type'
		},
		{
			text: _('name'),
			flex: 1,
			dataIndex: 'allergy',
			renderer:function(v, meta, record){
				var codes = '';
				if(record.data.allergy_code != ''){
					codes += ' ( <b>'+ record.data.allergy_code_type + ':</b> ' + record.data.allergy_code +' )';
				}
				return v + codes;
			}
		},
		{
			text: _('location'),
			width: 220,
			dataIndex: 'location'
		},
		{
			text: _('reaction'),
			width: 220,
			dataIndex: 'reaction'
		},
		{
			text: _('severity'),
			width: 220,
			dataIndex: 'severity'
		},
		{
			text: _('status'),
			width: 55,
			dataIndex: 'status'
		}
	],
	plugins: Ext.create('App.ux.grid.RowFormEditing', {
		autoCancel: false,
		errorSummary: false,
		clicksToEdit: 1,
		items: [
			{
				title: _('general'),
				xtype: 'container',
				padding: '0 10',
				layout: 'vbox',
				items: [
					{
						/**
						 * Line one
						 */
						xtype: 'fieldcontainer',
						layout: 'hbox',
						defaults: {
							margin: '0 10 0 0'
						},
						items:[
							{
								xtype: 'gaiaehr.combo',
								fieldLabel: _('type'),
								itemId:'allergyTypeCombo',
								name: 'allergy_type',
								allowBlank: false,
								labelWidth: 70,
								width: 700,
								list: 85,
								enableKeyEvents: true
							},
							{
								xtype: 'gaiaehr.combo',
								fieldLabel: _('status'),
								name: 'status',
								list: 113,
								itemId: 'allergyStatusCombo',
								labelWidth: 80,
								allowBlank: false
							}
						]
					},
					{
						/**
						 * Line two
						 */
						xtype: 'fieldcontainer',
						layout: 'hbox',
						defaults: {
							margin: '0 10 0 0'
						},
						items: [
							{
								xtype: 'allergieslivesearch',
								fieldLabel: _('allergy'),
								itemId: 'allergySearchCombo',
								name: 'allergy',
								hideLabel: false,
								enableKeyEvents: true,
								width: 700,
								labelWidth: 70,
								allowBlank: false
							},
							{
								xtype:'rxnormallergylivetsearch',
								fieldLabel: _('allergy'),
								itemId:'allergyMedicationCombo',
								name: 'allergy',
								hideLabel: false,
								hidden: true,
								disabled: true,
								enableKeyEvents: true,
								width: 700,
								labelWidth: 70,
								allowBlank: false
							},
							{
								fieldLabel: _('begin_date'),
								xtype: 'datefield',
								format: 'Y-m-d',
								name: 'begin_date',
								labelWidth: 80

							}
						]

					},
					{
						/**
						 * Line three
						 */
						xtype: 'fieldcontainer',
						layout: 'hbox',
						defaults: {
							margin: '0 10 0 0'
						},
						items: [
							{
								xtype: 'gaiaehr.combo',
								fieldLabel: _('location'),
								name: 'location',
								action: 'location',
								itemId: 'allergyLocationCombo',
								width: 225,
								list: 79,
								labelWidth: 70
							},
							{
								xtype: 'gaiaehr.combo',
								fieldLabel: _('reaction'),
								itemId: 'allergyReactionCombo',
								name: 'reaction',
								width: 230,
								queryMode : 'local',
								labelWidth: 70,
								allowBlank: false
							},
							{
								xtype: 'gaiaehr.combo',
								fieldLabel: _('severity'),
								name: 'severity',
								itemId: 'allergySeverityCombo',
								width: 225,
								list: 84,
								labelWidth: 70,
								allowBlank: false
							},
							{
								fieldLabel: _('end_date'),
								xtype: 'datefield',
								format: 'Y-m-d',
								name: 'end_date',
								labelWidth: 80
							}
						]
					}
				]
			}
		]
	}),
	tbar:[
		'->',
        {
            text: _('no_active_allergy'),
            itemId: 'addNoActiveAllergyBtn',
            iconCls: 'icoAdd'
        },
		{
			text: _('add_new'),
			itemId: 'addAllergyBtn',
			action: 'encounterRecordAdd',
			iconCls: 'icoAdd'
		}
	],
	bbar: [
		{
			text: _('only_active'),
			enableToggle: true,
			itemId: 'activeAllergyBtn'
		},
		'->',
		{
			text: _('review'),
			action: 'encounterRecordAdd',
			itemId: 'reviewAllergiesBtn'
		}
	]
});

Ext.define('App.view.patient.windows.Medical', {
	extend: 'App.ux.window.Window',
	title: _('medical_window'),
	itemId: 'MedicalWindow',
	closeAction: 'hide',
	bodyStyle: 'background-color:#fff',
	modal: true,
	requires: [
		'App.view.patient.Results',
		'App.view.patient.Referrals',
		'App.view.patient.Immunizations',
		'App.view.patient.Medications',
		'App.view.patient.ActiveProblems',
		'App.view.patient.SocialPanel',
		'App.view.patient.Allergies',
		'App.view.patient.AdvanceDirectives',
		'App.view.patient.CognitiveAndFunctionalStatus',
		'App.view.patient.LabOrders',
		'App.view.patient.RadOrders',
		'App.view.patient.RxOrders',
		'App.view.patient.DoctorsNotes',
		'App.view.patient.FamilyHistory'
	],

	initComponent: function(){
		var me = this;

		me.items = [
			{
				xtype:'tabpanel',
				border:false,
				bodyBorder:false,
				plain: true,
				margin: 5,
				height: Ext.getBody().getHeight() < 700 ? (Ext.getBody().getHeight() - 100) : 600,
				width: Ext.getBody().getWidth() < 1550 ? (Ext.getBody().getWidth() - 50) : 1500,
				items:[
					{
						xtype:'patientimmunizationspanel',
						itemId: 'immunization'
					},
					{
						xtype: 'patientallergiespanel',
						itemId: 'allergies'
					},
					{
						xtype: 'patientactiveproblemspanel',
						itemId: 'activeproblems'
					},
					{
						xtype: 'patientfamilyhistorypanel',
						itemId: 'familyhistory'
					},
					{
						xtype: 'patientadvancedirectivepanel',
						itemId: 'advancedirectives'
					},
					{
						xtype:'patientmedicationspanel',
						itemId: 'medications'
					},
					{
 						xtype:'patientresultspanel',
						itemId: 'laboratories'
					},
					{
						xtype: 'patientsocialpanel',
						itemId: 'social'
					},
					{
						xtype: 'patientcognitiveandfunctionalstatuspanel',
						itemId: 'functionalstatus'
					},
					{
						xtype: 'patientreferralspanel',
						itemId: 'referrals'
					},
					/**
					 * DOCTORS NOTE
					 */
					{
						xtype: 'patientdoctorsnotepanel'
					},
					/**
					 * LAB ORDERS PANEL
					 */
					{
						xtype: 'patientlaborderspanel'
					},
					/**
					 * X-RAY PANEL
					 */
					{
						xtype: 'patientradorderspanel'
					},
					/**
					 * PRESCRIPTION PANEL
					 */
					{
						xtype:'patientrxorderspanel'
					}
				]
			}
		];

		me.buttons = [
			{
				text: _('close'),
				scope: me,
				handler: function(){
					me.close();
				}
			}
		];

		me.listeners = {
			scope: me,
			close: me.onMedicalWinClose,
			show: me.onMedicalWinShow
		};

		me.callParent(arguments);
	},

	cardSwitch:function(action){
		var me = this,
			tabPanel = me.down('tabpanel'),
			activePanel = tabPanel.getActiveTab(),
			toPanel = tabPanel.query('#' + action)[0];

		if(activePanel == toPanel){
			activePanel.fireEvent('activate', activePanel);
		}else{
			tabPanel.setActiveTab(toPanel);
			me.setWindowTitle(toPanel.title);
		}
	},

	setWindowTitle:function(title){
		this.setTitle(app.patient.name + ' (' + title + ') ' + (app.patient.readOnly ? '-  <span style="color:red">[Read Mode]</span>' :''));
	},

	onMedicalWinShow: function(){
		var p = this.down('tabpanel'),
			w = Ext.getBody().getWidth() < 1550 ? (Ext.getBody().getWidth() - 50) : 1500,
			h = Ext.getBody().getHeight() < 700 ? (Ext.getBody().getHeight() - 100) : 600;
		p.setSize(w, h);
		this.alignTo(Ext.getBody(), 'c-c');

//		say(p);
//		say(Ext.getBody().getWidth());
//		say(w);
//		say(Ext.getBody().getHeight());
//		say(h);
	},

	onMedicalWinClose: function(){
		if(app.getActivePanel().$className == 'App.view.patient.Summary'){
			app.getActivePanel().loadStores();
		}
	}
});
Ext.define('App.ux.form.fields.CheckBoxWithFamilyRelation', {
	extend: 'App.ux.form.fields.CheckBoxWithText',
	alias: 'widget.checkboxwithfamilyhistory',
	textField: {
		xtype: 'gaiaehr.combo',
		fieldLabel: _('relation'),
		labelAlign: 'right',
		labelWidth: 80,
		list: 109,
		allowBlank: false,
		loadStore: true
	},

	initComponent:function(){
		this.inputValue = this.code || '1';
		this.callParent();
	},

	getValue: function(){
		var value = '',
			ckValue = this.chekboxField.getSubmitValue(),
			txtValue;

		if(ckValue != '0'){

			ckValue += ':' + this.chekboxField.boxLabel;

			var store = this.textField.getStore(),
				rec = store.getById(this.textField.getSubmitValue());
			txtValue = rec ? rec.get('code_type') + ':' + rec.get('code') + ':' + rec.get('option_name') : '0';
		}else{
			txtValue = '0';
		}

		if(ckValue)    value = ckValue + '~' + txtValue;

		return value;
	},

	setValue: function(value){

		if(value && value.split){
			var val = value.split('~');
			this.chekboxField.setValue(val[0] || 0);

			if(val[1] != '0' && val[1].split){
				var relation = val[1].split(':');
				this.textField.select(relation[1] || relation[0] || '');
			}else{
				this.textField.setValue('');
			}

			return;
		}
		this.chekboxField.setValue(0);
		this.textField.setValue('');
	}
});
Ext.define('App.view.patient.Encounter', {
	extend: 'App.ux.RenderPanel',
	pageTitle: _('encounter'),
	pageLayout: 'border',
	itemId: 'encounterPanel',
	requires: [
		'App.store.patient.Encounters',
		'App.store.patient.Vitals',
		'App.store.administration.AuditLog',
		'App.view.patient.encounter.SOAP',
		'App.view.patient.encounter.HealthCareFinancingAdministrationOptions',
		'App.view.patient.encounter.CurrentProceduralTerminology',
		'App.view.patient.encounter.ProgressNotesHistory',
		'App.view.patient.ProgressNote',
		'App.view.patient.DecisionSupportWarningPanel',
		'App.ux.combo.EncounterPriority',
		'App.ux.combo.ActiveProviders'
	],

	enableCPT: eval(g('enable_encounter_cpt')),
	enableHCFA: eval(g('enable_encounter_hcfa')),
	enableSOAP: eval(g('enable_encounter_soap')),
	enableVitals: eval(g('enable_encounter_vitals')),
	enableEncHistory: eval(g('enable_encounter_history')),
	enableFamilyHistory: eval(g('enable_encounter_family_history')),
	enableItemsToReview: eval(g('enable_encounter_items_to_review')),
	enableReviewOfSystem: eval(g('enable_encounter_review_of_systems')),
	enableReviewOfSystemChecks: eval(g('enable_encounter_review_of_systems_cks')),
	enableClinicalDecisionSupport: eval(g('enable_clinical_decision_support')),

	showRating: true,
	conversionMethod: 'english',

	pid: null,
	eid: null,
	encounter: null,

	currEncounterStartDate: null,
	initComponent: function(){
		var me = this;

		me.renderAdministrative = a('access_enc_hcfa') || a('access_enc_cpt') || a('access_enc_history');

		me.timerTask = {
			scope: me,
			run: function(){
				me.encounterTimer();
			},
			interval: 1000 //1 second
		};

		/**
		 * stores
		 * @type {*}
		 */
		me.encounterStore = Ext.create('App.store.patient.Encounters', {
			listeners: {
				scope: me,
				datachanged: me.getProgressNote
			}
		});

		me.encounterEventHistoryStore = Ext.create('App.store.administration.AuditLog');

		if(me.renderAdministrative){
			me.centerPanel = Ext.create('Ext.tab.Panel', {
				region: 'center',
				margin: '1 0 0 0',
				activeTab: 0,
				bodyPadding: 5,
				listeners: {
					render: function(){
						this.items.each(function(i){
							i.tab.on('click', function(){
								me.onTapPanelChange(this);
							});
						});
					}
				}
			});
		}else{
			me.centerPanel = Ext.create('Ext.panel.Panel', {
				region: 'center',
				margin: '1 0 0 0',
				layout: 'fit',
				bodyPadding: 5
			});
		}

		/**
		 * Encounter Tab Panel and its Panels...
		 * @type {*}
		 */
		me.encounterTabPanel = me.centerPanel.add(
			Ext.create('Ext.tab.Panel', {
				title: me.renderAdministrative ? _('encounter') : false,
				itemId: 'encounter',
				plain: true,
				activeItem: 0,
				border: false,
				action: 'encounterTabPanel',
				defaults: {
					bodyStyle: 'padding:15px',
					bodyBorder: true,
					layout: 'fit'
				}
			})
		);

		if(me.enableClinicalDecisionSupport && a('access_clinical_decision_support')){
			me.encounterTabPanel.addDocked({
				xtype: 'decisionsupportwarningpanel',
				itemId: 'DecisionSupportWarningPanel',
				dock: 'top'
			});
		}

		if(me.enableVitals && a('access_patient_vitals')){
			me.vitalsPanel = me.encounterTabPanel.add(
				Ext.create('App.view.patient.Vitals')
			);
		}

		if(me.enableReviewOfSystem && a('access_review_of_systems')){
			me.reviewSysPanel = me.encounterTabPanel.add(
				Ext.create('Ext.form.Panel', {
					autoScroll: true,
					action: 'encounter',
					title: _('review_of_systems'),
					frame: true,
					bodyPadding: 5,
					bodyStyle: 'background-color:white',
					fieldDefaults: {
						msgTarget: 'side'
					},

					plugins: {
						ptype: 'advanceform',
						autoSync: g('autosave'),
						syncAcl: a('edit_encounters')
					},
					buttons: [
						{
							text: _('save'),
							iconCls: 'save',
							action: 'reviewOfSystems',
							scope: me,
							itemId: 'encounterRecordAdd',
							handler: me.onEncounterUpdate
						}
					]
				})
			);
		}

		if(me.enableReviewOfSystemChecks && a('access_review_of_systems_checks')){
			me.reviewSysCkPanel = me.encounterTabPanel.add(
				Ext.create('Ext.form.Panel', {
					autoScroll: true,
					action: 'encounter',
					title: _('review_of_systems_checks'),
					frame: true,
					bodyPadding: 5,
					bodyStyle: 'background-color:white',
					fieldDefaults: {
						msgTarget: 'side'
					},
					plugins: {
						ptype: 'advanceform',
						autoSync: g('autosave'),
						syncAcl: a('edit_encounters')
					},
					buttons: [
						{
							text: _('save'),
							iconCls: 'save',
							action: 'reviewOfSystemsChecks',
							scope: me,
							itemId: 'encounterRecordAdd',
							handler: me.onEncounterUpdate
						}
					]
				})
			);
		}

		if(me.enableItemsToReview && a('access_itmes_to_review')){
			me.itemsToReview = me.encounterTabPanel.add(
				Ext.create('App.view.patient.ItemsToReview', {
					title: _('items_to_review'),
					bodyPadding: '7 5 2 5'
				})
			);
		}

		if(me.enableSOAP && a('access_soap')){
			me.soapPanel = me.encounterTabPanel.add(
				Ext.create('App.view.patient.encounter.SOAP', {
					bodyStyle: 'padding:0',
					enc: me
				})
			);
		}

		/**
		 * Administravive Tab Panel and its Panels
		 * @type {*}
		 */
		if((me.enableHCFA && a('access_enc_hcfa')) ||
			(me.enableCPT && a('access_enc_cpt')) ||
			(me.enableEncHistory && a('access_enc_history'))){
			me.administrativeTabPanel = me.centerPanel.add(
				Ext.create('Ext.tab.Panel', {
					title: _('administrative'),
					itemId: 'administrative',
					plain: true,
					activeItem: 0,
					defaults: {
						bodyStyle: 'padding:15px',
						bodyBorder: true,
						layout: 'fit'
					}
				})
			);
		}

		if(me.enableHCFA && a('access_enc_hcfa')){
			me.MiscBillingOptionsPanel = me.administrativeTabPanel.add(
				Ext.create('App.view.patient.encounter.HealthCareFinancingAdministrationOptions', {
					autoScroll: true,
					title: _('misc_billing_options_HCFA_1500'),
					frame: true,
					bodyPadding: 5,
					bodyStyle: 'background-color:white',
					fieldDefaults: {
						msgTarget: 'side'
					},
					plugins: {
						ptype: 'advanceform',
						autoSync: g('autosave'),
						syncAcl: a('edit_enc_hcfa')
					},
					buttons: [
						{
							text: _('save'),
							iconCls: 'save',
							action: 'soap',
							scope: me,
							handler: me.onEncounterUpdate
						}
					]
				})
			);
		}

		if(me.enableCPT && a('access_enc_cpt')){
			me.CurrentProceduralTerminology = me.administrativeTabPanel.add(
				Ext.create('App.view.patient.encounter.CurrentProceduralTerminology', {
					title: _('current_procedural_terminology')
				})
			);
		}

		if(me.enableEncHistory && a('access_enc_history')){
			me.EncounterEventHistory = me.administrativeTabPanel.add(
				Ext.create('App.ux.grid.EventHistory', {
					bodyStyle: 0,
					title: _('encounter_history'),
					store: me.encounterEventHistoryStore
				})
			);
		}

		/**
		 * Progress Note
		 */
		me.rightPanel = Ext.create('Ext.tab.Panel', {
			title: _('encounter_progress_note'),
			width: 500,
			region: 'east',
			split: true,
			collapsible: true,
			animCollapse: true,
			collapsed: true,
			bodyPadding: 0,
			margin: 0,
			padding: 0,
			itemId: 'EncounterProgressNotesPanel',
			listeners: {
				scope: this,
				collapse: me.progressNoteCollapseExpand,
				expand: me.progressNoteCollapseExpand
			},
			items: [
				{
					xtype:'progressnoteshistory',
					itemId: 'EncounterProgressNotesHistoryGrid'
				},
				me.progressNote = Ext.create('App.view.patient.ProgressNote', {
					title: _('progress_note'),
					autoScroll: true,
					bodyPadding: 0,
					margin: 0,
					padding: 0,
					tbar: [
						'->', {
							xtype: 'tool',
							type: 'print',
							tooltip: _('print_progress_note'),
							scope: me,
							handler: function(){
								var win = window.open(
                                    'print.html',
                                    'win',
                                    'left=20,top=20,width=700,height=700,toolbar=0,resizable=1,location=1,scrollbars=1,menubar=0,directories=0'
                                );
								var dom = me.progressNote.body.dom;
								var wrap = document.createElement('div');
								var html = wrap.appendChild(dom.cloneNode(true));
								win.document.write(html.innerHTML);
								Ext.defer(function(){
									win.print();
								}, 1000);
							}
						}
					]
				})
			]

		});

		me.panelToolBar = Ext.create('Ext.toolbar.Toolbar', {
			dock: 'top',
			defaults: {
				scope: me,
				handler: me.onToolbarBtnHandler
			},
			items: [
				'-',
				{
					text: _('immunizations') + ' ',
					action: 'immunization'
				},
				'-',
				{
					text: _('allergies') + ' ',
					action: 'allergies'
				},
				'-',
				{
					text: _('active_problems') + ' ',
					action: 'activeproblems'
				},
				'-',
				{
					text: _('family_history') + ' ',
					action: 'familyhistory'
				},
				'-',
				{
					text: _('advance_directives') + ' ',
					action: 'advancedirectives'
				},
				'-',
				{
					text: _('medications') + ' ',
					action: 'medications'
				},
				'-',
				{
					text: _('results') + ' ',
					action: 'laboratories'
				},
				'-',
				{
					text: _('social') + ' ',
					action: 'social'
				},
				'-',
				{
					text: _('functional_status') + ' ',
					action: 'functionalstatus'
				},
				'-',
				{
					text: _('referrals') + ' ',
					action: 'referrals'
				},
				'-',
				{
					text: _('new_doctors_note'),
					action: 'DoctorsNotes'
				},
				'-',
				{
					text: _('lab_orders'),
					action: 'LabOrders',
					cls: 'order-btn'
				},
				'-',
				{
					text: _('xray_ct_orders'),
					action: 'RadOrders',
					cls: 'order-btn'
				},
				'-',
				{
					text: _('rx_orders'),
					action: 'RxOrderGrid',
					cls: 'order-btn'
				},
				'-',
				'->',
				'-',
				{
					xtype:'button',
					action: 'encounter',
					text: _('encounter_details')
				},
				'-',
				me.priorityCombo = Ext.create('App.ux.combo.EncounterPriority', {
					listeners: {
						scope: me,
						select: me.prioritySelect
					}
				}),
				'-'
			]
		});

		if(a('access_encounter_checkout')){
			me.panelToolBar.add({
				text: _('sign'),
				icon: 'resources/images/icons/edit.png',
				handler: me.onSignEncounter
			}, '-');
		}

		me.pageBody = [me.centerPanel, me.rightPanel];

		me.listeners = {
			beforerender: me.beforePanelRender
		};

		me.callParent();
		me.down('panel').addDocked(me.panelToolBar);

	},

	/**
	 * opens the Medical window
	 * @param btn
	 */
	onToolbarBtnHandler: function(btn){
		if(btn.action == 'encounter'){
			app.updateEncounter(this.encounter);
		}else{
			app.onMedicalWin(btn.action);
		}

	},

	/**
	 * opens the Chart window
	 */
	onChartWindowShow: function(){
		app.onChartsWin();
	},

	prioritySelect: function(cmb, records){
		this.changeEncounterPriority(records[0].data.option_value);
	},

	changeEncounterPriority: function(priority){
		var me = this, params = {
			pid: me.pid,
			eid: me.eid,
			priority: priority
		};
		Encounter.updateEncounterPriority(params, function(){
			app.patientButtonRemoveCls();
			app.patientBtn.addCls(priority);
		});
		me.getProgressNote();
	},

	/**
	 * Sends the data to the server to be saved.
	 * This function needs the button action to determine
	 * which form  to save.
	 * @param SaveBtn
	 */
	onEncounterUpdate: function(SaveBtn){
		var me = this,
			form,
            values,
            store,
            record,
            storeIndex;

		if(SaveBtn.action == "encounter"){
			form = me.newEncounterWindow.down('form').getForm();
		}else{
			form = SaveBtn.up('form').getForm();
		}

		if(form.isValid()){
			values = form.getValues();

			if(SaveBtn.action == 'encounter'){

				if(a('add_encounters')){
					record = form.getRecord();
					record.set(values);
					record.save({
						callback: function(record){
							var data = record.data;
							app.patientButtonRemoveCls();
							app.patientBtn.addCls(data.priority);
							me.openEncounter(data.eid);
							SaveBtn.up('window').hide();
							/** GAIAEH-177 GAIAEH-173 170.302.r Audit Log (core) **/
							app.AuditLog('Patient encounter created');
						}
					});
				}else{
					SaveBtn.up('window').close();
					app.accessDenied();
				}

			}else{

				if(a('edit_encounters')){

					record = form.getRecord();
					store = record.store;
					values = me.addDefaultData(values);
					record.set(values);

					app.fireEvent('encounterbeforesync', me, store, form);

					store.sync({
						callback: function(){

							app.fireEvent('encountersync', me, store, form);

							me.msg('Sweet!', _('encounter_updated'));
							/** GAIAEH-177 GAIAEH-173 170.302.r Audit Log (core) **/
							app.AuditLog('Patient encounter updated');
						}
					});

					me.encounterEventHistoryStore.load({
						filters: [
							{
								property: 'eid',
								value: me.eid
							}
						]
					});

				}else{
					app.accessDenied();
				}
			}
		}
	},

	/**
	 * Takes the form data to be send and adds the default
	 * data used by every encounter form. For example
	 * pid (Patient ID), eid (Encounter ID), uid (User ID),
	 * and date (Current datetime as 00-00-00 00:00:00)
	 * @param data
	 */
	addDefaultData: function(data){
		data.pid = this.pid;
		data.eid = this.eid;
		data.uid = user.id;
		data.date = Ext.Date.format(new Date(), 'Y-m-d H:i:s');
		return data;
	},

	/**
	 *
	 * @param eid
	 */
	openEncounter: function(eid){
		var me = this,
			vitals,
			record,
			store;

		me.el.mask(_('loading...') + ' ' + _('encounter') + ' - ' + eid);
		me.resetTabs();

		/** GAIAEH-177 GAIAEH-173 170.302.r Audit Log (core) **/
		app.AuditLog('Patient encounter viewed');

		if(me.encounter) delete me.encounter;

		App.model.patient.Encounter.load(eid, {
			scope: me,
			callback: function(record){
                var timer,
                    data;

				me.encounter = record;
				data = me.encounter.data;

				// set pid globally for convenient use
				me.pid = data.pid;
				me.eid = data.eid;

				me.currEncounterStartDate = data.service_date;

				app.fireEvent('beforeencounterload', me.encounter);

				/** get progress note **/
				me.getProgressNote();

				if(!data.close_date){
					me.startTimer();
					me.setButtonsDisabled(me.getButtonsToDisable());
				}else{
					if(me.stopTimer()){
						timer = me.timer(data.service_date, data.close_date),
							patient = app.patient;

						me.updateTitle(patient.name + ' - ' + patient.sexSymbol + ' - ' + patient.age.str + ' - ' + Ext.Date.format(me.currEncounterStartDate, 'F j, Y, g:i:s a') + ' (' + _('closed_encounter') + ')', app.patient.readOnly, timer);
						me.setButtonsDisabled(me.getButtonsToDisable(), true);
					}
				}

				if(me.reviewSysPanel){
					store = me.encounter.reviewofsystems();
					store.on('write', me.getProgressNote, me);
					me.reviewSysPanel.getForm().loadRecord(store.getAt(0));
				}

				if(me.reviewSysCkPanel){
					store = me.encounter.reviewofsystemschecks();
					store.on('write', me.getProgressNote, me);
					me.reviewSysCkPanel.getForm().loadRecord(store.getAt(0));
				}

				if(me.soapPanel){
					store = me.encounter.soap();
					store.on('write', me.getProgressNote, me);
					me.soapPanel.down('form').getForm().loadRecord(store.getAt(0));
				}

				if(me.MiscBillingOptionsPanel){
					store = me.encounter.hcfaoptions();
					me.MiscBillingOptionsPanel.getForm().loadRecord(store.getAt(0));
				}

				me.priorityCombo.setValue(data.priority);

				me.encounterEventHistoryStore.load({
					filters: [
						{
							property: 'eid', value: me.eid
						}
					]
				});

				if(me.CurrentProceduralTerminology){
					me.CurrentProceduralTerminology.encounterCptStoreLoad(me.pid, me.eid, function(){
						me.CurrentProceduralTerminology.setDefaultQRCptCodes();
					});
				}

				App.app.getController('patient.ProgressNotesHistory').loadPatientProgressHistory(data.pid, data.eid);

				app.setEncounterClose(record.isClose());

				app.fireEvent('encounterload', me.encounter);
				me.el.unmask();

			}
		});

	},

	/**
	 * Function to close the encounter..
	 */
	doSignEncounter: function(isSupervisor, callback){
		var me = this,
			form,
			values;

		me.passwordVerificationWin(function(btn, password){
			if(btn == 'ok'){

				form = app.checkoutWindow.down('form').getForm();
				values = form.getValues();
				values.eid = me.eid;
				values.signature = password;
				values.isSupervisor = isSupervisor;

				if(a('require_enc_supervisor') || isSupervisor){
					values.requires_supervisor = true;
					values.supervisor_uid = app.checkoutWindow.coSignCombo.getValue();
				}else if(!isSupervisor && !a('require_enc_supervisor')){
					values.requires_supervisor = false;
				}

				Encounter.signEncounter(values, function(provider, response){
                    var params;
					if(response.result.success){
						if(me.stopTimer()){
S;
							/** default data for notes and reminder **/
							params = {
								pid: me.pid,
								eid: me.eid,
								uid: app.user.id,
								type: 'checkout',
								date: new Date()
							};

							/** create a new note if not blank **/
							params.body = values.note;
							if(params.body !== '') Ext.create('App.model.patient.Notes', params).save();
							/** create a new reminder if not blank **/
							params.body = values.reminder;
							if(params.body !== '') Ext.create('App.model.patient.Reminders', params).save();

							/** unset the patient eid **/
							app.patient.eid = null;
							app.openPatientVisits();

							app.AuditLog('Patient encounter ' + (isSupervisor ? 'co-signed' : 'signed'));
							me.msg('Sweet!', _('encounter_closed'));
							app.checkoutWindow.close();
						}
					}else{
						Ext.Msg.show({
							title: 'Oops!',
							msg: _(response.result.error),
							buttons: Ext.Msg.OK,
							icon: Ext.Msg.ERROR
						});
					}
				});
			}
		});
	},

	/**
	 * CheckOut Functions
	 */
	onSignEncounter: function(){
		var title = app.patient.name + ' #' + app.patient.pid + ' - ' + Ext.Date.format(this.currEncounterStartDate, 'F j, Y, g:i:s a') + ' (' + _('checkout') + ')';
		app.checkoutWindow.enc = this;
		app.checkoutWindow.setTitle(title);
		app.checkoutWindow.show();
	},

	isClose: function(){
		return typeof this.encounter.data.close_date != 'undefined' && this.encounter.data.close_date != null;
	},

	isSigned: function(){
		return typeof this.encounter.data.provider_uid != 'undefined' && this.encounter.data.provider_uid != null && this.encounter.data.provider_uid != 0;
	},

	/**
	 * listen for the progress note panel and runs the
	 * doLayout function to re-adjust the dimensions.
	 */
	progressNoteCollapseExpand: function(){
		this.centerPanel.doLayout();
	},

	getProgressNote: function(){
		var me = this;
		//Encounter.getProgressNoteByEid(me.eid, function(provider, response){
			//me.progressNote.tpl.overwrite(me.progressNote.body, response.result);
		//});
	},

	onTapPanelChange: function(panel){
		//if(panel.card.itemId == 'encounter'){
		//	this.setEncounterProgressCollapsed(false);
		//}else{
		//	this.setEncounterProgressCollapsed(true);
		//}
	},

	//setEncounterProgressCollapsed: function(ans){
	//	//ans ? this.rightPanel.collapse() : this.rightPanel.expand();
	//},

	//***************************************************************************************************//
	//***************************************************************************************************//
	//*********    *****  ******    ****** **************************************************************//
	//*********  *  ****  ****  ***  ***** **************************************************************//
	//*********  **  ***  ***  *****  **** **************************************************************//
	//*********  ***  **  ***  *****  **** **************************************************************//
	//*********  ****  *  ****  ***  ********************************************************************//
	//*********  *****    *****    ******* **************************************************************//
	//***************************************************************************************************//
	//***************************************************************************************************//

	/**
	 * Start the timerTask
	 */
	startTimer: function(){
		Ext.TaskManager.start(this.timerTask);
		return true;
	},

	/**
	 * stops the timerTask
	 */
	stopTimer: function(){
		Ext.TaskManager.stop(this.timerTask);
		return true;
	},

	/**
	 * This will update the timer every sec
	 */
	encounterTimer: function(){
		var me = this, timer = me.timer(me.currEncounterStartDate, new Date());
		if(app.patient.pid !== null){
			me.updateTitle(app.patient.name + ' - ' + app.patient.sexSymbol + ' - ' + app.patient.age.str + ' - ' + Ext.Date.format(me.currEncounterStartDate, 'F j, Y, g:i:s a') + ' (' + _('open_encounter') + ')', app.patient.readOnly, timer);
		}else{
			me.stopTimer();
		}
	},

	/**
	 * This function use the "start time" and "stop time"
	 * and gets the time elapsed between the two then
	 * returns it as a timer (00:00:00)  or (1 day(s) 00:00:00)
	 * if more than 24 hrs
	 *
	 * @param start
	 * @param stop
	 */
	timer: function(start, stop){
		var ms = Ext.Date.getElapsed(start, stop), t, sec = Math.floor(ms / 1000);

		function twoDigit(d){
			return (d >= 10) ? d : '0' + d;
		}

		var min = Math.floor(sec / 60);
		sec = sec % 60;
		t = twoDigit(sec);
		var hr = Math.floor(min / 60);
		min = min % 60;
		t = twoDigit(min) + ":" + t;
		var day = Math.floor(hr / 24);
		hr = hr % 24;
		t = twoDigit(hr) + ":" + t;
		t = (day == 0 ) ? '<span class="time">' + t + '</span>' : '<span class="day">' + day + ' ' + _('day_s') + '</span><span class="time">' + t + '</span>';
		return t;
	},

	/**
	 * After this panel is render add the forms and listeners for conventions
	 */
	beforePanelRender: function(){
		var me = this,
			form,
			defaultFields = function(){
				return [
					{
						name: 'id',
						type: 'int'
					},
					{
						name: 'pid',
						type: 'int'
					},
					{
						name: 'eid',
						type: 'int'
					},
					{
						name: 'uid',
						type: 'int'
					}
				]
			};

		/**
		 * Get 'Review of Systems' Form and define the Model using the form fields
		 */
		if(me.reviewSysPanel){
			me.getFormItems(me.reviewSysPanel, 8, function(){

			});
		}

		/**
		 * Get 'Review of Systems Check' Form and define the Model using the form fields
		 */
		if(me.reviewSysCkPanel){
			me.getFormItems(me.reviewSysCkPanel, 9, function(){
				var formFields = me.reviewSysCkPanel.getForm().getFields(), modelFields = new defaultFields;
				for(var i = 0; i < formFields.items.length; i++){
					modelFields.push({
						name: formFields.items[i].name,
						type: 'auto'
					});
				}
				Ext.define('App.model.patient.ReviewOfSystemsCheck', {
					extend: 'Ext.data.Model',
					fields: modelFields,
					proxy: {
						type: 'direct',
						api: {
							update: 'Encounter.updateReviewOfSystemsChecks'
						}
					},
					belongsTo: {
						model: 'App.model.patient.Encounter',
						foreignKey: 'eid'
					}
				});
			});
		}
	},

	getButtonsToDisable: function(){
		var me = this,
			buttons = [];

		if(me.ButtonsToDisable === null || typeof me.ButtonsToDisable == 'undefined'){
			if(me.vitalsPanel) buttons.concat(buttons, me.vitalsPanel.query('button'));
			if(me.reviewSysPanel) buttons.concat(buttons, me.reviewSysPanel.query('button'));
			if(me.reviewSysCkPanel) buttons.concat(buttons, me.reviewSysCkPanel.query('button'));
			if(me.soapPanel) buttons.concat(buttons, me.soapPanel.down('form').query('button'));
			if(me.MiscBillingOptionsPanel) buttons.concat(buttons, me.MiscBillingOptionsPanel.query('button'));
			if(me.CurrentProceduralTerminology) buttons.concat(buttons, me.CurrentProceduralTerminology.query('button'));
			if(me.EncounterEventHistory) buttons.concat(buttons, me.EncounterEventHistory.query('button'));
			if(me.newEncounterWindow) buttons.concat(buttons, me.newEncounterWindow.query('button'));
			if(app.checkoutWindow) buttons.concat(buttons, app.checkoutWindow.query('button'));
			me.ButtonsToDisable = buttons;
		}

		return me.ButtonsToDisable;
	},

	resetTabs: function(){
		var me = this;
		if(me.renderAdministrative) me.centerPanel.setActiveTab(0);
		if(me.encounterTabPanel) me.encounterTabPanel.setActiveTab(0);
		if(me.administrativeTabPanel) me.administrativeTabPanel.setActiveTab(0);
		if(me.rightPanel) me.rightPanel.setActiveTab(0);
	},

	onDocumentView: function(grid, rowIndex){
		var rec = grid.getStore().getAt(rowIndex), src = rec.data.url;
		app.onDocumentView(src);
	},

	/**
	 * This function is called from Viewport.js when
	 * this panel is selected in the navigation panel.
	 * place inside this function all the functions you want
	 * to call every this panel becomes active
	 */
	onActive: function(callback){
		var me = this,
			patient = app.patient;

		if(patient.pid && patient.eid){

			me.updateTitle(patient.name + ' (' + _('visits') + ')', patient.readOnly, null);
			me.setReadOnly(patient.readOnly);
			callback(true);
		}else{
			callback(false);
			var msg = patient.eid === null ? 'Please create a new encounter or select one from the patient encounter history' : null;
			me.currPatientError(msg);
		}
	}
});

Ext.define('App.view.Viewport', {
    extend: 'Ext.Viewport',
    // app settings
    user: window.user, // array defined on _app.php
    version: window.version, // string defined on _app.php
    minWidthToFullMode: 1700, // full mode = nav expanded 1585
    currency: g('gbl_currency_symbol'), // currency used
	patientImage:'resources/images/patientPhotoPlaceholder.jpg',
	enablePoolAreaFadeInOut: eval(g('enable_poolarea_fade_in_out')),

	// end app settings
    initComponent: function(){

	    Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));
	    Ext.tip.QuickTipManager.init();
        var me = this;

	    me.user.getFullName = function(){
		    var fullname = me.user.title + ' ' + me.user.fname + ' ' + me.user.mname + ' ' + me.user.lname;
			return fullname.replace('  ', ' ').trim();
	    };

	    me.nav = me.getController('Navigation');
	    me.cron = me.getController('Cron');
	    me.log = me.getController('LogOut');
	    me.dual = me.getController('DualScreen');
	    me.notification = me.getController('Notification');

	    me.logged = true;

        if(eval(g('enable_dual_monitor'))) me.dual.startDual();

	    me.lastCardNode = null;
        me.prevNode = null;
        me.fullMode = window.innerWidth >= me.minWidthToFullMode;

	    me.patient = {
	        pid: null,
	        pubpid: null,
	        name: null,
	        pic: null,
	        sex: null,
	        sexSymbol: null,
	        dob: null,
	        age: null,
	        eid: null,
	        priority: null,
	        readOnly: false,
	        rating: null
        };

        /**
         * Create the model/store of the AuditLog
         * @type {*}
         */
        //me.User = Ext.ModelManager.getModel('App.model.administration.AuditLog');

        /**
         * This store will handle the patient pool area
         */
        me.patientPoolStore = Ext.create('App.store.areas.PatientAreas');
        /*
         * TODO: this should be managed by the language files
         * The language file has a definition for this.
         */
        if(me.currency == '$'){
            me.icoMoney = 'icoDollar';
        }else if(me.currency == '€'){
            me.icoMoney = 'icoEuro';
        }else if(me.currency == '£'){
            me.icoMoney = 'icoLibra';
        }else if(me.currency == '¥'){
            me.icoMoney = 'icoYen';
        }

        /**
         * header Panel
         */
        me.Header = Ext.create('Ext.container.Container', {
            region: 'north',
            height: 44,
            split: false,
            collapsible: false,
            collapsed: false,
            frame: false,
            border: false,
	        cls: 'appHeader',
            bodyStyle: 'background: transparent',
            margins: '0 0 0 0',
	        layout: 'hbox'
        });

		me.HeaderLeft = Ext.widget('container', {
			margin: 0,
			flex: 1,
			layout: 'hbox',
			itemId: 'AppHeaderLeft'
		});

		me.HeaderRight = Ext.widget('container',{
			margin: 0,
			layout: 'hbox',
			itemId: 'AppHeaderRight'
		});

	    me.HeaderLeft.add({
		    xtype: 'button',
		    scale: 'large',
		    margin: '0 3 0 0',
		    cls: 'headerLargeBtn',
		    padding: 0,
		    iconCls: 'icoHome',
		    scope: me,
		    handler: me.openDashboard,
		    tooltip: _('patient_visits_history')
        });

	    me.HeaderLeft.add({
		    xtype: 'button',
		    scale: 'large',
		    margin: '0 3 0 0',
		    cls: 'headerLargeBtn',
		    padding: 0,
		    iconCls: 'icoCalendar2',
		    scope: me,
		    handler: me.openCalendar,
		    tooltip: _('patient_visits_history')
        });

	    me.HeaderLeft.add({ xtype: 'tbseparator' });

	    me.patientBtn = me.HeaderLeft.add({
            xtype: 'button',
            scale: 'large',
		    margin: '0 3 0 0',
		    style: 'height: 42px',
            tooltip: _('patient_btn_drag'),
            listeners: {
                scope: me,
                afterrender: me.patientBtnRender
            },
            tpl: me.patientBtnTpl()
        });

	    me.HeaderLeft.add({ xtype: 'tbseparator' });

	    me.patientSummaryBtn = me.HeaderLeft.add({
            xtype: 'button',
            scale: 'large',
            margin: '0 3 0 0',
            cls: 'headerLargeBtn',
            padding: 0,
            iconCls: 'icoPatientInfo',
            scope: me,
            handler: me.openPatientSummary,
            tooltip: _('patient_summary')
        });

	    if(a('access_patient_visits')){
		    me.patientOpenVisitsBtn = me.HeaderLeft.add({
			    xtype: 'button',
			    scale: 'large',
			    margin: '0 3 0 0',
			    cls: 'headerLargeBtn',
			    padding: 0,
			    iconCls: 'icoBackClock',
			    scope: me,
			    handler: me.openPatientVisits,
			    tooltip: _('patient_visits_history')
		    });
	    }

	    if(a('add_encounters')){
            me.patientCreateEncounterBtn = me.HeaderLeft.add({
                xtype: 'button',
                scale: 'large',
	            margin: '0 3 0 0',
                cls: 'headerLargeBtn',
                padding: 0,
                iconCls: 'icoClock',
                scope: me,
                handler: me.createNewEncounter,
                tooltip: _('new_encounter')
            });
        }

	    me.patientCloseCurrEncounterBtn = me.HeaderLeft.add({
            xtype: 'button',
            scale: 'large',
		    margin: '0 3 0 0',
            cls: 'headerLargeBtn',
            padding: 0,
            iconCls: 'icoArrowDown',
            scope: me,
            handler: me.stowPatientRecord,
            tooltip: _('stow_patient_record')
        });

//	    if(a('access_patient_visit_checkout')){
//		    me.patientCheckOutBtn = me.HeaderLeft.add({
//			    xtype: 'button',
//			    scale: 'large',
//			    margin: '0 3 0 0',
//			    cls: 'headerLargeBtn',
//			    padding: 0,
//			    iconCls: 'icoCheckOut',
//			    scope: me,
//			    handler: me.checkOutPatient,
//			    tooltip: _('visit_check_out')
//		    });
//	    }


//	    me.patientChargeBtn = me.Header.add({
//            xtype: 'button',
//            scale: 'large',
//            style: 'float:left',
//            margin: '0 0 0 3',
//            cls: 'headerLargeBtn',
//            padding: 0,
//            iconCls: me.icoMoney,
//            scope: me,
//            handler: me.onPaymentEntryWindow,
//            tooltip: _('payment_entry')
//        });

	    if(a('access_patient_search')){
		    me.HeaderLeft.add({
			    xtype: 'panel',
			    bodyPadding: '8 11 5 11',
			    margin: '0 3 0 0',
			    items: [
				    {
					    xtype: 'patienlivetsearch',
					    emptyText: _('patient_live_search') + '...',
					    width: 300,
					    listeners: {
						    scope: me,
						    select: me.liveSearchSelect,
						    blur: function(combo){
							    combo.reset();
						    }
					    }
				    }
			    ]
		    });
	    }

	    if(a('add_patient')){
		    me.HeaderLeft.add({
			    xtype: 'button',
			    scale: 'large',
			    margin: '0 3 0 0',
			    padding: 4,
			    itemId: 'patientNewReset',
			    iconCls: 'icoAddPatient',
			    scope: me,
			    handler: me.newPatient,
			    tooltip: _('create_a_new_patient')
		    });
	    }

	    if(a('create_emergency_encounter')){
		    me.HeaderLeft.add({
			    xtype: 'button',
			    scale: 'large',
			    margin: '0 3 0 0',
			    cls: 'headerLargeBtn emerBtn',
			    overCls: 'emerBtnOver',
			    padding: 0,
			    itemId: 'createEmergency',
			    iconCls: 'icoEmer',
			    scope: me,
			    handler: me.createEmergency,
			    tooltip: _('create_new_emergency')
		    });
	    }

	    if(a('access_floor_plan_panel')){
		    me.HeaderRight.add({
			    xtype: 'button',
			    scale: 'large',
			    margin: '0 3 0 0',
			    cls: 'headerLargeBtn',
			    padding: 0,
			    itemId: 'floorPlans',
			    iconCls: 'icoZoneAreasBig',
			    scope: me,
			    handler: me.goToFloorPlans,
			    tooltip: _('floor_plans')
		    });
	    }

	    if(a('access_pool_areas_panel')){
		    me.HeaderRight.add({
			    xtype: 'button',
			    scale: 'large',
			    margin: '0 3 0 0',
			    cls: 'headerLargeBtn',
			    padding: 0,
			    itemId: 'patientPoolArea',
			    iconCls: 'icoPoolArea',
			    scope: me,
			    handler: me.goToPoolAreas,
			    tooltip: _('pool_areas')
		    });
	    }

	    if(a('access_poolcheckin')){
		    me.HeaderRight.add({
			    xtype: 'button',
			    scale: 'large',
			    margin: '0 3 0 0',
			    cls: 'headerLargeBtn',
			    padding: 0,
			    itemId: 'patientCheckIn',
			    iconCls: 'icoCheckIn',
			    scope: me,
			    handler: me.onPatientLog,
			    tooltip: _('arrival_log')
		    });
	    }

	    me.userSplitBtn = me.HeaderRight.add({
		    xtype: 'button',
		    text: me.user.title + ' ' + me.user.lname,
		    scale: 'large',
		    iconCls: isEmerAccess ? 'icoUnlocked32' : 'icoDoctor',
		    iconAlign: 'left',
		    style: 'height: 42px',
		    plugins:[
			    {
				    ptype:'badgetext',
				    defaultText: 0
			    }
		    ],
		    itemId:'userSplitButton',
		    cls: 'drButton',
		    margin: 0,
		    menu: [
			    {
				    text: _('my_account'),
				    iconCls: 'icoUser',
				    handler: function(){
					    me.nav.navigateTo('App.view.miscellaneous.MyAccount');
				    }
			    },
			    {
				    text: _('logout'),
				    iconCls: 'icoLogout',
				    action:'logout'
			    }
		    ]
	    });

	    if(a('emergency_access')){
		    me.userSplitBtn.menu.insert(0,{
			    text:_('emergency_access'),
			    cls: 'emergency',
			    iconCls:'icoUnlocked',
			    scope:me,
			    handler:me.onEmergencyAccessClick
		    });
	    }

	    me.Header.add([me.HeaderLeft, me.HeaderRight]);

        /**
         * The panel definition for the the TreeMenu & the support button
         */
        me.navColumn = Ext.create('Ext.panel.Panel', {
            title: _('navigation'),
            action: 'mainNavPanel',
            layout: 'border',
            region: g('main_navigation_menu_left'),
            width: parseFloat(g('gbl_nav_area_width')),
            split: true,
            collapsible: true,
            collapsed: false,
	        stateId: 'mainNavPanel',
	        stateful: true,
            items: [
                {
                    xtype: 'treepanel',
                    region: 'center',
	                action:'mainNav',
                    cls: 'nav_tree',
                    hideHeaders: true,
                    rootVisible: false,
                    border: false,
                    width: parseFloat(g('gbl_nav_area_width')),
	                store: Ext.create('App.store.navigation.Navigation', {
		                autoLoad: true
	                })
                },
                me.patientPoolArea = Ext.create('Ext.Panel', {
                    title: _('patient_pool_areas'),
//                    layout: 'fit',
                    region: 'south',
	                action:'patientPoolArea',
                    bodyPadding: 5,
                    height: 25,
                    cls: 'patient-pool',
                    split: true,
                    collapsible: true,
                    border: false,
	                overflowY: 'auto',
                    //                    overflowY: 'auto',
                    items: [
                        {
                            xtype: 'dataview',
                            loadMask: false,
                            cls: 'patient-pool-view',
                            tpl: new Ext.XTemplate(
	                            '<tpl for=".">' +
                                '<div class="patient-pool-btn x-btn x-btn-default-large {priority}">' +
                                '<div class="patient_btn_img">' +
	                            '<img src="{[this.getPatientImage(values.patient)]}" width="50" height="50">' +
	                            '</div>' +
                                '<div class="patient_btn_info">' +
                                '<div class="patient-name">{shortName}</div>' +
                                '<div class="patient-name">({poolArea})</div>' +
                                '</div>' +
                                '</div>' +
                                '</tpl>',
	                            {
		                            getPatientImage:function(patient){
										return patient.image ? patient.image : me.patientImage;
		                            }
	                            }
                            ),
                            itemSelector: 'div.patient-pool-btn',
                            overItemCls: 'patient-over',
                            selectedItemClass: 'patient-selected',
                            singleSelect: true,
                            store: me.patientPoolStore,
                            listeners: {
                                scope: me,
                                render: me.onEncounterDragZoneRender
                            }
                        }
                    ]
                })
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    border: true,
                    margin: '3 0 0 0',
                    padding: 5,
                    layout: {
                        type: 'hbox',
                        pack: 'center'
                    },
                    items: ['-', {
                        xtype: 'button',
                        frame: true,
                        text: 'GaiaEHR Support',
                        iconCls: 'icoHelp',
	                    action: 'supportBtn',
	                    src: 'http://gaiaehr.org/forums/'
                    }, '-']
                }
            ]
        });

        /**
         * MainPanel is where all the pages are displayed
         */
        me.MainPanel = Ext.create('Ext.container.Container', {
            region: 'center',
            layout: 'card',
            border: true,
            itemId: 'MainPanel',
            defaults: {
                layout: 'fit',
                xtype: 'container'
            },
            listeners: {
                scope: me,
                afterrender: me.initializeOpenEncounterDropZone
            }
        });

        /**
         * General Area
         */
        me.nav['App_view_dashboard_Dashboard'] = me.MainPanel.add(Ext.create('App.view.dashboard.Dashboard'));
        me.nav['App_view_areas_FloorPlan'] = me.MainPanel.add(Ext.create('App.view.areas.FloorPlan'));
        me.nav['App_view_areas_PatientPoolAreas'] = me.MainPanel.add(Ext.create('App.view.areas.PatientPoolAreas'));

        /**
         * Footer Panel
         */
        me.Footer = Ext.create('Ext.container.Container', {
            height: 30,
            split: false,
            padding: '3 0',
            region: 'south',
	        action:'appFooter',
            items: [
                {
                    xtype: 'dataview',
                    margin: '0 0 3 0',
                    hidden: true,
                    hideMode: 'offsets',
                    cls: 'patient-pool-view-footer x-toolbar x-toolbar-default x-box-layout-ct',
                    tpl: '<div class="x-toolbar-separator x-toolbar-item x-toolbar-separator-horizontal" style="float:left; margin-top:5px;" role="presentation" tabindex="-1"></div>' + '<tpl for=".">' + '<div class="patient-pool-btn-small x-btn x-btn-default-small {priority}" style="float:left">' + '<div class="patient_btn_info">' + '<div class="patient-name">{name} ({pid})</div>' + '</div>' + '</div>' + '<div class="x-toolbar-separator x-toolbar-item x-toolbar-separator-horizontal" style="float:left; margin-top:5px; margin-left:3px;" role="presentation" tabindex="-1"></div>' + '</tpl>',
                    itemSelector: 'div.patient-pool-btn-small',
                    overItemCls: 'patient-over',
                    selectedItemClass: 'patient-selected',
                    singleSelect: true,
                    loadMask: false,
                    store: me.patientPoolStore,
                    listeners: {
	                    scope: me,
                        render: me.onEncounterDragZoneRender
                    }
                },
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    items: [
	                    {
		                    xtype:'activefacilitiescombo',
		                    emptyText:'Facilities',
		                    width: parseFloat(g('gbl_nav_area_width')) - 4,
		                    hidden: !eval(a('access_to_other_facilities')),
		                    listeners:{
			                    scope: me,
			                    select: me.onFacilitySelect
		                    }
	                    },
	                    '-',
                        {
                            text: 'Copyright (C) 2011 GaiaEHR (Electronic Health Records) |:|  Open Source Software operating under GPLv3 |:| v' + me.version,
                            iconCls: 'icoGreen',
                            disabled: true
                        },
                        '->',
                        {
                            text: _('news'),
	                        action: 'supportBtn',
	                        src: 'http://GaiaEHR.org/projects/GaiaEHR001/news'
                        },
                        '-',
                        {
                            text: _('wiki'),
	                        action: 'supportBtn',
	                        src: 'http://gaiaehr.org/'
                        },
                        '-',
                        {
                            text: _('issues'),
	                        action: 'supportBtn',
                            src: 'http://gaiaehr.org:8181/issues/?jql='
                        },
                        '-',
                        {
                            text: _('forums'),
	                        action: 'supportBtn',
	                        src: 'http://gaiaehr.org/forums/'
                        }
                    ]
                }
            ]
        });

	    me.FacilityCmb = me.Footer.query('activefacilitiescombo')[0];
		me.FacilityCmb.getStore().on('load', me.onFacilityComboLoad, me);

        me.MedicalWindow = Ext.create('App.view.patient.windows.Medical');
        me.ChartsWindow = Ext.create('App.view.patient.windows.Charts');
        me.PaymentEntryWindow = Ext.create('App.view.fees.PaymentEntryWindow');
        me.newEncounterWindow = Ext.create('App.view.patient.windows.NewEncounter');

        if(a('access_encounter_checkout')){
            me.checkoutWindow = Ext.create('App.view.patient.windows.EncounterCheckOut');
        }

        me.layout = {
            type: 'border',
            padding: 3
        };

        me.defaults = {
            split: true
        };

	    me.items = [me.Header, me.navColumn, me.MainPanel, me.Footer];

	    me.listeners = {
	        scope: me,
            render: me.appRender,
            beforerender: me.beforeAppRender
        };
        me.callParent(arguments);

	    me.signature = Ext.create('App.view.signature.SignatureWindow');
    },

	getUserFullname: function(){
		return this.user.title + ' ' + this.user.fname + ' ' + this.user.mname + ' ' + this.user.lname
	},

	getController:function(controller){
		return App.Current.getController(controller);
	},

	onFacilitySelect:function(cmb, records){
		var me = this;
		Facilities.setFacility(records[0].data.option_value, function(provider, response){
			if(records[0].data.option_value == response.result){
				// set user global facility value
				app.user.facility = records[0].data.option_value;

				me.msg(_('sweet'), _('facility') + ' ' + records[0].data.option_name);
				me.setWindowTitle(records[0].data.option_name);
				me.nav['App_view_areas_PatientPoolDropZone'].reRenderPoolAreas();
				me.nav['App_view_areas_FloorPlan'].renderZones();
				me.getPatientsInPoolArea();
			}
		});
	},

	onFacilityComboLoad:function(store, records){
		var rec = store.findRecord('option_value', this.user.facility);
		this.FacilityCmb.setValue(rec);
		this.setWindowTitle(rec.data.option_name)
	},

	setWindowTitle:function(facility){
		window.document.title = 'GaiaEHR :: ' + facility;
	},

    /**
     * AuditLog('Data created');
     * Function to inject logs to the audit log table
     * This function should be used on every screen that display
     * health information of patient.
     * Event: create, read, update, delete
     */
    AuditLog: function(message){
        Ext.create('App.model.administration.AuditLog',{
            eid: this.patient.eid,
            pid: this.patient.pid,
            event: message
        }).save({
           callback:function(){
               delete this;
           }
        });
    },

    /**
     * Show the medical window dialog.
     */
    onMedicalWin: function(action){
        this.MedicalWindow.show();
        this.MedicalWindow.cardSwitch(action);
    },

    /**
     * Show the Charts window dialog.
     */
    onChartsWin: function(){
        this.ChartsWindow.show();
    },

    onWebCamComplete: function(msg){
        var panel = this.getActivePanel();
        if(panel.id == 'panelSummary'){
            panel.demographics.completePhotoId();
        }
        this.msg('Sweet!', _('patient_image_saved'));
    },

	onPatientLog: function(){
        if(this.patientArrivalLog){
            this.patientArrivalLog.show();
        }else{
            this.patientArrivalLog = Ext.create('App.view.patient.windows.ArrivalLog').show();
        }
    },

    /**
     * Show the Payment Entry window dialog.
     */
    onPaymentEntryWindow: function(){
        this.PaymentEntryWindow.show();
    },

    /**
     * Show the new patient form panel.
     */
    newPatient: function(){
        this.nav.navigateTo('App.view.patient.NewPatient');
    },

    /**
     * EMERGENCY STUFF
     */
	createEmergency: function(){
        var me = this,
	        emergency;

        Ext.Msg.show({
            title: _('wait') + '!!!',
            msg: _('are_you_sure_you_want_to_create_a_new') + ' <span style="color: red">"' + _('emergency') + '"</span>?',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.WARNING,
            fn: function(btn){
                if(btn == 'yes'){
                    Emergency.createNewEmergency(function(provider, response){
                        emergency = response.result.emergency;
                        if(response.result.success){

                            me.setPatient(emergency.pid, emergency.eid, null, function(){
                                me.openEncounter(emergency.eid);
                            });
                            me.msg('Sweet!', emergency.name + ' ' + _('created'))
                        }
                    });
                }
            }
        });
    },

	onEmergencyAccessClick:function(){
		var me = this;

		Ext.Msg.show({
			title:_('wait'),
			msg: _('emergency_access_question') + '<br>' + _('emergency_access_disclaimer'),
			buttons: Ext.Msg.YESNO,
			icon: Ext.Msg.QUESTION,
			fn: function(btn){
				if(btn == 'yes') me.doEmergencyAccess();
			}
		});
	},

	doEmergencyAccess:function(){
		ACL.emergencyAccess(app.user.id, function(success){
			if(success){
				window.location = './';
				return;
			}
			Ext.Msg.alert(_('oops'), _('emergency_access_error'));
		});
	},

	/**
	 * Show the Create New Encounter panel.
	 */
    createNewEncounter: function(){
        var me = this;

        if(a('access_encounters') && a('add_encounters')){
            me.newEncounterWindow.show();
        }else{
            me.accessDenied();
        }
    },

    updateEncounter: function(record){
        var me = this;

        if(a('access_encounters') && a('edit_encounters')){
	        me.newEncounterWindow.loadRecord(record);
            me.newEncounterWindow.show();
        } else{
            me.accessDenied();
        }
    },

	openPatientSummary: function(){
        var me = this,
	        cls = me.nav.getNavRefByClass('App.view.patient.Summary'),
	        panel =  me.nav[cls];
		if(panel && panel == me.nav.activePanel) panel.loadPatient();
        me.nav.navigateTo('App.view.patient.Summary');
    },

	openDashboard: function(){
        var me = this,
	        cls = me.nav.getNavRefByClass('App.view.dashboard.Dashboard'),
	        panel =  me.nav[cls];
		if(panel && panel == me.nav.activePanel) panel.loadPatient();
        me.nav.navigateTo('App.view.dashboard.Dashboard');
    },

	openCalendar: function(){
        var me = this,
	        cls = me.nav.getNavRefByClass('Modules.appointments.view.Calendar'),
	        panel =  me.nav[cls];
		//if(panel && panel == me.nav.activePanel) panel.loadPatient();
        me.nav.navigateTo('Modules.appointments.view.Calendar');
    },

	stowPatientRecord: function(){
        this.unsetPatient(null, true);
        this.nav.navigateTo('App.view.dashboard.Dashboard');
    },

	openEncounter: function(eid){
        var me = this;
        if(a('access_encounters')){
            app.patient.eid = eid;
            me.nav.navigateTo('App.view.patient.Encounter', function(success){
                if(success){
	                Ext.Function.defer(function() {
		                me.nav.getPanelByCls('App.view.patient.Encounter').openEncounter(eid);
	                }, 100);
                }
            });
        }else{
            me.accessDenied();
        }
    },

	checkOutPatient: function(eid){
		var me = this;
        this.nav.navigateTo('App.view.patient.VisitCheckout', function(success){
	        if(success){
		        Ext.Function.defer(function() {
			        me.nav.getPanelByCls('App.view.patient.VisitCheckout').setVisitPanel();
		        }, 100);
	        }
        });
    },

	openPatientVisits: function(){
        this.nav.navigateTo('App.view.patient.Visits');
    },

	goToPoolAreas: function(){
        this.nav.navigateTo('App.view.areas.PatientPoolAreas');
    },

	goToFloorPlans: function(){
        this.nav.navigateTo('App.view.areas.FloorPlan');
    },

    /**
     * Function to get the current active panel.
     * NOTE: This may be used on all the application.
     */
    getActivePanel: function(){
        return this.MainPanel.getLayout().getActiveItem();
    },

    liveSearchSelect: function(combo, selection){
        var me = this,
	        post = selection[0];

        if(post){
            me.setPatient(post.get('pid'), null, null, function(){
	            combo.reset();
                me.openPatientSummary();
            });
        }
    },

	setEncounterClose:function(close){
		this.patient.encounterIsClose = close;
		var buttons = Ext.ComponentQuery.query('#encounterRecordAdd, button[action=encounterRecordAdd]');
		for(var i=0; i < buttons.length; i++){
			buttons[i].setDisabled(close || app.patient.eid == null);
		}
	},

    setPatient: function(pid, eid, site, callback){
        var me = this;
	    me.unsetPatient(null, true);

        Patient.getPatientSetDataByPid({ pid:pid, prevPid:me.patient.pid, site:site }, function(provider, response){
            var data = response.result,
                msg1,
                msg2;

            if(data.readOnly){

                msg1 = data.user + ' ' + _('is_currently_working_with') + ' "' +
                data.patient.name + '" ' + _('in') + ' "' + data.area + '" ' + _('area') +
                '.<br>' + _('override_read_mode_will_remove_the_patient_from_previous_user') + '.<br>' +
                _('do_you_would_like_to_override_read_mode');

                msg2 = data.user + ' ' + _('is_currently_working_with') + ' "' + data.patient.name + '" ' + _('in') +
                ' "' + data.area + '" ' + _('area') + '.<br>';

	            Ext.Msg.show({
                        title: _('wait') + '!!!',
                        msg: data.overrideReadOnly ? msg1 : msg2,
                        buttons: data.overrideReadOnly ? Ext.Msg.YESNO : Ext.Msg.OK,
                        icon: Ext.MessageBox.WARNING,
                        fn: function(btn){
                            continueSettingPatient(btn != 'yes');
                        }
                    });
            }else{
                continueSettingPatient(false);
            }

            function continueSettingPatient(readOnly){
                me.patient = {
                    pid: data.patient.pid,
                    pubpid: data.patient.pubpid,
                    name: data.patient.name,
                    pic: data.patient.pic,
                    sex: data.patient.sex,
	                sexSymbol: data.patient.sex == 'F' ? '&#9792' : '&#9794',
                    dob: Ext.Date.parse(data.patient.dob, "Y-m-d H:i:s"),
                    age: data.patient.age,
                    eid: eid,
                    priority: data.patient.priority,
                    readOnly: readOnly,
                    rating: data.patient.rating,
	                record: Ext.create('App.model.patient.Patient', data.patient.record)
                };

                // fire global event
                me.fireEvent('patientset', me.patient);

                var panels = me.MainPanel.items.items;
                for(var i=0; i<panels.length; i++) if(panels[i].pageRankingDiv) panels[i].pageRankingDiv.setValue(me.patient.rating);
                me.patientButtonSet(me.patient);
                if(me.patientSummaryBtn) me.patientSummaryBtn.enable();
                if(me.patientOpenVisitsBtn) me.patientOpenVisitsBtn.enable();
                if(me.patientCreateEncounterBtn) me.patientCreateEncounterBtn.enable();
                if(me.patientCloseCurrEncounterBtn) me.patientCloseCurrEncounterBtn.enable();
//                if(me.patientChargeBtn) me.patientChargeBtn.enable();
                if(me.patientCheckOutBtn) me.patientCheckOutBtn.enable();
                if(typeof callback == 'function') callback(me.patient);
            }

        });
    },

    unsetPatient: function(callback, sendRequest){
        var me = this;
	    if(sendRequest) Patient.unsetPatient(me.patient.pid);
	    me.currEncounterId = null;

	    if(me.patient.record) delete me.patient.record;

	    me.patient = {
		    pid: null,
		    pubpid: null,
		    name: null,
		    pic: null,
		    sex: null,
		    sexSymbol: null,
		    dob: null,
		    age: null,
		    eid: null,
		    priority: null,
		    readOnly: false,
		    rating: null,
		    record: null
	    };

	    me.patientButtonRemoveCls();
	    if(typeof callback == 'function'){
		    callback(true);
	    }else{
			// fire global event
		    me.fireEvent('patientunset');

		    var panels = me.MainPanel.items.items;
		    for(var i=0; i<panels.length; i++){
			    if(panels[i].pageRankingDiv) panels[i].pageRankingDiv.setValue(0);
		    }

		    if(me.patientCreateEncounterBtn) me.patientCreateEncounterBtn.disable();
		    if(me.patientSummaryBtn) me.patientSummaryBtn.disable();
		    if(me.patientOpenVisitsBtn) me.patientOpenVisitsBtn.disable();
		    if(me.patientCloseCurrEncounterBtn) me.patientCloseCurrEncounterBtn.disable();
		    if(me.patientChargeBtn) me.patientChargeBtn.disable();
		    if(me.patientCheckOutBtn) me.patientCheckOutBtn.disable();
		    me.patientButtonSet();
	    }
    },

    patientButtonSet: function(data){
        var me = this,
            patient = data || {},
	        displayPid = (eval(g('display_pubpid')) ? patient.pubpid : patient.pid);

	    if(displayPid == null || displayPid == ''){
		    displayPid = patient.pid;
	    }

        me.patientBtn.update({
            displayPid: displayPid || 'record number',
            pid: patient.pid,
	        pic: patient.pic || me.patientImage,
            name: patient.name || _('no_patient_selected')
        });

	    me.patientButtonRemoveCls();
        if(patient.priority) me.patientBtn.addCls(data.priority);
        me.patientBtn.setDisabled(!patient.pid);
    },

    patientButtonRemoveCls: function(){
        var me = this;
        me.patientBtn.removeCls('Minimal');
        me.patientBtn.removeCls('Delayed');
        me.patientBtn.removeCls('Immediate');
        me.patientBtn.removeCls('Expectant');
        me.patientBtn.removeCls('Deceased');
    },

    patientBtnTpl: function(){
        return Ext.create('Ext.XTemplate',
            '<div class="patient_btn  {priority}">',
            '   <div class="patient_btn_img">' +
            '       <img src="{pic}" width="50" height="50">' +
            '   </div>',
            '   <div class="patient_btn_info">',
            '       <div class="patient_btn_name">{name}</div>',
            '       <div class="patient_btn_record">( {displayPid} )</div>',
            '   </div>',
            '</div>');
    },

    patientBtnRender: function(btn){
        this.patientButtonSet();
        this.initializePatientPoolDragZone(btn)
    },

    getPatientsInPoolArea: function(){
        var me = this,
	        poolArea = me.patientPoolArea,
	        height = 35;

	    this.patientPoolStore.load({
            extraPrams:{ uid:me.user.id },
            callback: function(records){

	            if(records.length >= 1){
                    for(var i = 0; i < records.length; i++){
                        height = height + 45;
                    }
                }else{
                    height = 25;
                }

                if(me.navColumn.collapsed === false && !me.navColumn.isCollapsingOrExpanding){
                    height = (height > 300) ? 300 : height;
                    poolArea.down('dataview').refresh();
                    poolArea.setHeight(height);
                }
            }
        });

	    if(me.nav['App_view_areas_PatientPoolAreas'].isVisible()) me.nav['App_view_areas_PatientPoolAreas'].reloadStores();
    },

    initializePatientPoolDragZone: function(panel){
        panel.dragZone = Ext.create('Ext.dd.DragZone', panel.getEl(), {
            ddGroup: 'patientPoolAreas',
            getDragData: function(){

	            if(app.patient.pid){
                    var sourceEl = panel.getEl().dom,
	                    msgDiv, msg;

                    if(sourceEl){
	                    msgDiv = document.createElement('div');
	                    msgDiv.id = Ext.id();
	                    msgDiv.innerHTML = _('drag_patient_to_new_area');

	                    return panel.dragData = {
                            copy: true,
                            sourceEl: sourceEl,
                            repairXY: Ext.fly(sourceEl).getXY(),
                            ddel: msgDiv,
                            records: [ panel.data ],
                            patient: true
                        };
                    }
                }
            },

            getRepairXY: function(){
//                app.nav.goBack();
                return this.dragData.repairXY;
            },

	        onBeforeDrag:function(){
		        app.nav.navigateTo('App.view.areas.PatientPoolAreas');
		        return true;
            }
        });
    },

	onEncounterDragZoneRender:function(panel){
		this.initializeOpenEncounterDragZone(panel);

		if(this.enablePoolAreaFadeInOut){
			panel.el.setStyle({
				opacity: 0.1
			});

			panel.el.on('mouseenter', function(event, el){
				Ext.create('Ext.fx.Animator', {
					target: el,
					duration: 200,
					keyframes: {
						0: { opacity: 0.1 },
						100: { opacity: 1 }
					}
				});
			});

			panel.el.on('mouseleave', function(event, el){
				Ext.create('Ext.fx.Animator', {
					target: el,
					duration: 200,
					keyframes: {
						0: { opacity: 1 },
						100: { opacity: 0.1 }
					}
				});
			});
		}
	},

    /**
     *
     * @param panel
     */
    initializeOpenEncounterDragZone: function(panel){
        panel.dragZone = Ext.create('Ext.dd.DragZone', panel.getEl(), {
            ddGroup: 'patient',
            newGroupReset: true,
            b4MouseDown: function(e){
                if(this.newGroupReset){
                    var sourceEl = e.getTarget(panel.itemSelector, 10), patientData = panel.getRecord(sourceEl).data;
                    this.removeFromGroup(this.ddGroup);
//                    say('drag record:');
//                    say(patientData);
                    if(patientData.floorPlanId != 0 && patientData.patientZoneId == 0){
                        app.nav.navigateTo('App.view.areas.FloorPlan');
                        this.ddGroup = 'patientPoolAreas';
                    }else{
                        this.ddGroup = 'patient';
                        app.MainPanel.el.mask(_('drop_here_to_open') + ' <strong>"' + panel.getRecord(sourceEl).data.name + '"</strong> ' + _('current_encounter'));
                    }
                    this.addToGroup(this.ddGroup);
                    this.newGroupReset = false;
                }
                this.autoOffset(e.getPageX(), e.getPageY());
            },
            endDrag: function(e){
                this.newGroupReset = true;
            },
            getDragData: function(e){
                var sourceEl = e.getTarget(panel.itemSelector, 10),
	                d,
	                patientData = panel.getRecord(sourceEl).data;

                if(sourceEl){
                    d = sourceEl.cloneNode(true);
                    d.id = Ext.id();
                    return panel.dragData = {
                        sourceEl: sourceEl,
                        repairXY: Ext.fly(sourceEl).getXY(),
                        ddel: d,
                        patientData: patientData
                    };
                }
                return false;
            },
            getRepairXY: function(){
                app.MainPanel.el.unmask();
                this.newGroupReset = true;
                return this.dragData.repairXY;
            }
        });
    },

    onDocumentView: function(id, type, site){
	    app.getController('DocumentViewer').doDocumentView(id, type, site);
    },

    /**
     *
     * @param panel
     */
    initializeOpenEncounterDropZone: function(panel){
        var me = this;
        panel.dropZone = Ext.create('Ext.dd.DropZone', panel.getEl(), {
            ddGroup: 'patient',

            notifyOver: function(dd, e, data){
                return Ext.dd.DropZone.prototype.dropAllowed;
            },

            notifyDrop: function(dd, e, data){
                app.MainPanel.el.unmask();

	            if(data.patientData.eid && data.patientData.poolArea == 'Check Out'){
                    //...
	            }else if(data.patientData.eid && a('access_encounters')){
	            }else if(data.patientData.floorPlanId === null || data.patientData.floorPlanId === 0){
	            }

	            me.setPatient(data.patientData.pid, data.patientData.eid, null, function(){
                    // if encounter id is set and pool area is check out....  go to Patient Checkout panel
                    if(data.patientData.eid && data.patientData.poolArea == 'Checkout'){
                        me.checkOutPatient(data.patientData.eid);
                    // if encounter id is set and and user has access to encounter area... go to Encounter panel
                    // and open the encounter
                    }else if(data.patientData.eid && a('access_encounters')){
                        me.openEncounter(data.patientData.eid);
                    // else go to patient summary
                    }else{
                        me.openPatientSummary();
                    }
                });
            }
        });
    },

	/**
     * When the application finishes loading all the GaiaEHR core.
     * Then it will load all the modules.
     */
    appRender: function(){
        this.loadModules();
    },

    /**
     * Load all the modules on the modules folder.
     * This folder will hold modules created by third-party.
     */
    loadModules: function(){
        Modules.getEnabledModules(function(provider, response){
            var modules = response.result;
            for(var i = 0; i < modules.length; i++){
	            try{
		            App.app.getController('Modules.' + modules[i].dir + '.Main');
	            }catch(error){
					app.msg(_('oops'), (_('unable_to_load_module') + ' ' + modules[i].title + '<br>Error: ' +  error), true);
	            }
            }
	        app.doLayout();
        });
    },

    removeAppMask: function(){
        if(Ext.get('mainapp-loading')) Ext.get('mainapp-loading').remove();
        if(Ext.get('mainapp-loading-mask')) Ext.get('mainapp-loading-mask').fadeOut({
            remove: true
        });
    },

    beforeAppRender: function(){
	    var me = this,
		    params = me.nav.getUrlParams();
		if(params[1]){
			me.setPatient(params[1], null, null, function(){
				Ext.Function.defer(function(){
					me.nav.navigateTo('App.view.patient.Summary');
				}, 500);

			});
		}else{
			me.unsetPatient(null, false);
		}
    },

    getCurrPatient: function(){
        return this.patient.pid;
    },

    getApp: function(){
        return this;
    },

    /**
     * Access denied massage.
     */
    accessDenied: function(){
        Ext.Msg.show({
            title: _('oops'),
            msg: _('access_denied'),
            buttons: Ext.Msg.OK,
            icon: Ext.Msg.ERROR
        });
    },

	msg: function(title, format, error, persistent) {
		var msgBgCls = (error === true) ? 'msg-red' : 'msg-green';

		if(typeof error === 'string') msgBgCls = 'msg-' + error;

		this.msgCt = Ext.get('msg-div');
		if(!this.msgCt) this.msgCt = Ext.fly('msg-div');

		var s = Ext.String.format.apply(String, Array.prototype.slice.call(arguments, 1)),
			m = Ext.core.DomHelper.append(this.msgCt, {
				html: '<div class="flyMsg ' + msgBgCls + '"><h3>' + (title || '') + '</h3><p>' + s + '</p></div>'
			}, true);

		this.msgCt.alignTo(document, 't-t');

		// if persitent return the message element without the fade animation
		if (persistent === true) return m;

		m.addCls('fadeded');

		Ext.create('Ext.fx.Animator', {
			target: m,
			duration: error === true ? 8000 : 3000,
			keyframes: {
				0: { opacity: 0 },
				10: { opacity: 1 },
				80: { opacity: 1 },
				100: { opacity: 0, height: 0 }
			},
			listeners: {
				afteranimate: function(anim) {
					anim.target.target.destroy();
				}
			}
		});

		m.on('click', function(){
			m.applyStyles('visibility:hidden; display:none');
		});

		return true;
	},

    alert: function(msg, icon){
        if(icon == 'error'){
            icon = Ext.Msg.ERROR;
        }else if(icon == 'warning'){
            icon = Ext.Msg.WARNING;
        }else if(icon == 'question'){
            icon = Ext.Msg.QUESTION;
        }else{
            icon = Ext.Msg.INFO;
        }

        Ext.Msg.show({
            msg: msg,
            buttons: Ext.Msg.OK,
            icon: icon,
	        maxWidth: 1200,
	        modal: false
        });
    },

	fullname: function(title, fname, name, lname){
		var foo = '';
		if(title){
			foo += title + ' ';
		}
		if(fname){
			foo += fname + ' ';
		}
		if(name){
			foo += name + ' ';
		}
		if(lname){
			foo += lname + ' ';
		}
		return foo;
	}

});

Ext.define('App.ux.form.fields.UploadBase64', {
	extend: 'Ext.window.Window',
	requires: [
		'Ext.form.field.File'
	],

	xtype: 'uploadbase64field',
	bodyPadding: 10,
	base64: '',
	ready: false,

	title: _('upload'),
	items: [
		{
			xtype: 'fileuploadfield',
			width: 300
		}
	],
	buttons: [
		{
			text: _('cancel')
		},
		{
			text: _('upload')
		}
	],

	allowExtensions: null,

	initComponent: function(){
		var me = this;

		me.callParent();

		me.uValue = '';
		me.uField = me.getComponent(0);
		me.uDock = me.getDockedItems('toolbar[dock="bottom"]')[0];
		me.uCancel = me.uDock.getComponent(0);
		me.uUpload = me.uDock.getComponent(1);

		me.uCancel.on('click', me.onCancel, me);
		me.uUpload.on('click', me.onUpload, me);

	},

	doUpload: function(){
		var me = this,
			fr = new FileReader();

		me.uValue = me.uField.getValue();

		if(me.allowExtensions){
			var re;

			if(Ext.isArray(me.allowExtensions)){
				re = new RegExp(me.allowExtensions.join('|'));
			}else{
				re = new RegExp(me.allowExtensions + '$');
			}

			if(!re.exec(me.uValue)){
				app.msg(_('oops'), Ext.String.format(_('only_extensions_{0}_allowed'), me.allowExtensions.join ? me.allowExtensions.join(', ') : me.allowExtensions ), true);
				return;
			}
		}

		me.setReady(false);
		fr.onload = function(e){
			me.base64 = e.target.result;
			me.setReady(true);
			me.fireEvent('uploadready', me, me.base64);
			me.close();
		};

		fr.readAsDataURL(me.uField.extractFileInput().files[0]);
	},

	onCancel: function(){
		return this.close();
	},

	onUpload: function(){
		this.doUpload();
	},

	isReady: function(){
		return this.ready;
	},

	setReady: function(ready){
		return this.ready = ready;
	},

	getValue: function(){
		return this.uValue;
	}

});
Ext.define('App.ux.form.fields.BoxSelect', {
    extend:'Ext.form.field.ComboBox',
    alias: ['widget.comboboxselect', 'widget.boxselect'],
    requires: ['Ext.selection.Model', 'Ext.data.Store'],

    //
    // Begin configuration options related to the underlying store
    //

    /**
     * @cfg {String} valueParam
     * The name of the parameter used to load unknown records into the store. If left unspecified, {@link #valueField}
     * will be used.
     */

    //
    // End of configuration options related to the underlying store
    //



    //
    // Begin configuration options related to selected values
    //

    /**
     * @cfg {Boolean}
     * If set to `true`, allows the combo field to hold more than one value at a time, and allows selecting multiple
     * items from the dropdown list. The combo's text field will show all selected values using the template
     * defined by {@link #labelTpl}.
     *

     */
    multiSelect: true,

    /**
     * @cfg {String/Ext.XTemplate} labelTpl
     * The [XTemplate](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.XTemplate) to use for the inner
     * markup of the labelled items. Defaults to the configured {@link #displayField}
     */

    /**
	 * @cfg {Boolean}
     * @inheritdoc
     *
     * When {@link #forceSelection} is `false`, new records can be created by the user as they
     * are typed. These records are **not** added to the combo's store. This creation
     * is triggered by typing the configured 'delimiter', and can be further configured using the
     * {@link #createNewOnEnter} and {@link #createNewOnBlur} configuration options.
     *
     * This functionality is primarily useful with BoxSelect components for things
     * such as an email address.
     */
    forceSelection: true,

    /**
	 * @cfg {Boolean}
     * Has no effect if {@link #forceSelection} is `true`.
     *
	 * With {@link #createNewOnEnter} set to `true`, the creation described in
     * {@link #forceSelection} will also be triggered by the 'enter' key.
	 */
    createNewOnEnter: false,

    /**
	 * @cfg {Boolean}
     * Has no effect if {@link #forceSelection} is `true`.
     *
     * With {@link #createNewOnBlur} set to `true`, the creation described in
     * {@link #forceSelection} will also be triggered when the field loses focus.
     *
     * Please note that this behavior is also affected by the configuration options
     * {@link #autoSelect} and {@link #selectOnTab}. If those are true and an existing
     * item would have been selected as a result, the partial text the user has entered will
	 * be discarded and the existing item will be added to the selection.
	 */
    createNewOnBlur: false,

    /**
     * @cfg {Boolean}
     * Has no effect if {@link #multiSelect} is `false`.
     *
     * Controls the formatting of the form submit value of the field as returned by {@link #getSubmitValue}
     *
     * - `true` for the field value to submit as a json encoded array in a single GET/POST variable
     * - `false` for the field to submit as an array of GET/POST variables
     */
    encodeSubmitValue: false,

    //
    // End of configuration options related to selected values
    //



    //
    // Configuration options related to pick list behavior
    //

    /**
     * @cfg {Boolean}
     * `true` to activate the trigger when clicking in empty space in the field. Note that the
     * subsequent behavior of this is controlled by the field's {@link #triggerAction}.
     * This behavior is similar to that of a basic ComboBox with {@link #editable} `false`.
     */
    triggerOnClick: true,

    /**
	 * @cfg {Boolean}
     * - `true` to have each selected value fill to the width of the form field
     * - `false to have each selected value size to its displayed contents
	 */
    stacked: false,

    /**
	 * @cfg {Boolean}
     * Has no effect if {@link #multiSelect} is `false`
     *
     * `true` to keep the pick list expanded after each selection from the pick list
     * `false` to automatically collapse the pick list after a selection is made
	 */
    pinList: true,

    /**
     * @cfg {Boolean}
     * True to hide the currently selected values from the drop down list. These items are hidden via
     * css to maintain simplicity in store and filter management.
     *
     * - `true` to hide currently selected values from the drop down pick list
     * - `false` to keep the item in the pick list as a selected item
     */
    filterPickList: false,

    //
    // End of configuration options related to pick list behavior
    //



    //
    // Configuration options related to text field behavior
    //

    /**
     * @cfg {Boolean}
     * @inheritdoc
     */
    selectOnFocus: true,

    /**
     * @cfg {Boolean}
     *
     * `true` if this field should automatically grow and shrink vertically to its content.
     * Note that this overrides the natural trigger grow functionality, which is used to size
     * the field horizontally.
     */
    grow: true,

    /**
     * @cfg {Number/Boolean}
     * Has no effect if {@link #grow} is `false`
     *
     * The minimum height to allow when {@link #grow} is `true`, or `false` to allow for
     * natural vertical growth based on the current selected values. See also {@link #growMax}.
     */
    growMin: false,

    /**
     * @cfg {Number/Boolean}
     * Has no effect if {@link #grow} is `false`
     *
     * The maximum height to allow when {@link #grow} is `true`, or `false` to allow for
     * natural vertical growth based on the current selected values. See also {@link #growMin}.
     */
    growMax: false,

    /**
     * @cfg growAppend
     * @hide
     * Currently unsupported by BoxSelect since this is used for horizontal growth and
     * BoxSelect only supports vertical growth.
     */
    /**
     * @cfg growToLongestValue
     * @hide
     * Currently unsupported by BoxSelect since this is used for horizontal growth and
     * BoxSelect only supports vertical growth.
     */

    //
    // End of configuration options related to text field behavior
    //


    //
    // Event signatures
    //

    /**
     * @event autosize
     * Fires when the **{@link #autoSize}** function is triggered and the field is resized according to the
     * {@link #grow}/{@link #growMin}/{@link #growMax} configs as a result. This event provides a hook for the
     * developer to apply additional logic at runtime to resize the field if needed.
     * @param {Ext.ux.form.field.BoxSelect} this This BoxSelect field
     * @param {Number} height The new field height
     */

    //
    // End of event signatures
    //



    //
    // Configuration options that will break things if messed with
    //

    /**
     * @private
     */
    fieldSubTpl: [
        '<div id="{cmpId}-listWrapper" class="x-boxselect {fieldCls} {typeCls}">',
        '<ul id="{cmpId}-itemList" class="x-boxselect-list x-tab-default">',
        '<li id="{cmpId}-inputElCt" class="x-boxselect-input">',
        '<div id="{cmpId}-emptyEl" class="{emptyCls}">{emptyText}</div>',
        '<input id="{cmpId}-inputEl" type="{type}" ',
        '<tpl if="name">name="{name}" </tpl>',
        '<tpl if="value"> value="{[Ext.util.Format.htmlEncode(values.value)]}"</tpl>',
        '<tpl if="size">size="{size}" </tpl>',
        '<tpl if="tabIdx">tabIndex="{tabIdx}" </tpl>',
        '<tpl if="disabled"> disabled="disabled"</tpl>',
        'class="x-boxselect-input-field {inputElCls}" autocomplete="off">',
        '</li>',
        '</ul>',
        '</div>',
        {
            compiled: true,
            disableFormats: true
        }
    ],

    /**
     * @private
     */
    childEls: [ 'listWrapper', 'itemList', 'inputEl', 'inputElCt', 'emptyEl' ],

    /**
     * @private
     */
    componentLayout: 'boxselectfield',

    /**
     * @private
     */
    emptyInputCls: 'x-boxselect-emptyinput',

    /**
     * @inheritdoc
     *
     * Initialize additional settings and enable simultaneous typeAhead and multiSelect support
     * @protected
	 */
    initComponent: function() {
        var me = this,
        typeAhead = me.typeAhead;

        if (typeAhead && !me.editable) {
            Ext.Error.raise('If typeAhead is enabled the combo must be editable: true -- please change one of those settings.');
        }

        Ext.apply(me, {
            typeAhead: false
        });

        me.callParent();

        me.typeAhead = typeAhead;

        me.selectionModel = new Ext.selection.Model({
            store: me.valueStore,
            mode: 'MULTI',
            lastFocused: null,
            onSelectChange: function(record, isSelected, suppressEvent, commitFn) {
                commitFn();
            }
        });

        if (!Ext.isEmpty(me.delimiter) && me.multiSelect) {
            me.delimiterRegexp = new RegExp(String(me.delimiter).replace(/[$%()*+.?\[\\\]{|}]/g, "\\$&"));
        }
    },

    /**
	 * Register events for management controls of labelled items
     * @protected
	 */
    initEvents: function() {
        var me = this;

        me.callParent(arguments);

        if (!me.enableKeyEvents) {
            me.mon(me.inputEl, 'keydown', me.onKeyDown, me);
        }
        me.mon(me.inputEl, 'paste', me.onPaste, me);
        me.mon(me.listWrapper, 'click', me.onItemListClick, me);

        // I would prefer to use relayEvents here to forward these events on, but I want
        // to pass the field instead of exposing the underlying selection model
        me.mon(me.selectionModel, {
            'selectionchange': function(selModel, selectedRecs) {
                me.applyMultiselectItemMarkup();
                me.fireEvent('valueselectionchange', me, selectedRecs);
            },
            'focuschange': function(selectionModel, oldFocused, newFocused) {
                me.fireEvent('valuefocuschange', me, oldFocused, newFocused);
            },
            scope: me
        });
    },

    /**
     * @inheritdoc
     *
	 * Create a store for the records of our current value based on the main store's model
     * @protected
	 */
    onBindStore: function(store, initial) {
        var me = this;

        if (store) {
            me.valueStore = new Ext.data.Store({
                model: store.model,
                proxy: {
                    type: 'memory'
                }
            });
            me.mon(me.valueStore, 'datachanged', me.applyMultiselectItemMarkup, me);
            if (me.selectionModel) {
                me.selectionModel.bindStore(me.valueStore);
            }
        }
    },

    /**
     * @inheritdoc
     *
     * Remove the selected value store and associated listeners
     * @protected
     */
    onUnbindStore: function(store) {
        var me = this,
        valueStore = me.valueStore;

        if (valueStore) {
            if (me.selectionModel) {
                me.selectionModel.setLastFocused(null);
                me.selectionModel.deselectAll();
                me.selectionModel.bindStore(null);
            }
            me.mun(valueStore, 'datachanged', me.applyMultiselectItemMarkup, me);
            valueStore.destroy();
            me.valueStore = null;
        }

        me.callParent(arguments);
    },

    /**
     * @inheritdoc
     *
	 * Add refresh tracking to the picker for selection management
     * @protected
	 */
    createPicker: function() {
        var me = this,
        picker = me.callParent(arguments);

        me.mon(picker, {
            'beforerefresh': me.onBeforeListRefresh,
            scope: me
        });

        if (me.filterPickList) {
            picker.addCls('x-boxselect-hideselections');
        }

        return picker;
    },

    /**
     * @inheritdoc
     *
	 * Clean up selected values management controls
     * @protected
	 */
    onDestroy: function() {
        var me = this;

        Ext.destroyMembers(me, 'valueStore', 'selectionModel');

        me.callParent(arguments);
    },

    /**
     * Add empty text support to initial render.
     * @protected
     */
    getSubTplData: function() {
        var me = this,
            data = me.callParent(),
            isEmpty = me.emptyText && data.value.length < 1;

        data.value = '';
        if (isEmpty) {
            data.emptyText = me.emptyText;
            data.emptyCls = me.emptyCls;
            data.inputElCls = me.emptyInputCls;
        } else {
            data.emptyText = '';
            data.emptyCls = me.emptyInputCls;
            data.inputElCls = '';
        }

        return data;
    },

    /**
     * @inheritdoc
     *
	 * Overridden to avoid use of placeholder, as our main input field is often empty
     * @protected
	 */
    afterRender: function() {
        var me = this;

        if (Ext.supports.Placeholder && me.inputEl && me.emptyText) {
            delete me.inputEl.dom.placeholder;
        }

        me.bodyEl.applyStyles('vertical-align:top');

        if (me.grow) {
            if (Ext.isNumber(me.growMin) && (me.growMin > 0)) {
                me.listWrapper.applyStyles('min-height:'+me.growMin+'px');
            }
            if (Ext.isNumber(me.growMax) && (me.growMax > 0)) {
                me.listWrapper.applyStyles('max-height:'+me.growMax+'px');
            }
        }

        if (me.stacked === true) {
            me.itemList.addCls('x-boxselect-stacked');
        }

        if (!me.multiSelect) {
            me.itemList.addCls('x-boxselect-singleselect');
        }

        me.applyMultiselectItemMarkup();

        me.callParent(arguments);
    },

    /**
	 * Overridden to search entire unfiltered store since already selected values
     * can span across multiple store page loads and other filtering. Overlaps
     * some with {@link #isFilteredRecord}, but findRecord is used by the base component
     * for various logic so this logic is applied here as well.
     * @protected
	 */
    findRecord: function(field, value) {
        var ds = this.store,
        matches;

        if (!ds) {
            return false;
        }

        matches = ds.queryBy(function(rec, id) {
            return rec.isEqual(rec.get(field), value);
        });

        return (matches.getCount() > 0) ? matches.first() : false;
    },

    /**
	 * Overridden to map previously selected records to the "new" versions of the records
	 * based on value field, if they are part of the new store load
     * @protected
	 */
    onLoad: function() {
        var me = this,
        valueField = me.valueField,
        valueStore = me.valueStore,
        changed = false;

        if (valueStore) {
            if (!Ext.isEmpty(me.value) && (valueStore.getCount() == 0)) {
                me.setValue(me.value, false, true);
            }

            valueStore.suspendEvents();
            valueStore.each(function(rec) {
                var r = me.findRecord(valueField, rec.get(valueField)),
                i = r ? valueStore.indexOf(rec) : -1;
                if (i >= 0) {
                    valueStore.removeAt(i);
                    valueStore.insert(i, r);
                    changed = true;
                }
            });
            valueStore.resumeEvents();
            if (changed) {
                valueStore.fireEvent('datachanged', valueStore);
            }
        }

        me.callParent(arguments);
    },

    /**
	 * Used to determine if a record is filtered out of the current store's data set,
     * for determining if a currently selected value should be retained.
     *
     * Slightly complicated logic. A record is considered filtered and should be retained if:
     *
     * - It is not in the combo store and the store has no filter or it is in the filtered data set
     *   (Happens when our selected value is just part of a different load, page or query)
     * - It is not in the combo store and forceSelection is false and it is in the value store
     *   (Happens when our selected value was created manually)
     *
	 * @private
	 */
    isFilteredRecord: function(record) {
        var me = this,
        store = me.store,
        valueField = me.valueField,
        storeRecord,
        filtered = false;

        storeRecord = store.findExact(valueField, record.get(valueField));

        filtered = ((storeRecord === -1) && (!store.snapshot || (me.findRecord(valueField, record.get(valueField)) !== false)));

        filtered = filtered || (!filtered && (storeRecord === -1) && (me.forceSelection !== true) &&
            (me.valueStore.findExact(valueField, record.get(valueField)) >= 0));

        return filtered;
    },

    /**
     * @inheritdoc
     *
	 * Overridden to allow for continued querying with multiSelect selections already made
     * @protected
	 */
    doRawQuery: function() {
        var me = this,
        rawValue = me.inputEl.dom.value;

        if (me.multiSelect) {
            rawValue = rawValue.split(me.delimiter).pop();
        }

        this.doQuery(rawValue, false, true);
    },

    /**
	 * When the picker is refreshing, we should ignore selection changes. Otherwise
	 * the value of our field will be changing just because our view of the choices is.
     * @protected
	 */
    onBeforeListRefresh: function() {
        this.ignoreSelection++;
    },

    /**
	 * When the picker is refreshing, we should ignore selection changes. Otherwise
	 * the value of our field will be changing just because our view of the choices is.
     * @protected
	 */
    onListRefresh: function() {
        this.callParent(arguments);
        if (this.ignoreSelection > 0) {
            --this.ignoreSelection;
        }
    },

    /**
	 * Overridden to preserve current labelled items when list is filtered/paged/loaded
	 * and does not include our current value. See {@link #isFilteredRecord}
     * @private
	 */
    onListSelectionChange: function(list, selectedRecords) {
        var me = this,
        valueStore = me.valueStore,
        mergedRecords = [],
        i;

        // Only react to selection if it is not called from setValue, and if our list is
        // expanded (ignores changes to the selection model triggered elsewhere)
        if ((me.ignoreSelection <= 0) && me.isExpanded) {
            // Pull forward records that were already selected or are now filtered out of the store
            valueStore.each(function(rec) {
                if (Ext.Array.contains(selectedRecords, rec) || me.isFilteredRecord(rec)) {
                    mergedRecords.push(rec);
                }
            });
            mergedRecords = Ext.Array.merge(mergedRecords, selectedRecords);

            i = Ext.Array.intersect(mergedRecords, valueStore.getRange()).length;
            if ((i != mergedRecords.length) || (i != me.valueStore.getCount())) {
                me.setValue(mergedRecords, false);
                if (!me.multiSelect || !me.pinList) {
                    Ext.defer(me.collapse, 1, me);
                }
                if (valueStore.getCount() > 0) {
                    me.fireEvent('select', me, valueStore.getRange());
                }
            }
            me.inputEl.focus();
            if (!me.pinList) {
                me.inputEl.dom.value = '';
            }
            if (me.selectOnFocus) {
                me.inputEl.dom.select();
            }
        }
    },

    /**
     * Overridden to use valueStore instead of valueModels, for inclusion of
     * filtered records. See {@link #isFilteredRecord}
     * @private
     */
    syncSelection: function() {
        var me = this,
        picker = me.picker,
        valueField = me.valueField,
        pickStore, selection, selModel;

        if (picker) {
            pickStore = picker.store;

            // From the value, find the Models that are in the store's current data
            selection = [];
            if (me.valueStore) {
                me.valueStore.each(function(rec) {
                    var i = pickStore.findExact(valueField, rec.get(valueField));
                    if (i >= 0) {
                        selection.push(pickStore.getAt(i));
                    }
                });
            }

            // Update the selection to match
            me.ignoreSelection++;
            selModel = picker.getSelectionModel();
            selModel.deselectAll();
            if (selection.length > 0) {
                selModel.select(selection);
            }
            if (me.ignoreSelection > 0) {
                --me.ignoreSelection;
            }
        }
    },

    /**
	 * Overridden to align to itemList size instead of inputEl
     */
    doAlign: function(){
        var me = this,
            picker = me.picker,
            aboveSfx = '-above',
            isAbove;

        me.picker.alignTo(me.listWrapper, me.pickerAlign, me.pickerOffset);
        // add the {openCls}-above class if the picker was aligned above
        // the field due to hitting the bottom of the viewport
        isAbove = picker.el.getY() < me.inputEl.getY();
        me.bodyEl[isAbove ? 'addCls' : 'removeCls'](me.openCls + aboveSfx);
        picker[isAbove ? 'addCls' : 'removeCls'](picker.baseCls + aboveSfx);
    },

    /**
     * Overridden to preserve scroll position of pick list when list is realigned
     */
    alignPicker: function() {
        var me = this,
            picker = me.picker,
            pickerScrollPos = picker.getTargetEl().dom.scrollTop;

        me.callParent(arguments);

        if (me.isExpanded) {
            if (me.matchFieldWidth) {
                // Auto the height (it will be constrained by min and max width) unless there are no records to display.
                picker.setWidth(me.listWrapper.getWidth());
            }

            picker.getTargetEl().dom.scrollTop = pickerScrollPos;
        }
    },

    /**
	 * Get the current cursor position in the input field, for key-based navigation
	 * @private
	 */
    getCursorPosition: function() {
        var cursorPos;
        if (Ext.isIE) {
            cursorPos = document.selection.createRange();
            cursorPos.collapse(true);
            cursorPos.moveStart("character", -this.inputEl.dom.value.length);
            cursorPos = cursorPos.text.length;
        } else {
            cursorPos = this.inputEl.dom.selectionStart;
        }
        return cursorPos;
    },

    /**
	 * Check to see if the input field has selected text, for key-based navigation
	 * @private
	 */
    hasSelectedText: function() {
        var sel, range;
        if (Ext.isIE) {
            sel = document.selection;
            range = sel.createRange();
            return (range.parentElement() == this.inputEl.dom);
        } else {
            return this.inputEl.dom.selectionStart != this.inputEl.dom.selectionEnd;
        }
    },

    /**
	 * Handles keyDown processing of key-based selection of labelled items.
     * Supported keyboard controls:
     *
     * - If pick list is expanded
     *
     *     - `CTRL-A` will select all the items in the pick list
     *
     * - If the cursor is at the beginning of the input field and there are values present
     *
     *     - `CTRL-A` will highlight all the currently selected values
     *     - `BACKSPACE` and `DELETE` will remove any currently highlighted selected values
     *     - `RIGHT` and `LEFT` will move the current highlight in the appropriate direction
     *     - `SHIFT-RIGHT` and `SHIFT-LEFT` will add to the current highlight in the appropriate direction
     *
     * @protected
	 */
    onKeyDown: function(e, t) {
        var me = this,
        key = e.getKey(),
        rawValue = me.inputEl.dom.value,
        valueStore = me.valueStore,
        selModel = me.selectionModel,
        stopEvent = false;

        if (me.readOnly || me.disabled || !me.editable) {
            return;
        }

        if (me.isExpanded && (key == e.A && e.ctrlKey)) {
            // CTRL-A when picker is expanded - add all items in current picker store page to current value
            me.select(me.getStore().getRange());
            selModel.setLastFocused(null);
            selModel.deselectAll();
            me.collapse();
            me.inputEl.focus();
            stopEvent = true;
        } else if ((valueStore.getCount() > 0) &&
                ((rawValue == '') || ((me.getCursorPosition() === 0) && !me.hasSelectedText()))) {
            // Keyboard navigation of current values
            var lastSelectionIndex = (selModel.getCount() > 0) ? valueStore.indexOf(selModel.getLastSelected() || selModel.getLastFocused()) : -1;

            if ((key == e.BACKSPACE) || (key == e.DELETE)) {
                if (lastSelectionIndex > -1) {
                    if (selModel.getCount() > 1) {
                        lastSelectionIndex = -1;
                    }
                    me.valueStore.remove(selModel.getSelection());
                } else {
                    me.valueStore.remove(me.valueStore.last());
                }
                selModel.clearSelections();
                me.setValue(me.valueStore.getRange());
                if (lastSelectionIndex > 0) {
                    selModel.select(lastSelectionIndex - 1);
                }
                stopEvent = true;
            } else if ((key == e.RIGHT) || (key == e.LEFT)) {
                if ((lastSelectionIndex == -1) && (key == e.LEFT)) {
                    selModel.select(valueStore.last());
                    stopEvent = true;
                } else if (lastSelectionIndex > -1) {
                    if (key == e.RIGHT) {
                        if (lastSelectionIndex < (valueStore.getCount() - 1)) {
                            selModel.select(lastSelectionIndex + 1, e.shiftKey);
                            stopEvent = true;
                        } else if (!e.shiftKey) {
                            selModel.setLastFocused(null);
                            selModel.deselectAll();
                            stopEvent = true;
                        }
                    } else if ((key == e.LEFT) && (lastSelectionIndex > 0)) {
                        selModel.select(lastSelectionIndex - 1, e.shiftKey);
                        stopEvent = true;
                    }
                }
            } else if (key == e.A && e.ctrlKey) {
                selModel.selectAll();
                stopEvent = e.A;
            }
            me.inputEl.focus();
        }

        if (stopEvent) {
            me.preventKeyUpEvent = stopEvent;
            e.stopEvent();
            return;
        }

        // Prevent key up processing for enter if it is being handled by the picker
        if (me.isExpanded && (key == e.ENTER) && me.picker.highlightedItem) {
            me.preventKeyUpEvent = true;
        }

        if (me.enableKeyEvents) {
            me.callParent(arguments);
        }

        if (!e.isSpecialKey() && !e.hasModifier()) {
            me.selectionModel.setLastFocused(null);
            me.selectionModel.deselectAll();
            me.inputEl.focus();
        }
    },

    /**
	 * Handles auto-selection and creation of labelled items based on this field's
     * delimiter, as well as the keyUp processing of key-based selection of labelled items.
     * @protected
	 */
    onKeyUp: function(e, t) {
        var me = this,
        rawValue = me.inputEl.dom.value;

        if (me.preventKeyUpEvent) {
            e.stopEvent();
            if ((me.preventKeyUpEvent === true) || (e.getKey() === me.preventKeyUpEvent)) {
                delete me.preventKeyUpEvent;
            }
            return;
        }

        if (me.multiSelect && (me.delimiterRegexp && me.delimiterRegexp.test(rawValue)) ||
                ((me.createNewOnEnter === true) && e.getKey() == e.ENTER)) {
            rawValue = Ext.Array.clean(rawValue.split(me.delimiterRegexp));
            me.inputEl.dom.value = '';
            me.setValue(me.valueStore.getRange().concat(rawValue));
            me.inputEl.focus();
        }

        me.callParent([e,t]);
    },

    /**
     * Handles auto-selection of labelled items based on this field's delimiter when pasting
     * a list of values in to the field (e.g., for email addresses)
     * @protected
     */
    onPaste: function(e, t) {
        var me = this,
            rawValue = me.inputEl.dom.value,
            clipboard = (e && e.browserEvent && e.browserEvent.clipboardData) ? e.browserEvent.clipboardData : false;

        if (me.multiSelect && (me.delimiterRegexp && me.delimiterRegexp.test(rawValue))) {
            if (clipboard && clipboard.getData) {
                if (/text\/plain/.test(clipboard.types)) {
                    rawValue = clipboard.getData('text/plain');
                } else if (/text\/html/.test(clipboard.types)) {
                    rawValue = clipboard.getData('text/html');
                }
            }

            rawValue = Ext.Array.clean(rawValue.split(me.delimiterRegexp));
            me.inputEl.dom.value = '';
            me.setValue(me.valueStore.getRange().concat(rawValue));
            me.inputEl.focus();
        }
    },

    /**
     * Overridden to handle key navigation of pick list when list is filtered. Because we
     * want to avoid complexity that could be introduced by modifying the store's contents,
     * (e.g., always having to search back through and remove values when they might
     * be re-sent by the server, adding the values back in their previous position when
     * they are removed from the current selection, etc.), we handle this filtering
     * via a simple css rule. However, for the moment since those DOM nodes still exist
     * in the list we have to hijack the highlighting methods for the picker's BoundListKeyNav
     * to appropriately skip over these hidden nodes. This is a less than ideal solution,
     * but it centralizes all of the complexity of this problem in to this one method.
     * @protected
     */
    onExpand: function() {
        var me = this,
            keyNav = me.listKeyNav;

        me.callParent(arguments);

        if (keyNav || !me.filterPickList) {
            return;
        }
        keyNav = me.listKeyNav;
        keyNav.highlightAt = function(index) {
            var boundList = this.boundList,
                item = boundList.all.item(index),
                len = boundList.all.getCount(),
                direction;

            if (item && item.hasCls('x-boundlist-selected')) {
                if ((index == 0) || !boundList.highlightedItem || (boundList.indexOf(boundList.highlightedItem) < index)) {
                    direction = 1;
                } else {
                    direction = -1;
                }
                do {
                    index = index + direction;
                    item = boundList.all.item(index);
                } while ((index > 0) && (index < len) && item.hasCls('x-boundlist-selected'));

                if (item.hasCls('x-boundlist-selected')) {
                    return;
                }
            }

            if (item) {
                item = item.dom;
                boundList.highlightItem(item);
                boundList.getTargetEl().scrollChildIntoView(item, false);
            }
        };
    },

    /**
	 * Overridden to get and set the DOM value directly for type-ahead suggestion (bypassing get/setRawValue)
     * @protected
	 */
    onTypeAhead: function() {
        var me = this,
        displayField = me.displayField,
        inputElDom = me.inputEl.dom,
        valueStore = me.valueStore,
        boundList = me.getPicker(),
        record, newValue, len, selStart;

        if (me.filterPickList) {
            var fn = this.createFilterFn(displayField, inputElDom.value);
            record = me.store.findBy(function(rec) {
                return ((valueStore.indexOfId(rec.getId()) === -1) && fn(rec));
            });
            record = (record === -1) ? false : me.store.getAt(record);
        } else {
            record = me.store.findRecord(displayField, inputElDom.value);
        }

        if (record) {
            newValue = record.get(displayField);
            len = newValue.length;
            selStart = inputElDom.value.length;
            boundList.highlightItem(boundList.getNode(record));
            if (selStart !== 0 && selStart !== len) {
                inputElDom.value = newValue;
                me.selectText(selStart, newValue.length);
            }
        }
    },

    /**
	 * Delegation control for selecting and removing labelled items or triggering list collapse/expansion
     * @protected
	 */
    onItemListClick: function(evt, el, o) {
        var me = this,
        itemEl = evt.getTarget('.x-boxselect-item'),
        closeEl = itemEl ? evt.getTarget('.x-boxselect-item-close') : false;

        if (me.readOnly || me.disabled) {
            return;
        }

        evt.stopPropagation();

        if (itemEl) {
            if (closeEl) {
                me.removeByListItemNode(itemEl);
                if (me.valueStore.getCount() > 0) {
                    me.fireEvent('select', me, me.valueStore.getRange());
                }
            } else {
                me.toggleSelectionByListItemNode(itemEl, evt.shiftKey);
            }
            me.inputEl.focus();
        } else {
            if (me.selectionModel.getCount() > 0) {
                me.selectionModel.setLastFocused(null);
                me.selectionModel.deselectAll();
            }
            if (me.triggerOnClick) {
                me.onTriggerClick();
            }
        }
    },

    /**
	 * Build the markup for the labelled items. Template must be built on demand due to ComboBox initComponent
	 * lifecycle for the creation of on-demand stores (to account for automatic valueField/displayField setting)
     * @private
	 */
    getMultiSelectItemMarkup: function() {
        var me = this;

        if (!me.multiSelectItemTpl) {
            if (!me.labelTpl) {
                me.labelTpl = Ext.create('Ext.XTemplate',
                    '{[values.' + me.displayField + ']}'
                );
            } else if (Ext.isString(me.labelTpl) || Ext.isArray(me.labelTpl)) {
                me.labelTpl = Ext.create('Ext.XTemplate', me.labelTpl);
            }

            me.multiSelectItemTpl = [
            '<tpl for=".">',
            '<li class="x-boxselect-item ',
            '<tpl if="this.isSelected(values.'+ me.valueField + ')">',
            ' selected',
            '</tpl>',
            '" qtip="{[typeof values === "string" ? values : values.' + me.displayField + ']}">' ,
            '<div class="x-boxselect-item-text">{[typeof values === "string" ? values : this.getItemLabel(values)]}</div>',
            '<div class="x-tab-close-btn x-boxselect-item-close"></div>' ,
            '</li>' ,
            '</tpl>',
            {
                compile: true,
                disableFormats: true,
                isSelected: function(value) {
                    var i = me.valueStore.findExact(me.valueField, value);
                    if (i >= 0) {
                        return me.selectionModel.isSelected(me.valueStore.getAt(i));
                    }
                    return false;
                },
                getItemLabel: function(values) {
                    return me.getTpl('labelTpl').apply(values);
                }
            }
            ];
        }

        return this.getTpl('multiSelectItemTpl').apply(Ext.Array.pluck(this.valueStore.getRange(), 'data'));
    },

    /**
	 * Update the labelled items rendering
     * @private
	 */
    applyMultiselectItemMarkup: function() {
        var me = this,
        itemList = me.itemList,
        item;

        if (itemList) {
            while ((item = me.inputElCt.prev()) != null) {
                item.remove();
            }
            me.inputElCt.insertHtml('beforeBegin', me.getMultiSelectItemMarkup());
        }

        Ext.Function.defer(function() {
            if (me.picker && me.isExpanded) {
                me.alignPicker();
            }
            if (me.hasFocus && me.inputElCt && me.listWrapper) {
                me.inputElCt.scrollIntoView(me.listWrapper);
            }
        }, 15);
    },

    /**
	 * Returns the record from valueStore for the labelled item node
	 */
    getRecordByListItemNode: function(itemEl) {
        var me = this,
        itemIdx = 0,
        searchEl = me.itemList.dom.firstChild;

        while (searchEl && searchEl.nextSibling) {
            if (searchEl == itemEl) {
                break;
            }
            itemIdx++;
            searchEl = searchEl.nextSibling;
        }
        itemIdx = (searchEl == itemEl) ? itemIdx : false;

        if (itemIdx === false) {
            return false;
        }

        return me.valueStore.getAt(itemIdx);
    },

    /**
	 * Toggle of labelled item selection by node reference
	 */
    toggleSelectionByListItemNode: function(itemEl, keepExisting) {
        var me = this,
        rec = me.getRecordByListItemNode(itemEl),
        selModel = me.selectionModel;

        if (rec) {
            if (selModel.isSelected(rec)) {
                if (selModel.isFocused(rec)) {
                    selModel.setLastFocused(null);
                }
                selModel.deselect(rec);
            } else {
                selModel.select(rec, keepExisting);
            }
        }
    },

    /**
	 * Removal of labelled item by node reference
	 */
    removeByListItemNode: function(itemEl) {
        var me = this,
        rec = me.getRecordByListItemNode(itemEl);

        if (rec) {
            me.valueStore.remove(rec);
            me.setValue(me.valueStore.getRange());
        }
    },

    /**
     * @inheritdoc
	 * Intercept calls to getRawValue to pretend there is no inputEl for rawValue handling,
	 * so that we can use inputEl for user input of just the current value.
	 */
    getRawValue: function() {
        var me = this,
        inputEl = me.inputEl,
        result;

        me.inputEl = false;
        result = me.callParent(arguments);
        me.inputEl = inputEl;

        return result;
    },

    /**
     * @inheritdoc
	 * Intercept calls to setRawValue to pretend there is no inputEl for rawValue handling,
	 * so that we can use inputEl for user input of just the current value.
	 */
    setRawValue: function(value) {
        var me = this,
        inputEl = me.inputEl,
        result;

        me.inputEl = false;
        result = me.callParent([value]);
        me.inputEl = inputEl;

        return result;
    },

    /**
	 * Adds a value or values to the current value of the field
	 * @param {Mixed} value The value or values to add to the current value, see {@link #setValue}
	 */
    addValue: function(value) {
        var me = this;
        if (value) {
            me.setValue(Ext.Array.merge(me.value, Ext.Array.from(value)));
        }
    },

    /**
	 * Removes a value or values from the current value of the field
	 * @param {Mixed} value The value or values to remove from the current value, see {@link #setValue}
	 */
    removeValue: function(value) {
        var me = this;

        if (value) {
            me.setValue(Ext.Array.difference(me.value, Ext.Array.from(value)));
        }
    },

    /**
     * Sets the specified value(s) into the field. The following value formats are recognised:
     *
     * - Single Values
     *
     *     - A string associated to this field's configured {@link #valueField}
     *     - A record containing at least this field's configured {@link #valueField} and {@link #displayField}
     *
     * - Multiple Values
     *
     *     - If {@link #multiSelect} is `true`, a string containing multiple strings as
     *       specified in the Single Values section above, concatenated in to one string
     *       with each entry separated by this field's configured {@link #delimiter}
     *     - An array of strings as specified in the Single Values section above
     *     - An array of records as specified in the Single Values section above
     *
     * In any of the string formats above, the following occurs if an associated record cannot be found:
     *
     * 1. If {@link #forceSelection} is `false`, a new record of the {@link #store}'s configured model type
     *    will be created using the given value as the {@link #displayField} and {@link #valueField}.
     *    This record will be added to the current value, but it will **not** be added to the store.
     * 2. If {@link #forceSelection} is `true` and {@link #queryMode} is `remote`, the list of unknown
     *    values will be submitted as a call to the {@link #store}'s load as a parameter named by
     *    the {@link #valueParam} with values separated by the configured {@link #delimiter}.
     *    ** This process will cause setValue to asynchronously process. ** This will only be attempted
     *    once. Any unknown values that the server does not return records for will be removed.
     * 3. Otherwise, unknown values will be removed.
     *
     * @param {Mixed} value The value(s) to be set, see method documentation for details
     * @return {Ext.form.field.Field/Boolean} this, or `false` if asynchronously querying for unknown values
	 */
    setValue: function(value, doSelect, skipLoad) {
        var me = this,
        valueStore = me.valueStore,
        valueField = me.valueField,
        record, len, i, valueRecord, h,
        unknownValues = [];

        if (Ext.isEmpty(value)) {
            value = null;
        }
        if (Ext.isString(value) && me.multiSelect) {
            value = value.split(me.delimiter);
        }
        value = Ext.Array.from(value, true);

        for (i = 0, len = value.length; i < len; i++) {
            record = value[i];
            if (!record || !record.isModel) {
                valueRecord = valueStore.findExact(valueField, record);
                if (valueRecord >= 0) {
                    value[i] = valueStore.getAt(valueRecord);
                } else {
                    valueRecord = me.findRecord(valueField, record);
                    if (!valueRecord) {
                        if (me.forceSelection) {
                            unknownValues.push(record);
                        } else {
                            valueRecord = {};
                            valueRecord[me.valueField] = record;
                            valueRecord[me.displayField] = record;
                            valueRecord = new me.valueStore.model(valueRecord);
                        }
                    }
                    if (valueRecord) {
                        value[i] = valueRecord;
                    }
                }
            }
        }

        if ((skipLoad !== true) && (unknownValues.length > 0) && (me.queryMode === 'remote')) {
            var params = {};
            params[me.valueParam || me.valueField] = unknownValues.join(me.delimiter);
            me.store.load({
                params: params,
                callback: function() {
                    if (me.itemList) {
                        me.itemList.unmask();
                    }
                    me.setValue(value, doSelect, true);
                    me.autoSize();
                    me.lastQuery = false;
                }
            });
            return false;
        }

        // For single-select boxes, use the last good (formal record) value if possible
        if (!me.multiSelect && (value.length > 0)) {
            for (i = value.length - 1; i >= 0; i--) {
                if (value[i].isModel) {
                    value = value[i];
                    break;
                }
            }
            if (Ext.isArray(value)) {
                value = value[value.length - 1];
            }
        }

        return me.callParent([value, doSelect]);
    },

    /**
     * Returns the records for the field's current value
     * @return {Array} The records for the field's current value
     */
    getValueRecords: function() {
        return this.valueStore.getRange();
    },

    /**
     * @inheritdoc
     * Overridden to optionally allow for submitting the field as a json encoded array.
     */
    getSubmitData: function() {
        var me = this,
        val = me.callParent(arguments);

        if (me.multiSelect && me.encodeSubmitValue && val && val[me.name]) {
            val[me.name] = Ext.encode(val[me.name]);
        }

        return val;
    },

    /**
	 * Overridden to clear the input field if we are auto-setting a value as we blur.
     * @protected
	 */
    mimicBlur: function() {
        var me = this;

        if (me.selectOnTab && me.picker && me.picker.highlightedItem) {
            me.inputEl.dom.value = '';
        }

        me.callParent(arguments);
    },

    /**
	 * Overridden to handle partial-input selections more directly
	 */
    assertValue: function() {
        var me = this,
        rawValue = me.inputEl.dom.value,
        rec = !Ext.isEmpty(rawValue) ? me.findRecordByDisplay(rawValue) : false,
        value = false;

        if (!rec && !me.forceSelection && me.createNewOnBlur && !Ext.isEmpty(rawValue)) {
            value = rawValue;
        } else if (rec) {
            value = rec;
        }

        if (value) {
            me.addValue(value);
        }

        me.inputEl.dom.value = '';

        me.collapse();
    },

    /**
	 * Expand record values for evaluating change and fire change events for UI to respond to
	 */
    checkChange: function() {
        if (!this.suspendCheckChange && !this.isDestroyed) {
            var me = this,
            valueStore = me.valueStore,
            lastValue = me.lastValue || '',
            valueField = me.valueField,
            newValue = Ext.Array.map(Ext.Array.from(me.value), function(val) {
                if (val.isModel) {
                    return val.get(valueField);
                }
                return val;
            }, this).join(this.delimiter),
            isEqual = me.isEqual(newValue, lastValue);

            if (!isEqual || ((newValue.length > 0 && valueStore.getCount() < newValue.length))) {
                valueStore.suspendEvents();
                valueStore.removeAll();
                if (Ext.isArray(me.valueModels)) {
                    valueStore.add(me.valueModels);
                }
                valueStore.resumeEvents();
                valueStore.fireEvent('datachanged', valueStore);

                if (!isEqual) {
                    me.lastValue = newValue;
                    me.fireEvent('change', me, newValue, lastValue);
                    me.onChange(newValue, lastValue);
                }
            }
        }
    },

    /**
     * Overridden to be more accepting of varied value types
     */
    isEqual: function(v1, v2) {
        var fromArray = Ext.Array.from,
            valueField = this.valueField,
            i, len, t1, t2;

        v1 = fromArray(v1);
        v2 = fromArray(v2);
        len = v1.length;

        if (len !== v2.length) {
            return false;
        }

        for(i = 0; i < len; i++) {
            t1 = v1[i].isModel ? v1[i].get(valueField) : v1[i];
            t2 = v2[i].isModel ? v2[i].get(valueField) : v2[i];
            if (t1 !== t2) {
                return false;
            }
        }

        return true;
    },

    /**
	 * Overridden to use value (selection) instead of raw value and to avoid the use of placeholder
	 */
    applyEmptyText : function() {
        var me = this,
        emptyText = me.emptyText,
        inputEl, isEmpty;

        if (me.rendered && emptyText) {
            isEmpty = Ext.isEmpty(me.value) && !me.hasFocus;
            inputEl = me.inputEl;
            if (isEmpty) {
                inputEl.dom.value = '';
                me.emptyEl.update(emptyText);
                me.emptyEl.addCls(me.emptyCls);
                me.emptyEl.removeCls(me.emptyInputCls);
                me.listWrapper.addCls(me.emptyCls);
                me.inputEl.addCls(me.emptyInputCls);
            } else {
                me.emptyEl.addCls(me.emptyInputCls);
                me.emptyEl.removeCls(me.emptyCls);
                me.listWrapper.removeCls(me.emptyCls);
                me.inputEl.removeCls(me.emptyInputCls);
            }
            me.autoSize();
        }
    },

    /**
	 * Overridden to use inputEl instead of raw value and to avoid the use of placeholder
	 */
    preFocus : function(){
        var me = this,
        inputEl = me.inputEl,
        emptyText = me.emptyText,
        isEmpty = (inputEl.dom.value == '');

        me.emptyEl.addCls(me.emptyInputCls);
        me.emptyEl.removeCls(me.emptyCls);
        me.listWrapper.removeCls(me.emptyCls);
        me.inputEl.removeCls(me.emptyInputCls);

        if (me.selectOnFocus || isEmpty) {
            inputEl.dom.select();
        }
    },

    /**
	 * Intercept calls to onFocus to add focusCls, because the base field
     * classes assume this should be applied to inputEl
	 */
    onFocus: function() {
        var me = this,
        focusCls = me.focusCls,
        itemList = me.itemList;

        if (focusCls && itemList) {
            itemList.addCls(focusCls);
        }

        me.callParent(arguments);
    },

    /**
	 * Intercept calls to onBlur to remove focusCls, because the base field
     * classes assume this should be applied to inputEl
	 */
    onBlur: function() {
        var me = this,
        focusCls = me.focusCls,
        itemList = me.itemList;

        if (focusCls && itemList) {
            itemList.removeCls(focusCls);
        }

        me.callParent(arguments);
    },

    /**
	 * Intercept calls to renderActiveError to add invalidCls, because the base
     * field classes assume this should be applied to inputEl
	 */
    renderActiveError: function() {
        var me = this,
        invalidCls = me.invalidCls,
        itemList = me.itemList,
        hasError = me.hasActiveError();

        if (invalidCls && itemList) {
            itemList[hasError ? 'addCls' : 'removeCls'](me.invalidCls + '-field');
        }

        me.callParent(arguments);
    },

    /**
     * Initiate auto-sizing for height based on {@link #grow}, if applicable.
     */
    autoSize: function() {
        var me = this,
        height;

        if (me.grow && me.rendered) {
            me.autoSizing = true;
            me.updateLayout();
        }

        return me;
    },

    /**
     * Track height change to fire {@link #event-autosize} event, when applicable.
     */
    afterComponentLayout: function() {
        var me = this,
            width;

        if (me.autoSizing) {
            height = me.getHeight();
            if (height !== me.lastInputHeight) {
                if (me.isExpanded) {
                    me.alignPicker();
                }
                me.fireEvent('autosize', me, height);
                me.lastInputHeight = height;
                delete me.autoSizing;
            }
        }
    }
});

/**
 * Ensures the input element takes up the maximum amount of remaining list width,
 * or the entirety of the list width if too little space remains. In this case,
 * the list height will be automatically increased to accomodate the new line. This
 * growth will not occur if {@link Ext.ux.form.field.BoxSelect#multiSelect} or
 * {@link Ext.ux.form.field.BoxSelect#grow} is false.
 */
Ext.define('Ext.ux.layout.component.field.BoxSelectField', {
    /* Begin Definitions */
    alias: ['layout.boxselectfield'],
    extend: 'Ext.layout.component.field.Trigger',

    /* End Definitions */

    type: 'boxselectfield',

    /*For proper calculations we need our field to be sized.*/
    waitForOuterWidthInDom:true,

    beginLayout: function(ownerContext) {
        var me = this,
            owner = me.owner;

        me.callParent(arguments);

        ownerContext.inputElCtContext = ownerContext.getEl('inputElCt');
        owner.inputElCt.setStyle('width','');

        me.skipInputGrowth = !owner.grow || !owner.multiSelect;
    },

    beginLayoutFixed: function(ownerContext, width, suffix) {
        var me = this,
            owner = ownerContext.target;

        owner.triggerEl.setStyle('height', '24px');

        me.callParent(arguments);

        if (ownerContext.heightModel.fixed && ownerContext.lastBox) {
            owner.listWrapper.setStyle('height', ownerContext.lastBox.height+'px');
            owner.itemList.setStyle('height', '100%');
        }
        /*No inputElCt calculations here!*/
    },

    /*Calculate and cache value of input container.*/
    publishInnerWidth:function(ownerContext) {
        //var me = this,
        //    owner = me.owner,
        //    width = owner.itemList.getWidth(true) - 10,
        //    lastEntry = owner.inputElCt.prev(null, true);
        //if (lastEntry && !owner.stacked) {
        //    lastEntry = Ext.fly(lastEntry);
        //    width = width - lastEntry.getOffsetsTo(lastEntry.up(''))[0] - lastEntry.getWidth();
        //}
        //if (!me.skipInputGrowth && (width < 35)) {
        //    width = width - 10;
        //} else if (width < 1) {
        //    width = 1;
        //}
        //ownerContext.inputElCtContext.setWidth(width);
    }
});

Ext.define('App.view.patient.windows.CCDImportPreview', {
	extend: 'Ext.window.Window',
	xtype: 'ccdimportpreviewwindow',
	title: _('reconciled_preview'),
	bodyStyle: 'background-color:#fff',
	modal: true,
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	width: 750,
	maxHeight: 800,
	autoScroll: true,
	bodyPadding: 5,
	defaults: {
		xtype: 'grid',
		height: 123,
		frame: true,
		hideHeaders: true,
		columnLines: true,
		multiSelect: true,
		disableSelection: true,
		margin: '0 0 5 0'
	},
	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'bottom',
			ui: 'footer',
			items: [
				'->',
				{
					text: _('import'),
					minWidth: 70,
					itemId: 'CcdImportPreviewWindowImportBtn'
				},
				'-',
				{
					text: _('cancel'),
					minWidth: 70,
					itemId: 'CcdImportPreviewWindowCancelBtn'
				}
			]
		}
	],
	initComponent: function(){

		var me = this;

		me.items = [
			{
				xtype: 'form',
				frame: true,
				title: _('patient'),
				itemId: 'CcdImportPreviewPatientForm',
				flex: 1,
				height: 145,
				autoScroll: true,
				layout: 'column',
				items: [
					{
						xtype: 'container',
						defaults: {
							xtype: 'displayfield',
							labelWidth: 45,
							labelAlign: 'right',
							margin: 0
						},
						columnWidth: 0.5,
						items: [
							{
								fieldLabel: _('rec_num'),
								name: 'record_number'
							},
							{
								fieldLabel: _('name'),
								name: 'name'
							},
							{
								fieldLabel: _('sex'),
								name: 'sex'
							},
							{
								fieldLabel: _('dob'),
								name: 'DOBFormatted'
							},
							{
								fieldLabel: _('race'),
								name: 'race_text'
							}
						]
					},
					{
						xtype: 'container',
						defaults: {
							xtype: 'displayfield',
							labelWidth: 60,
							labelAlign: 'right',
							margin: 0
						},
						columnWidth: 0.5,
						items: [
							{
								fieldLabel: _('ethnicity'),
								name: 'ethnicity_text'
							},
							{
								fieldLabel: _('language'),
								name: 'language'
							},
							{
								fieldLabel: _('address'),
								name: 'fulladdress',
								value: 'fulladdress'
							},
							{
								fieldLabel: _('phones'),
								name: 'phones',
								value: '000-000-000 (H)'
							}
						]
					}
				]
			},
			{
				title: _('active_problems'),
				store: Ext.create('App.store.patient.PatientActiveProblems'),
				itemId: 'CcdImportPreviewActiveProblemsGrid',
				columns: [
					{
						dataIndex: 'code_text',
						flex: 1,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'begin_date',
						width: 100,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'end_date',
						width: 100,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'status',
						width: 60,
						renderer: me.importedRenderer
					}
				]
			},
			{
				title: _('medications'),
				store: Ext.create('App.store.patient.Medications'),
				itemId: 'CcdImportPreviewMedicationsGrid',
				columns: [
					{
						dataIndex: 'STR',
						flex: 1,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'begin_date',
						width: 100,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'end_date',
						width: 100,
						renderer: me.importedRenderer
					}
				]
			},
			{
				title: _('allergies'),
				store: Ext.create('App.store.patient.Allergies'),
				itemId: 'CcdImportPreviewAllergiesGrid',
				margin: 0,
				columns: [
					{
						dataIndex: 'allergy',
						flex: 1,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'reaction',
						width: 150,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'severity',
						width: 100,
						renderer: me.importedRenderer
					},
					{
						dataIndex: 'status',
						width: 60,
						renderer: me.importedRenderer
					}
				]
			}
		];

		me.callParent();

	},

	importedRenderer:function(v, meta, record){
		if(!record.data.id || record.data.id === 0){
			meta.tdCls = 'btnBlueBackground'
		}

		return Ext.isDate(v) ? Ext.Date.format(v, g('date_display_format')) : v;
	}

});
Ext.define('App.view.patient.windows.CCDImport', {
	extend: 'Ext.window.Window',
	requires: [
		'App.view.patient.windows.CCDImportPreview'
	],
	xtype: 'ccdimportwindow',
	title: _('ccd_viewer_and_import'),
	bodyStyle: 'background-color:#fff',
	modal: true,
	layout: {
		type: 'vbox',
		align: 'stretch'
	},
	width: 1500,
	maxHeight: 800,
	autoScroll: true,
	ccdData: null,
	items: [
		{
			xtype: 'container',
			layout: 'column',
			padding: 5,
			items: [
				{
					xtype: 'panel',
					title: _('import_data'),
					columnWidth: 0.5,
					frame: true,
					margin: '0 5 0 0',
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					defaults: {
						xtype: 'grid',
						height: 123,
						frame: true,
						hideHeaders: true,
						columnLines: true,
						multiSelect: true,
						margin: '0 0 5 0'
					},
					items: [
						{
							xtype: 'form',
							frame: true,
							title: _('patient'),
							itemId: 'CcdImportPatientForm',
							flex: 1,
							height: 148,
							autoScroll: true,
							layout: 'column',
							items: [
								{
									xtype: 'container',
									defaults: {
										xtype: 'displayfield',
										labelWidth: 45,
										labelAlign: 'right',
										margin: 0
									},
									columnWidth: 0.5,
									items: [
										{
											fieldLabel: _('rec_num'),
											name: 'record_number'
										},
										{
											fieldLabel: _('name'),
											name: 'name'
										},
										{
											fieldLabel: _('sex'),
											name: 'sex'
										},
										{
											fieldLabel: _('dob'),
											name: 'DOBFormatted'
										},
										{
											fieldLabel: _('race'),
											name: 'race_text'
										}
									]
								},
								{
									xtype: 'container',
									defaults: {
										xtype: 'displayfield',
										labelWidth: 60,
										labelAlign: 'right',
										margin: 0
									},
									columnWidth: 0.5,
									items: [
										{
											fieldLabel: _('ethnicity'),
											name: 'ethnicity_text'
										},
										{
											fieldLabel: _('language'),
											name: 'language'
										},
										{
											fieldLabel: _('address'),
											name: 'fulladdress'
										},
										{
											fieldLabel: _('phones'),
											name: 'phones'
										}
									]
								}
							]
						},
						{
							title: _('active_problems'),
							store: Ext.create('App.store.patient.PatientActiveProblems'),
							itemId: 'CcdImportActiveProblemsGrid',
							selType: 'checkboxmodel',
							columns: [
								{
									dataIndex: 'code_text',
									flex: 1
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'begin_date',
									width: 100,
									format: g('date_display_format')
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'end_date',
									width: 100,
									format: g('date_display_format')
								},
								{
									dataIndex: 'status',
									width: 60
								}
							]
						},
						{
							title: _('medications'),
							store: Ext.create('App.store.patient.Medications'),
							itemId: 'CcdImportMedicationsGrid',
							selType: 'checkboxmodel',
							columns: [
								{
									dataIndex: 'STR',
									flex: 1
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'begin_date',
									width: 100,
									format: g('date_display_format')
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'end_date',
									width: 100,
									format: g('date_display_format')
								}
							]
						},
						{
							title: _('allergies'),
							store: Ext.create('App.store.patient.Allergies'),
							itemId: 'CcdImportAllergiesGrid',
							selType: 'checkboxmodel',
							margin: 0,
							columns: [
								{
									dataIndex: 'allergy',
									flex: 1
								},
								{
									dataIndex: 'reaction',
									width: 150
								},
								{
									dataIndex: 'severity',
									width: 100
								},
								{
									dataIndex: 'status',
									width: 60
								}
							]
						}
					]
				},
				{
					xtype: 'panel',
					title: _('system_data_ro'),
					columnWidth: 0.5,
					frame: true,
					layout: {
						type: 'vbox',
						align: 'stretch'
					},
					tools:[
						{
							xtype: 'patienlivetsearch',
							emptyText: _('import_and_merge_with') + '...',
							itemId: 'CcdImportWindowPatientSearchField',
							width: 300,
							height: 18
						}
					],
					defaults: {
						xtype: 'grid',
						height: 123,
						frame: true,
						hideHeaders: true,
						columnLines: true,
						multiSelect: true,
						disableSelection: true,
						margin: '0 0 5 0'
					},
					items: [
						{
							xtype: 'form',
							frame: true,
							title: _('patient'),
							itemId: 'CcdPatientPatientForm',
							flex: 1,
							height: 146,
							autoScroll: true,
							layout: 'column',
							items: [
								{
									xtype: 'container',
									defaults: {
										xtype: 'displayfield',
										labelWidth: 45,
										labelAlign: 'right',
										margin: 0
									},
									columnWidth: 0.5,
									items: [
										{
											fieldLabel: _('rec_num'),
											name: 'record_number'
										},
										{
											fieldLabel: _('name'),
											name: 'name'
										},
										{
											fieldLabel: _('sex'),
											name: 'sex'
										},
										{
											fieldLabel: _('dob'),
											name: 'DOBFormatted'
										},
										{
											fieldLabel: _('race'),
											name: 'race_text'
										}
									]
								},
								{
									xtype: 'container',
									defaults: {
										xtype: 'displayfield',
										labelWidth: 60,
										labelAlign: 'right',
										margin: 0
									},
									columnWidth: 0.5,
									items: [
										{
											fieldLabel: _('ethnicity'),
											name: 'ethnicity_text'
										},
										{
											fieldLabel: _('language'),
											name: 'language'
										},
										{
											fieldLabel: _('address'),
											name: 'fulladdress'
										},
										{
											fieldLabel: _('phones'),
											name: 'phones'
										}
									]
								}
							]
						},
						{
							title: _('active_problems'),
							store: Ext.create('App.store.patient.PatientActiveProblems'),
							itemId: 'CcdPatientActiveProblemsGrid',
							//selType: 'checkboxmodel',
							columns: [
								{
									dataIndex: 'code_text',
									flex: 1
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'begin_date',
									width: 100,
									format: g('date_display_format')
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'end_date',
									width: 100,
									format: g('date_display_format')
								},
								{
									dataIndex: 'status',
									width: 60
								}
							]
						},
						{
							title: _('medications'),
							store: Ext.create('App.store.patient.Medications'),
							itemId: 'CcdPatientMedicationsGrid',
							//selType: 'checkboxmodel',
							columns: [
								{
									dataIndex: 'STR',
									flex: 1
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'begin_date',
									width: 100,
									format: g('date_display_format')
								},
								{
									xtype: 'datecolumn',
									dataIndex: 'end_date',
									width: 100,
									format: g('date_display_format')
								}
							]
						},
						{
							title: _('allergies'),
							store: Ext.create('App.store.patient.Allergies'),
							itemId: 'CcdPatientAllergiesGrid',
							//selType: 'checkboxmodel',
							margin: 0,
							columns: [
								{
									dataIndex: 'allergy',
									flex: 1
								},
								{
									dataIndex: 'reaction',
									width: 150
								},
								{
									dataIndex: 'severity',
									width: 100
								},
								{
									dataIndex: 'status',
									width: 60
								}
							]
						}
					]
				}
			]
		}
	],
	dockedItems: [
		{
			xtype: 'toolbar',
			dock: 'bottom',
			ui: 'footer',
			items: [
				{
					text: _('view_raw_ccd'),
					itemId: 'CcdImportWindowViewRawCcdBtn'
				},
				'->',
				{
					xtype: 'checkboxfield',
					fieldLabel: _('select_all'),
					labelWidth: 55,
					labelAlign: 'right',
					itemId: 'CcdImportWindowSelectAllField'
				},
				'-',
				{
					text: _('preview'),
					minWidth: 70,
					itemId: 'CcdImportWindowPreviewBtn'
				},
				'-',
				{
					text: _('close'),
					minWidth: 70,
					itemId: 'CcdImportWindowCloseBtn'
				}
			]
		}
	]
});
Ext.define('App.ux.combo.Departments', {
	extend: 'Ext.form.ComboBox',
	xtype: 'depatmentscombo',
	editable: false,
	queryMode: 'local',
	valueField: 'id',
	displayField: 'title',
	emptyText: _('select'),
	store: Ext.create('App.store.administration.Departments', {
		autoLoad: true
	})
});
Ext.define('App.model.patient.ProgressNotesHistory', {
	extend: 'Ext.data.Model',
	fields: [
		{
			name: 'service_date',
			type: 'date'
		},
		{
			name: 'brief_description',
			type: 'string'
		},
		{
			name: 'subjective',
			type: 'string'
		},
		{
			name: 'objective',
			type: 'string'
		},
		{
			name: 'assessment',
			type: 'string'
		},
		{
			name: 'plan',
			type: 'string'
		},
		{
			name: 'progress',
			type: 'string',
			convert: function(v, record){
				var str = '';
				str += '<b>' + _('service_date') + ':</b> ' + Ext.Date.format(record.data.service_date, g('date_time_display_format')) + '<br>';
				str += '<b>' + _('chief_complaint') + ':</b> ' + Ext.String.htmlDecode(record.data.brief_description) + '<br>';
				str += '<b>' + _('subjective') + ':</b> ' + Ext.String.htmlDecode(record.data.subjective) + '<br>';
				str += '<b>' + _('objective') + ':</b> ' + Ext.String.htmlDecode(record.data.objective) + '<br>';
				str += '<b>' + _('assessment') + ':</b> ' + Ext.String.htmlDecode(record.data.assessment) + '<br>';
				str += '<b>' + _('plan') + ':</b> ' + Ext.String.htmlDecode(record.data.plan) + '<br>';
				return str;
			}
		}
	],
	proxy: {
		type: 'direct',
		api: {
			read: 'Encounter.getSoapHistory'
		}
	}
});
Ext.define('App.store.patient.ProgressNotesHistory', {
	extend: 'Ext.data.Store',
	requires:['App.model.patient.ProgressNotesHistory'],
	model: 'App.model.patient.ProgressNotesHistory',
	remoteFilter: false
});



Ext.define('App.store.administration.TemplatePanels', {
	model: 'App.model.administration.TemplatePanel',
	extend: 'Ext.data.Store'
});
Ext.define('App.view.patient.windows.TemplatePanels', {
	extend: 'App.ux.window.Window',
	title: _('templates'),
	closeAction: 'hide',
	layout: 'fit',
	modal: true,
	width: 600,
	height: 300,
	itemId: 'TemplatePanelsWindow',
	bodyPadding: 5,
	tbar: [
		{
			xtype: 'combobox',
			store: Ext.create('App.store.administration.TemplatePanels'),
			displayField: 'description',
			valueField: 'id',
			itemId: 'TemplatePanelsCombo',
			width: 300,
			editable: false,
			allowBlank: false,
			queryMode: 'local'
		}
	],
	items: [
		{
			xtype: 'grid',
			frame: true,
			itemId: 'TemplatePanelsGrid',
			selType: 'checkboxmodel',
			features: [
				{
					ftype:'grouping',
					groupHeaderTpl: '{name}',
					collapsible: false
				}
			],
			columns: [
				{
					text: _('description'),
					dataIndex: 'description',
					flex: 1,
					sortable: false,
					groupable: false,
					hideable: false,
					menuDisabled: true
				}
			]
		}
	],
	buttons: [
		{
			text: _('add'),
			itemId: 'TemplatePanelsAddBtn'
		},
		{
			text: _('cancel'),
			itemId: 'TemplatePanelsCancelBtn'
		}
	]
});
